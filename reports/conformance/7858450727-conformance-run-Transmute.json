{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "15ce8a15-f71c-48ec-95ff-f5d860708002",
        "name": "Clear Cache",
        "item": [
          {
            "id": "cb773728-64fe-4180-8d85-5ff8d41203a1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48b4a84a-a842-4217-a5a7-7d4f7aae08ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b8c95eb6-f52d-4a38-b45e-2d8a5854749d"
                }
              }
            ]
          },
          {
            "id": "71dd25ed-201c-47b0-abab-5920a1acaf18",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5ba4d7d1-b5e5-40ad-b975-7b3f7176f312",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "755e750c-52b9-46f3-abed-0a55d90c9506"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f938a2d1-0326-4029-8d59-af3f2addad0d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fe8d69a4-6b5d-4270-b067-4ffa37f80de2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41e5a750-ca82-4929-abd3-56adacc7d84c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52885d52-4320-4671-bdec-a94c31b964c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86818be0-dd02-4a5b-8efa-0737a4725f6f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c480ec3f-ec53-42af-81fb-158986d3289f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98c9c67f-255b-4be9-a7d6-4bbe5b1fc599"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e832a4b3-3b67-4102-b6a8-0dbad706ecb6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19af2e0f-f3e3-473d-b029-377d1467f4c3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd6475b6-7fac-4344-92b9-4501670ac02b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "03226520-caf1-43dc-8078-581b31c08412"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "788c5400-a7f2-4cda-a0b3-480c955987be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a1a59c76-6ba3-4624-b30c-a463148775a6"
            }
          }
        ]
      },
      {
        "id": "f8df3e8b-38bb-430b-9c67-9db7bcdd5e47",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "78861bd5-3904-4eb3-8dcc-9c7b19295197",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dffef217-e6f1-48a4-91dd-b0680240e928",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3676a22-3513-4b43-86a6-cf4e88cdfa5e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d70d52b-7882-4338-8916-eebb70f283fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59ded3ef-59b0-4679-89dc-9eea6f36aaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ccd29b-61b1-4cd8-bdad-2b88e046a2a7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b0b0f3-a37f-42a0-b59b-a71e166934bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61c70dc9-1a1d-40a8-abec-2fa1096d1ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf54b0f3-74a8-42cd-ad30-c66016668de0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d24f0a-5cfd-487d-92d7-f64b5f0337ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b72f535e-55eb-4a8d-954d-55e8c1381ad5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9ec5bf2-a5d6-4ed1-9b13-d23e0b2f0124",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3d230ac-9dab-463a-9533-971ce9bb0495",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faab67cc-ad24-4561-b5f8-ff16548011b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09396e10-6fed-432f-b3ed-0ce669b6559c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c38e88e-1867-4250-91b9-cff5eed0f537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42eea46-359f-4884-a56e-0e13cd310e21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "474e5d44-f690-4e9d-b109-bc09a5674385",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c7850266-3ae9-4bca-b45f-334d989a0ef9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "007c2be3-e084-4c18-83d7-c94ec034bf89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2e8ab8f7-dc88-4f5b-99ab-40fd96314af6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "065318a9-1958-4c5c-b7cb-ef979623f235",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "08ffa0c4-7773-4d57-bbde-cee31388faae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee8fab57-ca74-44ec-8950-360abcbbc2dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "761321a4-3ea5-4303-a5f1-73305cd7e1fd"
            }
          }
        ]
      },
      {
        "id": "3694d9b0-fb84-4caf-a5d0-dbdb4d9446d4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "63d97ccf-4683-491d-b03f-40e4cccf76a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be85ba74-25e1-4f1b-9f85-79f0f8953d63",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8d5957e7-cf7f-4b46-8eef-80f658e52dfa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97002bb-2f97-458b-882e-bc2bc46def00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60545381-56e7-49bf-97df-c2fcc7580ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb397d4-b3db-4278-a41b-27ab00e32d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2ea819c-b682-4900-8f59-a60f840ec146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b80f3b-e391-4871-964c-c6c642d5a021",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384fe11d-8d14-4dab-b388-db04a31add4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea2f0c8-059c-4257-9456-5e42b5e159b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ec9196-f38c-4855-96a9-5eef42a5eb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef167a0d-bb8a-43bd-986d-dd823a499cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2ba233-8521-4280-8524-730715e77d30",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd4edc3-c7b8-45cc-b948-1d82939de671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecdd953c-a595-4bf0-9c14-66028d584d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5ab59e-541e-4e3d-9e66-17276e6cc608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b90d3fd4-1bd0-4301-9907-e09229acc223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beae9343-0a4f-4f3e-b6ca-069944726dfe",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135ca288-1ec1-4124-8f36-1ba9c8be28e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b154f58c-d2ee-48fa-b484-e10bfa1356c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9402ef20-5fa9-4973-b563-512ed6c60f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb540f16-82e6-42b5-aa40-2a5cd18868cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc27ced-89b2-4a6e-8f8a-c0bb4778b249",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346ac884-dd96-478a-b68a-401af347dd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6433fa67-6f80-4091-913c-6b48e66ac927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b68bce-ca8c-40c9-aeba-3ba9d3e3b0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f56ac992-c36a-4914-a138-16bc54afa26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd47afd-3270-46e1-bcca-d656ed5f1e10",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ff6842-1a95-41ce-9bbb-4ade2b2637f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adfe0335-fdeb-44a8-bba9-b6debd76f0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ef0d27-2207-4ef7-a0ba-d500a4e4d354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0c6e908-bbf3-4659-8bc9-a3819fdbf218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee209675-e7da-4a57-b5fe-154e0b8e0c04",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ab26bf-2fa3-4eae-9167-98b6c27ca290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33759960-3b53-4493-9019-3667fe73527b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f9723d-5805-414f-b3d6-eccb29ae76ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77c39196-258f-4aad-b9db-b56ca2faf093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0074730a-c78f-41c9-a2af-1614258be42f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28272658-cafd-4cc8-b7fd-b8af5ad23eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d601c18-b58a-4f0f-b631-0a7ff7a2f603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a02323-4b41-4f9b-8b19-ca96bcd493d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fa3e449-c075-4ff8-9bb6-8f2830b48f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19515923-b9e5-4237-8e9a-e704a1b5aa57",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3fe1fe-7a4d-4d42-b033-72238ebb7fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276198ee-d86d-49d0-830c-ac5d4ed1e8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8798a790-3ea9-4e9b-8033-50b6c3294741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14119891-6a19-446f-9fea-89156cef05e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751f77d2-32d7-4916-b138-23c4d694c0e4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed2280-7fe6-46a0-8307-851d95e827e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d043ca3-fbaf-42e1-8efa-07f6843e6970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfc9060-b322-4585-8d12-6ac337be5adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f07e528-ac48-430b-a285-0db020877505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7760cea-444d-4294-9ddf-7178c8ee3871",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02881855-840b-4a07-b3cf-47f047f7b074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cb22f0-9cf3-44f6-a5bc-0968b6439db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfc089d-b1e0-4b04-8d1d-a885ddc078eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f7afbcd-1fcd-4a32-a80e-d558a56c46cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838317a5-d584-41e0-9ae7-bd0bd3aa2a81",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd11ecb-03a4-4cad-9496-01e0f505698d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6b09d0-f078-41a2-bf6d-3917286a5ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770bfcb9-8eca-475d-885e-fddfcf14bc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b9dfb8b-6ccf-4af9-a816-14a063772b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77739a33-3298-47bd-8fb6-ae67d8042b1b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28026bd0-183c-43a7-9e40-3f0cded0d9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdfa42f-388e-4ef2-829f-ae26a82aa8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8058a07b-b1db-4968-a08a-725ba140413f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a76d933f-9284-4965-84c3-08758576ac50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3516d6-0303-4ce5-9e60-69adad9829b8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d17dd0-6932-4ce7-8e5f-31fdaa0d1e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bf0d24-6f0b-42b9-a40d-320501e0c79c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae065d14-14e4-4abe-ba0d-b2406166eff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b41e899-6699-4e7e-9490-4991bf2b25dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8187d3e-1a7b-4af0-853e-f60d2dc232ee",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea077dd2-49a4-4af9-99d1-166c0c3aa428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf9146c-3953-42a4-8031-f8d9c1a1fe63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b1f672-a312-4686-96d2-c8a6767a8891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f81166c8-4bad-45e2-b448-4dc063ae5099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee771f6-5baa-4c98-b6c4-7cdaa7b6ed7d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860f7697-acf0-43fc-92d4-147348802ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d037adfd-cfad-42c0-be89-a81dfa397d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a3b079-b41a-46a8-b245-72ab3e70bab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "598afc87-cd53-4022-adb6-39dc95ed0c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69de65e8-0bc3-45a5-9eaf-6721d0378b43",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeefd967-0c2e-4e96-849b-3ad541cea4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d1fd2e-8c6c-4232-8fd5-787dfecfbc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b29492-577f-48d9-8794-3a249fe194a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c403ba2e-1d52-4625-98f1-eb791547a50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc0c9e0-c5e1-424d-bc13-cbb011e327c3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90076e66-67d5-4581-b092-945c2080b048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8c421e-08b0-45ce-bfd7-955c25f0b603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a6856f-dc55-42f3-88f2-645835b18b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "65d1c48b-b39f-49ab-8b06-1301b16c8554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a34e56-cfbb-483f-b765-d9aea6182338",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afb3899-b2ba-4c1a-a863-46ae420cd72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89e070b-afb0-41a3-99b1-33f741e88714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7994c455-3406-47f0-a841-1d85e0072ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2fcd46-9db3-4510-8dce-3363cd27fe8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7e461d-8d60-4cd4-9455-c14e60602ba6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ff3d2f-1af3-4fcb-b6df-7c8dabe9149b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59798ce-e12a-4249-a22e-f48fdfb1a221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d80ac53-2dc1-4a2d-9476-0eb0401a5517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc584d94-9581-4d8b-801e-b3929cf6e0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d320e4-8650-4a39-b384-949ee598cb43",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dbe31a-63e8-4a89-b45b-a255710c9fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacc900e-2121-4305-85ca-3392db0b6c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18a9b16-69ce-4422-aba1-09cb0f84efa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb87789-a189-44a1-bf09-52eb641ed0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9886be-0b46-4e40-b1c7-60157050dcb6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2df7a9-38d4-49e4-b5c7-fbff966b55de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6c89c0-3032-4a19-8088-ac7922e54bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15008083-4d2f-4dc5-82ab-fba2f2a6fd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af317260-edab-4d0b-a1ec-6b68024f33c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595c00ca-259c-436e-b588-48f05d47caa2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f55d63c-3e65-4495-980f-34ef0d032924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea51e50-9baa-4dd0-a5d9-4ef9b7f45d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a79251-7513-46da-bdc5-c36236c76da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd9b0cda-bb2c-4dda-8a06-a37d6c6ea075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a9d7d0-5b3e-4575-8684-a7bbad625db3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dabff28-fc86-41c0-ae4c-5b3598144143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125b5a04-cf9e-48dc-a1c9-b43c3fa6e035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06931c13-e687-488d-ac68-4587887e440e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e25756-ffcc-48a7-9343-7db61d9a3c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f21260-b181-4068-823d-c4da05d6e7a4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e687fc0-9b68-4380-92a6-c5689cefd97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f12614-73d5-4fbc-9b89-4ffe7eeff7bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75779191-3686-4682-bfce-60a9c503972a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56b64d1e-209b-4e13-b30e-7dbbf5a1a015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6280681b-0c85-4faf-a8be-54fedebadc9a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f77b8f1-6853-4545-8aba-4e2cff6392a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2c65c6-0e3f-424b-b477-fbcb10858353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ffa2b5-6f2c-4c18-b8b3-ca6dfadc5cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff207187-c7ee-4d04-b3da-79df64116375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204ad6cc-886f-4bf0-8811-e3f8229c33bd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6df5d7-6d04-4f35-9069-287865fcfb88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe6269c-ef1b-4725-9e88-20cb7367003f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62baa1c9-a5d1-4245-86db-1ceaf313cf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "81da416e-a0c4-49a6-8ffe-7cddfac094bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510ac2fb-2a8b-4677-b23d-9b1aa5ba6bf4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288660bd-2960-4f90-8703-12183fe015ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b12fe9-6530-462b-a1e5-e9a40377f04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958100f9-34f0-4e0a-828a-10fef0a6d925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "903d41fe-9f8c-440f-b76e-163dbe3b37d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245faaa4-8195-49d9-bed6-a6572d9151cc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410e611c-0850-442f-97d7-347f9c5950a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf94050c-6bce-47b5-bb09-f1bdf8db78c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39305060-2a42-43ab-8327-40dda051a2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "411572b1-93f2-437c-a3ec-c090e2880ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f0fa2e-a15b-4c7d-94cf-01ca647755c9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c379514-17df-4e07-84a2-703ab96103ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360c438f-246c-47e8-a414-c8b842a8af88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a26080-01a1-4040-be9b-1d1757870539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d93e74cf-367f-4491-836b-59bb43d70fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a27287b-b5cf-450b-93c0-8f4606b25b3f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fab6209-964f-4a04-aea0-3412a31d34a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0501b52f-188d-42dd-ab5a-ff3247474db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a493571-0bf5-48bb-8fc0-c50233a6a3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b34135-84a0-4e19-9c96-6089b5953aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c690ea-f885-4d63-9804-f9aea569b677",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cc692e-1893-4291-aa16-c4f41ee78416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e708b1-6943-4b32-85f2-5ac53e7b99e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2db07b-5457-453c-94ec-ab43f011695b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8709a9b5-697f-48ff-be7f-e21507e8a860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f5bb4c-0cf8-4c2c-a19d-cc0d164253c7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884ed682-2dad-4efb-b6dc-6cafc504488c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "931aa232-a469-4e71-825c-2cdda83df3b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356efafc-ad3f-4768-8cf9-a60c96ea3516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88aa1e3a-db24-4cb3-b81c-a5c2bab4054d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4422fc-6ee5-45ab-a435-b82c69cfe235",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0122c2e0-af40-48d8-9f79-cdaa9bc9b30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3efbe72-7088-491c-9910-d267799e5760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5d301e-7efd-4a57-8a8a-648b81252937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78b34976-fa9a-4f36-bf6b-274768ebaf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de2a713-1799-418f-84eb-47be313ecb9b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbaa447-c0a7-4650-836c-1f5087bf9897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c6d5cf-4bc3-4b70-87c6-5b199946cb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00073462-be28-462f-bdfc-5074a780ee1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "048da3e3-0aec-4ad9-8cba-1371f7fff1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3550e1c-1b7e-4bba-8bbc-4b6d7befc8c6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a14896-3a13-4fea-b03a-578dafc49711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d83731d1-318e-46d4-a4d2-28b8c2f9f21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a86f1d0-4678-4cf1-9bea-ff643da470a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15a9ccb7-f6a5-4e42-9f59-091fc7e0133f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4b25ec-814a-4dae-b2e0-0dc645e989f0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6602433-f5f6-4f7d-a20b-89e10c9f1ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1206391b-3877-40c2-b05d-82138b78d912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c125286-4cb1-4e3b-9df3-f246ced53fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "673f3442-2f40-41a0-b0d1-cbae749f0ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e798b929-44d3-41a5-9905-51810673bf2f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e65954-de43-4079-8b61-aa7c7c46061d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81d177f-9e14-4ff3-9a6e-2a4ae259401a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9555c88b-92cd-4303-a79b-e42a39fdac94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9672da-5f3a-4c44-b481-c406cc34a35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450ca386-f27c-4bf2-82db-e4cd2a4ec041",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d99f636-f4b1-495a-85f2-fd6c30ea4016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fed091-3425-45e9-8c49-3c774f88e45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570122fb-b13f-428a-92f0-a1e620df7d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03ebd789-ac5f-4db5-99c8-e249fedc2500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c87866-3eab-49b5-a0ac-52a69d2e17ee",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496f3a73-212f-49d6-b1dd-ed96cccb4c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da80ce6-4a54-4e2a-aa99-a74465517dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab130ec6-b460-43e0-914c-843c871213a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7871f3b1-a0bd-43c4-923b-9e633a460c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33badb29-b032-4059-8444-077d7e87f8d1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e765cf8-259f-4df0-bb8b-9a86b0307f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5689c1-0624-49bc-b6d9-7b5516838627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90d25c8-6b9a-43cf-be2c-e44f9c058695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "395ec25a-8f24-4d9f-af56-882575979c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cdc880-4eab-4a3a-9d9d-400d6d1031df",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8843e424-cdee-42b9-af05-77b1f51066fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5414126-6df5-4f02-b7db-22c2c55c0d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d10815-b595-4a1f-81d5-c161b0b64f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1e043cae-5487-46bf-ad0b-73edd0df0db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab8f4a7-68ad-45c2-8e9e-4704723ae0f9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cab576-ec7f-4970-8e73-d544d63ced2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33283976-3878-48f5-ba21-2165eb66ff30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9317a671-f7d7-4c9a-b146-661c14bb0757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a46c6e50-ca4b-426a-be2b-cb18c6bb75f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800ca68d-6dd3-45b8-a4e5-259b074bc176",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0e03d2-76eb-48cd-93d3-fcadf17a4866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc5a0f4-d346-47b4-901b-66e9add9df50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc4dc2f-45ac-4647-a3cb-c510c1595e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3867a2d2-a7a7-4c21-aaad-2dbd36c4eb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a113307-a7c4-4318-9779-b54b22181fae",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aec2444-f1ba-44ff-8363-2dbe1e0eecd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822b093d-8e48-4ac9-bc86-45de2a38df1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61564410-50a0-4d53-a4af-2845ee949813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8b38ef-32a6-4fd6-87c5-fddc8cd0cc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607e82d3-991d-400f-ad3d-225386081cba",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0849307-ddf0-4f70-89b0-1ee443b431d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4928a956-2ee3-4aa9-979c-9776a36b8ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cdb9e0-79d9-4fd3-8781-149545dd6c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e08ab9d5-c1f3-4350-9125-481bb3f4e5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3cd571-23fc-4139-b03c-550355351343",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1ae458-65f5-40ce-a156-bae9cb5f4441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb95e49-1324-46fa-a65a-7e3255213088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812349ea-3c62-4a13-813a-530d8145ba79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "522c319b-64a1-4a81-8fd3-70c02b6c152a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ceae126-11be-49d5-8ebf-bdc046bea79f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712bd353-db8c-45db-a9e5-2046dcfeefd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750a7a80-fa9d-4688-9649-d8de0176add3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b4442a-ef88-4464-9fe8-33473402418e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3f8f77-25bf-4d95-bde2-5aa2950912ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dcd1e7-8243-47e4-9482-22914fcd3b67",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9ef768-4a08-4231-82f0-2e9e3f906512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136d783d-fc35-495a-9f9d-df7689d0da8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9e1e5b-db07-4af4-82d1-6472a452dc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a812b49b-875a-4893-b4cd-3906f4273a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80325fad-b520-4594-ad73-bcb70ffe7b20",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41fec01-d515-4009-96e4-4eeb0669b2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7903dede-0af5-4c9e-818b-a1b074a8e319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f994342-3765-4a02-a32f-d4ff64e37428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcaf2a99-d43f-46ce-bbb0-f132a9cc2c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9621df6-9286-422e-b9dd-8f4cc7cc9a11",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3669a196-3dae-42b0-81ac-11d17f9866d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5b1f13-1378-4366-95e7-629539913389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda772e4-b6f3-42cb-8b79-1aa54d83fb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7145f61b-f6b3-4440-85bd-3ceb92456500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d120dc-53c2-4dff-a994-c15a903de7dc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1562d7-0ba8-4d7c-bd0e-f92a7e67bc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746b5b01-671a-43af-a508-7ea4bdf851e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95bb0ca-c16e-4c45-a99a-1b736dfc3902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6c6dec-1c81-4f16-8075-fca2289d9f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf9e53f-b5e0-48f8-8abe-6a42b6a95fa1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bfcee2-43b5-46e8-8e38-eda9ac30726b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660187dd-6ab8-4fa8-a044-bdc8504544c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fa9e09-2449-4949-8416-c05cec62d6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "00f4404b-894a-4aea-898c-d85ff5d853b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f58e89-704f-4d23-a97d-99f5e9d39817",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a122cb-21c3-43ac-9c20-f94010395ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d81ec3d-bcf7-4074-840a-03349fff4d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6ecc5a-64c3-4635-8b3e-e2cfda4a4810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01aded3a-a91e-4770-9271-05716fa4e8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9fcc90-5625-4aa7-bd53-dea85477fa04",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1d31f0-9c9d-42e7-b9c2-37a0b129fde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c76ede-f673-43d8-ab28-2bc100754d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d60e83-4fdc-40fe-9c98-150b697ac70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e717634-04e3-41cc-9a5a-0da7183a9459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70821a66-bc53-44d3-9655-a93ef80faf73",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39bba084-1e26-4e62-b02a-b449a1f6729c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bad8a50-d1fb-4b4d-b314-d81c579ef94a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80e58b6-58eb-45b8-8533-1b037846f072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "74089611-b22f-4f92-9388-cd80404eace5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d686ee39-bfa7-4cc8-94f6-f391ab65e3b7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e2aef0-6a46-42fb-a3b1-fb7ef7dc3cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81eb52c6-f5cd-4f24-9699-161abcb96ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21896503-b659-47a7-87e9-5179ff968aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd673c1-a0c5-4114-87ec-5032724a568d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeedbaab-7b42-4b38-88c1-05c4d423d162",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7479e471-6c79-4ffc-a031-38930b9e0a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b991ff23-b7fb-4193-9073-ded6e2f988df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868e4868-2fee-4245-87e7-822ddbcc707e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eca27048-9925-4e73-b584-9b0617849969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc70cac-535d-4690-9df3-64c5235f349e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e27bb0-e4c7-4d0f-8ab3-66acd07d0c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e071c66-7555-4361-a8e1-1c25ae3c9e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702de602-32ef-4566-bbd5-e63aacf3baf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f15b1dc7-c8af-41c9-b65c-5b06699e8f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0572a704-d325-499c-9de7-b92ca917069c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4713e8ee-54e4-4f05-bc78-335807966175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf271c8-f451-4054-8714-cc7fd94e6b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905d87b5-501c-4370-9d25-f362011426f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "60224924-fae3-4b52-9b12-22b28a158033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff992d30-8721-4fde-bbc8-dfaae82d5d3a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfadf5e-21fb-46cf-a02e-eafc2456eb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c1fe4e-3427-4d4d-9be9-5beb4dfaeb8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2e7312-2a7d-43f3-9860-e96c78c55ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f04c1b01-a3ac-4137-876b-8a8f0dc21e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bc11ec-fc89-4562-94af-7f705a7b38a5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8780dd6f-6cbe-4c0a-983b-41ed9f14e6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e70e8e9-8c06-48c1-b378-50d667f202dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4a4d14-c43a-46e4-a15a-7db7cf53a4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1cfe24-860d-47b1-b72e-cec99c0783e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602cf6d2-75a0-4645-9955-cf6873ad38a3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f125b7d-8508-4115-9596-23945c92e64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9443b0e3-597d-49ef-a351-1dc5c39f06ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938dbc2d-0680-4e57-93ea-bfb6968a9d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "826d3e36-a5f3-475f-8aa2-a2f43788330b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77bb993-467a-46a9-92b5-23a84bc6bde2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31949d08-5a2e-42ac-a4e6-f790fa6871b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5835dad6-6abc-4af6-9e9f-1d93d8ddaeaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be81177d-ef00-434f-b992-325d4559e348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90fe8e9b-f4a7-4c90-a87f-41d385842204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7963b99-0b39-4f05-8e5c-6ffc3fc6e8ae",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da40615-6dd3-4d43-9748-49a54886c907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b44cd7-c57f-4f77-9938-52391e17b5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703c9fec-30a2-46be-b740-0149fb0046dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0a3db6-92ef-41cb-bd55-e5f06bc17e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c18d1e-2267-4784-bd8b-6087658fb907",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f7c4cf-98a9-4535-864b-a98d6fcc7656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d16a00-f064-4d2e-a2e7-efb3d8d02640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65036f3b-754d-4a22-a698-6c067288baf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4f5232-d187-483e-908a-e560e8e65c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cbb7d4-1362-4929-b0cd-7af76f850f5a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93484e7b-3751-41d6-b355-6e31c89da9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98435794-1a78-4be0-b01b-94768cb9fee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c35dfff-8939-4c5d-9b5c-aa34e0d5a810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23325d45-f7a5-45d6-bfc5-3cbf21f94ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575afb71-4c90-46ab-883d-bb932ecb6aa5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3766e0-d7e6-4517-b301-df6839ad8f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10184d38-0bd1-4664-a279-0a425f91af43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2075f64-bd58-4be4-8129-099bb62af582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a72435e7-6592-4828-9f84-4c1753ad40c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fd94dd-ee34-4eb0-9e4b-86b6b57c5d49",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "777379ad-84ff-43a6-a00a-1f0b7bb6ce60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6225d744-4388-4eb0-a48a-1ede8e4ddbbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0103fb3-89f3-46eb-8d8c-44229c89d02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ca22e4-adc8-4990-9f27-3139c75b7922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b543e710-f32f-424b-a214-a65dc31c78b9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d727cf5e-2aa3-4489-a6b7-39b1172090ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eecc89dd-4df7-4813-9ae0-05b1622d817c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680db415-ff2c-4432-962f-5dea11a22b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddad053d-c65f-4465-bcfb-4c7bbcd8927a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddefb5d-320e-4cb2-9aef-ee15de055f39",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29da7651-0141-4443-b787-401548542e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c88079a-b23c-4176-867a-d1176554111d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3354cf-8cd3-4033-849f-630e82fe118d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffdf7fa3-507e-4788-b47d-392ea77b92ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5a671e-8294-4c74-af70-e50b797d95f5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a977e7-e6bf-4c5c-8db6-f3501e813356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb101e12-2d83-4b4d-8508-8c48ddd6d95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b348578e-c596-422f-8c12-0896a898e295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5756f9ef-c261-40d0-b89f-803f255de5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf534dd-01d3-43f1-a324-d5a1a82f688b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6781544-46f7-4dbb-bedb-10614b928ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3c8b13-2d06-4f68-b956-4a015942a331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0ce0cd-a4fd-4a91-9a30-1489c5a7a329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "edb09f77-b4b6-4ce2-8097-a217639a2127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d74a47c-88b3-4d7d-a638-6641af5a2c30",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28d63e2-0a7a-497c-aa11-9edb10504662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481eda2e-7096-4324-a14b-246c078ba532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ad49bc-26eb-49d0-ba0f-a59c91fa58b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "303d87e5-670f-4404-b71e-7e5d01738e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276fdeb0-3034-4281-afee-c2b0b9cb1367",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc1cc7d-7378-4c3b-bca3-f252676daedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f672611-7766-46d6-9a3b-b75a7c767d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fee99b-fb9b-4a29-996a-90e6ff287d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b106d24d-a609-4548-9325-94e9e255ec2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e289e65-c39e-44f1-8e00-0d82de05f565",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96320b60-a997-43d7-a822-8ff842304341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9dd91fd-ae76-46ac-b1b3-1a8990dcb9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d70724-4397-4501-953e-85ba97c953a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce793c3e-422a-49d0-b66f-f043a11dfe81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26ba433-780d-4fd6-9ea0-d34d7c261904",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91a8e0f-1d36-471f-9729-4c54561ffec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b8b929-bc45-413a-a00e-33548ecf5179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c31973-6e4f-4238-b80b-3fe1aa28c733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a6c221-b86f-4264-bb05-ab258757d1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f38356-f5f2-4e43-bc46-3d367527bbf7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88960849-a130-4907-a377-f4d3bcddb8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b378361-52c3-4934-9946-330d9252c52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10612831-5d6a-4458-a747-7f6b8d043310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "420f0cb4-8abc-41e7-9dbe-dbcd6fa5bd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b58dd0e-2787-4c13-ad9b-51df09dcc88e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa343661-572a-4c4e-834d-d1cfbc38a83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f724538-1a93-4669-8513-b1f9bb02cfda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f16dd5-f6f5-48dd-a03c-85bc8e93d4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1b9f58-f6a5-4536-b33d-e52d1aa683e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be022a3c-750b-41e9-8d24-b2fbda673e8b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaca6531-d485-4871-808b-d10d3d66c0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f719f15d-8fc7-465c-b287-d48c7d511d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e6740e-1cd7-4314-b12f-b84ba979e522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db470793-4af8-4052-ae2e-ae579367e0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eaf765b-d61c-43e0-898e-4aa2531eb07a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19b1cc6-95cf-4455-a63f-6da5afd2077f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e42ea79-d18c-45ec-a2b0-12442dad0fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75a499e-189b-4964-b171-12d63fdb63b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "80c8089f-55aa-4852-9f5a-aeb45958bab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cda15aa-0293-4102-ba53-fc90a22274f8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa83c38e-8da0-4f11-aa64-b5639d6b9b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8daff609-8731-41d1-a824-0f00c689182b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d61eea-579d-42a0-b73a-463d9296bac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e97cc3-3696-418a-bdd9-6c1a59ca87db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4064dae4-b848-4521-9399-c318745d3841",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41f606a-deec-4e0b-98e6-4ca423f93dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a5fc99-5654-41c4-afe4-3a6f6679c89c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6667a687-fcd4-43e4-965f-573dd61a4866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6051f43-14e1-4dc3-9222-5fc26a55fbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb3a635-551d-427a-9e20-d6efe20c26c9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5552f7-1fd8-49b4-83af-95bdf0d3137f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a61bf8-341f-4239-8623-6f40e3e608bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363b6b1b-d3e6-4867-874b-de4197b138a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f8406c-0945-491f-9fb0-3338d4cca7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdba769-0c99-464a-9451-bb80ff96d26c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bec623-8b19-4f5a-9783-c74bffc32bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62e32cf-2d20-41ca-a5d6-f6f61f104e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7740c9b9-5c2e-406e-89a4-05e159d0b497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b2876b-b2a9-4f2f-9bba-f1964ebe7e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073eb2f0-6069-4bba-961c-6e14f2021a0b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9194f102-1560-4ebd-a989-76379a5d7fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3277c0-ba8f-4f2f-bfef-0586204134f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b2cae1-7260-437e-991a-50fcafe4d7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9d0ea4-73e7-4768-b75e-2b0e50f7427a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2378ae-c1bb-45b3-8bfb-efc860fd2961",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44a6f40-af45-4298-8dec-0fc30c3108ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55367f5b-eed2-4634-a471-1d2d13ee3ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3aa629-d426-4e93-9df2-41b378aa2631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb816cff-8f3b-491f-98b1-c5544160d21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8f2352-bbab-4ede-8be0-9b2d137b2712",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587a3126-b7b1-4cbc-b9df-627465f64a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8125c911-5ab1-42c3-8962-f72035b092e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5267372a-0436-4cbf-b014-51ea5cc2845b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0edbda41-9592-4bc3-a46d-6bf5a4a7bee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6ace2e-554f-4ab2-81ab-e5542fa2dbe4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d184d4e-9454-4aa7-b625-f666d29617d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7dc96a-73d3-448b-a616-0554fb38186e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9054a39-21ca-4b16-976f-181eaa54387a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbf7b0c-b28b-45da-a481-0e020d6ad20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5726a29b-5f55-4c54-bb0a-31da6fd62677",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b1c8e9-9174-40af-b82e-01b882903695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ad551c-317d-4af5-a0e9-a99aab41968c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d393aa08-6634-4d5c-8731-3aef70bac773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a47231be-2218-4bb8-9090-57149b69a405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573216ee-3a29-4fb9-af43-8c204e431466",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34e836e-8201-4511-8a5c-3adfd835b784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ebee95b-434d-4397-9ebc-1d9c09d9a73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78b61df-9a98-4ecc-953b-56e5b6e2a51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6bc4e1-5aa3-4a84-b93f-ad9aa56be0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2140ee13-444b-4c20-b4db-eccb7c219a65",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8568234f-fd8f-4c0c-946d-7ececb59deb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "eb648b0d-0be3-4195-810c-a65e94d83276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567fc5eb-0867-4892-b1f2-3502364f2155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "759c3ca2-b84f-43de-ac43-c13b099d9ae8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b226652a-3e2d-43a0-ac19-d50944a086d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52d7d071-b870-43db-9141-4f2405cbc162",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c93e7b-217a-4fbc-a02d-60f669e68ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91c4a3d9-932b-4a71-a963-4dadcc72d2ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c749ffea-b696-4505-9473-d3f695763ff8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4e07ba3-d1d1-4906-9c11-a9b09b27cb02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a99e5f6-18a6-4cc6-b448-9d26101b6d69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9738a4e-303e-4e29-a5ae-c94bf3388497"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc208c22-3523-4d1a-b8bd-70c4e8629fa0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "342a41ac-88a3-490a-a74e-1660f46e2490"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a40f22d-659f-4c8c-9d69-113242695f42",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "646fa61c-6515-4ddd-ad18-62ae2f7a69b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "66e07b58-c250-418b-8dbe-2edf414cdd7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b0a75482-6237-40f8-ac01-feaba5a826d8"
                }
              }
            ]
          },
          {
            "id": "d565f7d0-a105-4b98-a3f4-7a2978203ff1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "29009c35-104c-43f5-b3d4-1cbd990bf486",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7936bdef-cbf9-4e49-b25e-5c64f080845c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f283d5-cf68-4c6b-b76d-ff759393f83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a600a978-8080-4a55-8ba8-1ed092583b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a10df65-9009-4b67-a8ce-f24a74322d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea79abbf-6b09-4a72-b4e2-4db6edc84b60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "733b1cfe-b894-45f0-9c05-eb53a0913d9c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be2ced9e-139d-4a61-b801-ed5f818d29ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9eee8e48-f58c-42e4-a888-7fe1779a5751"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4144f30-2bcb-442b-bdbf-9fb0381c16e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4f8d99c4-c523-4d76-a6d3-c4661a07cafa"
                    }
                  }
                ]
              },
              {
                "id": "650325bd-77a4-4a5f-86cf-14625e793b3e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5692e51-acaf-4ded-8630-d3b25d7e36df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41df05ab-28c7-4199-952f-ae552439fb07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3f5bf9e-49e3-49e4-9586-a73d652a0eae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb6963ab-1227-4bb5-9fe8-ab9ca5c0a22b"
                    }
                  }
                ]
              },
              {
                "id": "fa11bef9-b506-4580-b5e6-5103f3896f48",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d880f613-b88c-4e9b-a5d2-591451014412",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20ebf5d1-9056-4ddc-9429-a44ff3a0158a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cd2e4df-19ca-4cbe-9c46-842d716b0d12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "afffcce7-0101-4519-97dc-36b38bb6d7ff"
                    }
                  }
                ]
              },
              {
                "id": "5785ec8b-bf83-4c70-8519-3e188867b1cd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afb6147f-ecc1-4915-bfad-3b1607cbdb64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13aaf1d6-0f19-40ad-9de1-7780ac2b9ace"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "819e92f7-7bd3-40f3-b717-1db96c941c3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "62d79d37-bf92-43f9-b12b-7e8cd7458c56"
                    }
                  }
                ]
              },
              {
                "id": "55e13bb9-a55e-43d9-804a-29b6698f0625",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41629cf1-7faa-47d1-8353-1b8ac6242213",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bcab99a-047c-4d46-8cfd-c1d172213063"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "129e258e-01e9-4336-8418-c825d9dd1874",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6f017861-6083-4e60-a500-2053c5cc9db5"
                    }
                  }
                ]
              },
              {
                "id": "bccc8472-801e-4b9c-bac5-f1fba86c3819",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "777a2b91-f389-4be2-b974-76f52f221886",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a191b5c-c084-47eb-ac83-e8b0c4909c7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "487a35c4-11dd-428e-96f8-591bb77b054f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e5f7d9be-f59e-44c7-b6f9-c6af6598e175"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3330445a-1d0e-42cd-aa02-e90be13f4f02",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1777931-dd60-4792-ae6a-64dccc1c920b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8070e205-dd46-4b9c-8c48-6344a25e9de7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef7e4dfe-10e8-4805-8a2e-3cee8118f452"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef9b1b26-7695-4f59-9857-3ece3107d57c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "937bd994-e503-467a-941a-92f65eb123c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf2635f2-7684-4d53-81ae-a39b8750c893",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "417845ac-11e7-45a0-90da-9d2f3c2b53ce"
            }
          }
        ]
      },
      {
        "id": "9e730438-bd20-46bb-b54a-c02664cc4429",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cafe2c7d-698a-44ea-85a7-e330e74753cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f924099-506a-4231-be30-3dfa722ebf6b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e817a3b3-57a3-46c6-9bcd-a83883b1c1e1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fddb2b-b35c-427c-8d75-2e0e0836722c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef4219e-0da3-493a-bf96-9dc0a77a2c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08823a09-d3d9-496d-9280-4d8addd468f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0383e8ca-fe56-4682-a6ef-883fc94802b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce0fadf-6e4d-43b7-8256-9bd825296568",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdd29b3-06c1-4e28-a426-fa67f247a5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092c22c7-3569-4d62-b6c4-1919b29c6bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a074d364-7160-45ca-8840-33fd2c368ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed27a20-1a48-46c9-8975-b3202e8dae2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c881ef96-898d-4441-b499-896c98994f82",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b740ea40-b3a6-47cd-9b69-5cf159e59783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74be2e28-72cb-4587-99ed-68d06df7f4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d5e333-d3f9-46b9-abc4-c4783caa9c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb629edf-da40-4f36-8af7-81327e872ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c51ca7-250c-4e03-b6b5-4437288f8bed",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91a0807-3538-4eaf-9bd8-19b72e20425c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c9c606-e8a4-40de-b6e3-13679ad966df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8587b0bd-3a06-4631-aead-f468e9b130d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6792ff37-fab9-4c8b-aa8b-7b486d1f7c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795ff2d5-e868-4c04-b429-1b98279d2542",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043db2d9-7cb8-4323-ba40-491cdb32cbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678cccfe-fde3-47bb-801a-e668fc003fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1cf683-9b72-4b61-8ba8-ab7aec45d4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7da527a-fc6c-4acc-83d0-2aa6d43047f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6069af72-c437-4a9a-88b5-135151449997",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2bb266-ad71-4e8f-a567-33f7adbb773e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97397874-54d7-44ab-a1b0-652809e3401e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e498ace3-e088-418d-bcbd-96ea39bac77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90038757-3a6a-42e2-9382-ce19fad6f2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b2bd4b-9597-48d0-b3b1-464e5c87c678",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e631298d-3a83-4b55-83a3-322dde3ec691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c598ead3-6aeb-4144-9646-dc18ff891fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9371a665-bb26-4191-9d45-d7389edd1d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c98b8d1-d3d2-42cb-b665-87d9f73e9049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0f1d8f-9dcd-4e28-93b7-7e51a583da51",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc9e565-4a89-485e-b461-3726b05676de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5467e229-2f6d-42f6-bd2a-41969c121e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583a524f-85f2-4bea-a336-6b92c844d255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "865a69fa-bd21-4eca-8344-95d4a83ad1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d4bf8b-8c6a-45c4-9aeb-15d6ea062fb5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78c0f41-1b1d-41f4-b739-b41f64141e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b1d2a3-ff80-4312-82fd-dc7612ff7a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb3dded-a597-43c6-bb56-09090673aca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ffc63c0-d74f-4100-9097-cfd2440c7212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335ee76f-32f5-4c95-827b-122ade2706b7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7642f8f9-a905-432d-928d-6bbe5ae14a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d08a85b-1484-4974-9824-ee2748838a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4238b1-4357-472b-aa9a-3ae2fe72cb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23e96d5c-828c-4bcc-93ff-ce3730b3c56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f4ac1a-c2bc-42f1-955f-30e19adae4e3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80161c8-89df-4766-bf71-f1bb8caba37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963be00a-4de2-445c-a51f-4548417ff910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259736f6-979f-4907-84a0-4762f06fe593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7c9b68c6-7549-4b92-a3a2-05862733a82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f090e79e-d895-4063-8fb0-7df7f2567e80",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7eb0c2-1155-4ac5-b645-c526b1db15a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11385e1a-8e0f-4ff4-94c0-0bdd266a7f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d8dac2-1440-4e58-856d-0a1d29fb0e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c06478ff-7fb4-4094-8c83-e1e161579901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504b45a8-6c97-42a5-a739-d20aff1f06da",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2f02d4-1235-46b7-baa9-80f2fd17fbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e96e707-ddf5-4a05-b9c8-8eb42155e0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2de9fc0-c718-4f58-b509-96513d98a41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d563d5d3-6832-43a3-a400-cfdb6e4363f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b785f137-18a7-4902-95e3-1060241e41a4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ff6fff-945a-42c6-8e75-2395371730f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc191221-aea9-4295-8958-2dd89c67c6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e90556-9b33-4a93-b8d0-0fa841bea2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0809034-d732-4029-aed1-beae53aea887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54e176c-8c1c-4bf1-900e-76ecd725b8e1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772dd97f-ec3c-4a97-a2bc-a1f7d1d235db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d837bc8-ee56-481e-b873-3eac98d7fd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e70771-0972-4d71-850b-ecca6a1ca03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e75a8eb2-d47d-4c98-8d88-7ab5c06b399a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2b2c7a-10d8-4ad5-bdcd-2ac0da38c225",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e014e7d9-5cd5-460e-bcff-b37e95ec3d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239241be-bbb8-4199-9111-aa23085446a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0ef2d0-ac64-44a2-ab28-d19ea61322e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "42166a69-adf3-4a92-9bf5-fa4c44f85dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e19f186-d58a-4fe4-b9d6-6f961a7d1916",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c564106-2d3a-46d0-81ec-1f2ae23c4b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc4cda5-18bf-4baa-8d41-59dcb20018e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2b7d42-49cf-4d9e-891f-3c957f2de732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a32e38e5-bd7a-4a2e-9dbb-c1b1a8263097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc32d9f7-0a68-4168-bbb7-e084de272586",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72484448-584a-4cec-a5eb-419a8a31fc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a72d7c-a8a4-4fb8-b55f-242f14fd16de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e5202c-232d-4df5-a9a1-9395b0eadab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7211bf82-c7e8-400a-9f7a-e845267d14eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb8d9b9-8cd3-433a-b708-b327987a2cbb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e3ebc5-2dc6-4de3-816e-a19eac76ab39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c283f2f-e846-4e62-ae60-639db0d44869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7ac69c-8b1b-43e3-806b-262ae997b4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f3d28f-8fbc-4390-ae38-01aafabf1978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d13abc-f94d-4d35-a0c5-636e2a358df4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c865bb7-5b74-4f52-a2ca-c3e2f534204e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6b6891-2526-49d2-a5ff-a7e7dbccd10e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f43fe1f-68c1-42b4-9a7a-05a117d871e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd11a197-c5c0-413f-b146-0fe3aadcd1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bf7826-8825-4fb3-a8ca-09a20e2ebd92",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97eced87-b18d-44c0-b9da-722373845e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1112bf04-37da-4da8-8ba8-f52693fce424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947147d6-332e-47c7-b9e1-8aee6fec9be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b3758f-6156-4ce5-b2b8-557067b9888b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86b81c3-b600-43d2-9f1e-7dbee7bfb92b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedffbfe-3116-430f-a0f7-05ae5bf0f2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e66e72-c105-4a90-a85c-dbec3aad5950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ae32a7-d767-482d-a639-68071e599abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44ab8a9a-4774-4ee3-b43a-cadf7003c533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f85057d-0277-4acd-84ff-2e069488b10c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a823ae7e-5399-41f9-ae42-41a9381b2bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9547387-71fc-436b-b507-4728c176b3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd662b17-7724-4ba0-b5ca-27d58c54e62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00bd47a5-177b-48ea-a2d8-bfe26db42da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b362d978-ad00-4e43-82d5-b050e252a745",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51b6ff9-9783-40ca-b775-f16d31c3f378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1476efd9-f6a2-47a1-9097-0f599258caf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a62db70-ea39-4061-901a-3ee1ca76d459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbcd263-50cb-4a0b-96e4-be2f46a8c18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dfa1de-8dfd-44b8-8c1e-7aa2d14637cb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557e5df1-8109-4524-8619-18776d800b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0572c9-9f6e-46eb-b33a-ddd97565a6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f3ce0b-365a-4662-a46d-8bd19403fe92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9c6b60-2385-4afa-8aa2-8072078c5798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63741ed9-db79-4ee3-b6ae-a5865e73f4df",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc0f1c9-26ae-4d17-860c-724624093295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b654aaf-b0e7-48ac-8cff-caa32c95043b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8993c42-a9d4-4fb8-a7ad-ce5ceb8e6835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c0a5dd-e08e-4c84-9794-dc267101e038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cb331f-5c8b-47b8-a34d-7b39ebc5c0e0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1c1b77-6abd-41f5-a77e-497beac9f1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d3a27d-dee6-41f5-8715-cc0f083d35c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1055fa89-7fbb-45d5-9b36-3caf79106dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3431c74f-9012-421b-8f22-eea1d92d2c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf75cf3e-9980-464c-bbb1-dc79d8cedc6a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96b6d59-e64f-4799-b90f-e4c7c461bb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc08ffd-f879-4175-87aa-80179e6ca096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0697be-13aa-4d3c-80d7-892da6d62940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a51977c6-a1df-483b-a35b-8d28b2d28485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc4560f-390b-4be5-937a-7877a8573c39",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49486bb7-f2bf-4eea-8d8f-4bbf703b54a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afce2c9-70f5-4888-8e16-470b82df589c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c940c7b3-3e36-4c9e-bc82-764c0c3c3763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0103eb-d7ff-4de7-9cb5-8f274bc4fef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc9a34b-9d47-4b6f-870a-06069d8449c6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8879ba21-c3af-41ab-8ffa-640f4dda5e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bdb15b-2334-4816-9db5-4ab926573ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22538f3-d0aa-4539-8b48-afb6efdeeb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "300d26a1-812d-4ccd-9881-c0a38ecacb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e88935-602b-4681-bb98-ac7d4f330e87",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ff8415-04ed-4c67-a251-7129e9ee0df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0350968f-360d-4024-83ef-b4ffdd8c6ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457e39f1-f2c2-4c05-b904-e6ecbe7fc72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06c473d0-6d22-45d3-87af-ddd2a4eec135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f98e07b-6798-4c97-bc4f-2be5611ed498",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767ec9f9-0b5e-4418-be7b-a0876d64452c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a814c399-9a2c-4ada-abd1-0843a5bfd21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be0d7e1-f003-4252-815a-1148d36d1c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7535442d-ca51-4399-aacc-455937a6444b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7d7df27b-11a2-4798-915b-f006641f68f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05a4915f-97c3-4c3f-87f7-71cd2cef6cd5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c984512-370a-462d-a276-08560fcc123f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bedd13b9-6f62-41be-b87f-6fffb32cb593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6587f71-0388-4823-a22d-71ca399d9ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb204629-5439-43c4-a9ea-5ed33c511bee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "149662dd-60e1-4624-9fcc-3e5a65b95484",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77d16112-3379-4343-862b-f38495045cf6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd084b5d-caf0-4548-9a35-aebc144e61cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2ba6880-5061-40c2-b73a-edb879a3a545"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1dd6248e-f410-4763-ad24-7e50a940ad7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "08f238bc-23f9-4bda-a0bb-85d0f05ef9be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94cb559e-74dd-4383-a153-e45f0fe3ce1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "277298a5-c128-493c-8e0d-0774241d2408"
            }
          }
        ]
      },
      {
        "id": "02b26461-ee02-4434-bc10-2e69bb1aa7f5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "65e8218e-19a1-4ac9-9ed3-73ebd24203c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "717c121b-5320-4aac-813b-501b322f0ca3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4dfa3a73-09bf-4f7f-8ea5-88cad101a499",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5561f2c2-7e4f-48f6-bf91-f4ffa92eb6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471cb40c-bf7b-4422-bfbd-ef89fa1d7034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5353da84-dd44-4cd3-be6a-d925f7ed7a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8e8212-9f4a-4438-88f2-dcb8685900f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a0dc98-0591-41ae-9823-5dec499ee386",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc03288-7431-48d0-8d1d-88e7f2a58670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859e7295-4e03-4ffb-9c3a-e366d314200b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82a07c0-b524-4630-ae41-29a90b306f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8aaab38-f16b-467e-a852-a063935604e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abde07fb-47c3-4c19-a045-23e4a0158b96",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "109efd4c-a4ae-4b53-afe6-46810e797749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d389935-a594-4b03-b825-869966a51464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c972e1b-ada4-4de4-aedd-145d78decf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "438f97d4-de1c-45c3-9309-8d8985b8e03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a656e8-c3e8-4e3d-acbe-7c60419ddef3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0328cde-6608-452b-8c31-66bceb5e4ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee40429-dbd3-4abc-8d8a-e18c3b290131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a6260d-ef14-450c-8779-e16378ad7979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa91e955-ab9a-459e-bcf0-c1d4f3b66c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8bf0a8-0d58-4bd6-acf1-7a112552ae3d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ab7b72-195e-4922-9fcb-96eb9876158c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5546784b-3496-475a-802c-e600228bcfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25e8d45-8df9-4303-9336-f6a3d8aed4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a99c0d-3002-42d1-9807-066b947f1c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9565e9-534d-463a-8374-9205ee58917f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a2546d-a18b-42ed-92bd-631ceadccce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29bf321-d924-4b82-a78e-c937d2768554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c9378d-0471-4197-82bf-d63e32e3142b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "942904fa-e681-432a-9e04-5ccdd44cb8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6e5966-0ab0-431a-87ba-09a9bc3463d3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c3de85-5e1a-48cd-907d-d94c8ea14a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d1a8b7-337b-44d0-be2d-889c5005cfa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7433e6a-1ac6-41ff-a8eb-faf81b891a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccbe682-6ffa-47ac-8efa-502d9526b351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3467fc8-b137-4ae2-9c7c-dc77fb7f723f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1012373e-2fe1-4364-bb19-7d34539380be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d541c94-50de-4d79-914a-fd028a79b2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df3d460-b739-41a6-8aeb-e331b9dee2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8832890c-1f24-449a-bfe2-6bc1494f45cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dec3490-acc2-4093-b797-7a9b1185ea68",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6b245f-19bc-4d4d-9556-9d9afa1cf744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d96f473-47ca-4510-91cc-fb407379cf8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a138216a-e5e5-4965-a30e-331d46a9333a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7624b43-34dc-4f4d-921a-a767466ef43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29d138c-4245-48ac-8af8-8dd9460b5694",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4586f5-902b-4f2f-996c-8ecc7177dcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997b32e5-f6cd-472b-a583-7555d5574ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdbd82f-641d-4db8-920f-31ea338bb9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "44dc45de-b73e-4fd7-bade-53ea4cece242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f79ded6-8eba-4a18-8431-3b8641f0fb1e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbc3aec-a867-4e55-b158-cb47d601064e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea62101c-061c-49db-b258-4312489c31e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c40b24f-4ffc-422a-b845-d2594c9f006f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf98d27-07f9-471a-abf9-b2f692825735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d0def5-fa87-4f09-827b-421bcfbbd944",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa5148d-0e81-45e9-b951-3cf69a2d8e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc70901-353c-4a2f-b775-3088b132784f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f92551-b000-4e5a-a0cd-a044d4d89c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0c132d-b193-4d7b-881c-57b8637d194a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ca0913-2fec-4103-894d-de7980124a5c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10f79bf-bf19-493b-bdf0-58cd49b1cf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8081d969-499b-4d6e-a64b-d6bd6808e6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cdb231-1310-4aae-84da-3fb1f5ad22d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9da285f-9f57-462a-bc2d-1f2158c6c779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb63b0ed-394a-4a2e-8d81-d7a906383d56",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e306b313-d209-43a9-85ed-b849317de215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f630e3f0-9cd0-487f-abea-d34144da1560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2be599-540e-4e95-bf45-99b6b7c3d12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3270e6-87a8-4773-85a3-abaf8e1b6670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80034a06-b638-49d0-8b9e-065af97253cf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7e98f3-cf5b-46d8-82d2-3ce8d3ad1ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96fba8e8-0994-4261-b599-c1e516458e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146c14d0-0efa-43a9-8b4a-fdf6cb39496d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "db486a85-365b-4eba-9049-4b459cf85e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcac3cb4-7200-4de1-be67-220216c4e907",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fec0a1-245c-4bd0-baba-636879c1148e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4911ec0b-1995-4779-b6b6-08334c88dd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65a49bc-8fac-4b6f-8969-1872f5aac50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbee99ea-0f7f-4174-b7ac-29bd5899a25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fdf954-fc05-4fb6-b835-84728a888878",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdc055c-d113-45f9-83cf-68c8ab81b22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c18bd9d-78dd-4a61-863a-63ff00c8d30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0f03f9-fe0d-45e1-b2b9-326d7c355989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e039535e-8b8a-4a41-82da-b0d7cd261c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14c4680-2eb5-4156-951e-661fbac40efb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd21725-a0b4-4efb-896c-a8b6ab1048ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972bfebc-5c3f-4edd-b43f-7eb99c46ac30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cab0f81-7512-49d0-9268-b9ba220cc75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "da3713b8-455c-4857-87db-4f885545f57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca115570-a721-4e7b-a524-42ada75e4ed5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3aa645-f39a-4cc6-b3c0-34343b063f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e158e2e-0d62-421a-83e2-b9e1e21a4f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f067d36b-5ce7-4035-843a-230da332b872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a83420-de48-43e5-bfac-6708bfb218b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a03aa63-64ef-4989-ac9b-e926d0c83f71",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67edec08-4b47-49bf-94d4-764a4c011bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c655963d-8963-4ff0-bb08-bfa25ebcb1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1e33b1-0a43-4c3b-9b5a-ac89146e1536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdccf809-4b90-40e5-898c-780bd1f83612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60bef98-80f0-4c44-84ae-5a56bc514e42",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e561451-2f58-4161-9212-5a1e704fe5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21687163-22cd-430b-85a9-04da064206c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e55ba6f-7d0c-430c-9332-a346be390144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b374b305-1dae-455b-a399-619638046873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793940c9-ce1e-4f21-bb0f-044cf690695b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f1ad07-199e-48ed-b1cd-78d891387541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10aa5e8f-6895-42e9-864d-15888cf38cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35c0925-3037-45eb-b004-e48ae445f838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78072e4d-89fd-46a8-8557-ce14aea520d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfa4b8a-e8ec-4ee5-9b10-d170c8033f93",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff5a74c-d4e6-4758-af03-504250895370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004bb82b-1f90-4ada-9e22-6644f18932da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f77516-8741-4121-893e-74f563a36ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d989d0a-65b5-494b-a7e1-81f599261dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1d170e-4302-4dc2-9b1c-aacb8e4d5044",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b953a52-8ddd-4858-9114-a4bf8d5cc734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19a0722-ffca-4006-9d9f-2aa01d20e5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fad2d1-3b0a-4a7b-85d0-e217e3561c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d1fd4c0-6629-4206-ab34-5049cd80c445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6c93b6-378f-4794-b3c8-0a037fa16979",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d041743-5d66-4faa-a3d9-ed967bee1450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f4b4f2-3451-43bc-bff6-f2164273d604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687833b1-6fcb-4217-9d09-2a5a4c59e656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "691687b0-8c9c-43d8-baad-4b2c319b18aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3d1174-6ade-4d76-a9e7-af8b6ed858b7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3916dca-9eaf-464d-a41a-c310236dc99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c211faf5-b2b8-4986-8996-9ed28dd675ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1c1b91-ec6d-4674-927d-fa51f668a986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6c90b2-d4be-45ce-9793-34f3cf13280a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99c8e59-5d63-4028-9aba-f231b140be78",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1052e21-72ac-46e5-86a2-325b14751d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc9148e-ff55-4b0f-b73a-4f79cfe441fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac18624c-fde9-4343-b1f1-9030d1ef9a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed031429-36ec-463c-abf3-521e773d4a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e15050-fb22-4ae1-99fd-4fa9e8dbb1fa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcd9111-1641-40ef-8317-722a894e3e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c935b1b7-6b28-4d65-9b60-e330b7c004f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f42ed5f-7686-4008-9877-6cef33e540d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6273ece-5329-439a-8827-d118db79bf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf1cf05-ad87-4107-b516-f8653645b6c4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a193a3-ae60-4b7c-adf4-e5ffdea40121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343e6c14-8f46-4cdd-9b95-f36e6449956c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc63862-1458-4eca-b3f4-3624cf808c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "005365fc-a576-4bbb-b871-9b6d83048b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50676136-8275-4b0b-93d6-add630fa0ef0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfeee4e8-d427-46ee-80d9-c381957cb479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5615cb1c-c2ef-4c8c-ba1f-2fcc75a0a4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8166989f-cc3b-4036-9ff9-8fd949c0cc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfba8e70-36f3-4d99-9d0d-5cc0dc37f44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9a9c08-9acf-4556-9f86-5f5e201b81ce",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade18438-479e-4816-8958-c4fbec29ac8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37382b9-cf91-4f80-8b28-3c7788b66a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4393a7b6-1a8e-4c76-b788-c95ab07de66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b526239c-2f5a-4c2e-91f8-88cc602b9229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9699e1-b25b-4ac9-b947-946449a191c8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b144069-96c7-4ca2-a2f1-e205bf138327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e022fc0-9bbd-4957-85bb-49b16f5c5bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e10ac07-2d1f-4e9f-8f1f-c01f80572d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b356136-3e77-47d3-8ba9-155e01202a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf66df8-ffb8-4d1f-af87-02b384f9bc3b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6a4e40-64ed-4bdc-820e-ad9ab2ae111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ca2cf0-7f94-412a-baf6-71d7023495c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f157672-a11d-4d5d-b470-dda5f0c9ff62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58565b77-6f73-4fc4-8364-c772f6b21df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd2115c-7059-4448-8c68-d230455458c7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbcedf9-968b-4eb3-9e06-bb861aaf7ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f5e6ec-825a-4fa6-8b73-80a7ddfd8796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9682ef48-da98-42ed-bb30-595290c16bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90709eec-bf0d-4430-9a12-80425297e691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864d6d4b-f0ef-448b-9f1c-f8e634c81489",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78df7536-2446-466d-a411-fcf0ad8ea8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80636ece-538c-4d9f-8857-7201bd19fb7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4faf2b-0e29-4eb9-bf54-94cf9f4b9871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad20dcdf-306a-4d41-a2ac-2183b103ee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1440b7df-2587-4b8e-b074-b9a8d88593c0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0502d1ee-94f1-4c3b-9e19-98e71511ab78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe170b7-ceef-4221-9b40-a01580366a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94e3abe-30ab-47a7-91c0-072f8b547403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5a9233-7fd8-47a3-9384-6657187f4a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0377c0-dbdc-4222-9521-072003519170",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52076718-cdbe-48e7-8527-eec690f2c232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a5e4a4-5fca-40d0-9964-3430f1a69c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8df579-e695-495b-a8c4-1b347a1ffaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a87983e1-1696-40ac-bdec-06e49694ba23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6ab3e925-01a6-4cd8-87b8-bb77c18278bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ceae957-73ed-4b5c-af57-c77af9b92c7d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae96938-5ef9-448a-ac48-07fabea6e063",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c95fb50d-7431-44bf-aa47-f4bb787a9788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f29f99-fde5-4768-823e-7120b03d4117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ed4f1ed-e53e-4d5b-9f86-eab7f6629386"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c09a9584-21b7-430f-9799-eb90e92d1855",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cba34785-0b93-47a7-a378-d576aa79fae3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8c32bbc-dbf8-4c87-9b3f-dc204bbc5f0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad80e83c-d936-467f-93bb-03440bab5556"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f10495f0-6b4f-4218-bfbe-07a9d0632892",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "97a1f81d-c051-4b4e-ac07-1fb78920731f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2abccf7e-7eca-47b2-83c4-1c138b322d39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3395216a-921a-4fdd-b273-16acea24fbea"
            }
          }
        ]
      },
      {
        "id": "48db3cf3-77b5-449a-b1f4-1271b4fdf20c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "084aaa86-356e-47a9-bfae-ac1afc967fe6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "993245a1-b09c-43bf-8913-ea2040b43617",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b8a871c-cd00-43ba-9ffb-cc25ea4269fb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f10ae6c-6fa8-4d1b-aba9-fe97216a67dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb8d42f-0cd8-4971-be1d-805b41c03d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8dfde4-0a8b-417b-a6e4-6b8ff5b82b50",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29786e4-2eb7-4c50-a32c-6dcbd994c463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd747fd2-c9b5-446f-a79d-94d219788d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44180fd-ca4f-4cc5-9fcc-13b555149f76",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f67aaa-99d5-4b02-b7e9-204519003250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "085612c6-4460-4be3-83fb-561b714344a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ca4090-f34a-4744-b56e-9b44558423a3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61d8c47-9d05-411b-96c3-9ae6a89e8350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c898fc-3f80-48f9-96f1-a55d8fbf9e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0441fe9c-6f52-4f72-ae6c-90836a5630b6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec126f9-1700-4535-9dd0-f7cced016eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68754ce-1948-4e2f-8c0b-d502d621b859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a0349a-1ed3-4556-8046-3c61a06ec204",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d340bb09-0ed9-4259-bf08-05e7c39f5e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47adc2eb-11eb-4ae3-816d-ec9d50f8e8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fbc34a-7319-408a-a055-aa3d2bb41ee9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baae4b5d-5734-4201-9a3a-fb75793da22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784640a8-eab3-4b1e-bc63-8636a1b01ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d58468-a3a0-448a-9221-04100a1c7982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b9776e-6411-4f0e-8e58-32f1b9a53645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da9e2d7-6615-4391-8d25-dae435ef7177",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e06ec2-f4d2-4c5e-aab1-f15865560c14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3db3df0-2834-4612-99ca-852de4cc111a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8657f481-1af7-4c0a-bd7b-4acca71e1202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697db3b0-9676-41ba-99ea-446d9921f94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9383d4b1-e410-4609-b0c6-4199f2b710a3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccaa720-ea3c-456d-8173-6ae035f70a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00d8b38f-4156-44d9-8cae-0c4f0bd28adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7bdd48-2559-4bb8-a22a-90201b3af9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb43ed14-3105-4f30-ab49-be5ca409932a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93f39fb-220c-4d72-929b-1f6390b1d2d8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffd3863-9da2-46bc-97c6-e71dfab3de65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b37ab94-a5d2-42c0-9bde-01a6b777bf2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0fe8c0-9bf0-4130-b114-65ce3bf72515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2370d8a-59fc-496f-9e16-fb95fda70031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0080edf-7560-4c98-adc1-0d67b3dde3f5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686f9196-8495-4a3e-b878-8d620d85328d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5097fa5-1c77-4e91-a6cc-04a7115920c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdef34c3-f04a-46a9-a154-3e510d5730bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c3c253-15c8-45ec-ad16-b9aef1a97629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c7ed7a-6504-4aa5-b881-72a46dd90fdf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb3f7d7-7adb-468c-9d6c-73c8dac02a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfebacc0-bfad-42d6-a097-52ac1eac0a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f025db7-ad89-4201-8b62-474b112f8f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e175f0c-c19c-4b8a-a255-9107d0ad0350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212f2e4a-5227-4109-89c2-fff952cae823",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564eba21-6b0c-4e5f-9f89-7b85f5133521",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff62acee-3f70-4b79-b771-0b259ce4eb33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5936f0-30af-4598-86ab-8c2087c0923a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9e63e9-cd3c-4d6a-9f27-2fabd7f32915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08505899-70c2-45c2-8414-7f9a03bbb4b7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba38629-c820-4dc0-9b66-dd2db18a752f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9dc5b09-02e9-40da-9aea-20c7beb5a804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "216c0760-d396-480a-86bb-e910769d7bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a9f81c-8fbe-470f-826f-3fc3ddd7c876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea66415-d6c3-49f5-9954-ad32c337eb95",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61071700-e86d-4499-b0bb-7f620432b7c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc7bace-49d0-4d93-9331-3db49b56f2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e174e9-bd1c-459e-9383-6d8d1a984625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b108ca81-3232-4dd4-b691-4bf79f043b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea10b20-15bd-46cb-9698-cc8270752e45",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a245ef-5d72-4354-958e-8b8aa5a747e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ef0f901-750f-4239-b283-92449e666547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cb1e12-2a2a-4186-8d8e-3600ce6b858f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a5c5e3-3d4c-4840-93a9-a679f6c2b4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f46928b-6989-4c2a-9e77-0334c2445817",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb14aa5-9d82-4f7b-973a-41215a1a3ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e0b6db-4adc-49c6-9117-e9bd4b7a0886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e247f92-8a8c-4cd9-b14a-f1ef8a2089ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43048ce-6d53-45a1-8b22-1bc6ccb4df85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f419bd46-3dce-46e2-8347-33b25928be7d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e78771c-c177-4904-bd41-7405dedb0320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9a0144-1777-4894-be00-86b8249dff5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c99025-14b3-4105-abcd-a2b1a7d84950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bed2626-1893-439a-bfbf-f36ecf371b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7119a2d7-41b7-405c-b615-4844cc54676b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e094097b-03dc-41ca-9c08-45a877ad6168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24370a17-7230-4c22-ac80-69c73bf328fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c52cc4-89ef-4e49-87be-598c84da6856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe5e4a8-f00d-43c2-81f2-d7b1a8078ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48fb7a3-c6f8-40ee-a54b-13081f1690f8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fcbad7-556c-44e5-a12d-427c39caf5a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bc416d-71a7-4052-a3ba-602860a55bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a92ced-efc6-460b-82cc-25bb64f399d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64a8129-17b2-468a-93bf-a7fdd7d8ba84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7d6d92-2e00-4159-9db2-e8955113d0a1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4428bcd-101b-40ec-bc6c-8f3ca0b5ebdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e270b17-0d92-4523-a142-e244002a3f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b4bb3b-9f6a-4d39-b5f3-d37bc4a2a23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec074171-8cac-41bc-8029-41bd896d86e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae7a63b-2814-4320-a6f2-b84f59fe9b93",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf9c5b3-a55b-4444-8c04-41cf7e99dba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e296d7-4037-4013-bc10-2c85df606dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d84724-e1db-44db-959c-afac07406087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff5fccb-c044-498a-b404-b363e169df6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ea4d1d-7bc6-4245-9973-99efc75bbca4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4fc152-a8be-4c11-bf1a-c7975a39af0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ac20cd-f8bf-4350-b4b9-73fdc2592336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cb1e7c-5781-4864-8afb-eeb0dba97f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d519f393-5405-4c70-8f9a-c2d3089ae11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f638cfd9-59c2-4aec-a961-281a25288f08",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d31b80-e9e4-48c5-88e4-5148255a635b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9845e77e-c5ef-49c9-aae2-096a51f3921b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf40972-e0a9-4662-af59-a4f2b0b2a705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478a60b4-6906-42ca-8d08-a368229bc4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2689a539-ba4f-4331-9b3b-69e0340d1e51",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f57492-80fd-49e9-a0dd-46b05a9da7a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b640b0f-47ab-4054-81a8-0bcd523dfacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da29db3-55e8-493a-8db4-d73e72e7be1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d89d36-f538-45a5-b810-a1478510282d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752ae812-1bad-40f9-9cd0-d494d4ba2b64",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f9caa8-2907-4e6f-acaa-8601cecd2d67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2c5f920-5641-48bd-8603-cc5969cbcbd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef38d950-cb86-4812-8e9d-5cc53ceac048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7a7d36-621d-4c5a-aaeb-082f339520a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd740d5-5d66-4060-8234-0c00714827b5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b935986e-d8a3-427d-ac42-4839104e94e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df4dd401-33bf-4e96-a8ae-51949e751aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51580630-cb81-4d76-a24f-423a1cf098ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7330dbf-0de5-4595-a6a2-7451ccabcf10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d610d6a-19e6-4862-b0dd-9e9dc6a7cbbb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dce764f-cf3b-4939-969a-c2a6a13533b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab950bb-c06c-4b77-9a13-c4337296a0c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ac91d0-6f6a-4295-adcc-08933f7d2587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df26ff8-a832-411b-aa7d-9911132097ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b9799c-4143-405c-876d-c2223a3ed9ad",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b73bc5d-684d-41a4-ac9f-e604053a510b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2115b89f-5631-4ff1-a9b3-c2fe7c42e09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bfb047-3d39-4e25-b286-20d6c6fa7401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4c78b0-a151-476a-9fb5-35d8e498435b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4396078b-1bba-4790-a8cd-c7fdf7028f11",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52eaa3d-ad15-4ed3-8e11-dae1221a3a9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e91f91f-936e-4e95-96c7-6c25ab4a9539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41ef8d4-100f-44c9-ad7e-35c0ea56e9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2d2d4f-0f3b-4848-a65a-1cfa3dc79cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e42541-fd2c-40f6-9fdd-f7f690712a65",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65574f08-27f8-43bb-940d-98bff2dc9acd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deb4e394-bc42-4269-9841-fc4129b25ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b0d6a6-2779-45dc-8c3e-211eb30903a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8fd7f8-b5b9-489c-8f8a-72d0e94fccf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7e21f3-888c-40cc-82e0-e10d8cafcea2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f13d69-102b-4cf1-bcab-3e0db1d316ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb94733-d6ea-4136-bfbe-5e40fd446151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c39edb5-e566-40d9-b9a0-ec1b3bf6baef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d5a73e-db7d-4630-859d-fcadf81e33f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd55374-74ca-4345-90d2-8b083680da76",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f436aa50-9b5a-45b9-8779-670b35902ec8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a297bf-8f4f-45ab-91a7-bf7c84a20b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0eb029-5a78-49cc-8b6f-d0819cbcdc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c2fd23-0678-4a6a-b399-bef7083e9fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c20f76f-ea01-484c-834f-1a6c07e9e02b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1a81fe-a983-4c33-9477-5bfac6da2f2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37b5ae6d-b17e-4c12-95f6-152bcbc8aefb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e154f5d8-660d-4ad8-b585-6f100bb744f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac631731-fcfc-407e-bda0-3cd67c3ca4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593f19d4-a963-4cdb-a076-6fc6b8c7a242",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ce971a-5906-4988-92eb-1515e0c4cfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66dd3bb-17a5-4268-8f93-2efd6e05995f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5888fcdc-1095-4825-bba7-7a475e21e3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89a20dc-ecac-474c-86d0-c8f475f40057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0325743-4a00-4aa4-b2cc-337781f1e43a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405297b2-1638-4001-b8ed-4e45bb1fc1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4896be82-512c-4afe-a933-4509647b203e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d64a651-d109-4adc-93bc-b564d4307098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0618a556-4d5c-4da3-8937-5e884fd54e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16627279-0309-40ee-a9d2-bacde3b088ce",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafdddf7-2b32-460e-be98-b0e642b76545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5ff86d-d830-48be-836d-307f65f5870b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb313008-44b2-44ac-9b9b-28805cc907f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abce41c1-b15a-48a3-a69f-f9f9f37a23bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004d1412-6ed9-48b9-a10e-75a2dfd1e544",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0227afe-c139-4e7a-bb2f-d665036d66aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee163df-4989-468f-8771-cd38e421d79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0333262-d6cf-4e4a-9d98-4aced03110bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1d4b84-bde4-4fd1-bd37-d3c48f5b7133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb0dfcd-fd0a-4aa6-8735-c47d069df837",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7a8122-c662-41ea-b539-a463bf3587bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dada4930-e828-415c-b804-9710a8b03aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511baeec-d571-4019-87b1-4b232401dc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f684f53e-99d4-464f-91c7-9b33ac0cd34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb86109-4ff6-4559-9c5b-6c6c1bdb357e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457309f8-ec1c-4e01-9140-90b4897c7ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c8661e-b305-4ade-bba9-55748ca51762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f8b4cd-6bb4-449d-abd3-39f910e989eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8cd2c81-e9d4-45b2-8b8a-1f765e64c6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3246c650-89ab-4482-b4ba-8d9e559973ca",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe21c29-4538-4c88-a12c-321dade282ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beafa4f7-ce7c-4b4c-84ef-89bc3ca14ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b77502d-6199-4278-9dc2-3d2d93451310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aae4bfc-012f-4e35-a382-24db21ac40b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e36fbc4-8fe0-476a-9df1-3232eba1ffd3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bd3287-b85a-4964-aa98-15408b7df905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf098fc-95d8-43c9-8118-cde42c4fc1e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c6b7c5-d324-4883-aad5-2fbe42140dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49076d64-106f-4bd2-9ba7-dace6f7d30b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825b942d-c99c-438b-be3b-a91eec5ed385",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe3c2e6-208f-433c-9efb-e178f2192d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43229e3e-1570-47c8-9d99-9e1182ca2ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f07cc64-a064-46b4-b2b2-d4d4f3f93eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ad9ca0-585d-450a-925b-c00ba11efc7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bc78bd-69e5-4fc0-8d74-0d0e069334f4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611fd225-f6b4-4060-9212-5fe44acaeec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65325a5f-c68e-4e87-ae82-2212381fe0e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4767ce3-e5ef-4332-9c51-3ec981500ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df64d7a-f391-4400-8eca-e0ba9cb6c206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a31533-ff69-4aaa-9747-8e7d639cf3a4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8609b0be-781a-4e43-95e5-95ed1906db98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfdd1e68-45a5-4feb-b631-d2feff4d2853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca22b83-3c20-413e-a9ec-c1792dc11313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eed3efa-4620-41f8-b72d-f89dc56fd082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c73889-43e8-47a7-a815-596448d05826",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f074a158-1e7b-45df-8067-bf8fb7fa02e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7e6cee-dd59-47bf-a23c-6c8dc4f1552d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e3685e-5d9b-41ea-b614-12a1ac413574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d2b37e-41a5-4195-b07b-1bad8a43265d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570eda02-818d-44d6-9bb5-e0ce0af428dd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e10f5a0-b15a-41fc-be38-3d5207bddfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4185187-99af-4372-a6b0-bcd94736abf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d6a94f-b106-4063-9f3a-a834f4212945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8266e165-e930-41ea-832f-cd028c6441cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e70850-375a-4333-b665-4a20abcfe23b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c32b8ff-5298-41f4-a9d1-d8b6934260b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197f157f-e500-45d7-a978-f594b5079a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455f65b9-fe23-48a4-95ab-9a0bc97f668e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c8a4c5-573c-47f2-a171-5c52087a733e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662357a2-9e06-45b6-9a54-aeeff6be750d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240cf59a-4176-4ffa-ab85-c44fb1ccb972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89dcbab-7848-4822-a9df-1c1182c0a2cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb2d359-6295-474e-9cf5-736135055790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25655d2-cf4d-4cc7-8e8b-19fc359eda5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91306dc1-4412-45bc-b247-b669abbfbce8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a549066c-565c-4df6-9d07-736320473664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fac60e-892c-4665-8469-c2cdef0f2117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91616978-ad4c-43e0-8a21-632fa92018c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8659f35-98a8-4b63-91c8-c3e76d00a06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cba051-66bf-49c3-9037-d6a4f42a119b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad3863d-fe69-4236-8998-e6ee6f41e5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33fa6769-cfac-4619-9a16-ec3ff3ee734c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c993f1a0-c039-42ff-bc9a-f307f7c1bcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8928a56e-e70c-4279-876f-9d4c46f0f36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e637a7-780f-4ade-8179-1914e2606fbb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e114b72c-6cd1-4a88-92ef-9da0e5a2b1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28a9c88-87af-4999-8163-a697a7f8f90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0980db7-5910-4aa4-bc27-574bb0a8cdd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf4cc05-e92c-4b88-8934-2a215a1a0beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5504ea-d320-4213-83f2-8f224bc4b9a8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa805384-0cca-432e-b653-d7c69a185c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a584a8-1f4d-4b47-a9e1-ff27d182c366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73675fe-01ef-498d-95e9-bfe23794ae93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a9b9bf-4da9-4fe0-ad5b-bcd17e5fbad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f996dd0a-2846-4c61-a0c0-79412a7e58e4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9434cd-ee19-4169-8c23-8be3cdff8f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1edb8e0-7508-451c-a755-92bfa7a5214e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549b5852-bc47-4605-a4d3-243aabf73ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213d0c91-7f8b-4236-99f6-7a9e25906375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1d56a8-688a-405f-8900-78a706181187",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56fddda-16bd-48ec-8170-ce7dd5aeba67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a301f6-32b1-4a5f-a5da-bb43ac9c01fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a11c1db-2447-48d4-a9c3-b8b5f40116ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40d6219a-0e99-4171-9c0e-c788e3b99e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0896b0e2-83a1-4497-ba89-63d9d909845a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a00e9a-c42f-469a-8634-ad8657f912cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2676a23e-e3bf-4695-8bd6-610f6496f9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a35e47-da9b-406f-9802-75678ddbc46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f55a9a1-fb84-4440-8168-0f72efde7f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9114f108-0b23-4465-97f7-ad285070a659",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ece0f4-445c-402a-b672-a7c068405429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548a5087-58b8-460e-ab88-0d67ca0177db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5615b899-a51f-40cf-a7d1-aacb8b774e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89bfde3-7acf-4a53-9744-340ad6e01196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92050e99-9f1c-4c50-ae9e-7f4bc43ce1e7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c145b2b-af2b-4323-899b-cfd969d1c13f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fed55c-3646-4f06-bbe0-4653ff929b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92bd22b-1e88-47d7-a1ad-82f9ee6d8c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a911494f-b92e-410b-afa4-4e027b660e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c711bf73-a102-40d6-aae0-3a544e0b6849",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de197fe-32cb-43c6-9b99-231a9004688f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e33675f-382d-4b60-a6e8-bafc2f4f022c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88269d6-f952-4bb6-ada2-46d886b0d8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a16b31-2fe2-45b2-b9b3-f9a96c548faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e124836-09b9-493c-8d50-997c9cb22099",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acaf2e1-408e-4d68-a9ff-8f6047fa43cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cc2e60-1aa5-424b-bcf3-db3d3fde1911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce68850b-27e0-4f14-867f-8bc56de46a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d0f3d5-ede4-427a-a773-ff33e0ac015c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152ecdb1-286f-4f6b-8869-1ae31e7a411d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ca0423-8065-4095-b04c-de4a9ff5bb78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94fc2938-fee1-4085-a569-e4a8887d8b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80ad2d0-40ad-4fed-bff7-6b1b09aa1699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1379e9ba-5fe0-4236-ab90-d8b927fa6dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0933021-ec7a-4605-8cbc-fd2d56f487b5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003ca292-ebc6-47ab-8b82-a19b9f492a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c89223bb-b6d8-4d52-bac7-ef5c5a2fd61a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e739a8-c5f8-4aab-8a73-a00b189aa301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a6165b-33e7-4752-8f95-aa96f7949d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5f2048-e80d-4488-9f79-daf03ea230a7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efab5029-7e91-4786-911a-f0c79ac8a702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d336a213-40cd-4502-b477-d16a4d260311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf35845-6e1a-439c-8bc5-5339367dd8a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fe161b-c35c-411d-8e52-39efbe3d9b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2680bc1a-dc06-4057-84a2-6c5c5e11d8aa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4aa110-f7da-4062-989a-09f26e651da7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7998704-b7b4-4d46-bafc-43a9de91360c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26757aba-ca29-401f-b268-6db9630049da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff9878d-781a-4a40-ad2c-a4df23f72659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a26224e-c48e-4668-b07d-015347ee2456",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5588aed0-3cb8-4b63-bc1b-a5daae8adc4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26254ac1-cf97-40fa-b99b-4541b688d76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3ce122-d04f-4817-9d18-9ed843dc2522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f8f164-4de6-4b08-9e6b-c66cc0e5435c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7131b9cf-e07c-4ef6-b417-c86218fe4622",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11fe24b-300e-4e12-bfc7-d8f6c0c7aff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26bc6249-e28f-4738-826f-4ff51e9f699a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077c323f-d009-43ce-848c-12aa4cf8c380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba73578-708e-4a91-9f4d-a3b906932673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d1fa06-2e27-4d3e-838b-1653e65d6f6a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50a006d-8b94-41d5-a982-7ce35cbea904",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c31dea5d-20e9-4927-8df9-6b2e3602ac1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633f3d6c-bf24-4da7-81f5-42cabc7c5d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4f4844-2555-40b4-9db1-f68a511212b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7512748e-7a80-4039-9abf-f4773900d35e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117f1c0e-964f-4847-8179-d8a2fe340030",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48814207-6fee-4cd5-8b92-633a42ce91b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f33a234-9559-4adf-b20e-881448f08343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60bfddbb-ca87-4661-8002-24c0ad7ccf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3886236-12db-42fe-8d0f-d5338b435317",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f34e9d4-4076-47ce-b90b-1bc13b4a81b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf0e5bf-a143-47f8-abb8-56871fc85f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d89dd5-0039-47fd-9c33-cef52b62093c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aba8aeb-3a55-4336-bf01-c9874f4cd102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ba6055-1c07-4cc4-bbd8-aae0ec5ddbd3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5435ff9d-92fb-4f08-bb24-faf58072ad12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a240b39e-e848-4e07-b942-4cace63e643e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3092b1e7-63b7-4564-9d2e-ab1f7e369115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a601c8-11dc-4aa7-bb8d-8dac08f235e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92148fd-56ab-43d0-bb42-0a167eb58f44",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d887d002-5c81-46d2-b914-988f5d29f278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9095e1b3-02ed-41d7-a899-6eba02c0d773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32166a8-05a3-4d3e-b6e6-4caee2d7b43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3735446-158c-4bed-9b0e-ec208eb3df1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6da9eb2-2bbc-49df-8e45-3127f9a8adc5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a091d18-6783-4a49-a491-243798163254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8995d801-8631-41fa-8789-bf08df27a85e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a3194d-2c97-4638-b633-3a881cc98b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658ad356-def7-4c3a-96a0-14506015865c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e143171c-8eb6-4ea4-8587-047182575758",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0237e5-d6c4-41f6-a916-8a73bd1fdcfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b32cc336-0a41-4022-9733-91d448c6ca60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25cb627-c6f3-4f08-8ccf-561522af82f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9876a3ea-7f8d-4faf-8414-7251804fdad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3157a23c-9586-481a-a6e0-050d58b73dde",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3e99b0-4f7e-47b7-a0b0-19bf2b5dc4fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83c91137-e0b8-46e7-bf4d-efdfe88ae0cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2433b948-51f6-4ab0-8a7e-2466792e128e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706390ff-ae50-4c13-800f-6a52a14bb7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacf8475-d159-47a7-8c24-31d4b42e9351",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8d85e3-11af-4976-bdf5-b9ec9db780bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af8c3a8-853a-4794-b282-a1708e35f7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bab08e3-e37a-41a2-8895-3e4d77fc1d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47ac828-135a-4c89-b7a1-8994e5d8dc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a31916-2d2d-41b7-a93a-efc87695e076",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242f312f-48b6-430d-8ed0-85ee37fd8c73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8699a1a-1215-4cf2-a14a-c219c53e017c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "952b3d2d-e10b-4edc-9653-aefac2c75d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e698de-6331-4b84-ab3f-938cc5e03e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024d885f-8f9e-40e3-b77e-23a47997db91",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60c7cc0-efb6-412b-afcf-c931ab906e81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "100e5d1c-fca4-49de-838a-62731e0ba23b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "648ee0f8-5888-41c1-ac64-5099ffdc6ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0d8827-1430-4b39-9188-4303f04f8589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e7c737-18df-4e98-a0c4-f378ad50b3e3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ec498a-493c-40f6-ba86-e75e97bf6633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0da76546-f37c-48c6-a8a1-4ac272b9e960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c6c608-391c-4731-96ba-9e1332ad038a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2517d6ad-420f-4c4a-9405-b2dc1a3779f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7462a1b-941f-4bfe-b150-e28f02120857",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c3f752-e027-4cd9-8b5d-090b4338b5d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c612103-882f-4a6a-8b63-9d6e8c9cfe8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1967fc48-17b8-4f66-a527-698d504600f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31a8bcd-f83f-47ed-8d5c-c5020b1f2f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c17ad74-fb88-4f9c-ab6b-fed84190812f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d89dc8-bd79-49dc-9e00-07f27890b0bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf467da7-ca04-4d59-9d09-3550f675efb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5ad7aa-acdf-443d-b18a-ecfe2492c65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806ad3e0-19e2-44db-af37-c3a13f549111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9dfa926-2c95-4fda-9000-50e68636ca26",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb85e9c-6b23-4a8b-b6b2-cc2ad06176c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ed85cf2-3965-4eb2-977f-4ad040c3f343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd931c6-4bc2-4021-ac12-33f7052da838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2b5d8b-dcbe-4df9-92f6-05e16d812513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fb50b3-41df-427c-93f1-de362096c78f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52df6fae-9f40-4b19-8a0a-0ca96fcb5ebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75303743-1055-4f0f-8971-f12be5ef3c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c31c03-858c-4711-a2fa-bf8517885e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c253f4df-b645-4e7a-a00e-4d7974ea2932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca879178-b69a-4fef-82ec-9b05b1008b4a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e698974-eefb-41fc-8e18-d8faf26fc6ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed6cbdc1-42fa-43ff-94de-d5d4550e7675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8376d39e-7580-4ed1-8d95-8f51a8d62066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0286f4-4df0-4846-be45-298f863c7ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92e3778-a8a0-4fa1-81d1-dccf74fd4d0b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57712627-8e99-4b44-8aa9-36d128600d2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5e41f6a-2615-4581-89a7-85d0cc43ff50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca3e695-7cd3-483b-be8a-bf18ccc6ef21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213395fa-8758-4063-9bd8-490d4717585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0653fed5-8f00-4944-949e-35b5e7e0bb19",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9db7fa-7e5d-4f70-928d-8ea88b88259f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "885db705-fa9c-42ac-a4b8-1c7a7a669482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb75622b-afd1-461f-adf1-0b652f49de6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ff93a4-85db-4ddd-be0b-92bbb5ddf228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bc40e9-1dea-41a4-a59d-bbeeebcb88a8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1baa26-24e8-4d74-b092-434cb984b618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ab1c3bd-22c0-4fe3-8cfa-38f525ca12e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c588d36-6841-4577-83e0-f8bf1458ad4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343162ad-0210-41d2-a822-b84214fb71e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd5f56f-644d-4466-8cc2-9ca26fb8dd8d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30005c9-e622-4fad-a650-4e4e42cbc1b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2254816b-26cf-4aee-b22f-1ec91fef13da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc98a4c-5df0-44a4-b9cf-8c6430b1d384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d14ef1a-073e-47b4-9145-8204a40d0bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4c76aa-f865-4a81-8d2e-2fa0aad82ca9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6768abd6-10b5-4cd0-835f-a0a6082cfb18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "681713cb-520d-4e1c-9643-6f6bf554943d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a3548c-a42a-478d-bd53-9a5aee38ce2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a447bc6d-3697-4d19-9c70-479b866a569c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9df531-7267-44f8-a0a9-6fdedc813972",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2f1320-3fab-4c26-94d4-2e046244312d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "039c98c8-f91a-4915-99b4-d39def6b2500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0783bd0c-458c-46f9-a589-8fa59dafbd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f3d010-ccd7-4fd7-bd7e-eeb3ed341907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94df85d4-e80d-453e-ae6d-32f6ebcc9465",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce4e0c1-790f-4eec-903c-c8a6bac7c26e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bde1cfb9-ed5f-4d73-8316-02239acc4a77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4b9c2d-1362-4d17-bed5-650ea0c77912",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1ae439-ab5a-4396-9c73-a60d9c7f775d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8851c0b0-7401-43a2-9cb1-901f68e40d77",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4a90a2-e64f-44c9-9ea8-0f3a831660b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c70279a-43cb-483d-bcbf-7eff374b1b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5248dc-ef8f-4ccd-ac86-51c24d590145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e24811-93bc-464e-ad9d-ba44ecf0119c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07541065-b7e2-4ce5-8807-d19d67c023ba",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8920c2-b229-4157-b879-8d3aab451c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "181ca743-f14d-4e8f-bd91-257758a200a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425c8b83-03cc-4928-91ac-ff98e4f7fab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6c978f-51dc-4a34-9396-0716764976fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e65e687-9459-41c1-b1d1-3ad99ed6439e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a719523-170d-4c43-b1ab-c16fc5bf39d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de9e0ad6-3e75-47ac-9a42-f2dc1177e63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb179c5f-41fd-4bca-9663-e99c3782b7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1316655-ef8e-4e61-9e58-96b37036e0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ad79ca-57df-493d-8099-c99fb0252ff5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b825f44-850b-4acc-bedd-4c95e21469f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91a65a7d-2390-4ad9-996d-6ddb5191771b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3e19f7-dde0-40a3-b406-38f02ff422e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b506cadb-d14c-487b-966c-0027186c0906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b2244b-e989-4773-89bf-81c2d17c149c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5660c48e-5df4-4994-9b1d-009f648ea7c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a693b3-0acc-478a-81a6-9ccd7d1fbf33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b602609-f37c-483e-8550-d67d02fd26c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66954a7c-43af-4baf-8a3e-2f462cbdcecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522f2fd4-a276-48c8-bf76-bed28edb4643",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b61d3e6-5911-440b-9088-93a57f829817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0168012c-1a69-45c9-bddf-92e1a1efa631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ff35a9-c4b4-4ed2-afc9-faa6bf331bc6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3297b64a-90a5-412b-9e8a-0cf641707d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0ce1c3-3e98-4395-982b-cf43b3cf3575",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529bee8e-a266-4d0f-b8e7-3abe451201d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05dc8f92-f68d-4256-9f4c-fcd960f8eeac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1846efb-5744-49ce-a0c9-67828bff1048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59360a04-eb99-4cd9-a797-b759c8be4787"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e70d0e8-b945-4484-8b99-009415b7dc4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64dea179-4a21-4eee-b072-bf442a1d97fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29e8b61c-2f03-4373-8c01-067a6e3af25a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef8e6c5f-f817-4035-8398-d3cb3cce59f9"
                    }
                  }
                ]
              },
              {
                "id": "23611194-8ff3-4706-abe4-cdf0f74e87ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7c5837d-400b-408f-8cc5-fc19d5b9ae9a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8289b62-0d48-48de-93a2-72d31298114e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "42ea7e44-7f0c-4af6-baaf-1f1c410d7258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6773eaf2-1861-40fa-a597-e58b3ba704ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74ddae7d-d087-41a9-9c63-23acf5168b75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ea71383-02a8-45aa-ad3a-f187fb2fcba2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b818310-5daf-4347-8315-1f985081d2df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "889c9e4a-1e05-4b2b-b83c-b8cb65594ee0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "373e633f-3080-46a5-8c6d-486674932f88"
                    }
                  }
                ]
              },
              {
                "id": "50708ed3-e2ee-4fe5-87af-5c1a0f051ef7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "47e2992c-c8f4-47a0-97c5-894d3913e5e7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bee3a41-60df-4980-83bd-04cf513f3d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a41016a3-e669-4774-b0aa-bf9589b8e5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48341cba-02be-4bad-a9ad-f2be755db47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2667e979-123d-4020-aa3c-030b542b587a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ea000b1b-8f02-4608-9547-ee755d72967d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "314f9950-85a7-400c-8621-51d9ed21bedb",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a570c6ae-5903-4630-b2ad-e1872fa90b36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3d2f439e-d9c4-4a0e-86e5-eb7f1701bb3e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c77618a-b00a-49eb-b578-9d76638c7c36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "299451e7-5ad4-45be-b388-498a5e984fde"
                    }
                  }
                ]
              },
              {
                "id": "581b8345-2024-42b0-a6af-0867054b6ba9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da878a90-6a70-41d9-a0b2-d327d8b25170",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "da5e095a-6a30-45f3-b5a0-b139247a6aa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60abdd35-e788-4bc5-bcbd-284f13341d51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebc2928e-fd9a-4261-bec1-f664551aa203"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74dc1c88-a4e3-4fc6-ae87-edffc917323a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8d56d30b-2600-499f-a769-6a805433a083"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abcb11f9-3cba-407a-8e7c-91b48981c5d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a5de4d6-a9ec-49e4-8a7f-417df19bbada"
            }
          }
        ]
      },
      {
        "id": "218b1d30-00f0-4ea4-8e10-217aac49c715",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "90537d41-4d72-4e39-ae7c-913d6d111c7d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64b00998-dac5-43bd-bfca-7da90aa11fe3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90f6aa12-4e9d-435a-b51d-5586334dd442",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb93dff-97b8-4743-99d4-528ad1e07833",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "187d313e-3e78-4bce-8898-dd23a193d68d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaed0f2e-c3fc-423c-8d92-93122dcd7ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5249cc3c-f260-4720-943c-bf307d3d0016"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83c7431d-f52a-453a-a247-041476aeb55b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78f0d041-dec7-4bfe-8348-0547b7530a33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c13de8b8-3a4f-4488-b5ad-ac47df9c3798",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de123af0-ccad-445a-be1f-5c2c6835d66b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f549751f-fcc9-4a34-9a90-a500db475cb1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d223fb4d-b228-402b-8014-9c6d57917550"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2cc1ebb-4904-4cb1-85fd-505ece7555e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb75f2a6-92f9-4de4-83df-672bc388f51d"
            }
          }
        ]
      },
      {
        "id": "d5a26f28-f1fa-4b07-8fa1-ea74c5438a26",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "02ee8ac4-18cd-4e01-975f-1f6f786716ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dfcb5826-8c29-4451-8835-4ea88bf04883",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fc482da-5d62-4101-9860-4c662a13b69e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901d6ead-aad4-4043-b085-17fc66ace874",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7666558-0746-4a48-ac36-56214fa29b3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e259efaf-2287-4a10-b9c9-3bfe7ba82767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "536849fc-6680-40fc-8d41-5b8633fde783"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b7a9209-8289-4590-a7bc-8c6c715b7372",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12c99dfa-b812-4d33-875e-cce5b1185ad2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29f604db-553a-47f7-a118-281e9b0a4eba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9f5610c-eb90-48fe-9e25-996ae8db90a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f597398-4cf6-4b76-9f41-a380ff1ee617",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4e7d689d-8c2b-4dc2-a0e4-a6478996e43f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa26d43c-4a69-4891-bf63-6f2b7ed3e519",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "861be6a2-e29d-46bc-b0ec-1076fea09a47"
            }
          }
        ]
      },
      {
        "id": "f1764606-f2c1-4f8b-a6fc-1bb0d4e00429",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f0abda73-062e-4d2b-812b-92fe5412ae5f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "737e1f02-a491-4caa-ab28-e4b2727f0f4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c0fdb75-f7ad-4325-b5fe-5a16b99b071e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b957415b-6bbf-4ac6-89f8-f89db35006c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f253b50-2439-4410-8adf-1c95cd4673d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf7b4ef-1636-4396-ab8e-cb140557b3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89b8b291-a9cd-45c7-8b41-cef6d74c15f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f0a31ca-ac23-43c1-b025-d7936fc4d070",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef5ab219-a155-48f8-b3d4-6e91201e3b15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54b7b036-b628-4bb3-8da1-d2a9ed01e497",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d1df2a8-fa76-4ef6-bd99-3ed1a9676be2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "00c59b27-0fe0-448d-afe5-123412ecc124",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0f53351f-da8a-494d-886a-238e2b618357"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45624366-99d5-4d8c-adf6-34aa227841d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e935406d-60b4-4234-af5d-27299d5f5b89"
            }
          }
        ]
      },
      {
        "id": "e206b7d6-2f74-4a84-979a-7254a90b7593",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abf1f92a-db7c-4dee-a8bf-b3bfe2665eb1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7efb9cbe-2b0d-46d2-98dc-b01e00f15c23",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d128dbb3-c471-4fd2-bfb3-fd363c0de52e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8177606d-13d7-4ee2-957a-819cdc8b56fe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a200d1e-ec22-422d-b5ab-82d905ec0ab7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.751773049645394,
      "responseMin": 10,
      "responseMax": 587,
      "responseSd": 26.448104150739272,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707611825874,
      "completed": 1707611869348
    },
    "executions": [
      {
        "id": "cb773728-64fe-4180-8d85-5ff8d41203a1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4e3fe0ff-4874-4b1e-a145-709b35c8dd3c",
          "httpRequestId": "b9507fbf-cc29-49e5-ad9f-d984e70bd940"
        },
        "item": {
          "id": "cb773728-64fe-4180-8d85-5ff8d41203a1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9505b8a4-6ff5-4ca5-9bea-5e1192c9c98c",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "71dd25ed-201c-47b0-abab-5920a1acaf18",
        "cursor": {
          "ref": "ba34d25e-5e88-4ccb-a70a-a233eac70d68",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6f69e13d-6aae-401e-a190-32374f598e68"
        },
        "item": {
          "id": "71dd25ed-201c-47b0-abab-5920a1acaf18",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5efed712-57fd-467c-8485-943619b67517",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "41e5a750-ca82-4929-abd3-56adacc7d84c",
        "cursor": {
          "ref": "7e442b31-5758-4016-a603-45242d771eba",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e61522c4-6542-4e42-ad4e-9c9426d8d096"
        },
        "item": {
          "id": "41e5a750-ca82-4929-abd3-56adacc7d84c",
          "name": "did_json"
        },
        "response": {
          "id": "b8697457-b553-4e5e-af92-c20583d6bb56",
          "status": "OK",
          "code": 200,
          "responseTime": 587,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3676a22-3513-4b43-86a6-cf4e88cdfa5e",
        "cursor": {
          "ref": "783606d8-3b2a-4494-904f-e05a1a28a2f7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9df85b73-6d6d-4108-8c90-f18f75c9b712"
        },
        "item": {
          "id": "f3676a22-3513-4b43-86a6-cf4e88cdfa5e",
          "name": "did:invalid"
        },
        "response": {
          "id": "123ed2b2-096a-4374-9283-250400f017bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3676a22-3513-4b43-86a6-cf4e88cdfa5e",
        "cursor": {
          "ref": "783606d8-3b2a-4494-904f-e05a1a28a2f7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9df85b73-6d6d-4108-8c90-f18f75c9b712"
        },
        "item": {
          "id": "f3676a22-3513-4b43-86a6-cf4e88cdfa5e",
          "name": "did:invalid"
        },
        "response": {
          "id": "123ed2b2-096a-4374-9283-250400f017bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ccd29b-61b1-4cd8-bdad-2b88e046a2a7",
        "cursor": {
          "ref": "359a44ce-d952-44f8-a3c1-bf90c5f4cc56",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "12e3d416-738a-4089-9eb9-ddc1b29fba61"
        },
        "item": {
          "id": "18ccd29b-61b1-4cd8-bdad-2b88e046a2a7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a51c1fdc-af92-48f6-aaba-a5d345d807f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ccd29b-61b1-4cd8-bdad-2b88e046a2a7",
        "cursor": {
          "ref": "359a44ce-d952-44f8-a3c1-bf90c5f4cc56",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "12e3d416-738a-4089-9eb9-ddc1b29fba61"
        },
        "item": {
          "id": "18ccd29b-61b1-4cd8-bdad-2b88e046a2a7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a51c1fdc-af92-48f6-aaba-a5d345d807f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf54b0f3-74a8-42cd-ad30-c66016668de0",
        "cursor": {
          "ref": "0f97efb7-a0de-42ac-ba54-3eb208181311",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "60a4acc0-073a-4ad9-b4bd-be21a671785f"
        },
        "item": {
          "id": "bf54b0f3-74a8-42cd-ad30-c66016668de0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "38f0e62b-5435-4bc5-acb2-f28cdf86c0c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf54b0f3-74a8-42cd-ad30-c66016668de0",
        "cursor": {
          "ref": "0f97efb7-a0de-42ac-ba54-3eb208181311",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "60a4acc0-073a-4ad9-b4bd-be21a671785f"
        },
        "item": {
          "id": "bf54b0f3-74a8-42cd-ad30-c66016668de0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "38f0e62b-5435-4bc5-acb2-f28cdf86c0c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d230ac-9dab-463a-9533-971ce9bb0495",
        "cursor": {
          "ref": "e4241638-60d0-42eb-a3bc-dcb7762edd30",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b73b6b53-6c24-41bc-aef0-c3585b41f010"
        },
        "item": {
          "id": "b3d230ac-9dab-463a-9533-971ce9bb0495",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "28206df4-75c8-4fd5-9fc2-77fd919cb58a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d230ac-9dab-463a-9533-971ce9bb0495",
        "cursor": {
          "ref": "e4241638-60d0-42eb-a3bc-dcb7762edd30",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b73b6b53-6c24-41bc-aef0-c3585b41f010"
        },
        "item": {
          "id": "b3d230ac-9dab-463a-9533-971ce9bb0495",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "28206df4-75c8-4fd5-9fc2-77fd919cb58a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7850266-3ae9-4bca-b45f-334d989a0ef9",
        "cursor": {
          "ref": "e7f75c20-a7f2-4486-a24f-997d4c8df8fb",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "000b93d0-da21-4373-b1fe-7a62ee2cb50f"
        },
        "item": {
          "id": "c7850266-3ae9-4bca-b45f-334d989a0ef9",
          "name": "identifiers"
        },
        "response": {
          "id": "a5702c56-1e79-4eb2-99c5-bb7aef8a6e8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c7850266-3ae9-4bca-b45f-334d989a0ef9",
        "cursor": {
          "ref": "e7f75c20-a7f2-4486-a24f-997d4c8df8fb",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "000b93d0-da21-4373-b1fe-7a62ee2cb50f"
        },
        "item": {
          "id": "c7850266-3ae9-4bca-b45f-334d989a0ef9",
          "name": "identifiers"
        },
        "response": {
          "id": "a5702c56-1e79-4eb2-99c5-bb7aef8a6e8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8d5957e7-cf7f-4b46-8eef-80f658e52dfa",
        "cursor": {
          "ref": "6bf63049-fb4a-476b-91ec-ead97db807f6",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "20f1ebc4-a545-4b35-9ac7-6cc49b1e9da6"
        },
        "item": {
          "id": "8d5957e7-cf7f-4b46-8eef-80f658e52dfa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a139304-f415-4e0a-80ea-b030a13beae2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5957e7-cf7f-4b46-8eef-80f658e52dfa",
        "cursor": {
          "ref": "6bf63049-fb4a-476b-91ec-ead97db807f6",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "20f1ebc4-a545-4b35-9ac7-6cc49b1e9da6"
        },
        "item": {
          "id": "8d5957e7-cf7f-4b46-8eef-80f658e52dfa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a139304-f415-4e0a-80ea-b030a13beae2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b80f3b-e391-4871-964c-c6c642d5a021",
        "cursor": {
          "ref": "bd2c7266-e3ee-44b5-80b9-7d71df9dd601",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1355ddba-e501-422a-8664-d72fa4418144"
        },
        "item": {
          "id": "e2b80f3b-e391-4871-964c-c6c642d5a021",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af746170-d9fb-42bd-84eb-602ef46de3af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b80f3b-e391-4871-964c-c6c642d5a021",
        "cursor": {
          "ref": "bd2c7266-e3ee-44b5-80b9-7d71df9dd601",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1355ddba-e501-422a-8664-d72fa4418144"
        },
        "item": {
          "id": "e2b80f3b-e391-4871-964c-c6c642d5a021",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af746170-d9fb-42bd-84eb-602ef46de3af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2ba233-8521-4280-8524-730715e77d30",
        "cursor": {
          "ref": "d177290d-72d3-40c8-8f46-a42c4752ee4b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "38c0b741-cb50-45b7-a17f-d0a6fcf48958"
        },
        "item": {
          "id": "4a2ba233-8521-4280-8524-730715e77d30",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8493a9de-743f-401e-93f7-5b91588709da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2ba233-8521-4280-8524-730715e77d30",
        "cursor": {
          "ref": "d177290d-72d3-40c8-8f46-a42c4752ee4b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "38c0b741-cb50-45b7-a17f-d0a6fcf48958"
        },
        "item": {
          "id": "4a2ba233-8521-4280-8524-730715e77d30",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8493a9de-743f-401e-93f7-5b91588709da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beae9343-0a4f-4f3e-b6ca-069944726dfe",
        "cursor": {
          "ref": "a1de61f3-fbdb-43ab-add0-cbf58b18c8de",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "957477ec-c4a6-43c0-91f8-90660739c368"
        },
        "item": {
          "id": "beae9343-0a4f-4f3e-b6ca-069944726dfe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7bae4af6-77da-4d51-a08b-8f9ac0d3149e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beae9343-0a4f-4f3e-b6ca-069944726dfe",
        "cursor": {
          "ref": "a1de61f3-fbdb-43ab-add0-cbf58b18c8de",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "957477ec-c4a6-43c0-91f8-90660739c368"
        },
        "item": {
          "id": "beae9343-0a4f-4f3e-b6ca-069944726dfe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7bae4af6-77da-4d51-a08b-8f9ac0d3149e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc27ced-89b2-4a6e-8f8a-c0bb4778b249",
        "cursor": {
          "ref": "b599d06f-a41f-446c-a4aa-c67e727e5686",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7680c071-d100-4eae-a699-c1b0fbda0e25"
        },
        "item": {
          "id": "3dc27ced-89b2-4a6e-8f8a-c0bb4778b249",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "82bd1bda-9ad6-41de-8736-63bfe57be8ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc27ced-89b2-4a6e-8f8a-c0bb4778b249",
        "cursor": {
          "ref": "b599d06f-a41f-446c-a4aa-c67e727e5686",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7680c071-d100-4eae-a699-c1b0fbda0e25"
        },
        "item": {
          "id": "3dc27ced-89b2-4a6e-8f8a-c0bb4778b249",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "82bd1bda-9ad6-41de-8736-63bfe57be8ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd47afd-3270-46e1-bcca-d656ed5f1e10",
        "cursor": {
          "ref": "8810ca67-7dc9-4d02-bbcd-f21c055c244f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ba1c8057-3ba5-4301-84bd-d8143485c301"
        },
        "item": {
          "id": "cdd47afd-3270-46e1-bcca-d656ed5f1e10",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f8b53441-5676-47d2-9524-2c2c9a1ed473",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd47afd-3270-46e1-bcca-d656ed5f1e10",
        "cursor": {
          "ref": "8810ca67-7dc9-4d02-bbcd-f21c055c244f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ba1c8057-3ba5-4301-84bd-d8143485c301"
        },
        "item": {
          "id": "cdd47afd-3270-46e1-bcca-d656ed5f1e10",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f8b53441-5676-47d2-9524-2c2c9a1ed473",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee209675-e7da-4a57-b5fe-154e0b8e0c04",
        "cursor": {
          "ref": "088fb41f-e79a-4206-ad39-0e6b5e4b3328",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d41961f0-664a-4ec8-8ab4-2d3205a77036"
        },
        "item": {
          "id": "ee209675-e7da-4a57-b5fe-154e0b8e0c04",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "33c25f57-4b5b-4221-a689-d5da9e365767",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee209675-e7da-4a57-b5fe-154e0b8e0c04",
        "cursor": {
          "ref": "088fb41f-e79a-4206-ad39-0e6b5e4b3328",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d41961f0-664a-4ec8-8ab4-2d3205a77036"
        },
        "item": {
          "id": "ee209675-e7da-4a57-b5fe-154e0b8e0c04",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "33c25f57-4b5b-4221-a689-d5da9e365767",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0074730a-c78f-41c9-a2af-1614258be42f",
        "cursor": {
          "ref": "a83d7a19-d2c0-426d-a7a1-7d03aab87e26",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d8b821b9-7739-4f96-aaad-6d8e444d90a1"
        },
        "item": {
          "id": "0074730a-c78f-41c9-a2af-1614258be42f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8cc556fd-6196-490f-b69f-ed55157475d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0074730a-c78f-41c9-a2af-1614258be42f",
        "cursor": {
          "ref": "a83d7a19-d2c0-426d-a7a1-7d03aab87e26",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d8b821b9-7739-4f96-aaad-6d8e444d90a1"
        },
        "item": {
          "id": "0074730a-c78f-41c9-a2af-1614258be42f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8cc556fd-6196-490f-b69f-ed55157475d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19515923-b9e5-4237-8e9a-e704a1b5aa57",
        "cursor": {
          "ref": "074dc74f-1acc-4261-9879-fcdaea376d50",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a0d5c313-cdb9-4166-a53d-1a902fd76a14"
        },
        "item": {
          "id": "19515923-b9e5-4237-8e9a-e704a1b5aa57",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f08a0ab8-539e-4c6e-8e39-a13b75f74b17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19515923-b9e5-4237-8e9a-e704a1b5aa57",
        "cursor": {
          "ref": "074dc74f-1acc-4261-9879-fcdaea376d50",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a0d5c313-cdb9-4166-a53d-1a902fd76a14"
        },
        "item": {
          "id": "19515923-b9e5-4237-8e9a-e704a1b5aa57",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f08a0ab8-539e-4c6e-8e39-a13b75f74b17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751f77d2-32d7-4916-b138-23c4d694c0e4",
        "cursor": {
          "ref": "888b6362-c386-4728-8f41-ab27b649ba3a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b718a190-4cbb-4e9d-96dc-ba42a5400a5f"
        },
        "item": {
          "id": "751f77d2-32d7-4916-b138-23c4d694c0e4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fc935e72-0c81-4a7f-8774-0259c0a620b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751f77d2-32d7-4916-b138-23c4d694c0e4",
        "cursor": {
          "ref": "888b6362-c386-4728-8f41-ab27b649ba3a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b718a190-4cbb-4e9d-96dc-ba42a5400a5f"
        },
        "item": {
          "id": "751f77d2-32d7-4916-b138-23c4d694c0e4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fc935e72-0c81-4a7f-8774-0259c0a620b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7760cea-444d-4294-9ddf-7178c8ee3871",
        "cursor": {
          "ref": "ca158711-244f-4353-b3b2-913842e15aef",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8dc06d8f-75b7-4c64-9f1c-2b60097fa6f4"
        },
        "item": {
          "id": "a7760cea-444d-4294-9ddf-7178c8ee3871",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9a46628a-8ff2-4664-aade-98213355857b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7760cea-444d-4294-9ddf-7178c8ee3871",
        "cursor": {
          "ref": "ca158711-244f-4353-b3b2-913842e15aef",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8dc06d8f-75b7-4c64-9f1c-2b60097fa6f4"
        },
        "item": {
          "id": "a7760cea-444d-4294-9ddf-7178c8ee3871",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9a46628a-8ff2-4664-aade-98213355857b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838317a5-d584-41e0-9ae7-bd0bd3aa2a81",
        "cursor": {
          "ref": "e30ad50a-cc81-44cb-98dd-34123056a4fe",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3b032eaf-7b72-43be-a814-97a04dda55c3"
        },
        "item": {
          "id": "838317a5-d584-41e0-9ae7-bd0bd3aa2a81",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "84dab291-3d9c-44a4-94e8-3b25e3693286",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838317a5-d584-41e0-9ae7-bd0bd3aa2a81",
        "cursor": {
          "ref": "e30ad50a-cc81-44cb-98dd-34123056a4fe",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3b032eaf-7b72-43be-a814-97a04dda55c3"
        },
        "item": {
          "id": "838317a5-d584-41e0-9ae7-bd0bd3aa2a81",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "84dab291-3d9c-44a4-94e8-3b25e3693286",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77739a33-3298-47bd-8fb6-ae67d8042b1b",
        "cursor": {
          "ref": "42e0eced-5029-45fe-948a-69e2c8483064",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "02e3ea52-178f-4991-9e66-bf0165b64bc5"
        },
        "item": {
          "id": "77739a33-3298-47bd-8fb6-ae67d8042b1b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "19192292-dba6-4005-8e43-c840c2fd49c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77739a33-3298-47bd-8fb6-ae67d8042b1b",
        "cursor": {
          "ref": "42e0eced-5029-45fe-948a-69e2c8483064",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "02e3ea52-178f-4991-9e66-bf0165b64bc5"
        },
        "item": {
          "id": "77739a33-3298-47bd-8fb6-ae67d8042b1b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "19192292-dba6-4005-8e43-c840c2fd49c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3516d6-0303-4ce5-9e60-69adad9829b8",
        "cursor": {
          "ref": "e6e72588-ea8b-4bda-93bd-f66481fb129f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4e04b21c-bfbc-4a7d-8b29-ab4e188ed245"
        },
        "item": {
          "id": "ab3516d6-0303-4ce5-9e60-69adad9829b8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2b0bac23-6cf0-4582-9991-4081afefafd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3516d6-0303-4ce5-9e60-69adad9829b8",
        "cursor": {
          "ref": "e6e72588-ea8b-4bda-93bd-f66481fb129f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4e04b21c-bfbc-4a7d-8b29-ab4e188ed245"
        },
        "item": {
          "id": "ab3516d6-0303-4ce5-9e60-69adad9829b8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2b0bac23-6cf0-4582-9991-4081afefafd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8187d3e-1a7b-4af0-853e-f60d2dc232ee",
        "cursor": {
          "ref": "1921364e-30e8-496f-9820-28ddbdfd3721",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b2022ab1-d60c-4ff3-840b-50e9271eacee"
        },
        "item": {
          "id": "c8187d3e-1a7b-4af0-853e-f60d2dc232ee",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6f92cdcc-4b6f-4fd4-a82e-b04e4c16a3e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8187d3e-1a7b-4af0-853e-f60d2dc232ee",
        "cursor": {
          "ref": "1921364e-30e8-496f-9820-28ddbdfd3721",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b2022ab1-d60c-4ff3-840b-50e9271eacee"
        },
        "item": {
          "id": "c8187d3e-1a7b-4af0-853e-f60d2dc232ee",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6f92cdcc-4b6f-4fd4-a82e-b04e4c16a3e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee771f6-5baa-4c98-b6c4-7cdaa7b6ed7d",
        "cursor": {
          "ref": "bf23f4fe-5fb6-4df5-9d1c-efcea16bee64",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "24cf8f0b-d289-4b09-9aed-4858e11de799"
        },
        "item": {
          "id": "bee771f6-5baa-4c98-b6c4-7cdaa7b6ed7d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a8df0947-8957-4efd-8ec4-c6d3c271d3ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee771f6-5baa-4c98-b6c4-7cdaa7b6ed7d",
        "cursor": {
          "ref": "bf23f4fe-5fb6-4df5-9d1c-efcea16bee64",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "24cf8f0b-d289-4b09-9aed-4858e11de799"
        },
        "item": {
          "id": "bee771f6-5baa-4c98-b6c4-7cdaa7b6ed7d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a8df0947-8957-4efd-8ec4-c6d3c271d3ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69de65e8-0bc3-45a5-9eaf-6721d0378b43",
        "cursor": {
          "ref": "28871dd6-d3c0-4710-9efa-c8b8584eab4b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b29cc5bf-7b9c-44ea-9bd5-194b0387229f"
        },
        "item": {
          "id": "69de65e8-0bc3-45a5-9eaf-6721d0378b43",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "db34926d-f281-402c-904e-296aa25b8703",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69de65e8-0bc3-45a5-9eaf-6721d0378b43",
        "cursor": {
          "ref": "28871dd6-d3c0-4710-9efa-c8b8584eab4b",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b29cc5bf-7b9c-44ea-9bd5-194b0387229f"
        },
        "item": {
          "id": "69de65e8-0bc3-45a5-9eaf-6721d0378b43",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "db34926d-f281-402c-904e-296aa25b8703",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc0c9e0-c5e1-424d-bc13-cbb011e327c3",
        "cursor": {
          "ref": "3730d423-cc8a-4759-b444-de9150537518",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f230e4e3-de0d-4986-abd5-011a06ffa905"
        },
        "item": {
          "id": "cdc0c9e0-c5e1-424d-bc13-cbb011e327c3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8ee3131b-9c5f-492a-be7f-dc62081dd476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc0c9e0-c5e1-424d-bc13-cbb011e327c3",
        "cursor": {
          "ref": "3730d423-cc8a-4759-b444-de9150537518",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f230e4e3-de0d-4986-abd5-011a06ffa905"
        },
        "item": {
          "id": "cdc0c9e0-c5e1-424d-bc13-cbb011e327c3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8ee3131b-9c5f-492a-be7f-dc62081dd476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a34e56-cfbb-483f-b765-d9aea6182338",
        "cursor": {
          "ref": "de44e974-c6fb-4470-a009-1eb2aa2e8f14",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "54b0cd4c-9abb-4b56-9c8f-8cc82369c8d8"
        },
        "item": {
          "id": "21a34e56-cfbb-483f-b765-d9aea6182338",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "65f30940-272e-4634-a6e4-12ed75249a61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a34e56-cfbb-483f-b765-d9aea6182338",
        "cursor": {
          "ref": "de44e974-c6fb-4470-a009-1eb2aa2e8f14",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "54b0cd4c-9abb-4b56-9c8f-8cc82369c8d8"
        },
        "item": {
          "id": "21a34e56-cfbb-483f-b765-d9aea6182338",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "65f30940-272e-4634-a6e4-12ed75249a61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7e461d-8d60-4cd4-9455-c14e60602ba6",
        "cursor": {
          "ref": "749baa68-8306-474a-a066-339a00aff193",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eae52841-8b2d-46ed-938b-fe86b696b115"
        },
        "item": {
          "id": "ef7e461d-8d60-4cd4-9455-c14e60602ba6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6028bf3e-5523-4bba-a438-66a2daff4d6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7e461d-8d60-4cd4-9455-c14e60602ba6",
        "cursor": {
          "ref": "749baa68-8306-474a-a066-339a00aff193",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eae52841-8b2d-46ed-938b-fe86b696b115"
        },
        "item": {
          "id": "ef7e461d-8d60-4cd4-9455-c14e60602ba6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6028bf3e-5523-4bba-a438-66a2daff4d6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d320e4-8650-4a39-b384-949ee598cb43",
        "cursor": {
          "ref": "0d824e7e-1229-4c44-bc40-f5edd6f95f69",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5eb43214-c657-40ab-a54c-d3eaf3fc9c33"
        },
        "item": {
          "id": "b9d320e4-8650-4a39-b384-949ee598cb43",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fb407b19-44a5-431c-a024-4c94a692d959",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d320e4-8650-4a39-b384-949ee598cb43",
        "cursor": {
          "ref": "0d824e7e-1229-4c44-bc40-f5edd6f95f69",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5eb43214-c657-40ab-a54c-d3eaf3fc9c33"
        },
        "item": {
          "id": "b9d320e4-8650-4a39-b384-949ee598cb43",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fb407b19-44a5-431c-a024-4c94a692d959",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9886be-0b46-4e40-b1c7-60157050dcb6",
        "cursor": {
          "ref": "272b8353-932d-484c-81f0-81cd4c7282a1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9b91fcc1-d81b-4bbb-a5f6-cd067557bb36"
        },
        "item": {
          "id": "7e9886be-0b46-4e40-b1c7-60157050dcb6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4309866-64bf-42f4-92a2-0bd1849a50bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9886be-0b46-4e40-b1c7-60157050dcb6",
        "cursor": {
          "ref": "272b8353-932d-484c-81f0-81cd4c7282a1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9b91fcc1-d81b-4bbb-a5f6-cd067557bb36"
        },
        "item": {
          "id": "7e9886be-0b46-4e40-b1c7-60157050dcb6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4309866-64bf-42f4-92a2-0bd1849a50bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595c00ca-259c-436e-b588-48f05d47caa2",
        "cursor": {
          "ref": "d86c4021-8f42-4fe8-acc5-e9075c28cec4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b5eb1f45-7a44-42d1-821b-22a3da69a5c3"
        },
        "item": {
          "id": "595c00ca-259c-436e-b588-48f05d47caa2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "18126c3e-f6c7-4600-a534-1192021424e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595c00ca-259c-436e-b588-48f05d47caa2",
        "cursor": {
          "ref": "d86c4021-8f42-4fe8-acc5-e9075c28cec4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b5eb1f45-7a44-42d1-821b-22a3da69a5c3"
        },
        "item": {
          "id": "595c00ca-259c-436e-b588-48f05d47caa2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "18126c3e-f6c7-4600-a534-1192021424e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a9d7d0-5b3e-4575-8684-a7bbad625db3",
        "cursor": {
          "ref": "090c78bb-7ac7-4cd9-a42f-4c37bd79fe43",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4aa7414c-963e-49e3-82a4-4ecc8ed1dcd4"
        },
        "item": {
          "id": "e0a9d7d0-5b3e-4575-8684-a7bbad625db3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "22fe0dee-f686-49d9-b49f-415ffa28e127",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a9d7d0-5b3e-4575-8684-a7bbad625db3",
        "cursor": {
          "ref": "090c78bb-7ac7-4cd9-a42f-4c37bd79fe43",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4aa7414c-963e-49e3-82a4-4ecc8ed1dcd4"
        },
        "item": {
          "id": "e0a9d7d0-5b3e-4575-8684-a7bbad625db3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "22fe0dee-f686-49d9-b49f-415ffa28e127",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f21260-b181-4068-823d-c4da05d6e7a4",
        "cursor": {
          "ref": "99541675-5067-4824-8915-ee0855f0a408",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "762f52de-7301-40bb-bbc5-2eb08d2bb6df"
        },
        "item": {
          "id": "98f21260-b181-4068-823d-c4da05d6e7a4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1981dc81-149c-4635-99fb-2785089cf860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f21260-b181-4068-823d-c4da05d6e7a4",
        "cursor": {
          "ref": "99541675-5067-4824-8915-ee0855f0a408",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "762f52de-7301-40bb-bbc5-2eb08d2bb6df"
        },
        "item": {
          "id": "98f21260-b181-4068-823d-c4da05d6e7a4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1981dc81-149c-4635-99fb-2785089cf860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6280681b-0c85-4faf-a8be-54fedebadc9a",
        "cursor": {
          "ref": "5725c403-2ff6-4230-b4ff-37e8dfcf1715",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1f127521-2cfd-4b9b-a3cd-21e19c0aeb04"
        },
        "item": {
          "id": "6280681b-0c85-4faf-a8be-54fedebadc9a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6f400eee-1f1c-484b-913d-edf39a419453",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6280681b-0c85-4faf-a8be-54fedebadc9a",
        "cursor": {
          "ref": "5725c403-2ff6-4230-b4ff-37e8dfcf1715",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1f127521-2cfd-4b9b-a3cd-21e19c0aeb04"
        },
        "item": {
          "id": "6280681b-0c85-4faf-a8be-54fedebadc9a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6f400eee-1f1c-484b-913d-edf39a419453",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204ad6cc-886f-4bf0-8811-e3f8229c33bd",
        "cursor": {
          "ref": "d9283d25-f5cc-46b9-8865-f1df00a8436c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "18a0d119-56c1-4fba-a834-681da80fad85"
        },
        "item": {
          "id": "204ad6cc-886f-4bf0-8811-e3f8229c33bd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "17d51086-a596-41b0-b802-e5f1968e07fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204ad6cc-886f-4bf0-8811-e3f8229c33bd",
        "cursor": {
          "ref": "d9283d25-f5cc-46b9-8865-f1df00a8436c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "18a0d119-56c1-4fba-a834-681da80fad85"
        },
        "item": {
          "id": "204ad6cc-886f-4bf0-8811-e3f8229c33bd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "17d51086-a596-41b0-b802-e5f1968e07fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510ac2fb-2a8b-4677-b23d-9b1aa5ba6bf4",
        "cursor": {
          "ref": "6b7e3df6-7ded-48b4-b279-24a42eba851b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f3538cb5-ec0f-4b07-b5e5-9aac3da70278"
        },
        "item": {
          "id": "510ac2fb-2a8b-4677-b23d-9b1aa5ba6bf4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "951a93e4-cd61-4220-bef8-6fa282cbf6b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510ac2fb-2a8b-4677-b23d-9b1aa5ba6bf4",
        "cursor": {
          "ref": "6b7e3df6-7ded-48b4-b279-24a42eba851b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f3538cb5-ec0f-4b07-b5e5-9aac3da70278"
        },
        "item": {
          "id": "510ac2fb-2a8b-4677-b23d-9b1aa5ba6bf4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "951a93e4-cd61-4220-bef8-6fa282cbf6b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245faaa4-8195-49d9-bed6-a6572d9151cc",
        "cursor": {
          "ref": "d23568d9-5c52-4b68-b667-3a69c667f624",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f25e5f20-bd67-4b55-8de5-9b4a279e71c7"
        },
        "item": {
          "id": "245faaa4-8195-49d9-bed6-a6572d9151cc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d0b3f264-bd14-498f-b03f-cda17cf85181",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245faaa4-8195-49d9-bed6-a6572d9151cc",
        "cursor": {
          "ref": "d23568d9-5c52-4b68-b667-3a69c667f624",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f25e5f20-bd67-4b55-8de5-9b4a279e71c7"
        },
        "item": {
          "id": "245faaa4-8195-49d9-bed6-a6572d9151cc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d0b3f264-bd14-498f-b03f-cda17cf85181",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f0fa2e-a15b-4c7d-94cf-01ca647755c9",
        "cursor": {
          "ref": "5374dd48-8f98-48b7-a052-4d694eed0c0b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0f593f14-9ff3-4b7e-91fd-51a49865ab7c"
        },
        "item": {
          "id": "24f0fa2e-a15b-4c7d-94cf-01ca647755c9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b16c31b1-cdcf-4222-8259-16eea817f9b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f0fa2e-a15b-4c7d-94cf-01ca647755c9",
        "cursor": {
          "ref": "5374dd48-8f98-48b7-a052-4d694eed0c0b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0f593f14-9ff3-4b7e-91fd-51a49865ab7c"
        },
        "item": {
          "id": "24f0fa2e-a15b-4c7d-94cf-01ca647755c9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b16c31b1-cdcf-4222-8259-16eea817f9b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a27287b-b5cf-450b-93c0-8f4606b25b3f",
        "cursor": {
          "ref": "96981b1f-1d12-4f5c-8c53-44ed352dceeb",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1b196529-c91f-40cf-9692-2fc207c46fbe"
        },
        "item": {
          "id": "8a27287b-b5cf-450b-93c0-8f4606b25b3f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d8f53100-a917-4273-bde5-e3f62a8274b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a27287b-b5cf-450b-93c0-8f4606b25b3f",
        "cursor": {
          "ref": "96981b1f-1d12-4f5c-8c53-44ed352dceeb",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1b196529-c91f-40cf-9692-2fc207c46fbe"
        },
        "item": {
          "id": "8a27287b-b5cf-450b-93c0-8f4606b25b3f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d8f53100-a917-4273-bde5-e3f62a8274b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c690ea-f885-4d63-9804-f9aea569b677",
        "cursor": {
          "ref": "ea4aeb73-28f1-4916-9c31-60f7ca130944",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "461808b6-13bd-4707-be72-1c9a076ec2b7"
        },
        "item": {
          "id": "b4c690ea-f885-4d63-9804-f9aea569b677",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e73164f6-f499-4427-b82c-e2c29c59276a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c690ea-f885-4d63-9804-f9aea569b677",
        "cursor": {
          "ref": "ea4aeb73-28f1-4916-9c31-60f7ca130944",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "461808b6-13bd-4707-be72-1c9a076ec2b7"
        },
        "item": {
          "id": "b4c690ea-f885-4d63-9804-f9aea569b677",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e73164f6-f499-4427-b82c-e2c29c59276a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f5bb4c-0cf8-4c2c-a19d-cc0d164253c7",
        "cursor": {
          "ref": "1b8b949f-8b30-499f-b75f-1908f718c890",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "97979a2a-4b75-4870-b4c8-3233512a44ae"
        },
        "item": {
          "id": "90f5bb4c-0cf8-4c2c-a19d-cc0d164253c7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4e0c71f7-2ac4-4563-9dc3-2018b2fd7f34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f5bb4c-0cf8-4c2c-a19d-cc0d164253c7",
        "cursor": {
          "ref": "1b8b949f-8b30-499f-b75f-1908f718c890",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "97979a2a-4b75-4870-b4c8-3233512a44ae"
        },
        "item": {
          "id": "90f5bb4c-0cf8-4c2c-a19d-cc0d164253c7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4e0c71f7-2ac4-4563-9dc3-2018b2fd7f34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4422fc-6ee5-45ab-a435-b82c69cfe235",
        "cursor": {
          "ref": "271e7e3d-aff0-41c9-9149-0bacc3ee61b0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9e7c62a8-e569-4967-8785-c8f2f8c9438f"
        },
        "item": {
          "id": "6a4422fc-6ee5-45ab-a435-b82c69cfe235",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c3697e49-1f20-4b73-9161-da35513c30b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4422fc-6ee5-45ab-a435-b82c69cfe235",
        "cursor": {
          "ref": "271e7e3d-aff0-41c9-9149-0bacc3ee61b0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9e7c62a8-e569-4967-8785-c8f2f8c9438f"
        },
        "item": {
          "id": "6a4422fc-6ee5-45ab-a435-b82c69cfe235",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c3697e49-1f20-4b73-9161-da35513c30b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de2a713-1799-418f-84eb-47be313ecb9b",
        "cursor": {
          "ref": "b9e31d12-bfa5-4a87-a768-3caca5e88786",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "71de1884-4b80-4b33-85ba-2787df65e232"
        },
        "item": {
          "id": "0de2a713-1799-418f-84eb-47be313ecb9b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9fe2543f-4960-4a49-8919-505d276da3fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de2a713-1799-418f-84eb-47be313ecb9b",
        "cursor": {
          "ref": "b9e31d12-bfa5-4a87-a768-3caca5e88786",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "71de1884-4b80-4b33-85ba-2787df65e232"
        },
        "item": {
          "id": "0de2a713-1799-418f-84eb-47be313ecb9b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9fe2543f-4960-4a49-8919-505d276da3fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3550e1c-1b7e-4bba-8bbc-4b6d7befc8c6",
        "cursor": {
          "ref": "9e0ffc66-fb98-44b4-bfb2-44ede772e4a8",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "501dbff9-b384-4e9c-88a9-1ec3215a07f6"
        },
        "item": {
          "id": "f3550e1c-1b7e-4bba-8bbc-4b6d7befc8c6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b2fddcc6-fe83-4e98-b564-a887383e9aa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3550e1c-1b7e-4bba-8bbc-4b6d7befc8c6",
        "cursor": {
          "ref": "9e0ffc66-fb98-44b4-bfb2-44ede772e4a8",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "501dbff9-b384-4e9c-88a9-1ec3215a07f6"
        },
        "item": {
          "id": "f3550e1c-1b7e-4bba-8bbc-4b6d7befc8c6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b2fddcc6-fe83-4e98-b564-a887383e9aa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4b25ec-814a-4dae-b2e0-0dc645e989f0",
        "cursor": {
          "ref": "e16b7a47-b54b-4818-a2c7-b7ea9347db69",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1333ae3d-e126-4f92-be28-ac5f179ec159"
        },
        "item": {
          "id": "9d4b25ec-814a-4dae-b2e0-0dc645e989f0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ec6024dc-2d6f-4171-bbd3-c51b30ba2e17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4b25ec-814a-4dae-b2e0-0dc645e989f0",
        "cursor": {
          "ref": "e16b7a47-b54b-4818-a2c7-b7ea9347db69",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1333ae3d-e126-4f92-be28-ac5f179ec159"
        },
        "item": {
          "id": "9d4b25ec-814a-4dae-b2e0-0dc645e989f0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ec6024dc-2d6f-4171-bbd3-c51b30ba2e17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e798b929-44d3-41a5-9905-51810673bf2f",
        "cursor": {
          "ref": "52f03b97-5b65-4f8b-af5d-d87cb184b42d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a85e0fbb-131a-41bc-8de5-8b88dbb923ea"
        },
        "item": {
          "id": "e798b929-44d3-41a5-9905-51810673bf2f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8807a28b-f948-4268-9dda-2f6a8a43166d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e798b929-44d3-41a5-9905-51810673bf2f",
        "cursor": {
          "ref": "52f03b97-5b65-4f8b-af5d-d87cb184b42d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a85e0fbb-131a-41bc-8de5-8b88dbb923ea"
        },
        "item": {
          "id": "e798b929-44d3-41a5-9905-51810673bf2f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8807a28b-f948-4268-9dda-2f6a8a43166d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450ca386-f27c-4bf2-82db-e4cd2a4ec041",
        "cursor": {
          "ref": "f3a15a4e-a5fc-4540-8246-394db80eb77c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "83fe3304-6cc7-44c0-8ad5-b921a5507610"
        },
        "item": {
          "id": "450ca386-f27c-4bf2-82db-e4cd2a4ec041",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8afbd358-4921-4515-ae28-9adaa99bf400",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450ca386-f27c-4bf2-82db-e4cd2a4ec041",
        "cursor": {
          "ref": "f3a15a4e-a5fc-4540-8246-394db80eb77c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "83fe3304-6cc7-44c0-8ad5-b921a5507610"
        },
        "item": {
          "id": "450ca386-f27c-4bf2-82db-e4cd2a4ec041",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8afbd358-4921-4515-ae28-9adaa99bf400",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c87866-3eab-49b5-a0ac-52a69d2e17ee",
        "cursor": {
          "ref": "7c3f5268-fc13-43af-b673-6322d074150a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2a0475e9-be05-4f73-a03d-b237511f4f5b"
        },
        "item": {
          "id": "88c87866-3eab-49b5-a0ac-52a69d2e17ee",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "06c6140c-c655-4a5e-8f00-8089732c6d19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c87866-3eab-49b5-a0ac-52a69d2e17ee",
        "cursor": {
          "ref": "7c3f5268-fc13-43af-b673-6322d074150a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2a0475e9-be05-4f73-a03d-b237511f4f5b"
        },
        "item": {
          "id": "88c87866-3eab-49b5-a0ac-52a69d2e17ee",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "06c6140c-c655-4a5e-8f00-8089732c6d19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33badb29-b032-4059-8444-077d7e87f8d1",
        "cursor": {
          "ref": "5d48647d-1488-4c71-816e-401c66375611",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "84b00c33-d999-48fd-9941-9c39aa39499c"
        },
        "item": {
          "id": "33badb29-b032-4059-8444-077d7e87f8d1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5eb493d1-c106-49dc-ac45-80120e61549e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33badb29-b032-4059-8444-077d7e87f8d1",
        "cursor": {
          "ref": "5d48647d-1488-4c71-816e-401c66375611",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "84b00c33-d999-48fd-9941-9c39aa39499c"
        },
        "item": {
          "id": "33badb29-b032-4059-8444-077d7e87f8d1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5eb493d1-c106-49dc-ac45-80120e61549e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cdc880-4eab-4a3a-9d9d-400d6d1031df",
        "cursor": {
          "ref": "6cad5007-1787-4227-8a1d-d9e7cd1b27bb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7286b0b6-6051-4f0b-8a7e-7b627fabfeef"
        },
        "item": {
          "id": "e7cdc880-4eab-4a3a-9d9d-400d6d1031df",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cef657e4-6079-4a00-a908-aec7f2cf0af6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cdc880-4eab-4a3a-9d9d-400d6d1031df",
        "cursor": {
          "ref": "6cad5007-1787-4227-8a1d-d9e7cd1b27bb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7286b0b6-6051-4f0b-8a7e-7b627fabfeef"
        },
        "item": {
          "id": "e7cdc880-4eab-4a3a-9d9d-400d6d1031df",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cef657e4-6079-4a00-a908-aec7f2cf0af6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab8f4a7-68ad-45c2-8e9e-4704723ae0f9",
        "cursor": {
          "ref": "ad63493f-6e59-47a0-82a2-ae0042dfc02d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0dd8e647-ec63-4119-870c-65cfb816b8e5"
        },
        "item": {
          "id": "7ab8f4a7-68ad-45c2-8e9e-4704723ae0f9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "926fb40b-ba0d-463c-a43d-5ffd2998da69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab8f4a7-68ad-45c2-8e9e-4704723ae0f9",
        "cursor": {
          "ref": "ad63493f-6e59-47a0-82a2-ae0042dfc02d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0dd8e647-ec63-4119-870c-65cfb816b8e5"
        },
        "item": {
          "id": "7ab8f4a7-68ad-45c2-8e9e-4704723ae0f9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "926fb40b-ba0d-463c-a43d-5ffd2998da69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800ca68d-6dd3-45b8-a4e5-259b074bc176",
        "cursor": {
          "ref": "1595e236-f2d4-4d23-9c15-5f0f116de0a3",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "16df9136-925f-4cb5-aafa-3cc81dfd2ab3"
        },
        "item": {
          "id": "800ca68d-6dd3-45b8-a4e5-259b074bc176",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "14f2eb1c-bf29-463d-bab7-9a3519eeb3cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800ca68d-6dd3-45b8-a4e5-259b074bc176",
        "cursor": {
          "ref": "1595e236-f2d4-4d23-9c15-5f0f116de0a3",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "16df9136-925f-4cb5-aafa-3cc81dfd2ab3"
        },
        "item": {
          "id": "800ca68d-6dd3-45b8-a4e5-259b074bc176",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "14f2eb1c-bf29-463d-bab7-9a3519eeb3cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a113307-a7c4-4318-9779-b54b22181fae",
        "cursor": {
          "ref": "157a79a4-d33c-4b79-a3da-8f289bd2732b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bcfc3e52-e42f-448a-bc19-be65d5593ad8"
        },
        "item": {
          "id": "6a113307-a7c4-4318-9779-b54b22181fae",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "aefe23ce-8dd8-405e-8034-8d125da2969c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a113307-a7c4-4318-9779-b54b22181fae",
        "cursor": {
          "ref": "157a79a4-d33c-4b79-a3da-8f289bd2732b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bcfc3e52-e42f-448a-bc19-be65d5593ad8"
        },
        "item": {
          "id": "6a113307-a7c4-4318-9779-b54b22181fae",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "aefe23ce-8dd8-405e-8034-8d125da2969c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607e82d3-991d-400f-ad3d-225386081cba",
        "cursor": {
          "ref": "37e538e3-9b78-4e42-bb78-e9beb4502d58",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "df5a1708-9fd2-40de-b992-9801ee7ed602"
        },
        "item": {
          "id": "607e82d3-991d-400f-ad3d-225386081cba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fff02595-1184-4062-ba57-69c68d28b313",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607e82d3-991d-400f-ad3d-225386081cba",
        "cursor": {
          "ref": "37e538e3-9b78-4e42-bb78-e9beb4502d58",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "df5a1708-9fd2-40de-b992-9801ee7ed602"
        },
        "item": {
          "id": "607e82d3-991d-400f-ad3d-225386081cba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fff02595-1184-4062-ba57-69c68d28b313",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3cd571-23fc-4139-b03c-550355351343",
        "cursor": {
          "ref": "1dc47c0c-a478-4d95-a143-6c1baa3afd25",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "94c2f62a-1741-4052-b174-8fb9980f4251"
        },
        "item": {
          "id": "db3cd571-23fc-4139-b03c-550355351343",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4ad1b985-3ffb-467c-8672-a0f11f461d5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3cd571-23fc-4139-b03c-550355351343",
        "cursor": {
          "ref": "1dc47c0c-a478-4d95-a143-6c1baa3afd25",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "94c2f62a-1741-4052-b174-8fb9980f4251"
        },
        "item": {
          "id": "db3cd571-23fc-4139-b03c-550355351343",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4ad1b985-3ffb-467c-8672-a0f11f461d5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ceae126-11be-49d5-8ebf-bdc046bea79f",
        "cursor": {
          "ref": "b6d51456-2772-4412-a29b-d96bab92f367",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5d110640-e8ed-4488-872f-5db5da114cb9"
        },
        "item": {
          "id": "2ceae126-11be-49d5-8ebf-bdc046bea79f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "32a889a3-f2fe-480a-b49f-bac8b319fc93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ceae126-11be-49d5-8ebf-bdc046bea79f",
        "cursor": {
          "ref": "b6d51456-2772-4412-a29b-d96bab92f367",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5d110640-e8ed-4488-872f-5db5da114cb9"
        },
        "item": {
          "id": "2ceae126-11be-49d5-8ebf-bdc046bea79f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "32a889a3-f2fe-480a-b49f-bac8b319fc93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98dcd1e7-8243-47e4-9482-22914fcd3b67",
        "cursor": {
          "ref": "9d67f886-720e-4b00-bdd5-ff5567a001f1",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "929db524-58fc-4a4a-b988-7213ee18fd05"
        },
        "item": {
          "id": "98dcd1e7-8243-47e4-9482-22914fcd3b67",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2affe0c7-92f0-4bee-b456-85c2d7a986dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98dcd1e7-8243-47e4-9482-22914fcd3b67",
        "cursor": {
          "ref": "9d67f886-720e-4b00-bdd5-ff5567a001f1",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "929db524-58fc-4a4a-b988-7213ee18fd05"
        },
        "item": {
          "id": "98dcd1e7-8243-47e4-9482-22914fcd3b67",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2affe0c7-92f0-4bee-b456-85c2d7a986dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80325fad-b520-4594-ad73-bcb70ffe7b20",
        "cursor": {
          "ref": "46cfffbf-36cb-43aa-abaa-7a3a407cc0ba",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "af98e6ed-363b-439e-bce5-f62cf8e2f7ee"
        },
        "item": {
          "id": "80325fad-b520-4594-ad73-bcb70ffe7b20",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "839205f1-edac-43cc-92c1-c318f7166fcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80325fad-b520-4594-ad73-bcb70ffe7b20",
        "cursor": {
          "ref": "46cfffbf-36cb-43aa-abaa-7a3a407cc0ba",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "af98e6ed-363b-439e-bce5-f62cf8e2f7ee"
        },
        "item": {
          "id": "80325fad-b520-4594-ad73-bcb70ffe7b20",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "839205f1-edac-43cc-92c1-c318f7166fcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9621df6-9286-422e-b9dd-8f4cc7cc9a11",
        "cursor": {
          "ref": "b37895bf-8a90-4734-ae2b-31d906c2e537",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5e79a636-162d-4ec1-87fb-a1d845e551e9"
        },
        "item": {
          "id": "e9621df6-9286-422e-b9dd-8f4cc7cc9a11",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ef4240b6-e421-4ce8-9ae3-767a5d666c74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9621df6-9286-422e-b9dd-8f4cc7cc9a11",
        "cursor": {
          "ref": "b37895bf-8a90-4734-ae2b-31d906c2e537",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5e79a636-162d-4ec1-87fb-a1d845e551e9"
        },
        "item": {
          "id": "e9621df6-9286-422e-b9dd-8f4cc7cc9a11",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ef4240b6-e421-4ce8-9ae3-767a5d666c74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d120dc-53c2-4dff-a994-c15a903de7dc",
        "cursor": {
          "ref": "24459fed-4587-47ee-849f-f75876a98cba",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e811241a-0cbd-47ac-9577-6d35e76e936f"
        },
        "item": {
          "id": "14d120dc-53c2-4dff-a994-c15a903de7dc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1f1776e0-f0bc-4e0e-8561-fde1364dddb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d120dc-53c2-4dff-a994-c15a903de7dc",
        "cursor": {
          "ref": "24459fed-4587-47ee-849f-f75876a98cba",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e811241a-0cbd-47ac-9577-6d35e76e936f"
        },
        "item": {
          "id": "14d120dc-53c2-4dff-a994-c15a903de7dc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1f1776e0-f0bc-4e0e-8561-fde1364dddb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf9e53f-b5e0-48f8-8abe-6a42b6a95fa1",
        "cursor": {
          "ref": "6c17f1ad-4989-4391-8d59-eabba1c07d25",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "84f1b201-3c86-4140-9d3b-5425b6548f6b"
        },
        "item": {
          "id": "dbf9e53f-b5e0-48f8-8abe-6a42b6a95fa1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "586faf76-6428-4e25-8523-23da42e1727a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf9e53f-b5e0-48f8-8abe-6a42b6a95fa1",
        "cursor": {
          "ref": "6c17f1ad-4989-4391-8d59-eabba1c07d25",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "84f1b201-3c86-4140-9d3b-5425b6548f6b"
        },
        "item": {
          "id": "dbf9e53f-b5e0-48f8-8abe-6a42b6a95fa1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "586faf76-6428-4e25-8523-23da42e1727a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f58e89-704f-4d23-a97d-99f5e9d39817",
        "cursor": {
          "ref": "0f0fbcb8-7769-465b-bcfd-0cc3a7426e57",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ee983337-5858-4efe-a0e8-323ad61c4117"
        },
        "item": {
          "id": "19f58e89-704f-4d23-a97d-99f5e9d39817",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a49e7b87-1c61-4fa7-b017-a364362f5f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f58e89-704f-4d23-a97d-99f5e9d39817",
        "cursor": {
          "ref": "0f0fbcb8-7769-465b-bcfd-0cc3a7426e57",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ee983337-5858-4efe-a0e8-323ad61c4117"
        },
        "item": {
          "id": "19f58e89-704f-4d23-a97d-99f5e9d39817",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a49e7b87-1c61-4fa7-b017-a364362f5f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9fcc90-5625-4aa7-bd53-dea85477fa04",
        "cursor": {
          "ref": "87527de5-7dff-4036-a10e-49f956f48c72",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4f92b074-4a53-4eaa-98c3-6d265e508198"
        },
        "item": {
          "id": "6f9fcc90-5625-4aa7-bd53-dea85477fa04",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "65e9c13c-38a3-46bc-9b87-688c2823d824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9fcc90-5625-4aa7-bd53-dea85477fa04",
        "cursor": {
          "ref": "87527de5-7dff-4036-a10e-49f956f48c72",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4f92b074-4a53-4eaa-98c3-6d265e508198"
        },
        "item": {
          "id": "6f9fcc90-5625-4aa7-bd53-dea85477fa04",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "65e9c13c-38a3-46bc-9b87-688c2823d824",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70821a66-bc53-44d3-9655-a93ef80faf73",
        "cursor": {
          "ref": "1cb9daed-bc76-4f58-8714-83ea6f1e2e46",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "768b2934-1ada-43df-9e69-03bc8ac10802"
        },
        "item": {
          "id": "70821a66-bc53-44d3-9655-a93ef80faf73",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fb602209-ea62-4918-9f17-697ff5cfb70d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70821a66-bc53-44d3-9655-a93ef80faf73",
        "cursor": {
          "ref": "1cb9daed-bc76-4f58-8714-83ea6f1e2e46",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "768b2934-1ada-43df-9e69-03bc8ac10802"
        },
        "item": {
          "id": "70821a66-bc53-44d3-9655-a93ef80faf73",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fb602209-ea62-4918-9f17-697ff5cfb70d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d686ee39-bfa7-4cc8-94f6-f391ab65e3b7",
        "cursor": {
          "ref": "434fbf4d-94cf-4aff-ae33-ae2253bfee68",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3dab1ccf-e4ed-4502-80a6-d7c7c6e9abc1"
        },
        "item": {
          "id": "d686ee39-bfa7-4cc8-94f6-f391ab65e3b7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4f888075-b1ac-4807-be8c-4974991104cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d686ee39-bfa7-4cc8-94f6-f391ab65e3b7",
        "cursor": {
          "ref": "434fbf4d-94cf-4aff-ae33-ae2253bfee68",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3dab1ccf-e4ed-4502-80a6-d7c7c6e9abc1"
        },
        "item": {
          "id": "d686ee39-bfa7-4cc8-94f6-f391ab65e3b7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4f888075-b1ac-4807-be8c-4974991104cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeedbaab-7b42-4b38-88c1-05c4d423d162",
        "cursor": {
          "ref": "d877fce6-17d0-4dde-88cb-fa72f174f434",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cc2cdafb-d55e-41c4-9214-2b46b2eaeca0"
        },
        "item": {
          "id": "eeedbaab-7b42-4b38-88c1-05c4d423d162",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ba50a8b-082c-41db-90d5-92d5303e7aa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeedbaab-7b42-4b38-88c1-05c4d423d162",
        "cursor": {
          "ref": "d877fce6-17d0-4dde-88cb-fa72f174f434",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cc2cdafb-d55e-41c4-9214-2b46b2eaeca0"
        },
        "item": {
          "id": "eeedbaab-7b42-4b38-88c1-05c4d423d162",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ba50a8b-082c-41db-90d5-92d5303e7aa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc70cac-535d-4690-9df3-64c5235f349e",
        "cursor": {
          "ref": "1383faf0-e6a1-414d-b10f-5466dd850c78",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "209e707b-65bf-432c-8f43-991e1ed3371e"
        },
        "item": {
          "id": "cdc70cac-535d-4690-9df3-64c5235f349e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1fd3fa42-01d7-4f8e-8266-783883bcc1ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc70cac-535d-4690-9df3-64c5235f349e",
        "cursor": {
          "ref": "1383faf0-e6a1-414d-b10f-5466dd850c78",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "209e707b-65bf-432c-8f43-991e1ed3371e"
        },
        "item": {
          "id": "cdc70cac-535d-4690-9df3-64c5235f349e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1fd3fa42-01d7-4f8e-8266-783883bcc1ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0572a704-d325-499c-9de7-b92ca917069c",
        "cursor": {
          "ref": "2cdc436c-c22e-49fd-b5c3-554399c9b312",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f2081e95-c0d5-4a3e-ad46-4ef823e83c92"
        },
        "item": {
          "id": "0572a704-d325-499c-9de7-b92ca917069c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "69e1cb49-77c6-4535-8326-9592eaccd5ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0572a704-d325-499c-9de7-b92ca917069c",
        "cursor": {
          "ref": "2cdc436c-c22e-49fd-b5c3-554399c9b312",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f2081e95-c0d5-4a3e-ad46-4ef823e83c92"
        },
        "item": {
          "id": "0572a704-d325-499c-9de7-b92ca917069c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "69e1cb49-77c6-4535-8326-9592eaccd5ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff992d30-8721-4fde-bbc8-dfaae82d5d3a",
        "cursor": {
          "ref": "4e50366d-3dfd-4d83-9b52-235697b21ba1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ccfd52af-183e-4157-abe7-98ea3afe472d"
        },
        "item": {
          "id": "ff992d30-8721-4fde-bbc8-dfaae82d5d3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ebe081ed-c17e-4fe8-a4d5-c34b6c509e49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff992d30-8721-4fde-bbc8-dfaae82d5d3a",
        "cursor": {
          "ref": "4e50366d-3dfd-4d83-9b52-235697b21ba1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ccfd52af-183e-4157-abe7-98ea3afe472d"
        },
        "item": {
          "id": "ff992d30-8721-4fde-bbc8-dfaae82d5d3a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ebe081ed-c17e-4fe8-a4d5-c34b6c509e49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bc11ec-fc89-4562-94af-7f705a7b38a5",
        "cursor": {
          "ref": "4365909f-c1bc-4808-af5c-bb92f0abdc85",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "12947a62-539f-4e8f-ac43-158ff8697df7"
        },
        "item": {
          "id": "a7bc11ec-fc89-4562-94af-7f705a7b38a5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "84ef7b2c-860e-4dbc-9e1f-65baa03a9045",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7bc11ec-fc89-4562-94af-7f705a7b38a5",
        "cursor": {
          "ref": "4365909f-c1bc-4808-af5c-bb92f0abdc85",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "12947a62-539f-4e8f-ac43-158ff8697df7"
        },
        "item": {
          "id": "a7bc11ec-fc89-4562-94af-7f705a7b38a5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "84ef7b2c-860e-4dbc-9e1f-65baa03a9045",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602cf6d2-75a0-4645-9955-cf6873ad38a3",
        "cursor": {
          "ref": "0816687a-c839-4334-8d75-33012ab902fb",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "899eb95a-3b0a-4d2c-9c2d-dc525643ab11"
        },
        "item": {
          "id": "602cf6d2-75a0-4645-9955-cf6873ad38a3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e1299ea7-cdca-443c-8bc8-e831118ec506",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602cf6d2-75a0-4645-9955-cf6873ad38a3",
        "cursor": {
          "ref": "0816687a-c839-4334-8d75-33012ab902fb",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "899eb95a-3b0a-4d2c-9c2d-dc525643ab11"
        },
        "item": {
          "id": "602cf6d2-75a0-4645-9955-cf6873ad38a3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e1299ea7-cdca-443c-8bc8-e831118ec506",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77bb993-467a-46a9-92b5-23a84bc6bde2",
        "cursor": {
          "ref": "1d118b15-c96a-45e9-aa93-1e3724f92d4b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "38140555-5abe-428a-bbb9-6626f82806ab"
        },
        "item": {
          "id": "e77bb993-467a-46a9-92b5-23a84bc6bde2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4f53ffc5-93cc-4ebb-973c-4cc88490bef5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77bb993-467a-46a9-92b5-23a84bc6bde2",
        "cursor": {
          "ref": "1d118b15-c96a-45e9-aa93-1e3724f92d4b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "38140555-5abe-428a-bbb9-6626f82806ab"
        },
        "item": {
          "id": "e77bb993-467a-46a9-92b5-23a84bc6bde2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4f53ffc5-93cc-4ebb-973c-4cc88490bef5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7963b99-0b39-4f05-8e5c-6ffc3fc6e8ae",
        "cursor": {
          "ref": "eac5eead-d5a6-4cf1-8a11-fb6d5cf979fc",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5d034234-002e-4dd5-b81e-f349d40297c8"
        },
        "item": {
          "id": "c7963b99-0b39-4f05-8e5c-6ffc3fc6e8ae",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "095697c1-b3af-4783-8b67-c1ec2800f110",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7963b99-0b39-4f05-8e5c-6ffc3fc6e8ae",
        "cursor": {
          "ref": "eac5eead-d5a6-4cf1-8a11-fb6d5cf979fc",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5d034234-002e-4dd5-b81e-f349d40297c8"
        },
        "item": {
          "id": "c7963b99-0b39-4f05-8e5c-6ffc3fc6e8ae",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "095697c1-b3af-4783-8b67-c1ec2800f110",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c18d1e-2267-4784-bd8b-6087658fb907",
        "cursor": {
          "ref": "320a5eea-2069-479b-832b-bedb66f63280",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c0738b14-76ad-431a-bbf6-241c9744556a"
        },
        "item": {
          "id": "76c18d1e-2267-4784-bd8b-6087658fb907",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e165a69c-d628-49fa-b770-a80373a1853e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c18d1e-2267-4784-bd8b-6087658fb907",
        "cursor": {
          "ref": "320a5eea-2069-479b-832b-bedb66f63280",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c0738b14-76ad-431a-bbf6-241c9744556a"
        },
        "item": {
          "id": "76c18d1e-2267-4784-bd8b-6087658fb907",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e165a69c-d628-49fa-b770-a80373a1853e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cbb7d4-1362-4929-b0cd-7af76f850f5a",
        "cursor": {
          "ref": "d5f59be9-ba3c-465f-82ba-b9c2e1b735d5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3c5b41ce-0bfa-48fc-8a52-b08f92e9425e"
        },
        "item": {
          "id": "29cbb7d4-1362-4929-b0cd-7af76f850f5a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b54828d3-da7c-4a80-9509-a0e4db67bc00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cbb7d4-1362-4929-b0cd-7af76f850f5a",
        "cursor": {
          "ref": "d5f59be9-ba3c-465f-82ba-b9c2e1b735d5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3c5b41ce-0bfa-48fc-8a52-b08f92e9425e"
        },
        "item": {
          "id": "29cbb7d4-1362-4929-b0cd-7af76f850f5a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b54828d3-da7c-4a80-9509-a0e4db67bc00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575afb71-4c90-46ab-883d-bb932ecb6aa5",
        "cursor": {
          "ref": "a583127c-eac8-49de-84b7-da369e2ec667",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "673b8873-ee46-41c5-a2e4-adb54a02aed9"
        },
        "item": {
          "id": "575afb71-4c90-46ab-883d-bb932ecb6aa5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bb4fde30-c13e-4756-87f5-81810273a8d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575afb71-4c90-46ab-883d-bb932ecb6aa5",
        "cursor": {
          "ref": "a583127c-eac8-49de-84b7-da369e2ec667",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "673b8873-ee46-41c5-a2e4-adb54a02aed9"
        },
        "item": {
          "id": "575afb71-4c90-46ab-883d-bb932ecb6aa5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bb4fde30-c13e-4756-87f5-81810273a8d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fd94dd-ee34-4eb0-9e4b-86b6b57c5d49",
        "cursor": {
          "ref": "6581d4ff-ddce-4e27-9df3-db072c1caab4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "861f60ba-4644-456a-92dd-d1a08c4c803e"
        },
        "item": {
          "id": "87fd94dd-ee34-4eb0-9e4b-86b6b57c5d49",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9556c316-3c82-430d-bf8b-9d3f583a0d22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fd94dd-ee34-4eb0-9e4b-86b6b57c5d49",
        "cursor": {
          "ref": "6581d4ff-ddce-4e27-9df3-db072c1caab4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "861f60ba-4644-456a-92dd-d1a08c4c803e"
        },
        "item": {
          "id": "87fd94dd-ee34-4eb0-9e4b-86b6b57c5d49",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9556c316-3c82-430d-bf8b-9d3f583a0d22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b543e710-f32f-424b-a214-a65dc31c78b9",
        "cursor": {
          "ref": "2c7a7938-028a-49d3-800c-46d69754e229",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cb959070-0105-47d5-b89b-e93df26ff2e8"
        },
        "item": {
          "id": "b543e710-f32f-424b-a214-a65dc31c78b9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a04ae643-673f-4c75-9a5b-666fe0c2b318",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b543e710-f32f-424b-a214-a65dc31c78b9",
        "cursor": {
          "ref": "2c7a7938-028a-49d3-800c-46d69754e229",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cb959070-0105-47d5-b89b-e93df26ff2e8"
        },
        "item": {
          "id": "b543e710-f32f-424b-a214-a65dc31c78b9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a04ae643-673f-4c75-9a5b-666fe0c2b318",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddefb5d-320e-4cb2-9aef-ee15de055f39",
        "cursor": {
          "ref": "8e854dac-ee56-4e97-8a50-765c9f79e855",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "76aefb7b-d4dd-4e26-b2c5-63edf5c6fc02"
        },
        "item": {
          "id": "9ddefb5d-320e-4cb2-9aef-ee15de055f39",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "91ede329-8fa2-4718-ba48-fbdd40216243",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddefb5d-320e-4cb2-9aef-ee15de055f39",
        "cursor": {
          "ref": "8e854dac-ee56-4e97-8a50-765c9f79e855",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "76aefb7b-d4dd-4e26-b2c5-63edf5c6fc02"
        },
        "item": {
          "id": "9ddefb5d-320e-4cb2-9aef-ee15de055f39",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "91ede329-8fa2-4718-ba48-fbdd40216243",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5a671e-8294-4c74-af70-e50b797d95f5",
        "cursor": {
          "ref": "e53b1fd7-575d-4bf1-9960-8b2adfbe7fbe",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7c56ea02-de1b-451b-8ec0-4ad251c16f13"
        },
        "item": {
          "id": "1f5a671e-8294-4c74-af70-e50b797d95f5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b677d674-74af-4e6e-a598-18cf05b6f461",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5a671e-8294-4c74-af70-e50b797d95f5",
        "cursor": {
          "ref": "e53b1fd7-575d-4bf1-9960-8b2adfbe7fbe",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7c56ea02-de1b-451b-8ec0-4ad251c16f13"
        },
        "item": {
          "id": "1f5a671e-8294-4c74-af70-e50b797d95f5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b677d674-74af-4e6e-a598-18cf05b6f461",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf534dd-01d3-43f1-a324-d5a1a82f688b",
        "cursor": {
          "ref": "9288aaeb-850e-449f-9081-b356db56925f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c9d1825a-5b3f-45ba-beaa-20787c33c9c9"
        },
        "item": {
          "id": "daf534dd-01d3-43f1-a324-d5a1a82f688b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e21459cf-2786-4eff-a060-4d2230df050b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf534dd-01d3-43f1-a324-d5a1a82f688b",
        "cursor": {
          "ref": "9288aaeb-850e-449f-9081-b356db56925f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c9d1825a-5b3f-45ba-beaa-20787c33c9c9"
        },
        "item": {
          "id": "daf534dd-01d3-43f1-a324-d5a1a82f688b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e21459cf-2786-4eff-a060-4d2230df050b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d74a47c-88b3-4d7d-a638-6641af5a2c30",
        "cursor": {
          "ref": "c062ed0a-ca37-456c-af26-65db4b70b240",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8c62e78a-d2aa-4fce-9f67-0fc8eea7524d"
        },
        "item": {
          "id": "5d74a47c-88b3-4d7d-a638-6641af5a2c30",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "34cb1607-e3ab-4f47-9eb1-6d785e158a64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d74a47c-88b3-4d7d-a638-6641af5a2c30",
        "cursor": {
          "ref": "c062ed0a-ca37-456c-af26-65db4b70b240",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8c62e78a-d2aa-4fce-9f67-0fc8eea7524d"
        },
        "item": {
          "id": "5d74a47c-88b3-4d7d-a638-6641af5a2c30",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "34cb1607-e3ab-4f47-9eb1-6d785e158a64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276fdeb0-3034-4281-afee-c2b0b9cb1367",
        "cursor": {
          "ref": "620c067c-9fbf-4e89-ab8d-48dac129738d",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8406577b-1b96-44c7-a1fa-88d62459c6d7"
        },
        "item": {
          "id": "276fdeb0-3034-4281-afee-c2b0b9cb1367",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "314d65db-0429-4929-9041-10135e4e3696",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276fdeb0-3034-4281-afee-c2b0b9cb1367",
        "cursor": {
          "ref": "620c067c-9fbf-4e89-ab8d-48dac129738d",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8406577b-1b96-44c7-a1fa-88d62459c6d7"
        },
        "item": {
          "id": "276fdeb0-3034-4281-afee-c2b0b9cb1367",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "314d65db-0429-4929-9041-10135e4e3696",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e289e65-c39e-44f1-8e00-0d82de05f565",
        "cursor": {
          "ref": "48d1c7cf-ff16-4318-9276-11cbe6c40dc3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b5584e79-665b-4fb6-8ac3-cdd1e4d943f5"
        },
        "item": {
          "id": "0e289e65-c39e-44f1-8e00-0d82de05f565",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5bf4a4b1-791f-4c26-8b59-89c1af4bfa94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e289e65-c39e-44f1-8e00-0d82de05f565",
        "cursor": {
          "ref": "48d1c7cf-ff16-4318-9276-11cbe6c40dc3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b5584e79-665b-4fb6-8ac3-cdd1e4d943f5"
        },
        "item": {
          "id": "0e289e65-c39e-44f1-8e00-0d82de05f565",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5bf4a4b1-791f-4c26-8b59-89c1af4bfa94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26ba433-780d-4fd6-9ea0-d34d7c261904",
        "cursor": {
          "ref": "96405168-6c9c-4950-b952-5749a9789aa2",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d73ec916-6f6f-43ee-a2d0-bfaae5b1a322"
        },
        "item": {
          "id": "d26ba433-780d-4fd6-9ea0-d34d7c261904",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "355235f4-4a26-40cd-8c08-ea4b36e7fe53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26ba433-780d-4fd6-9ea0-d34d7c261904",
        "cursor": {
          "ref": "96405168-6c9c-4950-b952-5749a9789aa2",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d73ec916-6f6f-43ee-a2d0-bfaae5b1a322"
        },
        "item": {
          "id": "d26ba433-780d-4fd6-9ea0-d34d7c261904",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "355235f4-4a26-40cd-8c08-ea4b36e7fe53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f38356-f5f2-4e43-bc46-3d367527bbf7",
        "cursor": {
          "ref": "26895c9b-ea8a-470c-98c3-1c802feac74f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1868b276-6b34-43f2-828a-7e870916ece1"
        },
        "item": {
          "id": "e4f38356-f5f2-4e43-bc46-3d367527bbf7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0d531bb8-f253-474e-a57d-221a04268346",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f38356-f5f2-4e43-bc46-3d367527bbf7",
        "cursor": {
          "ref": "26895c9b-ea8a-470c-98c3-1c802feac74f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1868b276-6b34-43f2-828a-7e870916ece1"
        },
        "item": {
          "id": "e4f38356-f5f2-4e43-bc46-3d367527bbf7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0d531bb8-f253-474e-a57d-221a04268346",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b58dd0e-2787-4c13-ad9b-51df09dcc88e",
        "cursor": {
          "ref": "bd0a49da-a790-4c48-aa60-579d66e84d11",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "97d60263-d8e3-4899-8c04-f276f14ee2a8"
        },
        "item": {
          "id": "1b58dd0e-2787-4c13-ad9b-51df09dcc88e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "69c0d3a8-090b-4cd5-8b70-2b702c296a50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b58dd0e-2787-4c13-ad9b-51df09dcc88e",
        "cursor": {
          "ref": "bd0a49da-a790-4c48-aa60-579d66e84d11",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "97d60263-d8e3-4899-8c04-f276f14ee2a8"
        },
        "item": {
          "id": "1b58dd0e-2787-4c13-ad9b-51df09dcc88e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "69c0d3a8-090b-4cd5-8b70-2b702c296a50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be022a3c-750b-41e9-8d24-b2fbda673e8b",
        "cursor": {
          "ref": "78221a2a-b6a0-4c36-a619-b36ad3213c38",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4282c4cc-66cc-4905-a0b2-a5325c4b36dc"
        },
        "item": {
          "id": "be022a3c-750b-41e9-8d24-b2fbda673e8b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "84f53ce5-1756-487b-af78-84e84c595105",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be022a3c-750b-41e9-8d24-b2fbda673e8b",
        "cursor": {
          "ref": "78221a2a-b6a0-4c36-a619-b36ad3213c38",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4282c4cc-66cc-4905-a0b2-a5325c4b36dc"
        },
        "item": {
          "id": "be022a3c-750b-41e9-8d24-b2fbda673e8b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "84f53ce5-1756-487b-af78-84e84c595105",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eaf765b-d61c-43e0-898e-4aa2531eb07a",
        "cursor": {
          "ref": "f1839d4a-3464-4446-80b0-823ca0b098ff",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "70362b33-865e-4ab8-9521-f1c1fd61b273"
        },
        "item": {
          "id": "5eaf765b-d61c-43e0-898e-4aa2531eb07a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e86d15a7-68ed-43ba-9826-eade4ce069ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eaf765b-d61c-43e0-898e-4aa2531eb07a",
        "cursor": {
          "ref": "f1839d4a-3464-4446-80b0-823ca0b098ff",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "70362b33-865e-4ab8-9521-f1c1fd61b273"
        },
        "item": {
          "id": "5eaf765b-d61c-43e0-898e-4aa2531eb07a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e86d15a7-68ed-43ba-9826-eade4ce069ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cda15aa-0293-4102-ba53-fc90a22274f8",
        "cursor": {
          "ref": "33242bc4-2f6e-46fd-935a-a0d4e14e3cb4",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9e5a2a54-8aa6-42ab-b6b1-361a87daf5e1"
        },
        "item": {
          "id": "7cda15aa-0293-4102-ba53-fc90a22274f8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "42fc11c0-316a-4ee3-ab2d-b6ada0acc3f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cda15aa-0293-4102-ba53-fc90a22274f8",
        "cursor": {
          "ref": "33242bc4-2f6e-46fd-935a-a0d4e14e3cb4",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9e5a2a54-8aa6-42ab-b6b1-361a87daf5e1"
        },
        "item": {
          "id": "7cda15aa-0293-4102-ba53-fc90a22274f8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "42fc11c0-316a-4ee3-ab2d-b6ada0acc3f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4064dae4-b848-4521-9399-c318745d3841",
        "cursor": {
          "ref": "eb93899f-447a-4862-8f3f-a0b8cc7dff3d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "49e0849a-e04f-4941-bbd4-e6fce947a56a"
        },
        "item": {
          "id": "4064dae4-b848-4521-9399-c318745d3841",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c9a53bdf-1a64-4a3b-8133-28ef35848df0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4064dae4-b848-4521-9399-c318745d3841",
        "cursor": {
          "ref": "eb93899f-447a-4862-8f3f-a0b8cc7dff3d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "49e0849a-e04f-4941-bbd4-e6fce947a56a"
        },
        "item": {
          "id": "4064dae4-b848-4521-9399-c318745d3841",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c9a53bdf-1a64-4a3b-8133-28ef35848df0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb3a635-551d-427a-9e20-d6efe20c26c9",
        "cursor": {
          "ref": "35ad51e4-3af0-4327-a383-b634cc63110d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "473da3f3-5e69-4ef2-ae32-25b11b8e70a8"
        },
        "item": {
          "id": "3eb3a635-551d-427a-9e20-d6efe20c26c9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "91450eb9-5064-42ce-8912-05dd346cf57c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb3a635-551d-427a-9e20-d6efe20c26c9",
        "cursor": {
          "ref": "35ad51e4-3af0-4327-a383-b634cc63110d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "473da3f3-5e69-4ef2-ae32-25b11b8e70a8"
        },
        "item": {
          "id": "3eb3a635-551d-427a-9e20-d6efe20c26c9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "91450eb9-5064-42ce-8912-05dd346cf57c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdba769-0c99-464a-9451-bb80ff96d26c",
        "cursor": {
          "ref": "9fc50888-1abf-4d99-a095-99e228f02c62",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a3ebb8d8-3d50-4729-b280-ef266c825cbd"
        },
        "item": {
          "id": "4bdba769-0c99-464a-9451-bb80ff96d26c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1acdff20-a833-4cbb-a7d7-b03872d6d695",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdba769-0c99-464a-9451-bb80ff96d26c",
        "cursor": {
          "ref": "9fc50888-1abf-4d99-a095-99e228f02c62",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a3ebb8d8-3d50-4729-b280-ef266c825cbd"
        },
        "item": {
          "id": "4bdba769-0c99-464a-9451-bb80ff96d26c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1acdff20-a833-4cbb-a7d7-b03872d6d695",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073eb2f0-6069-4bba-961c-6e14f2021a0b",
        "cursor": {
          "ref": "6ddb02a4-9d3b-461a-8697-b953d757a284",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4a52fddc-e6f1-444f-8b2a-9bd8805c4141"
        },
        "item": {
          "id": "073eb2f0-6069-4bba-961c-6e14f2021a0b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "19979d4b-719f-42c1-ae08-183ca6b1463d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073eb2f0-6069-4bba-961c-6e14f2021a0b",
        "cursor": {
          "ref": "6ddb02a4-9d3b-461a-8697-b953d757a284",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4a52fddc-e6f1-444f-8b2a-9bd8805c4141"
        },
        "item": {
          "id": "073eb2f0-6069-4bba-961c-6e14f2021a0b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "19979d4b-719f-42c1-ae08-183ca6b1463d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2378ae-c1bb-45b3-8bfb-efc860fd2961",
        "cursor": {
          "ref": "bc3d9bb1-4b67-4baa-8e7b-cd8ce0fb7178",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f53cc38e-8bd2-40ab-ab9c-79c5ede53e55"
        },
        "item": {
          "id": "8a2378ae-c1bb-45b3-8bfb-efc860fd2961",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "db4153e5-0ef6-42e4-afdc-4d2a64cf2514",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2378ae-c1bb-45b3-8bfb-efc860fd2961",
        "cursor": {
          "ref": "bc3d9bb1-4b67-4baa-8e7b-cd8ce0fb7178",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f53cc38e-8bd2-40ab-ab9c-79c5ede53e55"
        },
        "item": {
          "id": "8a2378ae-c1bb-45b3-8bfb-efc860fd2961",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "db4153e5-0ef6-42e4-afdc-4d2a64cf2514",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8f2352-bbab-4ede-8be0-9b2d137b2712",
        "cursor": {
          "ref": "d86e51b6-4cee-4c3a-b38c-92e0bb6f42ae",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "19077f90-cfca-4ca1-9fd8-a6458ab1ee21"
        },
        "item": {
          "id": "0d8f2352-bbab-4ede-8be0-9b2d137b2712",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3fafbb7b-4193-40a8-bddb-41eb57001a38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8f2352-bbab-4ede-8be0-9b2d137b2712",
        "cursor": {
          "ref": "d86e51b6-4cee-4c3a-b38c-92e0bb6f42ae",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "19077f90-cfca-4ca1-9fd8-a6458ab1ee21"
        },
        "item": {
          "id": "0d8f2352-bbab-4ede-8be0-9b2d137b2712",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3fafbb7b-4193-40a8-bddb-41eb57001a38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6ace2e-554f-4ab2-81ab-e5542fa2dbe4",
        "cursor": {
          "ref": "2f895d7c-3e4d-4a64-954b-048456c22685",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "85d28cca-4a93-4afa-a148-702a60e5b61d"
        },
        "item": {
          "id": "fd6ace2e-554f-4ab2-81ab-e5542fa2dbe4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "09bada89-ac35-4cf6-a4b1-4682ba7bfe7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6ace2e-554f-4ab2-81ab-e5542fa2dbe4",
        "cursor": {
          "ref": "2f895d7c-3e4d-4a64-954b-048456c22685",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "85d28cca-4a93-4afa-a148-702a60e5b61d"
        },
        "item": {
          "id": "fd6ace2e-554f-4ab2-81ab-e5542fa2dbe4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "09bada89-ac35-4cf6-a4b1-4682ba7bfe7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5726a29b-5f55-4c54-bb0a-31da6fd62677",
        "cursor": {
          "ref": "652eebe1-ecf9-4a33-b18e-375c88099550",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f31ae79f-cda5-4ebe-99b4-bd82db1cb96b"
        },
        "item": {
          "id": "5726a29b-5f55-4c54-bb0a-31da6fd62677",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ae880571-8040-4583-a268-972f52efe49d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5726a29b-5f55-4c54-bb0a-31da6fd62677",
        "cursor": {
          "ref": "652eebe1-ecf9-4a33-b18e-375c88099550",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f31ae79f-cda5-4ebe-99b4-bd82db1cb96b"
        },
        "item": {
          "id": "5726a29b-5f55-4c54-bb0a-31da6fd62677",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ae880571-8040-4583-a268-972f52efe49d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573216ee-3a29-4fb9-af43-8c204e431466",
        "cursor": {
          "ref": "33fd03a5-52b1-4c93-af4e-c83db3678fef",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bf668dc7-69a7-4884-85d5-42cb6955ab0f"
        },
        "item": {
          "id": "573216ee-3a29-4fb9-af43-8c204e431466",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f0dad96d-81a4-4aec-8ee7-c5b8e881dc79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573216ee-3a29-4fb9-af43-8c204e431466",
        "cursor": {
          "ref": "33fd03a5-52b1-4c93-af4e-c83db3678fef",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bf668dc7-69a7-4884-85d5-42cb6955ab0f"
        },
        "item": {
          "id": "573216ee-3a29-4fb9-af43-8c204e431466",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f0dad96d-81a4-4aec-8ee7-c5b8e881dc79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2140ee13-444b-4c20-b4db-eccb7c219a65",
        "cursor": {
          "ref": "f1fff226-6fee-4c90-a15b-375d20fc64ca",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d2b51298-b243-4bd2-a89f-c4553d9e257b"
        },
        "item": {
          "id": "2140ee13-444b-4c20-b4db-eccb7c219a65",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cd3ce410-3f85-49c7-92bd-508fd5172d45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2140ee13-444b-4c20-b4db-eccb7c219a65",
        "cursor": {
          "ref": "f1fff226-6fee-4c90-a15b-375d20fc64ca",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d2b51298-b243-4bd2-a89f-c4553d9e257b"
        },
        "item": {
          "id": "2140ee13-444b-4c20-b4db-eccb7c219a65",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cd3ce410-3f85-49c7-92bd-508fd5172d45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d7d071-b870-43db-9141-4f2405cbc162",
        "cursor": {
          "ref": "2442e118-d04d-45d3-a421-61c3f22bfd39",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7017055b-2bc9-41f9-87cf-1f92922da9e3"
        },
        "item": {
          "id": "52d7d071-b870-43db-9141-4f2405cbc162",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f659ff3d-a438-4bd6-a8b8-a9c7dbe97471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d7d071-b870-43db-9141-4f2405cbc162",
        "cursor": {
          "ref": "2442e118-d04d-45d3-a421-61c3f22bfd39",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7017055b-2bc9-41f9-87cf-1f92922da9e3"
        },
        "item": {
          "id": "52d7d071-b870-43db-9141-4f2405cbc162",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f659ff3d-a438-4bd6-a8b8-a9c7dbe97471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7936bdef-cbf9-4e49-b25e-5c64f080845c",
        "cursor": {
          "ref": "ea78d74e-b512-4501-b0ba-9720ac112931",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e16c94c1-2e75-4fc6-ab59-43a149ca2838"
        },
        "item": {
          "id": "7936bdef-cbf9-4e49-b25e-5c64f080845c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "95b13900-40ee-4beb-8d36-cf0343e0958e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7936bdef-cbf9-4e49-b25e-5c64f080845c",
        "cursor": {
          "ref": "ea78d74e-b512-4501-b0ba-9720ac112931",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e16c94c1-2e75-4fc6-ab59-43a149ca2838"
        },
        "item": {
          "id": "7936bdef-cbf9-4e49-b25e-5c64f080845c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "95b13900-40ee-4beb-8d36-cf0343e0958e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "733b1cfe-b894-45f0-9c05-eb53a0913d9c",
        "cursor": {
          "ref": "c5d77716-e1d8-4e41-ab98-64afebfa8d9e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f648d512-8d2f-48bf-a260-14f863d26e58"
        },
        "item": {
          "id": "733b1cfe-b894-45f0-9c05-eb53a0913d9c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d816a898-ff83-4626-a7ba-6222e4738cee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "733b1cfe-b894-45f0-9c05-eb53a0913d9c",
        "cursor": {
          "ref": "c5d77716-e1d8-4e41-ab98-64afebfa8d9e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f648d512-8d2f-48bf-a260-14f863d26e58"
        },
        "item": {
          "id": "733b1cfe-b894-45f0-9c05-eb53a0913d9c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d816a898-ff83-4626-a7ba-6222e4738cee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "650325bd-77a4-4a5f-86cf-14625e793b3e",
        "cursor": {
          "ref": "ab5da91a-a337-4194-927d-64a81cdd3532",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3104c095-f13d-4c09-97b5-743063f30660"
        },
        "item": {
          "id": "650325bd-77a4-4a5f-86cf-14625e793b3e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7832dca9-06bc-441b-a02c-1a88f585086a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "650325bd-77a4-4a5f-86cf-14625e793b3e",
        "cursor": {
          "ref": "ab5da91a-a337-4194-927d-64a81cdd3532",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3104c095-f13d-4c09-97b5-743063f30660"
        },
        "item": {
          "id": "650325bd-77a4-4a5f-86cf-14625e793b3e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7832dca9-06bc-441b-a02c-1a88f585086a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "fa11bef9-b506-4580-b5e6-5103f3896f48",
        "cursor": {
          "ref": "6cf1941f-7beb-4c20-96a3-1c1b140c56b1",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4a9f49fd-8270-4e18-b2f4-c326f13828b0"
        },
        "item": {
          "id": "fa11bef9-b506-4580-b5e6-5103f3896f48",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5a9b0f68-bac7-46e7-a254-acabaac10529",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "fa11bef9-b506-4580-b5e6-5103f3896f48",
        "cursor": {
          "ref": "6cf1941f-7beb-4c20-96a3-1c1b140c56b1",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4a9f49fd-8270-4e18-b2f4-c326f13828b0"
        },
        "item": {
          "id": "fa11bef9-b506-4580-b5e6-5103f3896f48",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5a9b0f68-bac7-46e7-a254-acabaac10529",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "5785ec8b-bf83-4c70-8519-3e188867b1cd",
        "cursor": {
          "ref": "fef1021f-e3c7-4f24-9ec9-b08e9a76ad3d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7c8ae402-a30a-4ce4-9a0f-43970ab0eebd"
        },
        "item": {
          "id": "5785ec8b-bf83-4c70-8519-3e188867b1cd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "08635cfa-3b2c-4963-9d8b-5a9802419f4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "5785ec8b-bf83-4c70-8519-3e188867b1cd",
        "cursor": {
          "ref": "fef1021f-e3c7-4f24-9ec9-b08e9a76ad3d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7c8ae402-a30a-4ce4-9a0f-43970ab0eebd"
        },
        "item": {
          "id": "5785ec8b-bf83-4c70-8519-3e188867b1cd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "08635cfa-3b2c-4963-9d8b-5a9802419f4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "55e13bb9-a55e-43d9-804a-29b6698f0625",
        "cursor": {
          "ref": "5dc4cb39-dc29-430c-895d-b75d6182f626",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "056fb6ca-999c-47d9-98db-6b644c175251"
        },
        "item": {
          "id": "55e13bb9-a55e-43d9-804a-29b6698f0625",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f22770f5-ad93-4b38-bb99-c5bd0e389594",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "55e13bb9-a55e-43d9-804a-29b6698f0625",
        "cursor": {
          "ref": "5dc4cb39-dc29-430c-895d-b75d6182f626",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "056fb6ca-999c-47d9-98db-6b644c175251"
        },
        "item": {
          "id": "55e13bb9-a55e-43d9-804a-29b6698f0625",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f22770f5-ad93-4b38-bb99-c5bd0e389594",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "bccc8472-801e-4b9c-bac5-f1fba86c3819",
        "cursor": {
          "ref": "5089c5fa-30b1-4710-a263-457e30fa39ab",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2582a57b-f5f4-46fa-aeb8-d0e896bdf30b"
        },
        "item": {
          "id": "bccc8472-801e-4b9c-bac5-f1fba86c3819",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b0ca9823-7ef8-4d78-9aaf-9758beff247f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "bccc8472-801e-4b9c-bac5-f1fba86c3819",
        "cursor": {
          "ref": "5089c5fa-30b1-4710-a263-457e30fa39ab",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2582a57b-f5f4-46fa-aeb8-d0e896bdf30b"
        },
        "item": {
          "id": "bccc8472-801e-4b9c-bac5-f1fba86c3819",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b0ca9823-7ef8-4d78-9aaf-9758beff247f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "e817a3b3-57a3-46c6-9bcd-a83883b1c1e1",
        "cursor": {
          "ref": "2444982e-5b1f-47c4-91a8-2d1193447412",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fae48d63-7f3a-4ccb-a4f6-18b6960156e2"
        },
        "item": {
          "id": "e817a3b3-57a3-46c6-9bcd-a83883b1c1e1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b51ce7eb-40e5-4e5f-93f1-e23a126faafd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e817a3b3-57a3-46c6-9bcd-a83883b1c1e1",
        "cursor": {
          "ref": "2444982e-5b1f-47c4-91a8-2d1193447412",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fae48d63-7f3a-4ccb-a4f6-18b6960156e2"
        },
        "item": {
          "id": "e817a3b3-57a3-46c6-9bcd-a83883b1c1e1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b51ce7eb-40e5-4e5f-93f1-e23a126faafd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce0fadf-6e4d-43b7-8256-9bd825296568",
        "cursor": {
          "ref": "43971b3f-7fdc-483f-8711-39c7e9b3a6f9",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a5681f58-b1b1-474d-9792-3b01bf2fcc16"
        },
        "item": {
          "id": "7ce0fadf-6e4d-43b7-8256-9bd825296568",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2e949148-044f-45b3-bdb3-f84983f32db8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce0fadf-6e4d-43b7-8256-9bd825296568",
        "cursor": {
          "ref": "43971b3f-7fdc-483f-8711-39c7e9b3a6f9",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a5681f58-b1b1-474d-9792-3b01bf2fcc16"
        },
        "item": {
          "id": "7ce0fadf-6e4d-43b7-8256-9bd825296568",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2e949148-044f-45b3-bdb3-f84983f32db8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c881ef96-898d-4441-b499-896c98994f82",
        "cursor": {
          "ref": "1455032d-b58a-4e14-ad1c-a77e1fbf4197",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "27fd3b79-3c33-40b0-8bc0-308f01d76e64"
        },
        "item": {
          "id": "c881ef96-898d-4441-b499-896c98994f82",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "70f56926-743f-4430-b531-0deedc1274d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c881ef96-898d-4441-b499-896c98994f82",
        "cursor": {
          "ref": "1455032d-b58a-4e14-ad1c-a77e1fbf4197",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "27fd3b79-3c33-40b0-8bc0-308f01d76e64"
        },
        "item": {
          "id": "c881ef96-898d-4441-b499-896c98994f82",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "70f56926-743f-4430-b531-0deedc1274d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c51ca7-250c-4e03-b6b5-4437288f8bed",
        "cursor": {
          "ref": "f96a93dd-7df2-46f0-b62a-9e6eaf8704d9",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "49fd9594-706c-479d-96c1-85c3c393980f"
        },
        "item": {
          "id": "d9c51ca7-250c-4e03-b6b5-4437288f8bed",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e96fce7-5631-4d49-9efd-2eb03924e6e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c51ca7-250c-4e03-b6b5-4437288f8bed",
        "cursor": {
          "ref": "f96a93dd-7df2-46f0-b62a-9e6eaf8704d9",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "49fd9594-706c-479d-96c1-85c3c393980f"
        },
        "item": {
          "id": "d9c51ca7-250c-4e03-b6b5-4437288f8bed",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9e96fce7-5631-4d49-9efd-2eb03924e6e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795ff2d5-e868-4c04-b429-1b98279d2542",
        "cursor": {
          "ref": "6bed9b80-89e3-493d-8103-75b73a51016a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2f6926a8-bd82-4828-bc20-22d84c33def3"
        },
        "item": {
          "id": "795ff2d5-e868-4c04-b429-1b98279d2542",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6eb684e8-3872-41e8-928a-0bf33e4a886a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795ff2d5-e868-4c04-b429-1b98279d2542",
        "cursor": {
          "ref": "6bed9b80-89e3-493d-8103-75b73a51016a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2f6926a8-bd82-4828-bc20-22d84c33def3"
        },
        "item": {
          "id": "795ff2d5-e868-4c04-b429-1b98279d2542",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6eb684e8-3872-41e8-928a-0bf33e4a886a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6069af72-c437-4a9a-88b5-135151449997",
        "cursor": {
          "ref": "f7a083ac-b48f-4a47-8962-9b8f5cb688ae",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6ef5e051-ae93-4f54-9a10-bcd3437c3b03"
        },
        "item": {
          "id": "6069af72-c437-4a9a-88b5-135151449997",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "06e0f229-9de6-4c31-9a94-9c7d63a1230d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6069af72-c437-4a9a-88b5-135151449997",
        "cursor": {
          "ref": "f7a083ac-b48f-4a47-8962-9b8f5cb688ae",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6ef5e051-ae93-4f54-9a10-bcd3437c3b03"
        },
        "item": {
          "id": "6069af72-c437-4a9a-88b5-135151449997",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "06e0f229-9de6-4c31-9a94-9c7d63a1230d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b2bd4b-9597-48d0-b3b1-464e5c87c678",
        "cursor": {
          "ref": "3217db27-b9bd-46a3-94b1-013c9f45b45c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d8f69e12-4d68-4e60-8d35-79dd16aac41e"
        },
        "item": {
          "id": "99b2bd4b-9597-48d0-b3b1-464e5c87c678",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c2245607-959f-4850-85c5-b3df311320cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b2bd4b-9597-48d0-b3b1-464e5c87c678",
        "cursor": {
          "ref": "3217db27-b9bd-46a3-94b1-013c9f45b45c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d8f69e12-4d68-4e60-8d35-79dd16aac41e"
        },
        "item": {
          "id": "99b2bd4b-9597-48d0-b3b1-464e5c87c678",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c2245607-959f-4850-85c5-b3df311320cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0f1d8f-9dcd-4e28-93b7-7e51a583da51",
        "cursor": {
          "ref": "9710f042-08ac-420a-a136-c85ba4f40cbc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c2d9d2e5-8ea9-46ef-a670-2f11b65350e8"
        },
        "item": {
          "id": "9c0f1d8f-9dcd-4e28-93b7-7e51a583da51",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bc472d2b-4db2-46c8-91e7-0ff96b5acf49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0f1d8f-9dcd-4e28-93b7-7e51a583da51",
        "cursor": {
          "ref": "9710f042-08ac-420a-a136-c85ba4f40cbc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c2d9d2e5-8ea9-46ef-a670-2f11b65350e8"
        },
        "item": {
          "id": "9c0f1d8f-9dcd-4e28-93b7-7e51a583da51",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bc472d2b-4db2-46c8-91e7-0ff96b5acf49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d4bf8b-8c6a-45c4-9aeb-15d6ea062fb5",
        "cursor": {
          "ref": "9263837e-0400-4372-87bb-80b254481dfe",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ad429de6-9f34-4700-9779-262459a60039"
        },
        "item": {
          "id": "e9d4bf8b-8c6a-45c4-9aeb-15d6ea062fb5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eae10767-58b4-471c-ae5d-9bfd8695a164",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d4bf8b-8c6a-45c4-9aeb-15d6ea062fb5",
        "cursor": {
          "ref": "9263837e-0400-4372-87bb-80b254481dfe",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ad429de6-9f34-4700-9779-262459a60039"
        },
        "item": {
          "id": "e9d4bf8b-8c6a-45c4-9aeb-15d6ea062fb5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eae10767-58b4-471c-ae5d-9bfd8695a164",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335ee76f-32f5-4c95-827b-122ade2706b7",
        "cursor": {
          "ref": "1fbc58e5-a48d-43e4-8423-0dd71ff96068",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "72e2699b-5b3f-4b26-8426-c3b5fd5a8e91"
        },
        "item": {
          "id": "335ee76f-32f5-4c95-827b-122ade2706b7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "43a14e58-badf-455d-ab7c-f753941f4e84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335ee76f-32f5-4c95-827b-122ade2706b7",
        "cursor": {
          "ref": "1fbc58e5-a48d-43e4-8423-0dd71ff96068",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "72e2699b-5b3f-4b26-8426-c3b5fd5a8e91"
        },
        "item": {
          "id": "335ee76f-32f5-4c95-827b-122ade2706b7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "43a14e58-badf-455d-ab7c-f753941f4e84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f4ac1a-c2bc-42f1-955f-30e19adae4e3",
        "cursor": {
          "ref": "2c46e713-d54a-4198-b299-034ce40d1e47",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1618f1f6-e320-4e26-8a36-070d287efe2f"
        },
        "item": {
          "id": "d7f4ac1a-c2bc-42f1-955f-30e19adae4e3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d69c796b-3760-444f-982a-fba602432c1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f4ac1a-c2bc-42f1-955f-30e19adae4e3",
        "cursor": {
          "ref": "2c46e713-d54a-4198-b299-034ce40d1e47",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1618f1f6-e320-4e26-8a36-070d287efe2f"
        },
        "item": {
          "id": "d7f4ac1a-c2bc-42f1-955f-30e19adae4e3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d69c796b-3760-444f-982a-fba602432c1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f090e79e-d895-4063-8fb0-7df7f2567e80",
        "cursor": {
          "ref": "761bd8dc-cefe-4709-acb1-9b7b58801f9a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a1a7ddd4-5866-43b8-aed3-688329e7d2d9"
        },
        "item": {
          "id": "f090e79e-d895-4063-8fb0-7df7f2567e80",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "92378126-e9cf-4ab2-aa79-74c26891d70a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f090e79e-d895-4063-8fb0-7df7f2567e80",
        "cursor": {
          "ref": "761bd8dc-cefe-4709-acb1-9b7b58801f9a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a1a7ddd4-5866-43b8-aed3-688329e7d2d9"
        },
        "item": {
          "id": "f090e79e-d895-4063-8fb0-7df7f2567e80",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "92378126-e9cf-4ab2-aa79-74c26891d70a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504b45a8-6c97-42a5-a739-d20aff1f06da",
        "cursor": {
          "ref": "0eebbb1b-f55a-4bbe-9e75-8b1782cf9dac",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9e9a712f-9727-4515-afaf-e2dfb621df32"
        },
        "item": {
          "id": "504b45a8-6c97-42a5-a739-d20aff1f06da",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eddaece7-610f-414e-bc68-8053d036200a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504b45a8-6c97-42a5-a739-d20aff1f06da",
        "cursor": {
          "ref": "0eebbb1b-f55a-4bbe-9e75-8b1782cf9dac",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9e9a712f-9727-4515-afaf-e2dfb621df32"
        },
        "item": {
          "id": "504b45a8-6c97-42a5-a739-d20aff1f06da",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eddaece7-610f-414e-bc68-8053d036200a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b785f137-18a7-4902-95e3-1060241e41a4",
        "cursor": {
          "ref": "ba5e52c4-68ac-4e3f-940b-1a8c7f218d47",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "06745ce6-3c15-4563-be99-e91d0e04d004"
        },
        "item": {
          "id": "b785f137-18a7-4902-95e3-1060241e41a4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f740e38b-623b-4b31-9bed-714e3c69475e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b785f137-18a7-4902-95e3-1060241e41a4",
        "cursor": {
          "ref": "ba5e52c4-68ac-4e3f-940b-1a8c7f218d47",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "06745ce6-3c15-4563-be99-e91d0e04d004"
        },
        "item": {
          "id": "b785f137-18a7-4902-95e3-1060241e41a4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f740e38b-623b-4b31-9bed-714e3c69475e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54e176c-8c1c-4bf1-900e-76ecd725b8e1",
        "cursor": {
          "ref": "5d2c4017-4188-4d03-8297-cbfd1ba389f5",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f7c66980-53b9-4702-b2af-ab221cdf292d"
        },
        "item": {
          "id": "e54e176c-8c1c-4bf1-900e-76ecd725b8e1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "edfa1f4c-4f9f-4a1a-9a79-05f6e7e57df9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54e176c-8c1c-4bf1-900e-76ecd725b8e1",
        "cursor": {
          "ref": "5d2c4017-4188-4d03-8297-cbfd1ba389f5",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f7c66980-53b9-4702-b2af-ab221cdf292d"
        },
        "item": {
          "id": "e54e176c-8c1c-4bf1-900e-76ecd725b8e1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "edfa1f4c-4f9f-4a1a-9a79-05f6e7e57df9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2b2c7a-10d8-4ad5-bdcd-2ac0da38c225",
        "cursor": {
          "ref": "3e023f31-a687-4476-9ec1-dd821c819148",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7c80d5fc-0223-4517-98de-f2a72e472fa8"
        },
        "item": {
          "id": "ea2b2c7a-10d8-4ad5-bdcd-2ac0da38c225",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aae414d5-a9a7-485a-a792-ef0cf9441846",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2b2c7a-10d8-4ad5-bdcd-2ac0da38c225",
        "cursor": {
          "ref": "3e023f31-a687-4476-9ec1-dd821c819148",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7c80d5fc-0223-4517-98de-f2a72e472fa8"
        },
        "item": {
          "id": "ea2b2c7a-10d8-4ad5-bdcd-2ac0da38c225",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aae414d5-a9a7-485a-a792-ef0cf9441846",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e19f186-d58a-4fe4-b9d6-6f961a7d1916",
        "cursor": {
          "ref": "862c4a53-2ddb-434f-aba9-4bf8a2d382ad",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f967ea56-ceb7-45db-b921-21ad4df65840"
        },
        "item": {
          "id": "1e19f186-d58a-4fe4-b9d6-6f961a7d1916",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "61af3cc0-c0df-4347-80a1-ceb5f39f01d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e19f186-d58a-4fe4-b9d6-6f961a7d1916",
        "cursor": {
          "ref": "862c4a53-2ddb-434f-aba9-4bf8a2d382ad",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f967ea56-ceb7-45db-b921-21ad4df65840"
        },
        "item": {
          "id": "1e19f186-d58a-4fe4-b9d6-6f961a7d1916",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "61af3cc0-c0df-4347-80a1-ceb5f39f01d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc32d9f7-0a68-4168-bbb7-e084de272586",
        "cursor": {
          "ref": "8fdfea7b-7cdf-49d3-a9bf-5b4929ca1831",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6ed2f5df-5a87-4721-8283-17a14c470819"
        },
        "item": {
          "id": "dc32d9f7-0a68-4168-bbb7-e084de272586",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b004435e-c108-487b-854b-70d7a44c1866",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc32d9f7-0a68-4168-bbb7-e084de272586",
        "cursor": {
          "ref": "8fdfea7b-7cdf-49d3-a9bf-5b4929ca1831",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6ed2f5df-5a87-4721-8283-17a14c470819"
        },
        "item": {
          "id": "dc32d9f7-0a68-4168-bbb7-e084de272586",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b004435e-c108-487b-854b-70d7a44c1866",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb8d9b9-8cd3-433a-b708-b327987a2cbb",
        "cursor": {
          "ref": "e0bfc82f-1abf-4e61-b401-bb2512743629",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e8e1596b-5210-48ed-b832-63e38e305806"
        },
        "item": {
          "id": "dbb8d9b9-8cd3-433a-b708-b327987a2cbb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04a6807d-d0be-45c5-8edd-beaf65503635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb8d9b9-8cd3-433a-b708-b327987a2cbb",
        "cursor": {
          "ref": "e0bfc82f-1abf-4e61-b401-bb2512743629",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e8e1596b-5210-48ed-b832-63e38e305806"
        },
        "item": {
          "id": "dbb8d9b9-8cd3-433a-b708-b327987a2cbb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04a6807d-d0be-45c5-8edd-beaf65503635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d13abc-f94d-4d35-a0c5-636e2a358df4",
        "cursor": {
          "ref": "0235ca48-acd1-4d09-ab51-80b844efa02e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d056da25-9a08-4348-8c2f-e7db079a4b51"
        },
        "item": {
          "id": "09d13abc-f94d-4d35-a0c5-636e2a358df4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "02424e61-d222-4048-ae25-c0999067eaeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d13abc-f94d-4d35-a0c5-636e2a358df4",
        "cursor": {
          "ref": "0235ca48-acd1-4d09-ab51-80b844efa02e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d056da25-9a08-4348-8c2f-e7db079a4b51"
        },
        "item": {
          "id": "09d13abc-f94d-4d35-a0c5-636e2a358df4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "02424e61-d222-4048-ae25-c0999067eaeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bf7826-8825-4fb3-a8ca-09a20e2ebd92",
        "cursor": {
          "ref": "28288d01-a610-475a-8687-67f6b4246c3c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b9badf15-281a-4bfe-b57d-5b4377fad9b8"
        },
        "item": {
          "id": "29bf7826-8825-4fb3-a8ca-09a20e2ebd92",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "af28d61c-d3d7-430e-be9e-bcb65f6aa07e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bf7826-8825-4fb3-a8ca-09a20e2ebd92",
        "cursor": {
          "ref": "28288d01-a610-475a-8687-67f6b4246c3c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b9badf15-281a-4bfe-b57d-5b4377fad9b8"
        },
        "item": {
          "id": "29bf7826-8825-4fb3-a8ca-09a20e2ebd92",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "af28d61c-d3d7-430e-be9e-bcb65f6aa07e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86b81c3-b600-43d2-9f1e-7dbee7bfb92b",
        "cursor": {
          "ref": "dae93968-dfe8-44ac-9263-960892696033",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4ebdd790-ebb7-4098-93ba-8658d516c270"
        },
        "item": {
          "id": "c86b81c3-b600-43d2-9f1e-7dbee7bfb92b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "26b716b0-fff6-4a82-be83-8d07c919fbb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86b81c3-b600-43d2-9f1e-7dbee7bfb92b",
        "cursor": {
          "ref": "dae93968-dfe8-44ac-9263-960892696033",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4ebdd790-ebb7-4098-93ba-8658d516c270"
        },
        "item": {
          "id": "c86b81c3-b600-43d2-9f1e-7dbee7bfb92b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "26b716b0-fff6-4a82-be83-8d07c919fbb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f85057d-0277-4acd-84ff-2e069488b10c",
        "cursor": {
          "ref": "1e14fee6-7a85-44a1-bab9-1b862e370e25",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bcd12a52-8138-43cc-aa9a-3b1c72489e4a"
        },
        "item": {
          "id": "8f85057d-0277-4acd-84ff-2e069488b10c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e6a5f8d0-e5a4-4670-8a2c-57ca2505d188",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f85057d-0277-4acd-84ff-2e069488b10c",
        "cursor": {
          "ref": "1e14fee6-7a85-44a1-bab9-1b862e370e25",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bcd12a52-8138-43cc-aa9a-3b1c72489e4a"
        },
        "item": {
          "id": "8f85057d-0277-4acd-84ff-2e069488b10c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e6a5f8d0-e5a4-4670-8a2c-57ca2505d188",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b362d978-ad00-4e43-82d5-b050e252a745",
        "cursor": {
          "ref": "d30c2d0a-3e12-4fd7-a090-80e3ee54f1f4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "040a2984-e09b-4499-9691-5a8655feb608"
        },
        "item": {
          "id": "b362d978-ad00-4e43-82d5-b050e252a745",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ab13df4b-d934-4881-8302-693350581934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b362d978-ad00-4e43-82d5-b050e252a745",
        "cursor": {
          "ref": "d30c2d0a-3e12-4fd7-a090-80e3ee54f1f4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "040a2984-e09b-4499-9691-5a8655feb608"
        },
        "item": {
          "id": "b362d978-ad00-4e43-82d5-b050e252a745",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ab13df4b-d934-4881-8302-693350581934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70dfa1de-8dfd-44b8-8c1e-7aa2d14637cb",
        "cursor": {
          "ref": "6c38f961-7c5a-4a3d-be7b-20ce4b52674d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5512ddcc-534c-4307-9931-df4db06bdf21"
        },
        "item": {
          "id": "70dfa1de-8dfd-44b8-8c1e-7aa2d14637cb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "58905729-61d6-458b-8941-346ed22994b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70dfa1de-8dfd-44b8-8c1e-7aa2d14637cb",
        "cursor": {
          "ref": "6c38f961-7c5a-4a3d-be7b-20ce4b52674d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5512ddcc-534c-4307-9931-df4db06bdf21"
        },
        "item": {
          "id": "70dfa1de-8dfd-44b8-8c1e-7aa2d14637cb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "58905729-61d6-458b-8941-346ed22994b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63741ed9-db79-4ee3-b6ae-a5865e73f4df",
        "cursor": {
          "ref": "b7b4c7f8-ec34-4887-8b15-4cce99663f00",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "63528c86-e3a7-41e6-abe6-b810e9f85a3d"
        },
        "item": {
          "id": "63741ed9-db79-4ee3-b6ae-a5865e73f4df",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b9dd390d-b9f3-4d42-8417-885d390e345a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63741ed9-db79-4ee3-b6ae-a5865e73f4df",
        "cursor": {
          "ref": "b7b4c7f8-ec34-4887-8b15-4cce99663f00",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "63528c86-e3a7-41e6-abe6-b810e9f85a3d"
        },
        "item": {
          "id": "63741ed9-db79-4ee3-b6ae-a5865e73f4df",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b9dd390d-b9f3-4d42-8417-885d390e345a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cb331f-5c8b-47b8-a34d-7b39ebc5c0e0",
        "cursor": {
          "ref": "e87c10d9-3cb7-4479-9ab2-e2a5ff2e1532",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3478112a-5a2e-46b8-beb8-6607b83bffa4"
        },
        "item": {
          "id": "d9cb331f-5c8b-47b8-a34d-7b39ebc5c0e0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "46e9825d-ab32-42a3-8362-7e86d877c901",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cb331f-5c8b-47b8-a34d-7b39ebc5c0e0",
        "cursor": {
          "ref": "e87c10d9-3cb7-4479-9ab2-e2a5ff2e1532",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3478112a-5a2e-46b8-beb8-6607b83bffa4"
        },
        "item": {
          "id": "d9cb331f-5c8b-47b8-a34d-7b39ebc5c0e0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "46e9825d-ab32-42a3-8362-7e86d877c901",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf75cf3e-9980-464c-bbb1-dc79d8cedc6a",
        "cursor": {
          "ref": "99173f4b-cdad-4c3a-ac11-343d17db8947",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4e08b0ab-bf7b-49d1-b6bd-c8fd7de02050"
        },
        "item": {
          "id": "cf75cf3e-9980-464c-bbb1-dc79d8cedc6a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3a3c44e3-15b5-4649-938d-a3cc9a30f465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf75cf3e-9980-464c-bbb1-dc79d8cedc6a",
        "cursor": {
          "ref": "99173f4b-cdad-4c3a-ac11-343d17db8947",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4e08b0ab-bf7b-49d1-b6bd-c8fd7de02050"
        },
        "item": {
          "id": "cf75cf3e-9980-464c-bbb1-dc79d8cedc6a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3a3c44e3-15b5-4649-938d-a3cc9a30f465",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc4560f-390b-4be5-937a-7877a8573c39",
        "cursor": {
          "ref": "53adac8a-96f9-4ceb-87b2-51caeec8f084",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "db14f451-588b-49e9-a9f9-2bf5bb1fb2e8"
        },
        "item": {
          "id": "ebc4560f-390b-4be5-937a-7877a8573c39",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "175dd0ed-dd52-4f0e-a1bf-73f3047550fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc4560f-390b-4be5-937a-7877a8573c39",
        "cursor": {
          "ref": "53adac8a-96f9-4ceb-87b2-51caeec8f084",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "db14f451-588b-49e9-a9f9-2bf5bb1fb2e8"
        },
        "item": {
          "id": "ebc4560f-390b-4be5-937a-7877a8573c39",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "175dd0ed-dd52-4f0e-a1bf-73f3047550fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc9a34b-9d47-4b6f-870a-06069d8449c6",
        "cursor": {
          "ref": "e52210c5-4483-4b0a-958c-b933f701dd64",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9266a8f5-d0af-4239-90ee-4d44ad917a91"
        },
        "item": {
          "id": "cdc9a34b-9d47-4b6f-870a-06069d8449c6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bf4341a9-5d6a-49e8-afa9-373709d9d81e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc9a34b-9d47-4b6f-870a-06069d8449c6",
        "cursor": {
          "ref": "e52210c5-4483-4b0a-958c-b933f701dd64",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9266a8f5-d0af-4239-90ee-4d44ad917a91"
        },
        "item": {
          "id": "cdc9a34b-9d47-4b6f-870a-06069d8449c6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bf4341a9-5d6a-49e8-afa9-373709d9d81e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e88935-602b-4681-bb98-ac7d4f330e87",
        "cursor": {
          "ref": "1b51ae19-2bc7-4680-870d-a7cfc19bb4e4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "18f128b2-8742-478d-bfb0-d5afd71acafe"
        },
        "item": {
          "id": "a8e88935-602b-4681-bb98-ac7d4f330e87",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8b186603-b223-4b2b-9e37-8739e42f733d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e88935-602b-4681-bb98-ac7d4f330e87",
        "cursor": {
          "ref": "1b51ae19-2bc7-4680-870d-a7cfc19bb4e4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "18f128b2-8742-478d-bfb0-d5afd71acafe"
        },
        "item": {
          "id": "a8e88935-602b-4681-bb98-ac7d4f330e87",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8b186603-b223-4b2b-9e37-8739e42f733d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f98e07b-6798-4c97-bc4f-2be5611ed498",
        "cursor": {
          "ref": "3a11def9-649a-41e0-a2fe-7f03a9c7a298",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "82571757-38b0-4d72-b526-e572aa8ddb62"
        },
        "item": {
          "id": "3f98e07b-6798-4c97-bc4f-2be5611ed498",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e7d4a933-b953-4ff3-9ac7-e25909c32458",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f98e07b-6798-4c97-bc4f-2be5611ed498",
        "cursor": {
          "ref": "3a11def9-649a-41e0-a2fe-7f03a9c7a298",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "82571757-38b0-4d72-b526-e572aa8ddb62"
        },
        "item": {
          "id": "3f98e07b-6798-4c97-bc4f-2be5611ed498",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e7d4a933-b953-4ff3-9ac7-e25909c32458",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a4915f-97c3-4c3f-87f7-71cd2cef6cd5",
        "cursor": {
          "ref": "724c9487-e23d-4d1d-a40c-dbe2929a15d0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "11644310-8407-4838-92d2-e322070809ef"
        },
        "item": {
          "id": "05a4915f-97c3-4c3f-87f7-71cd2cef6cd5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e599e650-6a1b-4946-b2ec-aa7315a229a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a4915f-97c3-4c3f-87f7-71cd2cef6cd5",
        "cursor": {
          "ref": "724c9487-e23d-4d1d-a40c-dbe2929a15d0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "11644310-8407-4838-92d2-e322070809ef"
        },
        "item": {
          "id": "05a4915f-97c3-4c3f-87f7-71cd2cef6cd5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e599e650-6a1b-4946-b2ec-aa7315a229a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfa3a73-09bf-4f7f-8ea5-88cad101a499",
        "cursor": {
          "ref": "202bdf9a-ecfd-4b53-afa8-4cdd8cb323a4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b763e5e9-1fe8-4a9f-8891-54a43b9497fe"
        },
        "item": {
          "id": "4dfa3a73-09bf-4f7f-8ea5-88cad101a499",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "46c95032-be9a-409a-b1ef-11b0275b3188",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfa3a73-09bf-4f7f-8ea5-88cad101a499",
        "cursor": {
          "ref": "202bdf9a-ecfd-4b53-afa8-4cdd8cb323a4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b763e5e9-1fe8-4a9f-8891-54a43b9497fe"
        },
        "item": {
          "id": "4dfa3a73-09bf-4f7f-8ea5-88cad101a499",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "46c95032-be9a-409a-b1ef-11b0275b3188",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a0dc98-0591-41ae-9823-5dec499ee386",
        "cursor": {
          "ref": "f8148e78-c4ab-4cc0-899f-b8c6d40e7a24",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "20e52f77-3c32-4842-8e06-e15d2c400404"
        },
        "item": {
          "id": "43a0dc98-0591-41ae-9823-5dec499ee386",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1a7d589c-97a1-439b-b099-f5164c2a66c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a0dc98-0591-41ae-9823-5dec499ee386",
        "cursor": {
          "ref": "f8148e78-c4ab-4cc0-899f-b8c6d40e7a24",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "20e52f77-3c32-4842-8e06-e15d2c400404"
        },
        "item": {
          "id": "43a0dc98-0591-41ae-9823-5dec499ee386",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1a7d589c-97a1-439b-b099-f5164c2a66c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abde07fb-47c3-4c19-a045-23e4a0158b96",
        "cursor": {
          "ref": "61ecd4c2-62d4-42d2-a9ed-e25908569c7f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "436919fe-ddc4-4b32-b0ea-de39904ce1bd"
        },
        "item": {
          "id": "abde07fb-47c3-4c19-a045-23e4a0158b96",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b64dcae2-ff6c-4fbc-9f7c-3eb182057a9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abde07fb-47c3-4c19-a045-23e4a0158b96",
        "cursor": {
          "ref": "61ecd4c2-62d4-42d2-a9ed-e25908569c7f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "436919fe-ddc4-4b32-b0ea-de39904ce1bd"
        },
        "item": {
          "id": "abde07fb-47c3-4c19-a045-23e4a0158b96",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b64dcae2-ff6c-4fbc-9f7c-3eb182057a9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a656e8-c3e8-4e3d-acbe-7c60419ddef3",
        "cursor": {
          "ref": "d4cd9960-9ed7-414f-8ef8-ed6663918a65",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1633de5e-692e-4ccf-9368-8476117be4bc"
        },
        "item": {
          "id": "a5a656e8-c3e8-4e3d-acbe-7c60419ddef3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d73fb79b-8478-4afe-ab50-16143115e6ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a656e8-c3e8-4e3d-acbe-7c60419ddef3",
        "cursor": {
          "ref": "d4cd9960-9ed7-414f-8ef8-ed6663918a65",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1633de5e-692e-4ccf-9368-8476117be4bc"
        },
        "item": {
          "id": "a5a656e8-c3e8-4e3d-acbe-7c60419ddef3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d73fb79b-8478-4afe-ab50-16143115e6ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8bf0a8-0d58-4bd6-acf1-7a112552ae3d",
        "cursor": {
          "ref": "1352faff-710a-48e1-94c3-57dca3a6176d",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c0c882bb-4729-45fb-af93-18846e4bddea"
        },
        "item": {
          "id": "0c8bf0a8-0d58-4bd6-acf1-7a112552ae3d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "34ab5464-bc1c-4a84-a98b-306a507b2de1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8bf0a8-0d58-4bd6-acf1-7a112552ae3d",
        "cursor": {
          "ref": "1352faff-710a-48e1-94c3-57dca3a6176d",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c0c882bb-4729-45fb-af93-18846e4bddea"
        },
        "item": {
          "id": "0c8bf0a8-0d58-4bd6-acf1-7a112552ae3d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "34ab5464-bc1c-4a84-a98b-306a507b2de1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9565e9-534d-463a-8374-9205ee58917f",
        "cursor": {
          "ref": "52828e28-9456-4b60-a3e8-2088bc8d205c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e39c1985-8a6d-45fb-b544-dd989eb5810b"
        },
        "item": {
          "id": "be9565e9-534d-463a-8374-9205ee58917f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "23e44d74-8e60-4b80-a917-b668997522af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9565e9-534d-463a-8374-9205ee58917f",
        "cursor": {
          "ref": "52828e28-9456-4b60-a3e8-2088bc8d205c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e39c1985-8a6d-45fb-b544-dd989eb5810b"
        },
        "item": {
          "id": "be9565e9-534d-463a-8374-9205ee58917f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "23e44d74-8e60-4b80-a917-b668997522af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6e5966-0ab0-431a-87ba-09a9bc3463d3",
        "cursor": {
          "ref": "e2b9526c-a975-48b0-9e59-c169a8954eac",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fb90136a-a973-409c-a072-caf4bb58223a"
        },
        "item": {
          "id": "ad6e5966-0ab0-431a-87ba-09a9bc3463d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "380e1b2b-ed49-4dc3-8aa3-ff0d66ddd902",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6e5966-0ab0-431a-87ba-09a9bc3463d3",
        "cursor": {
          "ref": "e2b9526c-a975-48b0-9e59-c169a8954eac",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fb90136a-a973-409c-a072-caf4bb58223a"
        },
        "item": {
          "id": "ad6e5966-0ab0-431a-87ba-09a9bc3463d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "380e1b2b-ed49-4dc3-8aa3-ff0d66ddd902",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3467fc8-b137-4ae2-9c7c-dc77fb7f723f",
        "cursor": {
          "ref": "78822479-9323-47bd-8d45-381e3ba5b740",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ad61718c-a992-4dc9-b1c3-2151104d8398"
        },
        "item": {
          "id": "c3467fc8-b137-4ae2-9c7c-dc77fb7f723f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1639f0b3-db6e-465a-9ae2-d5addf2f9fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3467fc8-b137-4ae2-9c7c-dc77fb7f723f",
        "cursor": {
          "ref": "78822479-9323-47bd-8d45-381e3ba5b740",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ad61718c-a992-4dc9-b1c3-2151104d8398"
        },
        "item": {
          "id": "c3467fc8-b137-4ae2-9c7c-dc77fb7f723f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1639f0b3-db6e-465a-9ae2-d5addf2f9fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dec3490-acc2-4093-b797-7a9b1185ea68",
        "cursor": {
          "ref": "6975ef7d-dfe0-46d5-9888-c4b879ea1614",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "65fc886f-ed12-4bc3-a45d-f347a9322a26"
        },
        "item": {
          "id": "4dec3490-acc2-4093-b797-7a9b1185ea68",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0954bb16-b7e3-4810-ad46-07f0bf034d53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dec3490-acc2-4093-b797-7a9b1185ea68",
        "cursor": {
          "ref": "6975ef7d-dfe0-46d5-9888-c4b879ea1614",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "65fc886f-ed12-4bc3-a45d-f347a9322a26"
        },
        "item": {
          "id": "4dec3490-acc2-4093-b797-7a9b1185ea68",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0954bb16-b7e3-4810-ad46-07f0bf034d53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29d138c-4245-48ac-8af8-8dd9460b5694",
        "cursor": {
          "ref": "04c28dc8-3df8-4b5f-b019-eee72d580496",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e1f8d10d-77c1-44ef-8d2f-c8a91245dd10"
        },
        "item": {
          "id": "d29d138c-4245-48ac-8af8-8dd9460b5694",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "38375845-c9cc-4921-9fcf-9fb768349969",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29d138c-4245-48ac-8af8-8dd9460b5694",
        "cursor": {
          "ref": "04c28dc8-3df8-4b5f-b019-eee72d580496",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e1f8d10d-77c1-44ef-8d2f-c8a91245dd10"
        },
        "item": {
          "id": "d29d138c-4245-48ac-8af8-8dd9460b5694",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "38375845-c9cc-4921-9fcf-9fb768349969",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f79ded6-8eba-4a18-8431-3b8641f0fb1e",
        "cursor": {
          "ref": "d8452c33-45e9-4695-97df-30f39aff76c6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a8a92c46-295c-48cf-8770-e1377bc40034"
        },
        "item": {
          "id": "9f79ded6-8eba-4a18-8431-3b8641f0fb1e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1527f605-4ff2-4312-8e31-e0201f54fc3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f79ded6-8eba-4a18-8431-3b8641f0fb1e",
        "cursor": {
          "ref": "d8452c33-45e9-4695-97df-30f39aff76c6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a8a92c46-295c-48cf-8770-e1377bc40034"
        },
        "item": {
          "id": "9f79ded6-8eba-4a18-8431-3b8641f0fb1e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1527f605-4ff2-4312-8e31-e0201f54fc3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d0def5-fa87-4f09-827b-421bcfbbd944",
        "cursor": {
          "ref": "a68c2b8d-5d67-4456-81a9-a78df5879c56",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ea1d52f9-93b0-4459-a672-1dc2d73d57e8"
        },
        "item": {
          "id": "95d0def5-fa87-4f09-827b-421bcfbbd944",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "25ff6e88-9f1e-4a82-bfa6-337c53dc7304",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d0def5-fa87-4f09-827b-421bcfbbd944",
        "cursor": {
          "ref": "a68c2b8d-5d67-4456-81a9-a78df5879c56",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ea1d52f9-93b0-4459-a672-1dc2d73d57e8"
        },
        "item": {
          "id": "95d0def5-fa87-4f09-827b-421bcfbbd944",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "25ff6e88-9f1e-4a82-bfa6-337c53dc7304",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ca0913-2fec-4103-894d-de7980124a5c",
        "cursor": {
          "ref": "431e3ba2-7f5a-4966-979c-0f13340cec34",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "faabcf55-b39f-406f-88ae-2be1bba296b4"
        },
        "item": {
          "id": "41ca0913-2fec-4103-894d-de7980124a5c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ea5a8101-6658-40d3-b2e1-e1481e8a2c5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ca0913-2fec-4103-894d-de7980124a5c",
        "cursor": {
          "ref": "431e3ba2-7f5a-4966-979c-0f13340cec34",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "faabcf55-b39f-406f-88ae-2be1bba296b4"
        },
        "item": {
          "id": "41ca0913-2fec-4103-894d-de7980124a5c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ea5a8101-6658-40d3-b2e1-e1481e8a2c5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb63b0ed-394a-4a2e-8d81-d7a906383d56",
        "cursor": {
          "ref": "54799d0d-c39a-4ba7-894d-d2de11cc762f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6416b5bc-691a-4b90-9390-ca76c084f5ed"
        },
        "item": {
          "id": "fb63b0ed-394a-4a2e-8d81-d7a906383d56",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5d60f4ca-fd7c-4bb5-b595-9add4535462f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb63b0ed-394a-4a2e-8d81-d7a906383d56",
        "cursor": {
          "ref": "54799d0d-c39a-4ba7-894d-d2de11cc762f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6416b5bc-691a-4b90-9390-ca76c084f5ed"
        },
        "item": {
          "id": "fb63b0ed-394a-4a2e-8d81-d7a906383d56",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5d60f4ca-fd7c-4bb5-b595-9add4535462f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80034a06-b638-49d0-8b9e-065af97253cf",
        "cursor": {
          "ref": "3412d9e8-2e76-4552-b0f5-6e2036d6d061",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6561d056-edaa-44a8-a83d-e55e2369c1c4"
        },
        "item": {
          "id": "80034a06-b638-49d0-8b9e-065af97253cf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f70c5c15-d018-4339-acbb-71f1d73cfe0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80034a06-b638-49d0-8b9e-065af97253cf",
        "cursor": {
          "ref": "3412d9e8-2e76-4552-b0f5-6e2036d6d061",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6561d056-edaa-44a8-a83d-e55e2369c1c4"
        },
        "item": {
          "id": "80034a06-b638-49d0-8b9e-065af97253cf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f70c5c15-d018-4339-acbb-71f1d73cfe0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcac3cb4-7200-4de1-be67-220216c4e907",
        "cursor": {
          "ref": "7f361e18-de9b-4931-9961-fa2f8d8cc1f8",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "de9316ce-0777-448d-8b3e-95487f563336"
        },
        "item": {
          "id": "bcac3cb4-7200-4de1-be67-220216c4e907",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1f1d3fa2-0320-4ab8-9d90-39b3d2bc92bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcac3cb4-7200-4de1-be67-220216c4e907",
        "cursor": {
          "ref": "7f361e18-de9b-4931-9961-fa2f8d8cc1f8",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "de9316ce-0777-448d-8b3e-95487f563336"
        },
        "item": {
          "id": "bcac3cb4-7200-4de1-be67-220216c4e907",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1f1d3fa2-0320-4ab8-9d90-39b3d2bc92bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fdf954-fc05-4fb6-b835-84728a888878",
        "cursor": {
          "ref": "052b5f28-92e6-452f-b5c0-dffcda78c601",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "aae33836-a76b-4f46-a082-fb6a586824fe"
        },
        "item": {
          "id": "14fdf954-fc05-4fb6-b835-84728a888878",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "67a537b5-63fa-4dee-a4cf-8393e1709bde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fdf954-fc05-4fb6-b835-84728a888878",
        "cursor": {
          "ref": "052b5f28-92e6-452f-b5c0-dffcda78c601",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "aae33836-a76b-4f46-a082-fb6a586824fe"
        },
        "item": {
          "id": "14fdf954-fc05-4fb6-b835-84728a888878",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "67a537b5-63fa-4dee-a4cf-8393e1709bde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14c4680-2eb5-4156-951e-661fbac40efb",
        "cursor": {
          "ref": "883ad9f5-4802-4047-bc3b-edb61e5326c9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6cc37545-8bd4-4cbf-a20e-c14e1c1102bc"
        },
        "item": {
          "id": "b14c4680-2eb5-4156-951e-661fbac40efb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "07bb2fd4-3cce-4e53-8501-2fbb1b679d53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14c4680-2eb5-4156-951e-661fbac40efb",
        "cursor": {
          "ref": "883ad9f5-4802-4047-bc3b-edb61e5326c9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6cc37545-8bd4-4cbf-a20e-c14e1c1102bc"
        },
        "item": {
          "id": "b14c4680-2eb5-4156-951e-661fbac40efb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "07bb2fd4-3cce-4e53-8501-2fbb1b679d53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca115570-a721-4e7b-a524-42ada75e4ed5",
        "cursor": {
          "ref": "d46618dd-b6a9-4045-9929-87d2d55c6755",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "23b7b3ed-9126-4b76-95a5-8778a6bf405f"
        },
        "item": {
          "id": "ca115570-a721-4e7b-a524-42ada75e4ed5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a5defb6-2aa4-497b-9f96-4673da1a6fea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca115570-a721-4e7b-a524-42ada75e4ed5",
        "cursor": {
          "ref": "d46618dd-b6a9-4045-9929-87d2d55c6755",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "23b7b3ed-9126-4b76-95a5-8778a6bf405f"
        },
        "item": {
          "id": "ca115570-a721-4e7b-a524-42ada75e4ed5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4a5defb6-2aa4-497b-9f96-4673da1a6fea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a03aa63-64ef-4989-ac9b-e926d0c83f71",
        "cursor": {
          "ref": "c50cb7c8-1bd0-4859-a367-3f7be5aa0aad",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0b692501-e8e5-4e22-8e91-c27dfdd14d83"
        },
        "item": {
          "id": "5a03aa63-64ef-4989-ac9b-e926d0c83f71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "df8507da-834a-4c46-b01f-8edae4bf820b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a03aa63-64ef-4989-ac9b-e926d0c83f71",
        "cursor": {
          "ref": "c50cb7c8-1bd0-4859-a367-3f7be5aa0aad",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0b692501-e8e5-4e22-8e91-c27dfdd14d83"
        },
        "item": {
          "id": "5a03aa63-64ef-4989-ac9b-e926d0c83f71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "df8507da-834a-4c46-b01f-8edae4bf820b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60bef98-80f0-4c44-84ae-5a56bc514e42",
        "cursor": {
          "ref": "38a5f2ff-f84d-490d-9ecc-369b6864ead8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "82f4d880-9a14-4371-8935-0d17c42ca714"
        },
        "item": {
          "id": "d60bef98-80f0-4c44-84ae-5a56bc514e42",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c8e3bf18-2d65-4976-a02e-f63f9e80687b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60bef98-80f0-4c44-84ae-5a56bc514e42",
        "cursor": {
          "ref": "38a5f2ff-f84d-490d-9ecc-369b6864ead8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "82f4d880-9a14-4371-8935-0d17c42ca714"
        },
        "item": {
          "id": "d60bef98-80f0-4c44-84ae-5a56bc514e42",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c8e3bf18-2d65-4976-a02e-f63f9e80687b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793940c9-ce1e-4f21-bb0f-044cf690695b",
        "cursor": {
          "ref": "4a14050b-0312-49ed-93e5-5e50423742cb",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5f4de263-6763-4722-8402-8558f7c710a0"
        },
        "item": {
          "id": "793940c9-ce1e-4f21-bb0f-044cf690695b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "57ccad89-19ca-4ea9-8b2c-36a4bebdbfdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793940c9-ce1e-4f21-bb0f-044cf690695b",
        "cursor": {
          "ref": "4a14050b-0312-49ed-93e5-5e50423742cb",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5f4de263-6763-4722-8402-8558f7c710a0"
        },
        "item": {
          "id": "793940c9-ce1e-4f21-bb0f-044cf690695b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "57ccad89-19ca-4ea9-8b2c-36a4bebdbfdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfa4b8a-e8ec-4ee5-9b10-d170c8033f93",
        "cursor": {
          "ref": "0a02c8dc-6a69-4406-93ef-9ab3570a10f6",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1bf38295-c232-4d66-bf31-636308c96d97"
        },
        "item": {
          "id": "9cfa4b8a-e8ec-4ee5-9b10-d170c8033f93",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b765f898-a13b-4884-88d8-548505713278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfa4b8a-e8ec-4ee5-9b10-d170c8033f93",
        "cursor": {
          "ref": "0a02c8dc-6a69-4406-93ef-9ab3570a10f6",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1bf38295-c232-4d66-bf31-636308c96d97"
        },
        "item": {
          "id": "9cfa4b8a-e8ec-4ee5-9b10-d170c8033f93",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b765f898-a13b-4884-88d8-548505713278",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1d170e-4302-4dc2-9b1c-aacb8e4d5044",
        "cursor": {
          "ref": "f113af4a-9f65-4aca-94fe-5dbdab250416",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d136961a-f59f-418e-981a-f7026818b227"
        },
        "item": {
          "id": "fd1d170e-4302-4dc2-9b1c-aacb8e4d5044",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cca93ad7-9312-475e-bbd1-1bac096891db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1d170e-4302-4dc2-9b1c-aacb8e4d5044",
        "cursor": {
          "ref": "f113af4a-9f65-4aca-94fe-5dbdab250416",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d136961a-f59f-418e-981a-f7026818b227"
        },
        "item": {
          "id": "fd1d170e-4302-4dc2-9b1c-aacb8e4d5044",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cca93ad7-9312-475e-bbd1-1bac096891db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6c93b6-378f-4794-b3c8-0a037fa16979",
        "cursor": {
          "ref": "5b30389d-d46c-4450-bccc-58e284cef6bb",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "caf06ca4-41b7-4173-a7cb-cfa16fb50493"
        },
        "item": {
          "id": "2b6c93b6-378f-4794-b3c8-0a037fa16979",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9242405b-6ef6-4a7c-871e-6aa7235dce86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6c93b6-378f-4794-b3c8-0a037fa16979",
        "cursor": {
          "ref": "5b30389d-d46c-4450-bccc-58e284cef6bb",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "caf06ca4-41b7-4173-a7cb-cfa16fb50493"
        },
        "item": {
          "id": "2b6c93b6-378f-4794-b3c8-0a037fa16979",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9242405b-6ef6-4a7c-871e-6aa7235dce86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3d1174-6ade-4d76-a9e7-af8b6ed858b7",
        "cursor": {
          "ref": "a464ed06-2b37-4452-9c7d-a7cdbe510d76",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5998b611-514d-46ef-b5c5-3586207e6e83"
        },
        "item": {
          "id": "0c3d1174-6ade-4d76-a9e7-af8b6ed858b7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "66841522-72eb-4252-be43-d2895f4a3144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3d1174-6ade-4d76-a9e7-af8b6ed858b7",
        "cursor": {
          "ref": "a464ed06-2b37-4452-9c7d-a7cdbe510d76",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5998b611-514d-46ef-b5c5-3586207e6e83"
        },
        "item": {
          "id": "0c3d1174-6ade-4d76-a9e7-af8b6ed858b7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "66841522-72eb-4252-be43-d2895f4a3144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99c8e59-5d63-4028-9aba-f231b140be78",
        "cursor": {
          "ref": "64326d6e-fb70-4f07-af68-7a71fe1cb701",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "24b5713f-8b9f-4855-9a76-63317fc154f5"
        },
        "item": {
          "id": "d99c8e59-5d63-4028-9aba-f231b140be78",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a1ca4067-fb64-44de-947f-ab146a1ead45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99c8e59-5d63-4028-9aba-f231b140be78",
        "cursor": {
          "ref": "64326d6e-fb70-4f07-af68-7a71fe1cb701",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "24b5713f-8b9f-4855-9a76-63317fc154f5"
        },
        "item": {
          "id": "d99c8e59-5d63-4028-9aba-f231b140be78",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a1ca4067-fb64-44de-947f-ab146a1ead45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e15050-fb22-4ae1-99fd-4fa9e8dbb1fa",
        "cursor": {
          "ref": "431c3dc0-9d7e-4f68-b0e5-ac1b5c0dbcbc",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4a13d63a-9ac8-4ced-b5f3-9e94c6594e06"
        },
        "item": {
          "id": "21e15050-fb22-4ae1-99fd-4fa9e8dbb1fa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f46bde48-25e0-4af2-b0c2-9f35d611dcf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e15050-fb22-4ae1-99fd-4fa9e8dbb1fa",
        "cursor": {
          "ref": "431c3dc0-9d7e-4f68-b0e5-ac1b5c0dbcbc",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4a13d63a-9ac8-4ced-b5f3-9e94c6594e06"
        },
        "item": {
          "id": "21e15050-fb22-4ae1-99fd-4fa9e8dbb1fa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f46bde48-25e0-4af2-b0c2-9f35d611dcf0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf1cf05-ad87-4107-b516-f8653645b6c4",
        "cursor": {
          "ref": "e4b9cb6a-131a-4833-aec2-8d93a08a8630",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5861c03a-478f-4a3a-a969-0721f9dcc77b"
        },
        "item": {
          "id": "aaf1cf05-ad87-4107-b516-f8653645b6c4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "88d37dec-596a-4570-9fb5-5dfb0580bfc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf1cf05-ad87-4107-b516-f8653645b6c4",
        "cursor": {
          "ref": "e4b9cb6a-131a-4833-aec2-8d93a08a8630",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5861c03a-478f-4a3a-a969-0721f9dcc77b"
        },
        "item": {
          "id": "aaf1cf05-ad87-4107-b516-f8653645b6c4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "88d37dec-596a-4570-9fb5-5dfb0580bfc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50676136-8275-4b0b-93d6-add630fa0ef0",
        "cursor": {
          "ref": "d9fb3078-98ea-4dba-99ca-7b73ba8550fb",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "18c9d049-69f0-40e6-97ba-928ba9d113d1"
        },
        "item": {
          "id": "50676136-8275-4b0b-93d6-add630fa0ef0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7e31b0b0-69b3-4aa6-85f1-5ed2f7c663c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50676136-8275-4b0b-93d6-add630fa0ef0",
        "cursor": {
          "ref": "d9fb3078-98ea-4dba-99ca-7b73ba8550fb",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "18c9d049-69f0-40e6-97ba-928ba9d113d1"
        },
        "item": {
          "id": "50676136-8275-4b0b-93d6-add630fa0ef0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7e31b0b0-69b3-4aa6-85f1-5ed2f7c663c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9a9c08-9acf-4556-9f86-5f5e201b81ce",
        "cursor": {
          "ref": "6af1e8ba-6f5c-4193-bd1d-32f14b5c588e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c029fd87-9633-43af-bb6a-c2c1826b5735"
        },
        "item": {
          "id": "2e9a9c08-9acf-4556-9f86-5f5e201b81ce",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ac1829ce-cbea-4812-bc1b-465e25d59829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9a9c08-9acf-4556-9f86-5f5e201b81ce",
        "cursor": {
          "ref": "6af1e8ba-6f5c-4193-bd1d-32f14b5c588e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c029fd87-9633-43af-bb6a-c2c1826b5735"
        },
        "item": {
          "id": "2e9a9c08-9acf-4556-9f86-5f5e201b81ce",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ac1829ce-cbea-4812-bc1b-465e25d59829",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9699e1-b25b-4ac9-b947-946449a191c8",
        "cursor": {
          "ref": "a810259f-313f-4924-9cf4-d491c73ccad5",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "98aa37a5-d7b4-4bc7-99b3-72149b310eea"
        },
        "item": {
          "id": "ac9699e1-b25b-4ac9-b947-946449a191c8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e17ca0a6-feda-4a14-83f2-32a24a746545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9699e1-b25b-4ac9-b947-946449a191c8",
        "cursor": {
          "ref": "a810259f-313f-4924-9cf4-d491c73ccad5",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "98aa37a5-d7b4-4bc7-99b3-72149b310eea"
        },
        "item": {
          "id": "ac9699e1-b25b-4ac9-b947-946449a191c8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e17ca0a6-feda-4a14-83f2-32a24a746545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf66df8-ffb8-4d1f-af87-02b384f9bc3b",
        "cursor": {
          "ref": "43d6353d-120b-46b7-81c0-1063f99b05f1",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d5d05a69-d3e5-4d0f-ac31-ba0ed608f691"
        },
        "item": {
          "id": "5cf66df8-ffb8-4d1f-af87-02b384f9bc3b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "24493e54-f9cc-423a-a746-0172af1a0740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf66df8-ffb8-4d1f-af87-02b384f9bc3b",
        "cursor": {
          "ref": "43d6353d-120b-46b7-81c0-1063f99b05f1",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d5d05a69-d3e5-4d0f-ac31-ba0ed608f691"
        },
        "item": {
          "id": "5cf66df8-ffb8-4d1f-af87-02b384f9bc3b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "24493e54-f9cc-423a-a746-0172af1a0740",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd2115c-7059-4448-8c68-d230455458c7",
        "cursor": {
          "ref": "53139d3c-099a-43d3-a6fa-ca961f78dbda",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b94df89d-4fa0-4a13-83d6-22ae962a62cc"
        },
        "item": {
          "id": "cbd2115c-7059-4448-8c68-d230455458c7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "43fee244-c88f-4d23-882d-98b389ea43e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd2115c-7059-4448-8c68-d230455458c7",
        "cursor": {
          "ref": "53139d3c-099a-43d3-a6fa-ca961f78dbda",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b94df89d-4fa0-4a13-83d6-22ae962a62cc"
        },
        "item": {
          "id": "cbd2115c-7059-4448-8c68-d230455458c7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "43fee244-c88f-4d23-882d-98b389ea43e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864d6d4b-f0ef-448b-9f1c-f8e634c81489",
        "cursor": {
          "ref": "a3571b09-ec42-4fb3-8f3b-459b40a6ded1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "981a3939-6376-4a48-9f2e-e7afe9a1be36"
        },
        "item": {
          "id": "864d6d4b-f0ef-448b-9f1c-f8e634c81489",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d4f27842-447b-4f3e-9a87-293113362999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864d6d4b-f0ef-448b-9f1c-f8e634c81489",
        "cursor": {
          "ref": "a3571b09-ec42-4fb3-8f3b-459b40a6ded1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "981a3939-6376-4a48-9f2e-e7afe9a1be36"
        },
        "item": {
          "id": "864d6d4b-f0ef-448b-9f1c-f8e634c81489",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d4f27842-447b-4f3e-9a87-293113362999",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1440b7df-2587-4b8e-b074-b9a8d88593c0",
        "cursor": {
          "ref": "b28db368-bdf7-4965-8f9e-fe3ca01a9031",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "83bb2399-a8fc-40e2-87be-e79ae1116589"
        },
        "item": {
          "id": "1440b7df-2587-4b8e-b074-b9a8d88593c0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "db132c50-48ff-4a4f-bd60-6c53437906ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1440b7df-2587-4b8e-b074-b9a8d88593c0",
        "cursor": {
          "ref": "b28db368-bdf7-4965-8f9e-fe3ca01a9031",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "83bb2399-a8fc-40e2-87be-e79ae1116589"
        },
        "item": {
          "id": "1440b7df-2587-4b8e-b074-b9a8d88593c0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "db132c50-48ff-4a4f-bd60-6c53437906ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0377c0-dbdc-4222-9521-072003519170",
        "cursor": {
          "ref": "93b3832c-0b87-4acc-bfec-a46e7166d4aa",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "52e62f99-2c62-40eb-9916-4355460c90fa"
        },
        "item": {
          "id": "cd0377c0-dbdc-4222-9521-072003519170",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2eae3f01-fd2a-441f-9229-53f0d8636e26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0377c0-dbdc-4222-9521-072003519170",
        "cursor": {
          "ref": "93b3832c-0b87-4acc-bfec-a46e7166d4aa",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "52e62f99-2c62-40eb-9916-4355460c90fa"
        },
        "item": {
          "id": "cd0377c0-dbdc-4222-9521-072003519170",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2eae3f01-fd2a-441f-9229-53f0d8636e26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceae957-73ed-4b5c-af57-c77af9b92c7d",
        "cursor": {
          "ref": "2c71d14c-e22f-40a9-bba0-90dcf94beca1",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "532dbf9d-e7a4-410f-875b-3993e8bf181b"
        },
        "item": {
          "id": "5ceae957-73ed-4b5c-af57-c77af9b92c7d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bfd21501-7f20-4901-8ca8-cd4db765281e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceae957-73ed-4b5c-af57-c77af9b92c7d",
        "cursor": {
          "ref": "2c71d14c-e22f-40a9-bba0-90dcf94beca1",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "532dbf9d-e7a4-410f-875b-3993e8bf181b"
        },
        "item": {
          "id": "5ceae957-73ed-4b5c-af57-c77af9b92c7d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bfd21501-7f20-4901-8ca8-cd4db765281e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8a871c-cd00-43ba-9ffb-cc25ea4269fb",
        "cursor": {
          "ref": "75fe78f6-bcee-425f-bb17-2cd3daf202a4",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1651a0ed-e96e-44aa-9412-bc5dbcb66bb3"
        },
        "item": {
          "id": "4b8a871c-cd00-43ba-9ffb-cc25ea4269fb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "edfedbd1-f30e-43e0-9ded-2c7ac1a65c35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8a871c-cd00-43ba-9ffb-cc25ea4269fb",
        "cursor": {
          "ref": "75fe78f6-bcee-425f-bb17-2cd3daf202a4",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1651a0ed-e96e-44aa-9412-bc5dbcb66bb3"
        },
        "item": {
          "id": "4b8a871c-cd00-43ba-9ffb-cc25ea4269fb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "edfedbd1-f30e-43e0-9ded-2c7ac1a65c35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8dfde4-0a8b-417b-a6e4-6b8ff5b82b50",
        "cursor": {
          "ref": "9fde62d7-f12d-4493-b722-5ba87113c041",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0f31f1a2-80a5-4082-878b-03a18cd93024"
        },
        "item": {
          "id": "cf8dfde4-0a8b-417b-a6e4-6b8ff5b82b50",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5ab30408-fe9e-4281-ac22-8d83f4b3da93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8dfde4-0a8b-417b-a6e4-6b8ff5b82b50",
        "cursor": {
          "ref": "9fde62d7-f12d-4493-b722-5ba87113c041",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0f31f1a2-80a5-4082-878b-03a18cd93024"
        },
        "item": {
          "id": "cf8dfde4-0a8b-417b-a6e4-6b8ff5b82b50",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5ab30408-fe9e-4281-ac22-8d83f4b3da93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44180fd-ca4f-4cc5-9fcc-13b555149f76",
        "cursor": {
          "ref": "fc02315d-608d-4ea5-b1bd-8ed31a593014",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f90fad88-c4f7-40d4-841c-519570330cc5"
        },
        "item": {
          "id": "c44180fd-ca4f-4cc5-9fcc-13b555149f76",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "22c29599-7c98-4ca6-af84-0113d5f0fa00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44180fd-ca4f-4cc5-9fcc-13b555149f76",
        "cursor": {
          "ref": "fc02315d-608d-4ea5-b1bd-8ed31a593014",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f90fad88-c4f7-40d4-841c-519570330cc5"
        },
        "item": {
          "id": "c44180fd-ca4f-4cc5-9fcc-13b555149f76",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "22c29599-7c98-4ca6-af84-0113d5f0fa00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ca4090-f34a-4744-b56e-9b44558423a3",
        "cursor": {
          "ref": "c3b42102-c93e-4783-ab3c-d0a0c270e085",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9d393437-f0e3-4250-9829-73a897d0ec51"
        },
        "item": {
          "id": "57ca4090-f34a-4744-b56e-9b44558423a3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bee493e4-6b11-44f6-9dbb-b9eeba4cb389",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ca4090-f34a-4744-b56e-9b44558423a3",
        "cursor": {
          "ref": "c3b42102-c93e-4783-ab3c-d0a0c270e085",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9d393437-f0e3-4250-9829-73a897d0ec51"
        },
        "item": {
          "id": "57ca4090-f34a-4744-b56e-9b44558423a3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bee493e4-6b11-44f6-9dbb-b9eeba4cb389",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0441fe9c-6f52-4f72-ae6c-90836a5630b6",
        "cursor": {
          "ref": "ef1badf6-663d-4795-9ac9-98cd9fb386d7",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1beb5096-1223-477d-8014-dd1fe7365e68"
        },
        "item": {
          "id": "0441fe9c-6f52-4f72-ae6c-90836a5630b6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "80f9d059-5b75-44a6-a3eb-ba1d5918d360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0441fe9c-6f52-4f72-ae6c-90836a5630b6",
        "cursor": {
          "ref": "ef1badf6-663d-4795-9ac9-98cd9fb386d7",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1beb5096-1223-477d-8014-dd1fe7365e68"
        },
        "item": {
          "id": "0441fe9c-6f52-4f72-ae6c-90836a5630b6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "80f9d059-5b75-44a6-a3eb-ba1d5918d360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a0349a-1ed3-4556-8046-3c61a06ec204",
        "cursor": {
          "ref": "acabc615-57c0-4b51-b03e-60edb08083b6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ed10ebd2-1f25-4d37-9817-2b41b0ccfcef"
        },
        "item": {
          "id": "54a0349a-1ed3-4556-8046-3c61a06ec204",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e81d8883-26dc-4d12-96db-7e016f73ebde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a0349a-1ed3-4556-8046-3c61a06ec204",
        "cursor": {
          "ref": "acabc615-57c0-4b51-b03e-60edb08083b6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ed10ebd2-1f25-4d37-9817-2b41b0ccfcef"
        },
        "item": {
          "id": "54a0349a-1ed3-4556-8046-3c61a06ec204",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e81d8883-26dc-4d12-96db-7e016f73ebde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fbc34a-7319-408a-a055-aa3d2bb41ee9",
        "cursor": {
          "ref": "bac662ee-5a71-4622-a6e2-d3baba702ad2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "62e1f8d4-440e-423a-8163-5847b53eb1df"
        },
        "item": {
          "id": "64fbc34a-7319-408a-a055-aa3d2bb41ee9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1c28e2dd-4cf7-42b2-8418-5e60bd71324f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fbc34a-7319-408a-a055-aa3d2bb41ee9",
        "cursor": {
          "ref": "bac662ee-5a71-4622-a6e2-d3baba702ad2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "62e1f8d4-440e-423a-8163-5847b53eb1df"
        },
        "item": {
          "id": "64fbc34a-7319-408a-a055-aa3d2bb41ee9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1c28e2dd-4cf7-42b2-8418-5e60bd71324f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da9e2d7-6615-4391-8d25-dae435ef7177",
        "cursor": {
          "ref": "3204302c-bfb9-44be-aac8-2d98034f1504",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "02a4be47-8b15-4c85-991e-250a3deb1c6a"
        },
        "item": {
          "id": "9da9e2d7-6615-4391-8d25-dae435ef7177",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2cf9e3ac-6ab1-4bcd-95eb-4862a7996286",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da9e2d7-6615-4391-8d25-dae435ef7177",
        "cursor": {
          "ref": "3204302c-bfb9-44be-aac8-2d98034f1504",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "02a4be47-8b15-4c85-991e-250a3deb1c6a"
        },
        "item": {
          "id": "9da9e2d7-6615-4391-8d25-dae435ef7177",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2cf9e3ac-6ab1-4bcd-95eb-4862a7996286",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9383d4b1-e410-4609-b0c6-4199f2b710a3",
        "cursor": {
          "ref": "4d4fb6d2-7bc6-4ad4-a6f5-a4e7dc7f0de0",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c31c3a0f-8d2b-480c-86cc-a32c13691a65"
        },
        "item": {
          "id": "9383d4b1-e410-4609-b0c6-4199f2b710a3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5e710972-5469-4fb0-9a3c-e8bac5395de3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9383d4b1-e410-4609-b0c6-4199f2b710a3",
        "cursor": {
          "ref": "4d4fb6d2-7bc6-4ad4-a6f5-a4e7dc7f0de0",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c31c3a0f-8d2b-480c-86cc-a32c13691a65"
        },
        "item": {
          "id": "9383d4b1-e410-4609-b0c6-4199f2b710a3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5e710972-5469-4fb0-9a3c-e8bac5395de3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93f39fb-220c-4d72-929b-1f6390b1d2d8",
        "cursor": {
          "ref": "cf465a69-97d2-4a64-bd11-574a0defc1f7",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "08941734-7f58-441d-9bea-cb3b168aa43b"
        },
        "item": {
          "id": "e93f39fb-220c-4d72-929b-1f6390b1d2d8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e53166d3-8aff-4a86-ae9c-8615ec44e77c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93f39fb-220c-4d72-929b-1f6390b1d2d8",
        "cursor": {
          "ref": "cf465a69-97d2-4a64-bd11-574a0defc1f7",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "08941734-7f58-441d-9bea-cb3b168aa43b"
        },
        "item": {
          "id": "e93f39fb-220c-4d72-929b-1f6390b1d2d8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e53166d3-8aff-4a86-ae9c-8615ec44e77c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0080edf-7560-4c98-adc1-0d67b3dde3f5",
        "cursor": {
          "ref": "917f75df-9398-40c0-9d14-b99347d09179",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "80a159a0-0653-45d6-98a0-5ce483f27a3b"
        },
        "item": {
          "id": "b0080edf-7560-4c98-adc1-0d67b3dde3f5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b582ce54-439b-441e-ad45-1fdb55321971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0080edf-7560-4c98-adc1-0d67b3dde3f5",
        "cursor": {
          "ref": "917f75df-9398-40c0-9d14-b99347d09179",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "80a159a0-0653-45d6-98a0-5ce483f27a3b"
        },
        "item": {
          "id": "b0080edf-7560-4c98-adc1-0d67b3dde3f5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b582ce54-439b-441e-ad45-1fdb55321971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c7ed7a-6504-4aa5-b881-72a46dd90fdf",
        "cursor": {
          "ref": "4a8af4f6-c0c4-4d23-924f-961109a74557",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cae0ac25-ffe9-41a1-a88c-89d3b35fa76c"
        },
        "item": {
          "id": "20c7ed7a-6504-4aa5-b881-72a46dd90fdf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "04567374-ebf8-41f2-8f58-6dc0b4a4404a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c7ed7a-6504-4aa5-b881-72a46dd90fdf",
        "cursor": {
          "ref": "4a8af4f6-c0c4-4d23-924f-961109a74557",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cae0ac25-ffe9-41a1-a88c-89d3b35fa76c"
        },
        "item": {
          "id": "20c7ed7a-6504-4aa5-b881-72a46dd90fdf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "04567374-ebf8-41f2-8f58-6dc0b4a4404a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212f2e4a-5227-4109-89c2-fff952cae823",
        "cursor": {
          "ref": "4f15770c-dd10-45f0-8a84-9d7acc4953ba",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "14d73bc9-3965-4f84-bdb1-3b1a9945d508"
        },
        "item": {
          "id": "212f2e4a-5227-4109-89c2-fff952cae823",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "211c8ec4-bb95-4399-9b58-50897817b0bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212f2e4a-5227-4109-89c2-fff952cae823",
        "cursor": {
          "ref": "4f15770c-dd10-45f0-8a84-9d7acc4953ba",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "14d73bc9-3965-4f84-bdb1-3b1a9945d508"
        },
        "item": {
          "id": "212f2e4a-5227-4109-89c2-fff952cae823",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "211c8ec4-bb95-4399-9b58-50897817b0bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08505899-70c2-45c2-8414-7f9a03bbb4b7",
        "cursor": {
          "ref": "9e40c737-6306-4dc7-ba01-5e1e13862b1c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ae8acf11-6117-45ba-9dfa-358ac5217b45"
        },
        "item": {
          "id": "08505899-70c2-45c2-8414-7f9a03bbb4b7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "34000ef8-87e7-4216-abc4-ad87db369dcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08505899-70c2-45c2-8414-7f9a03bbb4b7",
        "cursor": {
          "ref": "9e40c737-6306-4dc7-ba01-5e1e13862b1c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ae8acf11-6117-45ba-9dfa-358ac5217b45"
        },
        "item": {
          "id": "08505899-70c2-45c2-8414-7f9a03bbb4b7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "34000ef8-87e7-4216-abc4-ad87db369dcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea66415-d6c3-49f5-9954-ad32c337eb95",
        "cursor": {
          "ref": "31ca696c-91a6-472e-a61f-e86cadcf54ef",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6e9f2050-5af4-488d-b0cd-bc7f237c5c62"
        },
        "item": {
          "id": "eea66415-d6c3-49f5-9954-ad32c337eb95",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2d7f2931-0142-4daf-9d36-5b8506b4f698",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea66415-d6c3-49f5-9954-ad32c337eb95",
        "cursor": {
          "ref": "31ca696c-91a6-472e-a61f-e86cadcf54ef",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6e9f2050-5af4-488d-b0cd-bc7f237c5c62"
        },
        "item": {
          "id": "eea66415-d6c3-49f5-9954-ad32c337eb95",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2d7f2931-0142-4daf-9d36-5b8506b4f698",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea10b20-15bd-46cb-9698-cc8270752e45",
        "cursor": {
          "ref": "f0004e10-8853-421d-8256-e47ea834f7c5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "08d1c79e-0919-4350-938a-044f4b45492c"
        },
        "item": {
          "id": "cea10b20-15bd-46cb-9698-cc8270752e45",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9d1964a6-bb3d-468f-91b4-27f36a442386",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea10b20-15bd-46cb-9698-cc8270752e45",
        "cursor": {
          "ref": "f0004e10-8853-421d-8256-e47ea834f7c5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "08d1c79e-0919-4350-938a-044f4b45492c"
        },
        "item": {
          "id": "cea10b20-15bd-46cb-9698-cc8270752e45",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9d1964a6-bb3d-468f-91b4-27f36a442386",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f46928b-6989-4c2a-9e77-0334c2445817",
        "cursor": {
          "ref": "b41d1b5e-9c06-44d9-98f5-611c2c2b6cda",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f3fbb68b-e6ba-4bb1-bdb4-646181249a18"
        },
        "item": {
          "id": "5f46928b-6989-4c2a-9e77-0334c2445817",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f719e29d-99e2-4602-8f8c-a05931c8fe2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f46928b-6989-4c2a-9e77-0334c2445817",
        "cursor": {
          "ref": "b41d1b5e-9c06-44d9-98f5-611c2c2b6cda",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f3fbb68b-e6ba-4bb1-bdb4-646181249a18"
        },
        "item": {
          "id": "5f46928b-6989-4c2a-9e77-0334c2445817",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f719e29d-99e2-4602-8f8c-a05931c8fe2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f419bd46-3dce-46e2-8347-33b25928be7d",
        "cursor": {
          "ref": "1624ad5d-419e-426a-8f12-f86b0599bf7f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bff5c74d-c554-435e-94d4-3d59fe23b6f2"
        },
        "item": {
          "id": "f419bd46-3dce-46e2-8347-33b25928be7d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d7a5b28e-7225-455c-a592-c4a24fdce971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f419bd46-3dce-46e2-8347-33b25928be7d",
        "cursor": {
          "ref": "1624ad5d-419e-426a-8f12-f86b0599bf7f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bff5c74d-c554-435e-94d4-3d59fe23b6f2"
        },
        "item": {
          "id": "f419bd46-3dce-46e2-8347-33b25928be7d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d7a5b28e-7225-455c-a592-c4a24fdce971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7119a2d7-41b7-405c-b615-4844cc54676b",
        "cursor": {
          "ref": "0e537e92-e923-40de-8caa-3f4490342db8",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1dad0000-b7df-4ab1-b148-a76e9e880b12"
        },
        "item": {
          "id": "7119a2d7-41b7-405c-b615-4844cc54676b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9a332072-f434-499a-8af6-e2a40a73c645",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7119a2d7-41b7-405c-b615-4844cc54676b",
        "cursor": {
          "ref": "0e537e92-e923-40de-8caa-3f4490342db8",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1dad0000-b7df-4ab1-b148-a76e9e880b12"
        },
        "item": {
          "id": "7119a2d7-41b7-405c-b615-4844cc54676b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9a332072-f434-499a-8af6-e2a40a73c645",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48fb7a3-c6f8-40ee-a54b-13081f1690f8",
        "cursor": {
          "ref": "bd0544ce-b464-47c3-b921-0c8cc0274b88",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e1048a80-67be-4368-857e-b69cd77f8da5"
        },
        "item": {
          "id": "c48fb7a3-c6f8-40ee-a54b-13081f1690f8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "76326b6d-427c-4e30-af27-331986ab7b6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48fb7a3-c6f8-40ee-a54b-13081f1690f8",
        "cursor": {
          "ref": "bd0544ce-b464-47c3-b921-0c8cc0274b88",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e1048a80-67be-4368-857e-b69cd77f8da5"
        },
        "item": {
          "id": "c48fb7a3-c6f8-40ee-a54b-13081f1690f8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "76326b6d-427c-4e30-af27-331986ab7b6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7d6d92-2e00-4159-9db2-e8955113d0a1",
        "cursor": {
          "ref": "6566c90b-885d-48d9-9e09-fb7c5facef0b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9c6229cf-da2a-48ea-9522-caf8ee27db74"
        },
        "item": {
          "id": "4e7d6d92-2e00-4159-9db2-e8955113d0a1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4d9a0319-80aa-4b4c-a657-2455e33347b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7d6d92-2e00-4159-9db2-e8955113d0a1",
        "cursor": {
          "ref": "6566c90b-885d-48d9-9e09-fb7c5facef0b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9c6229cf-da2a-48ea-9522-caf8ee27db74"
        },
        "item": {
          "id": "4e7d6d92-2e00-4159-9db2-e8955113d0a1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4d9a0319-80aa-4b4c-a657-2455e33347b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae7a63b-2814-4320-a6f2-b84f59fe9b93",
        "cursor": {
          "ref": "36af0373-1948-4fac-ae00-232ef86574df",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33ccbff4-0d4e-4154-a0fe-fc751fbb7503"
        },
        "item": {
          "id": "8ae7a63b-2814-4320-a6f2-b84f59fe9b93",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6257aa9b-7305-4b72-b744-39aeb2736995",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae7a63b-2814-4320-a6f2-b84f59fe9b93",
        "cursor": {
          "ref": "36af0373-1948-4fac-ae00-232ef86574df",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33ccbff4-0d4e-4154-a0fe-fc751fbb7503"
        },
        "item": {
          "id": "8ae7a63b-2814-4320-a6f2-b84f59fe9b93",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6257aa9b-7305-4b72-b744-39aeb2736995",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ea4d1d-7bc6-4245-9973-99efc75bbca4",
        "cursor": {
          "ref": "ffea81b2-4f09-4b07-9400-6eee38a2bddd",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8c5c5f19-ff3a-4fb5-bda6-2d38450ee0c2"
        },
        "item": {
          "id": "13ea4d1d-7bc6-4245-9973-99efc75bbca4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8c013813-5893-41a5-b066-57fcb0504206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ea4d1d-7bc6-4245-9973-99efc75bbca4",
        "cursor": {
          "ref": "ffea81b2-4f09-4b07-9400-6eee38a2bddd",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8c5c5f19-ff3a-4fb5-bda6-2d38450ee0c2"
        },
        "item": {
          "id": "13ea4d1d-7bc6-4245-9973-99efc75bbca4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8c013813-5893-41a5-b066-57fcb0504206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f638cfd9-59c2-4aec-a961-281a25288f08",
        "cursor": {
          "ref": "5bdb2de8-0f5d-45f0-b1ed-1a023c0e2f39",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0d30ee55-6f47-488f-ba33-41e2d3457c27"
        },
        "item": {
          "id": "f638cfd9-59c2-4aec-a961-281a25288f08",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "27e387d8-b900-4ace-a72a-fe881eb368e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f638cfd9-59c2-4aec-a961-281a25288f08",
        "cursor": {
          "ref": "5bdb2de8-0f5d-45f0-b1ed-1a023c0e2f39",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0d30ee55-6f47-488f-ba33-41e2d3457c27"
        },
        "item": {
          "id": "f638cfd9-59c2-4aec-a961-281a25288f08",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "27e387d8-b900-4ace-a72a-fe881eb368e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2689a539-ba4f-4331-9b3b-69e0340d1e51",
        "cursor": {
          "ref": "5eb85dd5-8000-4b87-88f5-b5b781ecc897",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cd8a336c-ae69-48e1-a2c6-a1bd06cf7712"
        },
        "item": {
          "id": "2689a539-ba4f-4331-9b3b-69e0340d1e51",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f212cf85-778e-4399-890c-a9dde28eaed1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2689a539-ba4f-4331-9b3b-69e0340d1e51",
        "cursor": {
          "ref": "5eb85dd5-8000-4b87-88f5-b5b781ecc897",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cd8a336c-ae69-48e1-a2c6-a1bd06cf7712"
        },
        "item": {
          "id": "2689a539-ba4f-4331-9b3b-69e0340d1e51",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f212cf85-778e-4399-890c-a9dde28eaed1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752ae812-1bad-40f9-9cd0-d494d4ba2b64",
        "cursor": {
          "ref": "43765246-113e-41cc-bdce-d75eb76092b2",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d3169f22-c210-414e-af2d-d330f31ffced"
        },
        "item": {
          "id": "752ae812-1bad-40f9-9cd0-d494d4ba2b64",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "631633f1-d2ec-42b7-9885-bfde90e8e2fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752ae812-1bad-40f9-9cd0-d494d4ba2b64",
        "cursor": {
          "ref": "43765246-113e-41cc-bdce-d75eb76092b2",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d3169f22-c210-414e-af2d-d330f31ffced"
        },
        "item": {
          "id": "752ae812-1bad-40f9-9cd0-d494d4ba2b64",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "631633f1-d2ec-42b7-9885-bfde90e8e2fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd740d5-5d66-4060-8234-0c00714827b5",
        "cursor": {
          "ref": "0e865c8a-c204-488b-acb8-ca67ef907c5d",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "03f2606b-40b8-4b56-b959-6f62092f6fb4"
        },
        "item": {
          "id": "6cd740d5-5d66-4060-8234-0c00714827b5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7e277e9b-9c2c-47cc-b3d7-76a5a56a71e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd740d5-5d66-4060-8234-0c00714827b5",
        "cursor": {
          "ref": "0e865c8a-c204-488b-acb8-ca67ef907c5d",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "03f2606b-40b8-4b56-b959-6f62092f6fb4"
        },
        "item": {
          "id": "6cd740d5-5d66-4060-8234-0c00714827b5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7e277e9b-9c2c-47cc-b3d7-76a5a56a71e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d610d6a-19e6-4862-b0dd-9e9dc6a7cbbb",
        "cursor": {
          "ref": "a67c9915-fe49-4b7a-a19c-09c738686e77",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9d90858d-fc4f-4d75-814d-d82d8b996da9"
        },
        "item": {
          "id": "8d610d6a-19e6-4862-b0dd-9e9dc6a7cbbb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c02913ec-f5da-45c5-8f43-2bb95ed16b27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d610d6a-19e6-4862-b0dd-9e9dc6a7cbbb",
        "cursor": {
          "ref": "a67c9915-fe49-4b7a-a19c-09c738686e77",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9d90858d-fc4f-4d75-814d-d82d8b996da9"
        },
        "item": {
          "id": "8d610d6a-19e6-4862-b0dd-9e9dc6a7cbbb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c02913ec-f5da-45c5-8f43-2bb95ed16b27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b9799c-4143-405c-876d-c2223a3ed9ad",
        "cursor": {
          "ref": "4ff93f5d-e170-4a33-afe2-f00b82b6edac",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3bd02c0f-7068-4b48-9b4b-dc3da17627c9"
        },
        "item": {
          "id": "52b9799c-4143-405c-876d-c2223a3ed9ad",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e9cccc83-79c5-45c3-890e-54731fd33b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b9799c-4143-405c-876d-c2223a3ed9ad",
        "cursor": {
          "ref": "4ff93f5d-e170-4a33-afe2-f00b82b6edac",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3bd02c0f-7068-4b48-9b4b-dc3da17627c9"
        },
        "item": {
          "id": "52b9799c-4143-405c-876d-c2223a3ed9ad",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e9cccc83-79c5-45c3-890e-54731fd33b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4396078b-1bba-4790-a8cd-c7fdf7028f11",
        "cursor": {
          "ref": "d24e446c-c2eb-4bf6-ba08-1c3c872c7936",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4450f376-10e1-4588-8d34-40f8181f1ec0"
        },
        "item": {
          "id": "4396078b-1bba-4790-a8cd-c7fdf7028f11",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e7824e97-446e-4ecd-8786-0c44051dff9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4396078b-1bba-4790-a8cd-c7fdf7028f11",
        "cursor": {
          "ref": "d24e446c-c2eb-4bf6-ba08-1c3c872c7936",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4450f376-10e1-4588-8d34-40f8181f1ec0"
        },
        "item": {
          "id": "4396078b-1bba-4790-a8cd-c7fdf7028f11",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e7824e97-446e-4ecd-8786-0c44051dff9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e42541-fd2c-40f6-9fdd-f7f690712a65",
        "cursor": {
          "ref": "7180bae8-3823-46bc-a987-fcf1ab41288e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0a754876-fd55-4876-ac8c-8a4efa9ab2e5"
        },
        "item": {
          "id": "f9e42541-fd2c-40f6-9fdd-f7f690712a65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "014b6a8d-bf36-4059-8937-b167832bd109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e42541-fd2c-40f6-9fdd-f7f690712a65",
        "cursor": {
          "ref": "7180bae8-3823-46bc-a987-fcf1ab41288e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0a754876-fd55-4876-ac8c-8a4efa9ab2e5"
        },
        "item": {
          "id": "f9e42541-fd2c-40f6-9fdd-f7f690712a65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "014b6a8d-bf36-4059-8937-b167832bd109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7e21f3-888c-40cc-82e0-e10d8cafcea2",
        "cursor": {
          "ref": "7c074811-ee2f-4c59-aaf2-7ba57736239b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "13e65836-bbea-4dc9-a906-ed223b870c94"
        },
        "item": {
          "id": "0c7e21f3-888c-40cc-82e0-e10d8cafcea2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "56a36558-c795-4077-9fed-87f2a1ce73e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7e21f3-888c-40cc-82e0-e10d8cafcea2",
        "cursor": {
          "ref": "7c074811-ee2f-4c59-aaf2-7ba57736239b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "13e65836-bbea-4dc9-a906-ed223b870c94"
        },
        "item": {
          "id": "0c7e21f3-888c-40cc-82e0-e10d8cafcea2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "56a36558-c795-4077-9fed-87f2a1ce73e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd55374-74ca-4345-90d2-8b083680da76",
        "cursor": {
          "ref": "95f92921-7842-4e95-a3b5-0cb3a5cd316a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1d94c601-393b-4800-a9f3-7883bc12af8d"
        },
        "item": {
          "id": "1fd55374-74ca-4345-90d2-8b083680da76",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "67536d2c-03d1-41ed-9f79-fa7a54b7ba7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd55374-74ca-4345-90d2-8b083680da76",
        "cursor": {
          "ref": "95f92921-7842-4e95-a3b5-0cb3a5cd316a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1d94c601-393b-4800-a9f3-7883bc12af8d"
        },
        "item": {
          "id": "1fd55374-74ca-4345-90d2-8b083680da76",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "67536d2c-03d1-41ed-9f79-fa7a54b7ba7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c20f76f-ea01-484c-834f-1a6c07e9e02b",
        "cursor": {
          "ref": "f5c3096e-893d-4352-87fd-f0bb1e2dd62a",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "73cf75f9-5dc4-4b9b-9ee5-68132276da22"
        },
        "item": {
          "id": "5c20f76f-ea01-484c-834f-1a6c07e9e02b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4f604c26-ad51-4def-af76-1943b1948cf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c20f76f-ea01-484c-834f-1a6c07e9e02b",
        "cursor": {
          "ref": "f5c3096e-893d-4352-87fd-f0bb1e2dd62a",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "73cf75f9-5dc4-4b9b-9ee5-68132276da22"
        },
        "item": {
          "id": "5c20f76f-ea01-484c-834f-1a6c07e9e02b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4f604c26-ad51-4def-af76-1943b1948cf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593f19d4-a963-4cdb-a076-6fc6b8c7a242",
        "cursor": {
          "ref": "b6d237f2-6933-44d1-a3f3-e1bc00198698",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "276c1ff3-ac84-4b83-9f27-6d0f65a5fde8"
        },
        "item": {
          "id": "593f19d4-a963-4cdb-a076-6fc6b8c7a242",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb2b6706-3b92-42d6-8b79-ee58d2ed59c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593f19d4-a963-4cdb-a076-6fc6b8c7a242",
        "cursor": {
          "ref": "b6d237f2-6933-44d1-a3f3-e1bc00198698",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "276c1ff3-ac84-4b83-9f27-6d0f65a5fde8"
        },
        "item": {
          "id": "593f19d4-a963-4cdb-a076-6fc6b8c7a242",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb2b6706-3b92-42d6-8b79-ee58d2ed59c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0325743-4a00-4aa4-b2cc-337781f1e43a",
        "cursor": {
          "ref": "845cec02-1796-46bd-b466-44b81d033a80",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c2614f41-6f11-4fc5-9d39-44407892ee03"
        },
        "item": {
          "id": "e0325743-4a00-4aa4-b2cc-337781f1e43a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a21695d7-ad81-40aa-b55d-9cfefc5805cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0325743-4a00-4aa4-b2cc-337781f1e43a",
        "cursor": {
          "ref": "845cec02-1796-46bd-b466-44b81d033a80",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c2614f41-6f11-4fc5-9d39-44407892ee03"
        },
        "item": {
          "id": "e0325743-4a00-4aa4-b2cc-337781f1e43a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a21695d7-ad81-40aa-b55d-9cfefc5805cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16627279-0309-40ee-a9d2-bacde3b088ce",
        "cursor": {
          "ref": "6be0a100-4985-41db-91a8-63d24bf29915",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2867881e-d20b-4d6b-9e62-af7e8b70c5ee"
        },
        "item": {
          "id": "16627279-0309-40ee-a9d2-bacde3b088ce",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "abb74bdf-a9c7-4f33-9ce6-e385ea56ab7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16627279-0309-40ee-a9d2-bacde3b088ce",
        "cursor": {
          "ref": "6be0a100-4985-41db-91a8-63d24bf29915",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2867881e-d20b-4d6b-9e62-af7e8b70c5ee"
        },
        "item": {
          "id": "16627279-0309-40ee-a9d2-bacde3b088ce",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "abb74bdf-a9c7-4f33-9ce6-e385ea56ab7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004d1412-6ed9-48b9-a10e-75a2dfd1e544",
        "cursor": {
          "ref": "bd39ba1d-09b2-406a-9b9d-7f2b43ff4ce5",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8bd02b58-9206-4bbf-90eb-4114110e6038"
        },
        "item": {
          "id": "004d1412-6ed9-48b9-a10e-75a2dfd1e544",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "427d4984-689b-4297-b15d-080fccc2338e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004d1412-6ed9-48b9-a10e-75a2dfd1e544",
        "cursor": {
          "ref": "bd39ba1d-09b2-406a-9b9d-7f2b43ff4ce5",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8bd02b58-9206-4bbf-90eb-4114110e6038"
        },
        "item": {
          "id": "004d1412-6ed9-48b9-a10e-75a2dfd1e544",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "427d4984-689b-4297-b15d-080fccc2338e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb0dfcd-fd0a-4aa6-8735-c47d069df837",
        "cursor": {
          "ref": "ea284a4b-eb16-47d4-ba64-2b912cff30e8",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "52e8a278-406a-46e4-bc72-1640e510fab2"
        },
        "item": {
          "id": "beb0dfcd-fd0a-4aa6-8735-c47d069df837",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1101c7f9-9e72-45e5-96d6-68f4da5f2ad8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb0dfcd-fd0a-4aa6-8735-c47d069df837",
        "cursor": {
          "ref": "ea284a4b-eb16-47d4-ba64-2b912cff30e8",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "52e8a278-406a-46e4-bc72-1640e510fab2"
        },
        "item": {
          "id": "beb0dfcd-fd0a-4aa6-8735-c47d069df837",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1101c7f9-9e72-45e5-96d6-68f4da5f2ad8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb86109-4ff6-4559-9c5b-6c6c1bdb357e",
        "cursor": {
          "ref": "abe83c21-334c-4328-aa58-a34beae55c54",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "04eae4b0-7d60-45c5-a405-87427ff16d42"
        },
        "item": {
          "id": "ddb86109-4ff6-4559-9c5b-6c6c1bdb357e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "babd021a-d704-4d82-bd80-5d0bb6eb5d15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb86109-4ff6-4559-9c5b-6c6c1bdb357e",
        "cursor": {
          "ref": "abe83c21-334c-4328-aa58-a34beae55c54",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "04eae4b0-7d60-45c5-a405-87427ff16d42"
        },
        "item": {
          "id": "ddb86109-4ff6-4559-9c5b-6c6c1bdb357e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "babd021a-d704-4d82-bd80-5d0bb6eb5d15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3246c650-89ab-4482-b4ba-8d9e559973ca",
        "cursor": {
          "ref": "4f264fb4-8877-44af-8c87-fb380bce6517",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3b5a72b7-77ce-4e44-b474-1e6770b0ca67"
        },
        "item": {
          "id": "3246c650-89ab-4482-b4ba-8d9e559973ca",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "58f74236-7a8b-418a-912f-4c7b1ec9daf4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3246c650-89ab-4482-b4ba-8d9e559973ca",
        "cursor": {
          "ref": "4f264fb4-8877-44af-8c87-fb380bce6517",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3b5a72b7-77ce-4e44-b474-1e6770b0ca67"
        },
        "item": {
          "id": "3246c650-89ab-4482-b4ba-8d9e559973ca",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "58f74236-7a8b-418a-912f-4c7b1ec9daf4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e36fbc4-8fe0-476a-9df1-3232eba1ffd3",
        "cursor": {
          "ref": "6f0637c1-03eb-4a5c-9622-ba2ce13e7f61",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "64487742-bbaf-4dcc-8561-949652673994"
        },
        "item": {
          "id": "6e36fbc4-8fe0-476a-9df1-3232eba1ffd3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fbbc5e4b-0fa2-4760-839e-23f980c1f334",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e36fbc4-8fe0-476a-9df1-3232eba1ffd3",
        "cursor": {
          "ref": "6f0637c1-03eb-4a5c-9622-ba2ce13e7f61",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "64487742-bbaf-4dcc-8561-949652673994"
        },
        "item": {
          "id": "6e36fbc4-8fe0-476a-9df1-3232eba1ffd3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fbbc5e4b-0fa2-4760-839e-23f980c1f334",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825b942d-c99c-438b-be3b-a91eec5ed385",
        "cursor": {
          "ref": "aa78fb12-59f4-43da-a04c-0a085ffeb9f3",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "988f45c1-1f90-4185-aef7-6afa2846a3cd"
        },
        "item": {
          "id": "825b942d-c99c-438b-be3b-a91eec5ed385",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ccc85d46-a549-4841-9688-a2d9439ae78a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825b942d-c99c-438b-be3b-a91eec5ed385",
        "cursor": {
          "ref": "aa78fb12-59f4-43da-a04c-0a085ffeb9f3",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "988f45c1-1f90-4185-aef7-6afa2846a3cd"
        },
        "item": {
          "id": "825b942d-c99c-438b-be3b-a91eec5ed385",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ccc85d46-a549-4841-9688-a2d9439ae78a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bc78bd-69e5-4fc0-8d74-0d0e069334f4",
        "cursor": {
          "ref": "401e37ae-9e61-4dd0-a172-b3d57fc1359c",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "efc18b91-83b7-4df4-b881-4959337d136f"
        },
        "item": {
          "id": "a0bc78bd-69e5-4fc0-8d74-0d0e069334f4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa924fe1-4f82-44bf-9465-9e1e6401f14e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bc78bd-69e5-4fc0-8d74-0d0e069334f4",
        "cursor": {
          "ref": "401e37ae-9e61-4dd0-a172-b3d57fc1359c",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "efc18b91-83b7-4df4-b881-4959337d136f"
        },
        "item": {
          "id": "a0bc78bd-69e5-4fc0-8d74-0d0e069334f4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa924fe1-4f82-44bf-9465-9e1e6401f14e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a31533-ff69-4aaa-9747-8e7d639cf3a4",
        "cursor": {
          "ref": "cc3193ce-77fa-4b1f-924f-2e0e40b608c7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "703c786e-95ac-48c3-8bfc-d5e081f05d5a"
        },
        "item": {
          "id": "37a31533-ff69-4aaa-9747-8e7d639cf3a4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4c2799f1-95b9-4eb0-8f51-a28abd797fa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a31533-ff69-4aaa-9747-8e7d639cf3a4",
        "cursor": {
          "ref": "cc3193ce-77fa-4b1f-924f-2e0e40b608c7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "703c786e-95ac-48c3-8bfc-d5e081f05d5a"
        },
        "item": {
          "id": "37a31533-ff69-4aaa-9747-8e7d639cf3a4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4c2799f1-95b9-4eb0-8f51-a28abd797fa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c73889-43e8-47a7-a815-596448d05826",
        "cursor": {
          "ref": "53146a8f-506a-4a33-87b7-20a9ed753a97",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "49ae209b-cdbb-4f97-9985-36a5eb3f3c50"
        },
        "item": {
          "id": "22c73889-43e8-47a7-a815-596448d05826",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "78818743-86f3-44e6-997a-faa740516020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c73889-43e8-47a7-a815-596448d05826",
        "cursor": {
          "ref": "53146a8f-506a-4a33-87b7-20a9ed753a97",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "49ae209b-cdbb-4f97-9985-36a5eb3f3c50"
        },
        "item": {
          "id": "22c73889-43e8-47a7-a815-596448d05826",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "78818743-86f3-44e6-997a-faa740516020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570eda02-818d-44d6-9bb5-e0ce0af428dd",
        "cursor": {
          "ref": "d23a290d-2009-4363-bf03-fe1109701b2d",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c955d84e-bb85-4a06-8593-dfa68ab2a232"
        },
        "item": {
          "id": "570eda02-818d-44d6-9bb5-e0ce0af428dd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "55c875f3-b563-4b55-bb22-e8a753c1b8fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570eda02-818d-44d6-9bb5-e0ce0af428dd",
        "cursor": {
          "ref": "d23a290d-2009-4363-bf03-fe1109701b2d",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c955d84e-bb85-4a06-8593-dfa68ab2a232"
        },
        "item": {
          "id": "570eda02-818d-44d6-9bb5-e0ce0af428dd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "55c875f3-b563-4b55-bb22-e8a753c1b8fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e70850-375a-4333-b665-4a20abcfe23b",
        "cursor": {
          "ref": "49a549d0-cd17-489a-940c-ca13f61edea4",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d23427bc-6f20-4f29-bccb-ed04b40fc7ff"
        },
        "item": {
          "id": "05e70850-375a-4333-b665-4a20abcfe23b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e9aea384-9d73-43fe-9e60-787f4a678ce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e70850-375a-4333-b665-4a20abcfe23b",
        "cursor": {
          "ref": "49a549d0-cd17-489a-940c-ca13f61edea4",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d23427bc-6f20-4f29-bccb-ed04b40fc7ff"
        },
        "item": {
          "id": "05e70850-375a-4333-b665-4a20abcfe23b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e9aea384-9d73-43fe-9e60-787f4a678ce5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662357a2-9e06-45b6-9a54-aeeff6be750d",
        "cursor": {
          "ref": "9a20dc14-9741-4e5a-bc70-63f18a60da39",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5b571650-9273-4431-9862-4d1d893d0048"
        },
        "item": {
          "id": "662357a2-9e06-45b6-9a54-aeeff6be750d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d648cf15-9d80-4efc-bf0a-3a3de1e28167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662357a2-9e06-45b6-9a54-aeeff6be750d",
        "cursor": {
          "ref": "9a20dc14-9741-4e5a-bc70-63f18a60da39",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5b571650-9273-4431-9862-4d1d893d0048"
        },
        "item": {
          "id": "662357a2-9e06-45b6-9a54-aeeff6be750d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d648cf15-9d80-4efc-bf0a-3a3de1e28167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91306dc1-4412-45bc-b247-b669abbfbce8",
        "cursor": {
          "ref": "e32ab055-0376-4607-8f12-3db465b5dfe7",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1b6ed44b-4741-4f9b-8596-da0af482286c"
        },
        "item": {
          "id": "91306dc1-4412-45bc-b247-b669abbfbce8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6b161507-6dbf-4166-a037-4da001ada6a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91306dc1-4412-45bc-b247-b669abbfbce8",
        "cursor": {
          "ref": "e32ab055-0376-4607-8f12-3db465b5dfe7",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1b6ed44b-4741-4f9b-8596-da0af482286c"
        },
        "item": {
          "id": "91306dc1-4412-45bc-b247-b669abbfbce8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6b161507-6dbf-4166-a037-4da001ada6a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cba051-66bf-49c3-9037-d6a4f42a119b",
        "cursor": {
          "ref": "2a242bd8-6e00-4231-b1fe-8ba52b476a64",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "63e4ecbb-61e5-4927-81e0-5558d121a152"
        },
        "item": {
          "id": "f5cba051-66bf-49c3-9037-d6a4f42a119b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c88d1c12-7883-4110-986e-037647e948ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cba051-66bf-49c3-9037-d6a4f42a119b",
        "cursor": {
          "ref": "2a242bd8-6e00-4231-b1fe-8ba52b476a64",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "63e4ecbb-61e5-4927-81e0-5558d121a152"
        },
        "item": {
          "id": "f5cba051-66bf-49c3-9037-d6a4f42a119b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c88d1c12-7883-4110-986e-037647e948ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e637a7-780f-4ade-8179-1914e2606fbb",
        "cursor": {
          "ref": "58c3b934-9086-4218-a3c4-bdf61dc25d2a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3f7ef186-07b7-4efe-9f4e-2a5285903933"
        },
        "item": {
          "id": "b1e637a7-780f-4ade-8179-1914e2606fbb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "acbe8116-1717-4d6d-925c-3e1d26ec9dba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e637a7-780f-4ade-8179-1914e2606fbb",
        "cursor": {
          "ref": "58c3b934-9086-4218-a3c4-bdf61dc25d2a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3f7ef186-07b7-4efe-9f4e-2a5285903933"
        },
        "item": {
          "id": "b1e637a7-780f-4ade-8179-1914e2606fbb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "acbe8116-1717-4d6d-925c-3e1d26ec9dba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5504ea-d320-4213-83f2-8f224bc4b9a8",
        "cursor": {
          "ref": "f2e58fa5-23db-4dfa-8125-c955290c2078",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f1d9d812-dcf6-420f-9adf-673d2d542b72"
        },
        "item": {
          "id": "2e5504ea-d320-4213-83f2-8f224bc4b9a8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "05eb6182-5d93-4555-a9be-82420fe68e69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5504ea-d320-4213-83f2-8f224bc4b9a8",
        "cursor": {
          "ref": "f2e58fa5-23db-4dfa-8125-c955290c2078",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f1d9d812-dcf6-420f-9adf-673d2d542b72"
        },
        "item": {
          "id": "2e5504ea-d320-4213-83f2-8f224bc4b9a8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "05eb6182-5d93-4555-a9be-82420fe68e69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f996dd0a-2846-4c61-a0c0-79412a7e58e4",
        "cursor": {
          "ref": "38f2cb92-16c1-4224-bd89-7a724d30df69",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a3f5b3f9-779a-42a4-940a-ded3eb1344bd"
        },
        "item": {
          "id": "f996dd0a-2846-4c61-a0c0-79412a7e58e4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7ef959a3-afb9-4250-8d9c-d3acee2886c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f996dd0a-2846-4c61-a0c0-79412a7e58e4",
        "cursor": {
          "ref": "38f2cb92-16c1-4224-bd89-7a724d30df69",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a3f5b3f9-779a-42a4-940a-ded3eb1344bd"
        },
        "item": {
          "id": "f996dd0a-2846-4c61-a0c0-79412a7e58e4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7ef959a3-afb9-4250-8d9c-d3acee2886c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1d56a8-688a-405f-8900-78a706181187",
        "cursor": {
          "ref": "c8de2693-3dfb-459f-b51c-4eace735e6c9",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e7faa1f2-690d-48b4-9280-2834a92fc3a6"
        },
        "item": {
          "id": "1a1d56a8-688a-405f-8900-78a706181187",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a2b43dac-2212-464c-8973-4f430f424fc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1d56a8-688a-405f-8900-78a706181187",
        "cursor": {
          "ref": "c8de2693-3dfb-459f-b51c-4eace735e6c9",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e7faa1f2-690d-48b4-9280-2834a92fc3a6"
        },
        "item": {
          "id": "1a1d56a8-688a-405f-8900-78a706181187",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a2b43dac-2212-464c-8973-4f430f424fc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0896b0e2-83a1-4497-ba89-63d9d909845a",
        "cursor": {
          "ref": "226b3201-41b8-4935-8150-d1b279bb92ba",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f53ebcc3-07a0-487c-91cb-96ccb5a36ae0"
        },
        "item": {
          "id": "0896b0e2-83a1-4497-ba89-63d9d909845a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "87cb0f25-c06c-499b-a147-896264becd09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0896b0e2-83a1-4497-ba89-63d9d909845a",
        "cursor": {
          "ref": "226b3201-41b8-4935-8150-d1b279bb92ba",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f53ebcc3-07a0-487c-91cb-96ccb5a36ae0"
        },
        "item": {
          "id": "0896b0e2-83a1-4497-ba89-63d9d909845a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "87cb0f25-c06c-499b-a147-896264becd09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9114f108-0b23-4465-97f7-ad285070a659",
        "cursor": {
          "ref": "2a57f269-c840-4616-afd1-d8822d10eff0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "83c15d92-33c8-42f6-9817-2a6cc9012f17"
        },
        "item": {
          "id": "9114f108-0b23-4465-97f7-ad285070a659",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f3f8890a-609a-4b2a-82f6-8e457252c11f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9114f108-0b23-4465-97f7-ad285070a659",
        "cursor": {
          "ref": "2a57f269-c840-4616-afd1-d8822d10eff0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "83c15d92-33c8-42f6-9817-2a6cc9012f17"
        },
        "item": {
          "id": "9114f108-0b23-4465-97f7-ad285070a659",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f3f8890a-609a-4b2a-82f6-8e457252c11f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92050e99-9f1c-4c50-ae9e-7f4bc43ce1e7",
        "cursor": {
          "ref": "a0d55425-2e50-432d-ab3c-d934238941c9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b9b92961-e37c-494e-9e61-a1d61ec7cf5e"
        },
        "item": {
          "id": "92050e99-9f1c-4c50-ae9e-7f4bc43ce1e7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "037177d2-87c7-42e9-859a-67a28f7d34fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92050e99-9f1c-4c50-ae9e-7f4bc43ce1e7",
        "cursor": {
          "ref": "a0d55425-2e50-432d-ab3c-d934238941c9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b9b92961-e37c-494e-9e61-a1d61ec7cf5e"
        },
        "item": {
          "id": "92050e99-9f1c-4c50-ae9e-7f4bc43ce1e7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "037177d2-87c7-42e9-859a-67a28f7d34fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c711bf73-a102-40d6-aae0-3a544e0b6849",
        "cursor": {
          "ref": "55262544-421b-4fea-953f-a0640f60830c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "82709319-8f41-4536-bce1-83cbd998e15f"
        },
        "item": {
          "id": "c711bf73-a102-40d6-aae0-3a544e0b6849",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "505c5baa-b3ec-4216-a92d-a06f9c1c765f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c711bf73-a102-40d6-aae0-3a544e0b6849",
        "cursor": {
          "ref": "55262544-421b-4fea-953f-a0640f60830c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "82709319-8f41-4536-bce1-83cbd998e15f"
        },
        "item": {
          "id": "c711bf73-a102-40d6-aae0-3a544e0b6849",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "505c5baa-b3ec-4216-a92d-a06f9c1c765f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e124836-09b9-493c-8d50-997c9cb22099",
        "cursor": {
          "ref": "0a5c3dde-ee06-45e3-8a98-70c49e3b7930",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6d601f1e-78ed-4b63-9d4c-901480ec78a3"
        },
        "item": {
          "id": "9e124836-09b9-493c-8d50-997c9cb22099",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8275852c-f4c8-4377-b8bb-c7ee699a9285",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e124836-09b9-493c-8d50-997c9cb22099",
        "cursor": {
          "ref": "0a5c3dde-ee06-45e3-8a98-70c49e3b7930",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6d601f1e-78ed-4b63-9d4c-901480ec78a3"
        },
        "item": {
          "id": "9e124836-09b9-493c-8d50-997c9cb22099",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8275852c-f4c8-4377-b8bb-c7ee699a9285",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152ecdb1-286f-4f6b-8869-1ae31e7a411d",
        "cursor": {
          "ref": "bc7bf43f-1203-4270-9cf9-30ae2ebf6541",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e21e0cab-af4c-49c4-a723-f9a77ea93a22"
        },
        "item": {
          "id": "152ecdb1-286f-4f6b-8869-1ae31e7a411d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3b3a5f50-d723-4d61-8654-5a59f3e8ec10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152ecdb1-286f-4f6b-8869-1ae31e7a411d",
        "cursor": {
          "ref": "bc7bf43f-1203-4270-9cf9-30ae2ebf6541",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e21e0cab-af4c-49c4-a723-f9a77ea93a22"
        },
        "item": {
          "id": "152ecdb1-286f-4f6b-8869-1ae31e7a411d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3b3a5f50-d723-4d61-8654-5a59f3e8ec10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0933021-ec7a-4605-8cbc-fd2d56f487b5",
        "cursor": {
          "ref": "cf239bd6-eac0-46c0-b017-4dddf1ea0bc1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "875bbe5a-cf51-418d-b356-c5cd8a7c0afc"
        },
        "item": {
          "id": "e0933021-ec7a-4605-8cbc-fd2d56f487b5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9b3490a5-4722-43fb-954b-dbeedba53954",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0933021-ec7a-4605-8cbc-fd2d56f487b5",
        "cursor": {
          "ref": "cf239bd6-eac0-46c0-b017-4dddf1ea0bc1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "875bbe5a-cf51-418d-b356-c5cd8a7c0afc"
        },
        "item": {
          "id": "e0933021-ec7a-4605-8cbc-fd2d56f487b5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9b3490a5-4722-43fb-954b-dbeedba53954",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5f2048-e80d-4488-9f79-daf03ea230a7",
        "cursor": {
          "ref": "41e4aee3-f8f6-4c00-842c-65e49b25390e",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "84c3eb3c-e6cd-493d-abd9-dd9a99ef5eae"
        },
        "item": {
          "id": "2f5f2048-e80d-4488-9f79-daf03ea230a7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b2abe9f1-d975-4b82-9cb6-7f7c5abb9f0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5f2048-e80d-4488-9f79-daf03ea230a7",
        "cursor": {
          "ref": "41e4aee3-f8f6-4c00-842c-65e49b25390e",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "84c3eb3c-e6cd-493d-abd9-dd9a99ef5eae"
        },
        "item": {
          "id": "2f5f2048-e80d-4488-9f79-daf03ea230a7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b2abe9f1-d975-4b82-9cb6-7f7c5abb9f0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2680bc1a-dc06-4057-84a2-6c5c5e11d8aa",
        "cursor": {
          "ref": "82a78f2f-7cf1-4d07-a9a9-f810bd2920cd",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "34cf3c53-03b3-428c-9f3d-1e24d7917002"
        },
        "item": {
          "id": "2680bc1a-dc06-4057-84a2-6c5c5e11d8aa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0a5da000-0ea7-4699-b99b-f05dd81848d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2680bc1a-dc06-4057-84a2-6c5c5e11d8aa",
        "cursor": {
          "ref": "82a78f2f-7cf1-4d07-a9a9-f810bd2920cd",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "34cf3c53-03b3-428c-9f3d-1e24d7917002"
        },
        "item": {
          "id": "2680bc1a-dc06-4057-84a2-6c5c5e11d8aa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0a5da000-0ea7-4699-b99b-f05dd81848d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a26224e-c48e-4668-b07d-015347ee2456",
        "cursor": {
          "ref": "25af6692-1f9d-45ee-a83c-c12954739b7f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "708cf51e-32aa-4b77-a950-d0f1ccc97695"
        },
        "item": {
          "id": "8a26224e-c48e-4668-b07d-015347ee2456",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4585d569-b193-4c2f-a831-3ab666d3408f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a26224e-c48e-4668-b07d-015347ee2456",
        "cursor": {
          "ref": "25af6692-1f9d-45ee-a83c-c12954739b7f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "708cf51e-32aa-4b77-a950-d0f1ccc97695"
        },
        "item": {
          "id": "8a26224e-c48e-4668-b07d-015347ee2456",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4585d569-b193-4c2f-a831-3ab666d3408f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7131b9cf-e07c-4ef6-b417-c86218fe4622",
        "cursor": {
          "ref": "60c5dcfa-fcdc-4ef7-9657-116fe2f9b67b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "83c7a93d-a90c-49df-95d0-f862fdeb2364"
        },
        "item": {
          "id": "7131b9cf-e07c-4ef6-b417-c86218fe4622",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "25b3d4ec-6851-4751-8829-9b940a259b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7131b9cf-e07c-4ef6-b417-c86218fe4622",
        "cursor": {
          "ref": "60c5dcfa-fcdc-4ef7-9657-116fe2f9b67b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "83c7a93d-a90c-49df-95d0-f862fdeb2364"
        },
        "item": {
          "id": "7131b9cf-e07c-4ef6-b417-c86218fe4622",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "25b3d4ec-6851-4751-8829-9b940a259b5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d1fa06-2e27-4d3e-838b-1653e65d6f6a",
        "cursor": {
          "ref": "bd65ee61-668b-4683-83b4-6a698cbf0ba7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d67fe7e1-a08b-446f-82b2-6add3d5c82de"
        },
        "item": {
          "id": "49d1fa06-2e27-4d3e-838b-1653e65d6f6a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0f5ee3f2-24d1-49c8-b0e6-0041f07eb00c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d1fa06-2e27-4d3e-838b-1653e65d6f6a",
        "cursor": {
          "ref": "bd65ee61-668b-4683-83b4-6a698cbf0ba7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d67fe7e1-a08b-446f-82b2-6add3d5c82de"
        },
        "item": {
          "id": "49d1fa06-2e27-4d3e-838b-1653e65d6f6a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0f5ee3f2-24d1-49c8-b0e6-0041f07eb00c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7512748e-7a80-4039-9abf-f4773900d35e",
        "cursor": {
          "ref": "a3d7e736-7fa2-4eb9-a9a7-79b75d16a573",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f69cb016-4e49-4429-ae37-20529511e146"
        },
        "item": {
          "id": "7512748e-7a80-4039-9abf-f4773900d35e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f508b398-998f-4127-9673-6f3ba1a1b448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7512748e-7a80-4039-9abf-f4773900d35e",
        "cursor": {
          "ref": "a3d7e736-7fa2-4eb9-a9a7-79b75d16a573",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f69cb016-4e49-4429-ae37-20529511e146"
        },
        "item": {
          "id": "7512748e-7a80-4039-9abf-f4773900d35e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f508b398-998f-4127-9673-6f3ba1a1b448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3886236-12db-42fe-8d0f-d5338b435317",
        "cursor": {
          "ref": "66185865-623c-4123-87be-02401c9a3177",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1708bdc3-c360-49ab-907e-b3480a9a900e"
        },
        "item": {
          "id": "c3886236-12db-42fe-8d0f-d5338b435317",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "070a2cc3-d07c-48de-ae16-a4ed2c467dde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3886236-12db-42fe-8d0f-d5338b435317",
        "cursor": {
          "ref": "66185865-623c-4123-87be-02401c9a3177",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1708bdc3-c360-49ab-907e-b3480a9a900e"
        },
        "item": {
          "id": "c3886236-12db-42fe-8d0f-d5338b435317",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "070a2cc3-d07c-48de-ae16-a4ed2c467dde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ba6055-1c07-4cc4-bbd8-aae0ec5ddbd3",
        "cursor": {
          "ref": "babeb37a-e8ed-4511-840a-40aa0c93cb31",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "05e43fa6-1e53-4933-949f-20d11ec638f4"
        },
        "item": {
          "id": "c1ba6055-1c07-4cc4-bbd8-aae0ec5ddbd3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "83e89773-2dba-44cc-88c8-62ac91afac52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ba6055-1c07-4cc4-bbd8-aae0ec5ddbd3",
        "cursor": {
          "ref": "babeb37a-e8ed-4511-840a-40aa0c93cb31",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "05e43fa6-1e53-4933-949f-20d11ec638f4"
        },
        "item": {
          "id": "c1ba6055-1c07-4cc4-bbd8-aae0ec5ddbd3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "83e89773-2dba-44cc-88c8-62ac91afac52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92148fd-56ab-43d0-bb42-0a167eb58f44",
        "cursor": {
          "ref": "04aad635-7547-4c6e-8298-e28a5a16e04e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a859b41d-091c-4ec5-a287-30decb9516cf"
        },
        "item": {
          "id": "e92148fd-56ab-43d0-bb42-0a167eb58f44",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "37b689ba-8e26-4f44-9b6f-b702b0ec6503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92148fd-56ab-43d0-bb42-0a167eb58f44",
        "cursor": {
          "ref": "04aad635-7547-4c6e-8298-e28a5a16e04e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a859b41d-091c-4ec5-a287-30decb9516cf"
        },
        "item": {
          "id": "e92148fd-56ab-43d0-bb42-0a167eb58f44",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "37b689ba-8e26-4f44-9b6f-b702b0ec6503",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6da9eb2-2bbc-49df-8e45-3127f9a8adc5",
        "cursor": {
          "ref": "1d13ba4a-b471-45ad-b60a-a5de56907a00",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4c9d2893-4216-4f21-ab1b-f2fc7098d4d2"
        },
        "item": {
          "id": "b6da9eb2-2bbc-49df-8e45-3127f9a8adc5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "986ee8f5-72ad-4572-a1f1-225e504886c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6da9eb2-2bbc-49df-8e45-3127f9a8adc5",
        "cursor": {
          "ref": "1d13ba4a-b471-45ad-b60a-a5de56907a00",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4c9d2893-4216-4f21-ab1b-f2fc7098d4d2"
        },
        "item": {
          "id": "b6da9eb2-2bbc-49df-8e45-3127f9a8adc5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "986ee8f5-72ad-4572-a1f1-225e504886c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e143171c-8eb6-4ea4-8587-047182575758",
        "cursor": {
          "ref": "338dbc8c-1bba-4bc7-ad02-fe6a0ed91b0d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e0592c36-4e6d-48ee-a0bd-0c5692a4a02d"
        },
        "item": {
          "id": "e143171c-8eb6-4ea4-8587-047182575758",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c45d0cd7-a233-42ce-892f-3c3421f3ee0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e143171c-8eb6-4ea4-8587-047182575758",
        "cursor": {
          "ref": "338dbc8c-1bba-4bc7-ad02-fe6a0ed91b0d",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e0592c36-4e6d-48ee-a0bd-0c5692a4a02d"
        },
        "item": {
          "id": "e143171c-8eb6-4ea4-8587-047182575758",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c45d0cd7-a233-42ce-892f-3c3421f3ee0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3157a23c-9586-481a-a6e0-050d58b73dde",
        "cursor": {
          "ref": "e52206bc-1aba-46f0-9eb3-1da4c2fc548b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "76f5cace-6cfe-43b8-b616-6231a4924e41"
        },
        "item": {
          "id": "3157a23c-9586-481a-a6e0-050d58b73dde",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5f9e34ec-9ab3-45dc-bb07-fe2daef77e21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3157a23c-9586-481a-a6e0-050d58b73dde",
        "cursor": {
          "ref": "e52206bc-1aba-46f0-9eb3-1da4c2fc548b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "76f5cace-6cfe-43b8-b616-6231a4924e41"
        },
        "item": {
          "id": "3157a23c-9586-481a-a6e0-050d58b73dde",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5f9e34ec-9ab3-45dc-bb07-fe2daef77e21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacf8475-d159-47a7-8c24-31d4b42e9351",
        "cursor": {
          "ref": "8d9d3bc6-f9de-4f75-aa4b-ad25d9c8f545",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5e5ec228-1cd7-401c-9460-bd52e0c4c223"
        },
        "item": {
          "id": "bacf8475-d159-47a7-8c24-31d4b42e9351",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "58ac5cbf-8b5b-490b-b447-12c8517ac09a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacf8475-d159-47a7-8c24-31d4b42e9351",
        "cursor": {
          "ref": "8d9d3bc6-f9de-4f75-aa4b-ad25d9c8f545",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5e5ec228-1cd7-401c-9460-bd52e0c4c223"
        },
        "item": {
          "id": "bacf8475-d159-47a7-8c24-31d4b42e9351",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "58ac5cbf-8b5b-490b-b447-12c8517ac09a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a31916-2d2d-41b7-a93a-efc87695e076",
        "cursor": {
          "ref": "f47506b6-80ec-4356-b4d5-537064109bad",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "fcfc3163-6d3c-4c83-b3f9-753aa82c86d4"
        },
        "item": {
          "id": "b3a31916-2d2d-41b7-a93a-efc87695e076",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "56c4aa08-3857-4e82-8db6-8a72756006bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a31916-2d2d-41b7-a93a-efc87695e076",
        "cursor": {
          "ref": "f47506b6-80ec-4356-b4d5-537064109bad",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "fcfc3163-6d3c-4c83-b3f9-753aa82c86d4"
        },
        "item": {
          "id": "b3a31916-2d2d-41b7-a93a-efc87695e076",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "56c4aa08-3857-4e82-8db6-8a72756006bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024d885f-8f9e-40e3-b77e-23a47997db91",
        "cursor": {
          "ref": "108f251d-8043-426e-930d-c4c1f8c32906",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "62645fab-0647-455a-87c9-9cb468730ec8"
        },
        "item": {
          "id": "024d885f-8f9e-40e3-b77e-23a47997db91",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "72fa6c05-5368-4b95-b810-25e5f575bcc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024d885f-8f9e-40e3-b77e-23a47997db91",
        "cursor": {
          "ref": "108f251d-8043-426e-930d-c4c1f8c32906",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "62645fab-0647-455a-87c9-9cb468730ec8"
        },
        "item": {
          "id": "024d885f-8f9e-40e3-b77e-23a47997db91",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "72fa6c05-5368-4b95-b810-25e5f575bcc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e7c737-18df-4e98-a0c4-f378ad50b3e3",
        "cursor": {
          "ref": "fabd0b67-86e2-455c-966b-6054a0eb8513",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "99631792-2ab2-4582-80ec-837fb62b95ac"
        },
        "item": {
          "id": "c8e7c737-18df-4e98-a0c4-f378ad50b3e3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "734f4d56-20bb-4163-8b54-b39d0a3a0355",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e7c737-18df-4e98-a0c4-f378ad50b3e3",
        "cursor": {
          "ref": "fabd0b67-86e2-455c-966b-6054a0eb8513",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "99631792-2ab2-4582-80ec-837fb62b95ac"
        },
        "item": {
          "id": "c8e7c737-18df-4e98-a0c4-f378ad50b3e3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "734f4d56-20bb-4163-8b54-b39d0a3a0355",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7462a1b-941f-4bfe-b150-e28f02120857",
        "cursor": {
          "ref": "d054d557-327b-45c0-a88b-2a8d0184bd8d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "598145c9-4462-4bdc-8f90-a1c3caddfcc4"
        },
        "item": {
          "id": "a7462a1b-941f-4bfe-b150-e28f02120857",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b99e8d0b-2f3a-4c32-8621-5b55f57dec22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7462a1b-941f-4bfe-b150-e28f02120857",
        "cursor": {
          "ref": "d054d557-327b-45c0-a88b-2a8d0184bd8d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "598145c9-4462-4bdc-8f90-a1c3caddfcc4"
        },
        "item": {
          "id": "a7462a1b-941f-4bfe-b150-e28f02120857",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b99e8d0b-2f3a-4c32-8621-5b55f57dec22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c17ad74-fb88-4f9c-ab6b-fed84190812f",
        "cursor": {
          "ref": "be447994-26da-4b3c-a703-ecc55bf57a2a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "797d3585-f38d-43dc-b9c6-6480057a00e6"
        },
        "item": {
          "id": "1c17ad74-fb88-4f9c-ab6b-fed84190812f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4a3001aa-02af-42f7-82f5-054da798c0c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c17ad74-fb88-4f9c-ab6b-fed84190812f",
        "cursor": {
          "ref": "be447994-26da-4b3c-a703-ecc55bf57a2a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "797d3585-f38d-43dc-b9c6-6480057a00e6"
        },
        "item": {
          "id": "1c17ad74-fb88-4f9c-ab6b-fed84190812f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4a3001aa-02af-42f7-82f5-054da798c0c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9dfa926-2c95-4fda-9000-50e68636ca26",
        "cursor": {
          "ref": "515b5db4-1cd1-4e83-ac24-4667cf15e78d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0fa1ed1d-5f90-459d-96af-771fa028ff30"
        },
        "item": {
          "id": "c9dfa926-2c95-4fda-9000-50e68636ca26",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d50f6055-521b-4cc7-92c4-5fe6811a9bfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9dfa926-2c95-4fda-9000-50e68636ca26",
        "cursor": {
          "ref": "515b5db4-1cd1-4e83-ac24-4667cf15e78d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0fa1ed1d-5f90-459d-96af-771fa028ff30"
        },
        "item": {
          "id": "c9dfa926-2c95-4fda-9000-50e68636ca26",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d50f6055-521b-4cc7-92c4-5fe6811a9bfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fb50b3-41df-427c-93f1-de362096c78f",
        "cursor": {
          "ref": "7541a4a0-899d-4734-9e55-de94e608e386",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2d181191-deb7-437e-a39e-dd89e4a050f9"
        },
        "item": {
          "id": "73fb50b3-41df-427c-93f1-de362096c78f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f4ae41c1-a8f5-43f1-b67a-707b93b33ca9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fb50b3-41df-427c-93f1-de362096c78f",
        "cursor": {
          "ref": "7541a4a0-899d-4734-9e55-de94e608e386",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2d181191-deb7-437e-a39e-dd89e4a050f9"
        },
        "item": {
          "id": "73fb50b3-41df-427c-93f1-de362096c78f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f4ae41c1-a8f5-43f1-b67a-707b93b33ca9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca879178-b69a-4fef-82ec-9b05b1008b4a",
        "cursor": {
          "ref": "ba47749e-6ba9-41c6-8930-740cb2d1b904",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ecad4907-face-4aac-a83e-fcf706095e9d"
        },
        "item": {
          "id": "ca879178-b69a-4fef-82ec-9b05b1008b4a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "088fc689-1205-47b4-b4b6-ee5ca2884bd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca879178-b69a-4fef-82ec-9b05b1008b4a",
        "cursor": {
          "ref": "ba47749e-6ba9-41c6-8930-740cb2d1b904",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ecad4907-face-4aac-a83e-fcf706095e9d"
        },
        "item": {
          "id": "ca879178-b69a-4fef-82ec-9b05b1008b4a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "088fc689-1205-47b4-b4b6-ee5ca2884bd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92e3778-a8a0-4fa1-81d1-dccf74fd4d0b",
        "cursor": {
          "ref": "90f5dc1b-c9ca-44a0-88a9-29b9f3e81edc",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "477bac48-df80-4b4c-b598-a8a22c3d2555"
        },
        "item": {
          "id": "b92e3778-a8a0-4fa1-81d1-dccf74fd4d0b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "528a1029-cc41-4507-bc0a-bd75d52469a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92e3778-a8a0-4fa1-81d1-dccf74fd4d0b",
        "cursor": {
          "ref": "90f5dc1b-c9ca-44a0-88a9-29b9f3e81edc",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "477bac48-df80-4b4c-b598-a8a22c3d2555"
        },
        "item": {
          "id": "b92e3778-a8a0-4fa1-81d1-dccf74fd4d0b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "528a1029-cc41-4507-bc0a-bd75d52469a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0653fed5-8f00-4944-949e-35b5e7e0bb19",
        "cursor": {
          "ref": "37ef5201-8abd-4dee-92ab-df8fefc87a82",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "629fe764-5bf0-4ce7-97bd-c49f87bfc70a"
        },
        "item": {
          "id": "0653fed5-8f00-4944-949e-35b5e7e0bb19",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5e914d42-c238-4c59-a191-dfdbd163e75f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0653fed5-8f00-4944-949e-35b5e7e0bb19",
        "cursor": {
          "ref": "37ef5201-8abd-4dee-92ab-df8fefc87a82",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "629fe764-5bf0-4ce7-97bd-c49f87bfc70a"
        },
        "item": {
          "id": "0653fed5-8f00-4944-949e-35b5e7e0bb19",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5e914d42-c238-4c59-a191-dfdbd163e75f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bc40e9-1dea-41a4-a59d-bbeeebcb88a8",
        "cursor": {
          "ref": "5b323845-78e2-40b5-b406-9446fab8aa63",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9971f2f0-06a3-41da-b505-65d8893f59b6"
        },
        "item": {
          "id": "b6bc40e9-1dea-41a4-a59d-bbeeebcb88a8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cad129fb-ccc8-4564-8be4-955bdff4d761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bc40e9-1dea-41a4-a59d-bbeeebcb88a8",
        "cursor": {
          "ref": "5b323845-78e2-40b5-b406-9446fab8aa63",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9971f2f0-06a3-41da-b505-65d8893f59b6"
        },
        "item": {
          "id": "b6bc40e9-1dea-41a4-a59d-bbeeebcb88a8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cad129fb-ccc8-4564-8be4-955bdff4d761",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd5f56f-644d-4466-8cc2-9ca26fb8dd8d",
        "cursor": {
          "ref": "4a8c0129-2f89-4cae-81bb-6973681012ef",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "841676ae-c805-4c1a-8e61-616736e9e3f0"
        },
        "item": {
          "id": "fbd5f56f-644d-4466-8cc2-9ca26fb8dd8d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee511304-d3c8-4bca-8ce1-196ef8f3ea8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd5f56f-644d-4466-8cc2-9ca26fb8dd8d",
        "cursor": {
          "ref": "4a8c0129-2f89-4cae-81bb-6973681012ef",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "841676ae-c805-4c1a-8e61-616736e9e3f0"
        },
        "item": {
          "id": "fbd5f56f-644d-4466-8cc2-9ca26fb8dd8d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee511304-d3c8-4bca-8ce1-196ef8f3ea8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4c76aa-f865-4a81-8d2e-2fa0aad82ca9",
        "cursor": {
          "ref": "d7f4dac8-2f4c-43de-be9a-3181392eac96",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d503391a-c0c7-448a-b64d-19f3f2d0326c"
        },
        "item": {
          "id": "3a4c76aa-f865-4a81-8d2e-2fa0aad82ca9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fda5d9bc-b3d0-4c98-b726-46cefa25c653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4c76aa-f865-4a81-8d2e-2fa0aad82ca9",
        "cursor": {
          "ref": "d7f4dac8-2f4c-43de-be9a-3181392eac96",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d503391a-c0c7-448a-b64d-19f3f2d0326c"
        },
        "item": {
          "id": "3a4c76aa-f865-4a81-8d2e-2fa0aad82ca9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fda5d9bc-b3d0-4c98-b726-46cefa25c653",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9df531-7267-44f8-a0a9-6fdedc813972",
        "cursor": {
          "ref": "ce9ccc9d-3572-4b78-8dec-944886d42c5f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "06af1f78-9aac-4aeb-a188-ea125b10b9a7"
        },
        "item": {
          "id": "4d9df531-7267-44f8-a0a9-6fdedc813972",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b6fc3af8-6314-42c1-a380-152d90706879",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9df531-7267-44f8-a0a9-6fdedc813972",
        "cursor": {
          "ref": "ce9ccc9d-3572-4b78-8dec-944886d42c5f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "06af1f78-9aac-4aeb-a188-ea125b10b9a7"
        },
        "item": {
          "id": "4d9df531-7267-44f8-a0a9-6fdedc813972",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b6fc3af8-6314-42c1-a380-152d90706879",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94df85d4-e80d-453e-ae6d-32f6ebcc9465",
        "cursor": {
          "ref": "8d0ea17f-8fc4-4663-9471-421fab47db66",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4a0697c5-17ad-4feb-b82e-407008d4de30"
        },
        "item": {
          "id": "94df85d4-e80d-453e-ae6d-32f6ebcc9465",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a747a708-b71a-4309-ac2e-cd5706e6000c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94df85d4-e80d-453e-ae6d-32f6ebcc9465",
        "cursor": {
          "ref": "8d0ea17f-8fc4-4663-9471-421fab47db66",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4a0697c5-17ad-4feb-b82e-407008d4de30"
        },
        "item": {
          "id": "94df85d4-e80d-453e-ae6d-32f6ebcc9465",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a747a708-b71a-4309-ac2e-cd5706e6000c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8851c0b0-7401-43a2-9cb1-901f68e40d77",
        "cursor": {
          "ref": "88806443-b0d0-4617-9103-651293492dcf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "65ccd15c-8789-4064-b26d-b0e3a0606171"
        },
        "item": {
          "id": "8851c0b0-7401-43a2-9cb1-901f68e40d77",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9a2b38e9-1084-4289-8181-e832cf9c7b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8851c0b0-7401-43a2-9cb1-901f68e40d77",
        "cursor": {
          "ref": "88806443-b0d0-4617-9103-651293492dcf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "65ccd15c-8789-4064-b26d-b0e3a0606171"
        },
        "item": {
          "id": "8851c0b0-7401-43a2-9cb1-901f68e40d77",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9a2b38e9-1084-4289-8181-e832cf9c7b16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07541065-b7e2-4ce5-8807-d19d67c023ba",
        "cursor": {
          "ref": "a0d0710c-bb33-49ac-ade0-0917097da92a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1907f4b6-f880-45e5-94b4-23e938f531d6"
        },
        "item": {
          "id": "07541065-b7e2-4ce5-8807-d19d67c023ba",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c512913a-450b-4eeb-bfec-bb6a6401fee1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07541065-b7e2-4ce5-8807-d19d67c023ba",
        "cursor": {
          "ref": "a0d0710c-bb33-49ac-ade0-0917097da92a",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1907f4b6-f880-45e5-94b4-23e938f531d6"
        },
        "item": {
          "id": "07541065-b7e2-4ce5-8807-d19d67c023ba",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c512913a-450b-4eeb-bfec-bb6a6401fee1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e65e687-9459-41c1-b1d1-3ad99ed6439e",
        "cursor": {
          "ref": "5ebf07bc-855f-4bf6-958b-8bfea6a80701",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "92fa3a48-4dce-4ccd-ad90-17c40a0c91a4"
        },
        "item": {
          "id": "8e65e687-9459-41c1-b1d1-3ad99ed6439e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "159223d9-ef89-477a-adfd-b08cdba6a0b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e65e687-9459-41c1-b1d1-3ad99ed6439e",
        "cursor": {
          "ref": "5ebf07bc-855f-4bf6-958b-8bfea6a80701",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "92fa3a48-4dce-4ccd-ad90-17c40a0c91a4"
        },
        "item": {
          "id": "8e65e687-9459-41c1-b1d1-3ad99ed6439e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "159223d9-ef89-477a-adfd-b08cdba6a0b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ad79ca-57df-493d-8099-c99fb0252ff5",
        "cursor": {
          "ref": "3c8c50c0-19ca-47bd-bda4-b3ad77ce4e00",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a956abfd-e5e2-49e5-a24b-ab0d717d39fa"
        },
        "item": {
          "id": "90ad79ca-57df-493d-8099-c99fb0252ff5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "95086e59-7613-47de-81af-c190598e4c4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ad79ca-57df-493d-8099-c99fb0252ff5",
        "cursor": {
          "ref": "3c8c50c0-19ca-47bd-bda4-b3ad77ce4e00",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a956abfd-e5e2-49e5-a24b-ab0d717d39fa"
        },
        "item": {
          "id": "90ad79ca-57df-493d-8099-c99fb0252ff5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "95086e59-7613-47de-81af-c190598e4c4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b2244b-e989-4773-89bf-81c2d17c149c",
        "cursor": {
          "ref": "6b5d3ead-3371-4922-9fb0-e8e1f76a305c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4b69b30f-9978-4589-8db9-36b7bdd3caef"
        },
        "item": {
          "id": "86b2244b-e989-4773-89bf-81c2d17c149c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "72c4db66-2c5e-4784-9268-768b008eaee2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b2244b-e989-4773-89bf-81c2d17c149c",
        "cursor": {
          "ref": "6b5d3ead-3371-4922-9fb0-e8e1f76a305c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4b69b30f-9978-4589-8db9-36b7bdd3caef"
        },
        "item": {
          "id": "86b2244b-e989-4773-89bf-81c2d17c149c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "72c4db66-2c5e-4784-9268-768b008eaee2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522f2fd4-a276-48c8-bf76-bed28edb4643",
        "cursor": {
          "ref": "37490939-21c9-40fb-a113-f3d3b35a631b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cf990f2c-53c8-48c9-8bdf-0acb2a23ab39"
        },
        "item": {
          "id": "522f2fd4-a276-48c8-bf76-bed28edb4643",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5fe32615-b5ce-46dc-b944-b286357b616e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522f2fd4-a276-48c8-bf76-bed28edb4643",
        "cursor": {
          "ref": "37490939-21c9-40fb-a113-f3d3b35a631b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cf990f2c-53c8-48c9-8bdf-0acb2a23ab39"
        },
        "item": {
          "id": "522f2fd4-a276-48c8-bf76-bed28edb4643",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5fe32615-b5ce-46dc-b944-b286357b616e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0ce1c3-3e98-4395-982b-cf43b3cf3575",
        "cursor": {
          "ref": "4a0265ec-fc5f-4867-bd57-f1a486d6bbb5",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6403ee0b-e002-48e8-bd33-ff02c1f9238b"
        },
        "item": {
          "id": "da0ce1c3-3e98-4395-982b-cf43b3cf3575",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "74366f31-9a00-4add-b80b-d1de4fe5e183",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0ce1c3-3e98-4395-982b-cf43b3cf3575",
        "cursor": {
          "ref": "4a0265ec-fc5f-4867-bd57-f1a486d6bbb5",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6403ee0b-e002-48e8-bd33-ff02c1f9238b"
        },
        "item": {
          "id": "da0ce1c3-3e98-4395-982b-cf43b3cf3575",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "74366f31-9a00-4add-b80b-d1de4fe5e183",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c5837d-400b-408f-8cc5-fc19d5b9ae9a",
        "cursor": {
          "ref": "df0e196b-b5a0-41b3-bf61-bbea859d260b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1391666d-7436-48d6-b74b-1eb20120688a"
        },
        "item": {
          "id": "e7c5837d-400b-408f-8cc5-fc19d5b9ae9a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "709251b8-6ba9-41b3-a567-66694f52ba18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c5837d-400b-408f-8cc5-fc19d5b9ae9a",
        "cursor": {
          "ref": "df0e196b-b5a0-41b3-bf61-bbea859d260b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1391666d-7436-48d6-b74b-1eb20120688a"
        },
        "item": {
          "id": "e7c5837d-400b-408f-8cc5-fc19d5b9ae9a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "709251b8-6ba9-41b3-a567-66694f52ba18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e2992c-c8f4-47a0-97c5-894d3913e5e7",
        "cursor": {
          "ref": "79a15c8b-2da8-428f-8a8b-ede819b88670",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "31f1ca29-d9bc-4bd7-8e5b-9d097744c22a"
        },
        "item": {
          "id": "47e2992c-c8f4-47a0-97c5-894d3913e5e7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "df7ed732-834b-4760-89aa-ea670fa92e82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "47e2992c-c8f4-47a0-97c5-894d3913e5e7",
        "cursor": {
          "ref": "79a15c8b-2da8-428f-8a8b-ede819b88670",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "31f1ca29-d9bc-4bd7-8e5b-9d097744c22a"
        },
        "item": {
          "id": "47e2992c-c8f4-47a0-97c5-894d3913e5e7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "df7ed732-834b-4760-89aa-ea670fa92e82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "314f9950-85a7-400c-8621-51d9ed21bedb",
        "cursor": {
          "ref": "ee69e751-694a-480e-a4cb-096b2683040a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c28c0aee-220d-4ebe-b6f9-de02acc45661"
        },
        "item": {
          "id": "314f9950-85a7-400c-8621-51d9ed21bedb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b14e9061-4dd1-4e14-87eb-9405a647468c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "314f9950-85a7-400c-8621-51d9ed21bedb",
        "cursor": {
          "ref": "ee69e751-694a-480e-a4cb-096b2683040a",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "c28c0aee-220d-4ebe-b6f9-de02acc45661"
        },
        "item": {
          "id": "314f9950-85a7-400c-8621-51d9ed21bedb",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b14e9061-4dd1-4e14-87eb-9405a647468c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "581b8345-2024-42b0-a6af-0867054b6ba9",
        "cursor": {
          "ref": "39edb893-d9ed-42c7-adfa-e28746e3736a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1f227416-8e4a-4ce8-8c7d-964a19411895"
        },
        "item": {
          "id": "581b8345-2024-42b0-a6af-0867054b6ba9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "205be7a7-1799-4b42-acd4-e7b0f9a89939",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "581b8345-2024-42b0-a6af-0867054b6ba9",
        "cursor": {
          "ref": "39edb893-d9ed-42c7-adfa-e28746e3736a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1f227416-8e4a-4ce8-8c7d-964a19411895"
        },
        "item": {
          "id": "581b8345-2024-42b0-a6af-0867054b6ba9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "205be7a7-1799-4b42-acd4-e7b0f9a89939",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "90f6aa12-4e9d-435a-b51d-5586334dd442",
        "cursor": {
          "ref": "c8a4da70-71ac-4749-ac03-106e9e6aff47",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "794fd63c-41a5-4a51-a471-64aed80f52be"
        },
        "item": {
          "id": "90f6aa12-4e9d-435a-b51d-5586334dd442",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ae918f8-a695-4262-a78e-dd7a48f41d62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f6aa12-4e9d-435a-b51d-5586334dd442",
        "cursor": {
          "ref": "c8a4da70-71ac-4749-ac03-106e9e6aff47",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "794fd63c-41a5-4a51-a471-64aed80f52be"
        },
        "item": {
          "id": "90f6aa12-4e9d-435a-b51d-5586334dd442",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ae918f8-a695-4262-a78e-dd7a48f41d62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f6aa12-4e9d-435a-b51d-5586334dd442",
        "cursor": {
          "ref": "c8a4da70-71ac-4749-ac03-106e9e6aff47",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "794fd63c-41a5-4a51-a471-64aed80f52be"
        },
        "item": {
          "id": "90f6aa12-4e9d-435a-b51d-5586334dd442",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ae918f8-a695-4262-a78e-dd7a48f41d62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc482da-5d62-4101-9860-4c662a13b69e",
        "cursor": {
          "ref": "2b9ea982-406c-4b51-b993-0de76faa1784",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a20f9b46-8079-493a-911e-66db99941cbc"
        },
        "item": {
          "id": "2fc482da-5d62-4101-9860-4c662a13b69e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c40d4ef8-8f8a-4923-9614-52246da66fd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc482da-5d62-4101-9860-4c662a13b69e",
        "cursor": {
          "ref": "2b9ea982-406c-4b51-b993-0de76faa1784",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a20f9b46-8079-493a-911e-66db99941cbc"
        },
        "item": {
          "id": "2fc482da-5d62-4101-9860-4c662a13b69e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c40d4ef8-8f8a-4923-9614-52246da66fd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0fdb75-f7ad-4325-b5fe-5a16b99b071e",
        "cursor": {
          "ref": "ac236193-4720-4838-b7b4-48147c938f1d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "10ca9104-c5aa-4b63-a6c9-85056e15301e"
        },
        "item": {
          "id": "5c0fdb75-f7ad-4325-b5fe-5a16b99b071e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "96b30d94-1ba0-41f2-af06-456bf6a78006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0fdb75-f7ad-4325-b5fe-5a16b99b071e",
        "cursor": {
          "ref": "ac236193-4720-4838-b7b4-48147c938f1d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "10ca9104-c5aa-4b63-a6c9-85056e15301e"
        },
        "item": {
          "id": "5c0fdb75-f7ad-4325-b5fe-5a16b99b071e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "96b30d94-1ba0-41f2-af06-456bf6a78006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}