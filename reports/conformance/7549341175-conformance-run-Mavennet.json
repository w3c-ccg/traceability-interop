{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "34ff0276-2206-47f4-84d0-6cfce99fa0ee",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a23fc32b-3dea-4215-b1a5-38b59555ad44",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d6ef3c7-8c1f-458b-9b7f-a91ea2e945bf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a45e8705-27a2-4a91-a3d9-eba37b5e4fda"
                }
              }
            ]
          },
          {
            "id": "4c287aa3-0d07-4de0-b773-cc00d1106ec9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d28ec68b-607c-4715-ab06-45350bd00c99",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c118fea6-686a-40c7-9628-44299680733c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "660a8dfc-401c-420c-8791-06c2ef257323",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "aa3166c7-9ee8-4065-bb31-ae97ea988d14",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa5e26f2-b758-4300-91c1-43a1e576b075",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c6e66ce-3d81-4208-b93b-ffb5a0079afd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b6c07bc-d658-4bb5-aed8-a377130505e6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a891ce5-9975-49af-a960-91c20087f22c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ecb740b2-98b2-48a3-8cf8-aad432b99228"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "212f6bf5-380e-4f3d-8085-4d6032ee647b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "63aa9a5a-70df-438f-99ab-a4526b2027de"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc8c22de-2326-4aa7-93ab-d87efe60ee6a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "31bc1629-0c81-48db-ba64-3b7faf172678"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8720a553-277a-4456-8b0a-f940d43aaa0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d768e58b-2066-45d0-8a93-e4b4240bb560"
            }
          }
        ]
      },
      {
        "id": "171269de-735e-4015-9018-3d4c2a34b462",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d16fe61d-243f-4a63-84ce-12b5a91f62a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e766ba5-5893-4793-a0a9-1010129db2ea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8c93295a-323b-4a5a-9b99-08f5e02b7b35",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43739db9-ffd0-433a-bcbf-8e0db95f94aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "023eedb8-5232-427d-b83f-00957998fde1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161365b9-d0f7-4a54-992f-e352507c1840",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d6ffa3-6d89-43f8-a52a-db11deb90c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb8a724e-f40e-42b4-91bf-105eda64c81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bf9eb6-c807-44d9-802e-5104458f53dc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c06990-c7bd-44df-80b6-68fe99b8cea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8485ca0a-82d2-4756-b562-2399e98fa1c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5570e50-cb9e-413d-8066-0803a236a38a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "734062ef-bd84-4bc6-b8f1-6339bcfd158c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f1d0e8-969b-42c6-96a0-1de47506326f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95a61323-ddf5-4668-8d9e-545590a66f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bd140b-beaa-4933-8e52-f8c275cf4401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba308d42-6c2f-4e60-a3aa-0bc943eea596"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a12dcea6-e026-4aaa-bee3-2e575872220b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f02ef538-6253-47eb-9a00-132dc58e2d74",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "263cd68f-2a20-48d4-9786-dcd499e82535",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bdf8e9d2-f281-40a1-926a-ae2ce0c64bc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d723b0e8-b84e-4821-9b99-ad059c4f86fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "de54e115-be02-4393-9f83-6b8320addc10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccb0236c-2bc3-483c-8651-c97775c474a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "902d15ae-c51e-4f55-ae6f-4f49b6267b7f"
            }
          }
        ]
      },
      {
        "id": "b31f5aca-cb32-4caa-9cce-e5f3ff82b5f1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "874129eb-80fe-4732-8ab1-20afc59fd690",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47c0185d-b61f-4cdc-a780-00a4114b5853",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bbeb02ff-3b96-4f01-9ca8-dab50bcd0387",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dd411d-049d-41bc-bb67-4d3adddb8fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c5f65a-70e0-4d17-9025-d2758d7adb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61dae68-d8b4-4bf4-848f-78afe1ab4b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bc51806-380b-4801-8431-7ae6f431f7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70d4c52-3b41-4bcd-a2fb-3820f54b04fb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de5a0a6-f0fb-4be5-9e55-f0f539b815da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1da07a7a-e5d5-4600-be26-ee0aa1f4df0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dc480c-1bb0-441d-a79f-9bc14dcc5848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c62883b4-e3d2-4bce-9dae-f1ebb655ee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f9aa17-a5cd-47a1-83d2-a83b47e9262d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7ea97d-8d6f-41ea-a73e-e07da74cbeec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a72c18-59c6-4dd2-9f37-b913b1d05125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d23fb88-76d6-4e06-af1a-4a7c499b4c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d2eac03-5b6e-4762-98e5-c2f231d0cf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f30eb8-cc56-45c5-9d7d-48adb60f696e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09820c49-3214-423b-ba77-2cc7639fd27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3655aa68-0eff-4ed5-889a-adb10f05327f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ba2057-8d9e-437d-a0bc-3d3bebb83be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50e30fee-85b2-4b33-8ed5-2c8c7d8a2809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce4cb6e-887e-47ef-8274-2c689ca0c4c6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686554b6-7215-4ae6-957f-f0768298b66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b69554-2e6f-4374-8814-afe6bc5fa34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0dfdb1-6e98-4bba-91c6-b0c7de4398c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8a3f2d2-59bd-4f80-b23a-47253bf16fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276014a1-942c-4b5f-b436-8454a7502702",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f502d83c-c1c1-4e73-b36f-1d0547c97ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808d75c6-7a86-4426-a0c8-2c609f552373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c48fd6-76b9-4e3f-b794-63001ef7e14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07ae3821-ee1c-4432-8523-5a3b07d8b822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27003052-d666-47ce-aafe-d9e6d7bfa7d2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed7c61a-d9fb-4a74-975d-124f9a0e75d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3a23e4-c1d9-48d2-a521-05de4faa11ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648d56e6-b10e-4e5c-a65b-98435db3915f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fab8b05-0783-4723-9c94-c2848ef321d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c142fe-ad8d-4064-94b9-ddbb09889570",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f506b9-c3c4-495d-b639-4c438643b705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a114f0-1773-4854-933c-ac50e4918d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34cf09b-e2ae-47fa-8c3f-7ab973244801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2945c9e-0383-45d6-a345-b7531fa3d7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada2f851-9369-46fd-bde1-aa5cf12a2698",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bc7d6a-59f0-4fec-8982-9de7dc89e190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c116cd8-8a55-4523-8936-e8a85abfb4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb79982-c61e-4a3b-b8d4-7cfb38791720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6ca3360-0af9-497f-8d46-a26260fbda24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f39daef-f476-48ad-b056-984dbcca63de",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb73a24-0876-40c2-8da4-27a328fe140b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5046890f-853d-478c-879a-8449fc89889d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee958b0-2998-41da-9340-396520c0e298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "420d47d1-b173-43a6-978a-abea81ac533c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46628eb5-9134-4cc5-9643-d3e545198230",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0dba68-4f6e-4871-87a6-4a193719cee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf21b21f-8e2e-4293-a798-9c319f224b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536db154-2400-48b3-9a07-24c543db7202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34119205-6098-4514-9b75-342334aa777e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87f38b4-b66c-47d5-9320-79fa2eed472e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aad8433-df71-48e6-aa1a-47797305b370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883c5d09-7b93-49fd-ae62-89aa3fad877e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfeeaa9d-b4b2-4024-a727-1a1f541bf5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "776d6347-430a-4d55-8487-301397635536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf82877-1f87-4c44-9890-407a5b078ad5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656502e4-c69e-45d3-afde-376280c703b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc769fb9-57c1-4c92-aca5-402823575a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d25c3a0-b3b4-4e36-8295-793cd12c1a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8501968d-f772-4c2f-8204-9e3d30f73f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d44402b-130c-4d19-b122-08328c6229ea",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2146cbec-56ac-4c3a-990a-99aa908f9197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79be162-91e6-400d-bf0f-25c604fcf15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7243b1d5-585f-47c0-92e1-582a6281fd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a838469a-4cc3-4234-b2b5-48af2d2647c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e7537f-f7ee-4f50-b342-d648117b636d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "561d4829-dc02-4423-a188-72c157e8a9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ffd18b-64d4-4a18-8349-e257185e8e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203264d2-4867-4535-babf-d02becb43fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a564c826-2c70-49dc-b0d0-35fcda680042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5e7069-a463-4425-8392-516aa666c682",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed247da0-9c73-48f4-99c8-b4df47897acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d9417c-7a87-4258-826f-a87cd9f73a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d21d272-48ad-447b-82b7-935f56678905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62e3a98b-64c6-4b68-b9cf-7f75d01ff20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584ffcba-9e20-4f00-ade5-1c105c715c7b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7ca1c4-4c42-4a68-809a-0177bca4e7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adfad152-c07b-4825-9330-85a01538982d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9666fa60-3939-46bc-871e-a87410f86da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b02f8a9-edab-44da-ba0b-23d604860c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04100073-bbc9-4c2e-92bc-c4e3746ff2dd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eabdaec-8666-4aa4-a018-13f647a8c3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acef6c83-310d-4a77-8862-39b22968398f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f8a62e-68d5-4c71-bab8-72ee11b03caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "92961f62-a724-4094-b382-aead052867fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b8cba6-05c0-4e37-b0af-39bed08e3fdf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfd7238-a1ed-4bb7-a0cd-03fe714e0e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fc41f8-f9a8-4510-9f77-853ae18dbc0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b162a0-f85e-469e-b61b-21f606440d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17546472-67ad-4083-9904-c2cbd3dd221d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14663b25-a1ac-4154-9e48-3f26ae2bd6cb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923ad1b8-46e9-4ef2-9f81-c9ace6abf0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0eb7ab-3920-4b2e-a545-f66ce9431eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c51cc7-26df-4674-8999-1a01ee3c762a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f79cf5e-fa43-4097-be06-3b6a73038f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e36804-b6f7-42ed-862e-dc3e2d241c33",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e91706c-2a17-4e81-87f5-abe0d969687b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51200f7d-e552-482a-bc9a-34d18a4e87cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674b7f49-7d36-4406-abf4-b04d82680a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "349c0065-4e93-4cbb-b995-ed1137156683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b8e933-7cbb-4d7f-b7f1-69977cfe92b5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d105c399-e8ae-4ed9-b476-87bc895d6a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54b7da6-e501-437f-87b2-80d1ba0cbdc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cde4adf-c9c2-4fb9-9b5a-72dcf7f55864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "310bbe4d-4a8b-492b-9603-7721c098f88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded057be-2b5a-4a9a-8cfd-6e65e623e1ce",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6ed6bd-3d24-44a8-a5f8-49329a3e0149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d057d818-2ec2-4735-8a32-0193790083b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7185ea84-fe56-428c-867f-e3726c20fb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8f1b8a-4135-409e-b1be-9bcaf6fb2d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99800db3-7ba9-4cc7-bc10-cc1bcfae03d4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cfcc92-a7ac-479b-bfaa-dc67dd2edfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2cf1cf-02a1-43a3-a0b0-6270c4c58f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8f7542-96fb-41ee-ae0d-a788ad139f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0b0cc3-3210-4c1d-a08a-b112765a37b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89febea-9b39-4760-b225-445266067455",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f992b601-abb4-4c2f-99b1-148a73633b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e31a23-9a52-4264-9f19-ce14e5a7402f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec09f32b-a186-4ea8-b6b8-e7870691d83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aab0b0f-0854-44ff-8548-87e582a4b5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60e0bb6-7fbc-476b-b3ee-40ec95b83f01",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4563fc5-f9ce-47ed-b9d2-120ed3033783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93eda90-6246-4112-b9da-c8e6df91d34f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f62a362-cf65-4899-ae44-4eb5b8d09523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b851042-963a-441e-8c93-024bda02e045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e28f00-cc82-4614-9568-c8dc5b29f1f2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12c7c08-a8bf-45d5-a081-328d6e2f37b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bdb0fc-b059-4fe7-8c30-1b10cdfa2812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3a12c0-8b1d-4958-ad5a-22c48ce586ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e387812-85c9-4dd7-9800-f2180d26a764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b3059c-7b76-4755-9389-1716f22beea7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d781ad-5ca2-4f14-9521-532c150d4e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5ecdbe-f53a-43e6-8487-aaf92b0d3fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9195c00e-ccc9-49ad-96d3-29c1e99624bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2dd9f8b-1fc6-4bf8-9688-94dede9ea888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9e4c18-4cb7-48fb-a92b-7f00516ffbbc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc84011f-12d5-47e5-8913-9a05153a6c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b882b19-2774-4b20-a0df-fdd8e350b596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d00349a-60db-4d7b-bb23-4079b5ebf991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a74a2c4d-e348-4ca5-82c1-6f682a28aa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f80e81c-640b-4e9d-b802-fecc08bc94ed",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611e1fae-b9a1-479d-9950-daf3c0839793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e493b5b-e6f7-4906-b9c9-e665cb5b5045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f12c74d-d281-4f6b-bf24-6d81dda31d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c57d634-b8ba-4d53-a856-835390f965fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519f0929-a3be-4c08-bf7f-4ca21ddd38f9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103085c1-ace6-4f02-8e9d-2e3bd13a47bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d20399d-ff30-4567-9986-f0e277d3ceb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee28dee-640d-4774-8cbf-110e2b90dbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ba9d3d-2cd4-4725-8ca9-cefcac10e414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f081b653-b652-422c-94bc-41d303c893ee",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099b6660-42d8-4a09-afc5-a0ebb4a67414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a5a582-cb3f-487a-a7ac-f9a9b129d170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f9ffba-588c-47c0-9e52-9a3158aafe1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f12841c7-c333-4537-adb8-9d8f1bf17518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a96659b-6db3-4dbb-b158-018f379da72f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad70874-c5e6-4895-a2bf-16083d53a4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f2947a-e22a-49a5-b5ac-b576a91fce24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d613df7-c5f3-457e-987c-f3539ef7d846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6f6547-0810-45fa-858f-30def5611962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134f9750-7e8c-4553-a451-e5f77138bd94",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6bd3fb-7c0d-4901-a13f-480cb7e74dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579e264b-9b43-4644-9052-3fc06d34d9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f555b48b-1b90-4507-950d-c899e245e7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f15ccb1-da46-4c43-bc2a-a005f7b5b255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2995ae95-7f76-44f1-882b-258e4069ff27",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0931ab6b-8714-4a81-a729-c0fa21141230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12215317-4e49-4a7f-866a-ca3c48484656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bd44ac-1763-4cf5-87fe-9c150061e822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fee37a8b-ae86-42d9-b40f-eb02234cc53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d126c3-19ed-4f64-af35-ccadb18065fd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071370f8-a048-4f66-a44b-07516dd75829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8504ecc5-7540-467f-8084-e8d151f0bacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2329d23-5824-47f5-b1fa-cc3c788bc86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "544f0ca0-93eb-456f-b3d2-03686b68992f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cbfa50-9800-4fc2-a4d2-c9a4b568615b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b952ca17-fa97-4e86-b3af-dc13758a41f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af312b0b-3b94-4b0c-99e0-f3b2817296da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76a8195-b50c-400d-ba33-63fe6e65de03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5467b5-cf34-4f32-916b-83f8816b830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399b2d14-2225-448a-8021-65758b17c035",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0173cd-842f-4f06-9a06-e023b88af3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98440c18-2115-4ac8-b272-cd75f0521ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3580295-e680-4a2b-aaf3-7d1952afd7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a27b4df7-0c60-4a48-81ef-55e837c18c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf9b4b0-7bd1-45f5-ad12-eb9c21ac817f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d177373-b1cb-42d2-83fe-27cd0b6be319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639ca4bd-0f10-4d0e-a4f9-8c3c80628506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282f2e98-01e1-4071-b1f0-9326d76087f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3657493b-0f96-457f-bc46-e0bf3ef967a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6650614-6679-4a51-bbc0-6cfea7c214e6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e2383f-60f7-4e3e-94cc-b01f8627f96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783911de-cd97-4323-861d-ccd3ce4dbe53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c0a4de-5064-4699-b440-7812c15566da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2a3f87-e42b-44fe-a21d-d8429cc232d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931a31f7-5193-4bcc-9524-addec737670c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb37eb7e-53ab-4522-a1c1-33e089fc9717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ab8f6e-f3e8-4fc9-a231-bcbeefafcacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c295c62-2c84-4c8d-ad36-2d768146779f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8de409c-d31f-42f9-ad35-0d094c0a2197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1958ecc4-78fe-48ca-9f90-68f54106fdbe",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd442ee5-4568-4a1b-a305-20c5ef3bb6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a902fb38-ad54-401f-825b-2584384e4678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8277d541-a3d6-4559-864c-70e9aa1f995a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba6f242-3f66-4fb6-80e6-07a5fe543acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c92141-1f21-4f48-8e21-5316e0fd1f89",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1add8a1f-6f84-4d20-a5b8-04c19c4b4772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82d7911-f173-4a55-a621-96577072a81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3240a5-d804-4856-b8c2-6b7c0c09f87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7cee9ec-07ba-44eb-8a62-db6e06d92f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf6401b-70f2-4e77-8142-897071d9a684",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c879114c-a014-486b-96bd-073cc62c48ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966d219f-4370-423e-a747-8ece5140ab11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16fc18d-ff9f-46c2-80d3-1ed6aa6f01f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "85169b24-04d7-4d14-b2a4-1914b1471361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7fe410-5fa4-4e6d-a74d-973c733a89b0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12db43bb-8740-4596-8177-ea3937bf81fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6476bc-3a61-41d2-a71e-a60396c1a2d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66edbb2a-2e28-46d7-842d-69d7c118768f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1da606aa-4a0f-4cd9-8972-185e8a512074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c676f38-5490-4bdf-ad26-93828f81004b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a37fb55-86ca-4b7b-bc2f-29b68497bc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8adbea5-3764-469c-8bb7-30cc1c38b23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6649599f-cc02-470d-a1b6-bb0d3c2bb706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a108da-0f5e-4f08-9f42-7f880922ab6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb81c3a-2c87-4310-af2c-13cca057db09",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca34590-794a-446c-944c-20ebf9c76658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012be5e5-0717-461c-aa78-d9ac05dbaa5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1dc5d2d-3e48-4022-b0a9-fe3820ea6adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c84ecd-878c-46fb-a3f2-a0346d28812a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b767ac-d897-40ec-be4e-99786b7c5920",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc1d4e7-4a69-4b72-925b-6e54bde0eb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed27966e-9d87-4474-93f7-54f004d199d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772b12f2-4581-4a26-8d9f-7619e7198ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b09f6b0a-63c0-4da0-8ad6-90451740d6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1672dea5-9cc5-467b-964b-52afba095755",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46da24d-1175-4463-bd00-0687b592c3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09f3124-4c1d-4eae-84f5-3597e1a7245e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e359a28c-63de-4c46-adfb-fc66a54c2e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "96e2848c-6dd7-4521-a8ea-6d8acc8bd512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4be5f90-3ede-4a5a-9bec-9bdacd6043bf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db92acb6-1105-4316-9a76-fbfbe7397692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8446a969-4d98-4004-b7ab-a75c91caabf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b04dc1-a4be-4e62-b828-3384546cd391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d904ff88-78e2-47e6-a299-80f2fd00a346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66749130-66c1-4fa3-b579-b6a72be83779",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b35d46-3004-4b1b-9ca8-8897147dadfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d799e987-f092-4b54-b25c-185d5e3d5ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2f7812-2e12-4d8b-9ba5-40fd2c216e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "465d6d6e-5f74-4ad9-9b21-3007670780b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c354a3-5619-4449-8f03-0dff6e6ce0f6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e842bd-ce42-4305-9e02-fe280da5400b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e09e96-fcf3-4d84-a62e-bf74d85897b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c1e5df-7a44-457e-97ca-6506983099f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e409c19-3d8b-4ae0-978a-c57db437cb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f766f760-07fd-4569-b058-98c0340866c9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2b3dd8-3098-4d6f-b133-02bd32d409bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ecd694-d2de-4469-bd3c-9e0b2c3c9456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5770d6ff-29df-424d-ae88-d43ba522d525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "413d76e7-ec35-42c4-8933-b53adffa217e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24502b87-bf31-4324-8ecf-c446ce7b6f8d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25f241d-d0e3-4404-9568-863777b01ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ea7b6c-abf9-4087-93fb-94b395dd7f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511ed198-5b7f-4ec2-95b6-e5df4666ba65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90582588-d7df-411d-89a4-5cf4241f2108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bcd4df-8720-46b3-8cd1-4348c0240527",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79db2f7-57e2-4eca-b073-bde5db4fbf1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d936dc6d-483c-485e-8d89-40ad7f23e513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a104d978-93bf-4166-8583-9949cbdf2905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24fcf3a2-e467-431e-9414-09fc9248e416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32ab255-5c7f-4d57-80f3-7b15dedad6dc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f540a841-e6f3-49d7-be44-8962132efcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3752ded6-b4c5-49db-877a-be2559ff1ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b814c0-65ff-44de-9604-fa82c1dc1b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6673fefe-4e8b-408c-aa5a-8ccbb98057e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ac6455-8652-4a35-a8ac-a98a9a2904f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f89200-347b-4a90-a830-26905fe54ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb7fb4b-c257-4bb7-b67e-4fea7e36d0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3218b1-b29b-42c2-9847-cceca671e3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e68eda9-5182-4671-9839-3ece9cbc716c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9b3b80-36a1-4654-b228-beb3fc840695",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c109576-96d4-40d3-b119-ba1d15e8db9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72262721-191d-49bb-b408-15859dbc4cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc167775-784b-4ae7-ba97-2b93451f090c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcbf657e-9dc4-4c5b-aebd-6b2957e0892c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad839466-9927-47fd-a4d5-fe2ab7339555",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fadae12-cbbf-4fc1-bb57-49f5d6e9dad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9064de-cbf9-44f0-a42e-54dc9e0514cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867756c9-f832-4c15-819d-95537c945cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7686c2-f17c-4450-a6c8-ee607f94aab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee671869-c8ef-412c-b00d-109402a80f19",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be532ee2-619f-44dd-b33e-24e18c4ce2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac5cec39-72e3-4169-a81b-18b96bb87718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b77187c-f5bd-42dd-a537-5209d859e123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "190d08ee-3f9c-4e90-abda-3bf05aa3352c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6258f04f-3c5c-4a39-b5ae-47b7c0f7ce55",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd75828-e3c8-45e8-bea6-46e87aa9757f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f7db61-7f99-4d57-bda1-6d0a00521819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1be0014-6ed4-4045-aef3-f358a37996be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "19d72ec6-bcd9-4228-ae79-8fa7b67c8053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad98c52-4306-477f-8aa0-94a4189af052",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefd6b09-d578-42a1-8523-e42bc7ccfedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0117eddf-7f73-4b36-8358-6c72b8789196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f988f3-45ea-46bc-b199-c9adb6681320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "991db0d0-144b-4eb9-a5ad-284c299baf99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff6929a-f257-4999-ad17-aba8f8ca85bd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce503fd-7a04-44e1-87c2-3e401994887a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9480f36f-cbc1-4701-a87a-d02051aec2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4648a8-8d65-4cf0-a4b9-e1e374d04971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f59ff4-54d6-4c86-aa7a-fbb6f000d1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dfb3b2-2aea-4887-84a3-c603b7d90e15",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8740cd52-df3a-4b28-80bf-fb3eb9847d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe1e69f-a898-4d43-aa31-95386e19dfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2815a29c-4fd0-47b5-be33-d7897fd1b97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe742b9-8bba-4378-925b-8f48ffa17695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1bdbdc-c500-4349-ab1c-307d4010054d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e16a6d0-6e16-4418-b317-e3aef982216a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00e8878-7d22-4419-b037-e20e02d3a819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ce5621-a3f9-4eb5-955c-4b6021d556bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9291d06-c3b3-4c65-bb8f-0a4e617c7e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d2dd7b-391f-4310-aa9c-5c9bd33f536e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9b1c9f-0326-4793-9e20-f0bb39704493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b957fe1f-42b9-428f-84ff-3ce66b272450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f262d1-d2be-4089-944b-bf255101e6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8559f7-9ecc-4380-bb27-50f70798b355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897465d2-6eb6-422d-91cc-100a25b7fee8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ed63df-1769-46c8-9cea-1ae0b7140488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc9cbed-e390-4d61-93d1-c63ea97d792b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f27a26f-c02e-4161-9491-03428926f059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80fbc5bf-26b7-4ef0-b820-9b3465ef5d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307b74a8-ac07-4fce-a210-9367c7da797b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c064c9d-31e6-4515-a7c4-d19ecf075a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb121ce8-1b87-4ac1-b04f-4327a196cd4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beea1ab2-3755-490d-88ff-d43f2d10da43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff925b90-f7b2-490f-8e61-eef5037b1376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc617c0-10fd-4a1f-b53f-ec23ec4a7eb2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e665c8e-ae3b-4d23-b015-506305580d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db003eca-51d8-4434-835f-7103e0324209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e957ab-4e73-48af-8bcf-da5ef1cb9863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5125ef-2573-481b-9be3-f0aeeef027ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763aa95c-486b-4f71-96b2-f0e6a3fdf161",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d42fbcc-42d6-46f4-a1c0-2443035972f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e89e9ed-f1d5-441e-8a67-d8c8b73bfb59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79808169-7f53-476d-982d-cbecd7a77ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce778dd-36ea-4341-9034-b658b6316c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e294d252-0c47-4340-aac7-72f4be0c51e0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3e04e5-2913-4fbf-9a21-d18d8e5fe448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e4ff5d-4e84-47b2-9d68-9b9e061da6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3725c5-2e6a-4f60-a665-bd119fc29421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eab93a3-bf0d-4f4b-8c05-984680966b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed506e7-3aaf-498e-87ec-ea782163ec67",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d44b99-2e94-465f-a65a-cf3dc18cb26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38af6735-cbc9-40fb-bb1e-6b1e3bc041b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0432e4c8-4aa3-48b6-9bac-f35ca0bf07d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b279a2a-c1f1-46b4-9b5b-be49dff3dbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace44639-c7db-4708-b2f5-eaba3dd2bbf9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6332cff-1008-4f1a-afdd-3b29f3453363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bfa521-7f0f-483d-b9d8-39ffc7c9bcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b1314f-0225-4c0b-875d-dd06d319e916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "66520794-a990-4dee-84ee-62859b16b43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910cdc25-c2bb-4668-b39d-dab6bef9bda7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696a814c-458a-4e58-bf9f-c2a889677885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d326366c-662a-445b-8c39-d4e562b69b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8045bbbd-78e2-4696-ab3c-f1e21a22d613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01dd9d29-427c-4fc4-b644-2be13b502d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e678143a-fa29-4422-b408-169f72d12729",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc766ba-387d-4f74-bf94-a50c825a349a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9651509a-85da-406f-bc7c-2633d0cbcff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bde490c-bc24-4fcc-949b-68b906d9b9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4eb77d-82d1-408c-ba61-1a518862ab83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf3e6d0-889f-4096-96bf-062ab7abc8e0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd578cea-b292-4d2d-b9ac-492af4a8b529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37731334-2e50-4a02-b8a7-a12141ea2cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e33d25-72f1-44da-8448-409c4f4c4547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f0031d-d0e8-44dc-bd3d-c415914d8d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9d34d3-1d49-4daa-82ee-531e565db177",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9afe6bd-7529-4449-8390-acb2c4cecbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e28080a-4dda-4853-9361-bb396c3d85df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09b7887-78b6-4b73-90b4-05fe91dd4841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f20dec42-7e63-41ac-bdff-f1ad3c7d802b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb460b28-cc8e-40f0-843f-0f98303e5f7c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3ecabd-ce17-4735-b5dc-d1148a9fc11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef21f35-1a60-4581-aebc-fb3582c6d83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48c25ac-38b7-46fd-843f-2071b3c7ceb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d032e4e6-9805-4f0f-a570-00895df75d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1bfa63-373e-4db1-ae2c-7a3576cb68a0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b20174-b2b7-4986-937e-03e65ed56f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79efef78-ae55-4358-bcf1-b8e7626c0d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df15d39-bfe2-49ae-9c32-248a12747ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e83425b6-d140-4e38-a9db-600416c392e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663b3d10-0d3a-4979-8275-5d07fd391d5d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17eda10c-11e7-4d06-9cf9-81f0a55cf9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3b06b8-c94e-4adb-81b3-f92701252460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fe4c55-e8ca-486b-93e1-1649d137f4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e181589b-9cd0-4e74-89ae-0c4cea6feaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2bc3a8-ad0f-43b1-854b-7d263d73da2d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e7b67a-aaef-40e6-863a-b0650a4a76bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fcf4dac-8260-4991-b28c-939c8d5687b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbb9e70-fd84-4003-9c41-075ff3f84d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fac3d01-78a9-4430-ab5c-be77062baa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bb44ea-c375-4e1a-ac72-ee80d20c641a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6de852c-6322-49dd-a385-1c52f4bbb7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b2595b-0703-45b7-84b4-a528e6fc3abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1003c006-e1e1-4f32-b5f0-3689dd134bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6297e853-a5fa-4968-82de-fbf9a4a5b89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ab6864-cf2d-4028-a8ee-a794e63d7118",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751a5599-b7f7-45c7-85b1-299a8501a518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2751b2e-1bdd-4f93-9a69-82f5cc01631f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676fad04-8523-4e24-a63a-e18de585e912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4845be53-f029-48dd-b234-e59cd13a3a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da9697a-ca2d-4e56-b585-2a6fed70c99b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13553fc9-23b6-4312-bd1a-b07e1177452f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d64a5e-e886-4634-8f93-2e798438cd30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291d19ae-6299-49b7-b46a-898a81b124cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c89025-3ffc-4b80-994f-3c92639fd8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64da40fc-32f4-497f-8079-70b20afb551d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f7e1e8-f885-4a7d-960d-f6890d5bebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7477b6-43cc-4092-b4b1-86f80e5f1294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482de2c6-73b4-4edf-8769-e29825bdb896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e5bd63-d736-456c-a821-3ad9d2a8df37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b59f66-fdd8-431d-93dc-a79be79d6a73",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1412d8fd-1cc1-4b55-8308-21f0aae27d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d20816-a1d9-4d3e-9b40-7dedbdf553ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4455de69-038c-4567-ace1-9cf0a0942c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be819646-cc69-4991-8bb3-690b6a32fa1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a4fcb1-16d4-4aa3-85e7-1db023aa3862",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211dcae2-6cb9-4a4d-9754-3749adc58233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710aa5eb-2da3-4848-8e11-6c8eec81fd10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13e29a1-27e5-4bc7-9035-dc3991b4f0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3db7bf9-4957-4326-92c8-a92364d84808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335310e3-f600-44f5-814a-b4dff2eb597d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb70b508-5208-4d71-88a5-c1d8ffb65fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4046a3ba-6489-4e3f-b3a3-c0aa9bda57ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b7b318-31b8-4a20-8c91-06081a0997d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c477a74b-b301-46ea-bd01-970c348e7d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b342a1a-afc8-4404-8b8e-abe680f6856c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ecd0bf-89dd-4520-bdb7-b38231b96207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af2427b-23f7-410e-bf16-13a52748da10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c224648e-9c4e-4ada-bb24-284a7670b487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "203b0032-b572-4329-9c48-48f19ea5eeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db894de-4bdd-4c6c-9e24-bc01bc4627d4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da98a1c0-f478-4122-8bfb-696c5bf2e45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97cf1bac-9f8d-4afb-8b74-6c52835f4640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee0fc7f-53c4-47c1-9b5e-9da8eedc9937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "60ad2ba1-2f21-4934-9fe0-d5bc07c35f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9858fbf-51b3-416d-994e-ad5d901d0a8e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2312ba22-00f1-491b-9b70-6666e8aa8123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3951ed14-54ba-499d-8b08-627dea5d2888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696820ca-6681-4ad3-9d7b-cdb3427c2eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf57d33-99e0-4a4c-bf81-8cd0023a00b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb36e56-81fe-4e19-9aed-dfb2518b9247",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c39ca5-f1ad-4320-a850-dc66d3964fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7f1d1fd4-4222-45cb-b905-2da736103690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321b018c-e53b-4b63-8896-3501c9d0bbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e28501c-5449-4c59-be67-aab47ef06f30"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1c8f8253-8a43-47b6-9e85-b0e1c71e6e9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f83fa4b7-a272-4bc2-934f-b3c2fb6bb636",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dd2875-0bf0-4916-8407-725a38842d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8921d001-05b0-4bad-b32a-fe9257bbd16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98fc674-8a33-4b06-bc39-5e2c30afb68e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb720768-8823-4f62-bfa0-269eed6af2bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfdf47fd-86de-45af-8967-197be3538373",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6becbb43-e3b9-439e-b94f-95535af03af0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aadab5f-1409-4487-8faf-2608851d6b6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b4299ab-1493-4fa5-9fc3-0ecf0d0cd5ff"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60782583-5686-40c1-ac8d-61902b67cb0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59107069-a68a-428d-b23f-640807e4e1a1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "edbd7ccc-4783-4bd3-acf0-48e737c01fce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2faa9898-ac5c-46a0-921c-f5ec02357dd7"
                }
              }
            ]
          },
          {
            "id": "6bb1457a-4ab6-4151-b551-31930b638c30",
            "name": "Positive Testing",
            "item": [
              {
                "id": "089376d7-5b48-4688-84d1-55658178925d",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9b7b999a-fb9a-40ab-a456-d971d3feeae2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76182675-cdbd-4ea9-8037-962fe2d2dfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b7b6772a-1f48-4312-8fa1-26b9b2ef0779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26349383-b806-4d63-a926-ad74cdee12de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df46ef8c-ffa0-4c67-a59c-8808d1e07244"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1391a8fa-c799-458d-977f-8a253330f3d9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32a8274e-b5a8-49c9-a2b7-195058a58a55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47117d24-3f86-487a-95a9-4a629f9a0587"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f55be953-b392-422a-a8ee-0818c7944855",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e7adac6f-7d69-4ea2-b978-7fd51889d358"
                    }
                  }
                ]
              },
              {
                "id": "21a009eb-3cad-4870-8415-b505526edb4e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51daf34a-cbdc-42a4-9072-1b45db71a368",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6880d12d-8d5f-465e-a770-89d4a6b60717"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5de48870-caa6-41c8-97cc-e5ea74e7970f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "226e7fbf-37ea-46aa-9c43-a0f0fae8596e"
                    }
                  }
                ]
              },
              {
                "id": "6b4caf90-1573-4501-b05a-667082263e19",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10af5a27-f185-4881-8c4f-2833d6c56d0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0aa03c0-0ad9-4f49-8bd5-d84187244d11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dfdb320-2124-404b-acf9-693f38e39319",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "005a522a-4a24-4174-aea9-f5366651155d"
                    }
                  }
                ]
              },
              {
                "id": "3bf5aa57-2818-4404-9c2c-425094f3d07b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "223a692d-fefd-4c63-a39d-a46c74afe60f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3bf9e7c-55f1-4dbe-b85c-e540fc45dece"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "969e889e-213e-4440-912a-56ab71f98f9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4407586a-9875-4cee-abe0-84407cb347b2"
                    }
                  }
                ]
              },
              {
                "id": "7430b10d-4fe4-41f9-af3a-c24c45d6e596",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e5ef9aa-7a72-4c8c-8c3f-a8a670fe34f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7eae1f62-b101-4747-9d69-6a7f33588208"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd77fa0b-1af1-4cbc-80f1-2f115ac64dcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3a490604-99aa-486c-9b8f-fd963c5f716a"
                    }
                  }
                ]
              },
              {
                "id": "07a58e71-a7e8-4dde-a9ea-c34d80b4e1b8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de801b5e-68b9-49e2-a3a8-c72c96ea011a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d2787521-5993-4223-ae24-aeff46fea6c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5a62279-593c-4394-8739-dc110cd3e12b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3cf7aee6-71ea-4b6f-9132-9d230948f975"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fe2f47a-77b3-4bbc-a556-1b5cb82c7470",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d804d453-7b6e-4265-914e-69959631665a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3cb7373a-5960-4638-8527-708acf015e00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e490f63d-32c2-49e6-95fd-73459525512f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a0f0581-4862-441f-ac16-2d9487256a6d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "361684a7-6bf9-4835-8b03-6b5762ad847c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11c275ce-1799-4138-b09d-9ce5f43f5497",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59e8b62b-e0c0-4c4e-b9dc-44ea3d483d06"
            }
          }
        ]
      },
      {
        "id": "58fc32c7-6b5b-44b2-9421-8e8ff8aa6f9f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d7aa2990-a1af-4212-a2ea-23eaa4e3d598",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abfe0e59-b39c-4801-9ad1-3246cf5fdfb3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3c346ec9-6c90-47d8-bb9d-f2cdf24dd42c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84df9bb8-8145-4b2b-aea8-2c59dacd7a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "408c40ae-0b8c-4de3-beff-1d8024a889c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5f6a1d-b574-4b92-a7d4-3f42d45c0d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5311fd5b-37ce-48ef-a27b-6115711bebf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c4a5fa-d4d3-43f9-b5cd-f2189981b928",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e9b812-d2bd-4a0e-b486-57f240f5cac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe93cc3c-39f6-4a0a-8a3f-23aca20e0b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5912f263-010e-4f9a-ac49-f16579aae558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3643c92b-442b-4ad3-be3e-3544a82edeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b5cd95-fd53-435c-ae54-34fbc517ca15",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fcbe6c-4ea6-4f25-8ddd-29179b7fde9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b58717-e15e-4049-8a09-9a618360e6d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c3bf87-b313-49a4-80bf-05828f3ef66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "292c69a4-d7e1-4195-bba1-57a65cdacfd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fb6e04-148c-4fcb-bbf0-fc27afb05c9d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18628980-355b-40cb-941f-3aee8c55b728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2905e334-ca11-4e29-a4d9-4d71f3154b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca17eda-849a-45ff-a133-86570754d383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "010778dd-8346-45ad-97c5-25f748c519b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ce3206-937e-4c9f-b791-17a25dd18b52",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c96fda-f03d-4a1a-bae1-7768b82b5287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53216864-c3ad-4b43-9784-bce1b6e2a41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee372c2c-ca62-412c-94fb-e4cd7c7f4448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c7ec4d-0801-4186-8233-b9c1cf98e761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7d09dd-ac4a-4343-a71f-1117cf925b3b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275826e2-6a41-45d9-9554-c1d629ebba11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45a8f6f-1c2c-4c65-81bd-a9a82ce2623e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1896ec-0926-4bed-af1a-424ba4c63ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "376f3b40-4a0a-4e62-bdcf-b8cd8241a4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40fdbd0-a86e-405c-9140-51fcbee1cabf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e95060-6aa6-4e3d-a159-a5ccdb57d2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c96d302-7941-45e0-bdda-c432524342e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06d6b95-8d11-457d-ac04-8ddacc138ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe2f470-5220-44bc-8083-a4df0d6f189c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b28b036-5230-463a-8668-1c56ef786751",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06790694-fef4-4069-8b44-e2b905bb37fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee50fcd-893e-4136-ad1d-747f940a9b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97b2248-6b91-4c3a-b36d-90b32b99f57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64917c57-4c04-4677-bce5-a46c7ceccd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16c9399-9684-4dd3-b989-fc0ce2ad57bc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562eea1c-8c03-42cf-81e1-7e5324fdf85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732a1de5-917b-405a-a461-1c94e45422b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0488f4b-41d1-4c8d-a84b-7a4978234032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a433335e-0b70-45f2-9f34-842022257039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e8c30d-b127-47a9-be44-3648bd1c4dce",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d88c106-685d-41b8-ab9a-08b34ed8af69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904a797d-211f-4a1d-9fc7-70f8f8c40f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f8d09c-ea5f-4e91-a265-d161d266ea47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17337a3b-01ab-473b-9797-a34eaa853198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c235da07-ca9c-4e03-9cb5-5a3c422fe227",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4bc354-6966-4233-81e6-ed56abc55aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fdc204e-7ebc-478d-a230-a4524eb8b4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef09ed5-7ae3-4804-8be2-4b79e0b1192d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "af13d92d-a31e-4b56-bbcb-92b976e2c762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02b0650-9b98-4156-9d8c-acbb6474abde",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db7a981-27fd-4306-a517-d01599428d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be35f3f-025f-49f5-a11d-8ca127e0b2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a68eef-98c1-4002-8a8a-90fd61824b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c886a9b6-646a-416e-a32e-2bab1c18a7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ee46d8-96dc-485b-920f-a4038bf8352e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22025ddd-86a4-4949-a011-306262585aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0714b5cd-f4ce-4e3e-9f17-3b1c0184f3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e06f6c-bf53-4af9-a5c9-b11f5bde9236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "708a8d4d-5682-4124-a058-a119b28d714c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d770226f-983d-4a8f-975f-5ef6510e2864",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c63b3e6-d83c-4934-bdf4-14283a9388bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1554602b-0799-4cb9-ad46-d5d3827ef322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb7d750-3ad9-408b-b080-54274a8f1946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "96c3ebf4-5460-4fe5-a545-9349fd64ab62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bee888a-af26-4b2b-b31d-092102b41d63",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de07ffe0-ec76-41b0-b59a-19453b24aed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b461bac-76a2-49ff-9f17-f585e8239d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754bbda5-d23e-4188-a54d-d8e19f87a90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdcbe6f-7588-4c43-a9a9-83c1ca762079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac1547e-6d9f-44cc-85fc-c9e1ba5dcb3b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75e0563-5e8e-49af-a3f8-aa7597213f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8eab2e5-1c10-4270-8b58-d4ff0aeedc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f08490-a853-46a1-a14b-2c239563ab9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "db574977-1eee-43b5-8534-6e90d2b91c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c19a868-643c-492c-87f9-3d791e4f4c01",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd6aecd-1324-4825-b22f-a641d3ed9f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8649201-325b-483d-8c42-79ef8159ab11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7984f53-e8ac-4995-8d67-be3c5d5e7744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb6ee1e-c47f-4eee-aef3-463ff07d728f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1614bf69-bd68-4722-8f31-fcf8e947e088",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869c3328-ba52-4662-b3da-2070d961677c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9721c2d2-81fb-4692-834c-c7c205e8d2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f228d9a1-2d29-4c6a-914d-b28f43fed5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c22a49-df8d-49b1-80c2-0bca99eb898b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8493175f-b07a-4dc6-98dc-b93188e762b3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3b62d0-a47f-49cf-8e70-4335e2c4414f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54ef2ac-cd05-4ca5-8d08-31bc85e178f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165fafb0-62f5-4ef1-99c6-fb204f1a23a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7839717-2011-4f52-afc0-d8490de5c5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6520e1-460b-423a-b470-2997c1e47871",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cef5263-a51e-4e9f-9abf-883252ac573b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18dac6f-0122-44b6-a344-f7e950dae40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9509b10e-f288-4d3f-a4a7-77097bfd5c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7389ce12-ec45-4b10-9fcf-bb5685e87fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82a9811-59b6-4045-81bd-91b5ee539d8c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a8fda5-6d92-47b4-b61e-394ab5399a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed20e5d-9e3f-4d99-9d63-2b99f20d4b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6633c393-ab00-47e9-9a74-f11442443b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eac8527-7948-4a8c-aa6a-681937336beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788c32dd-3365-4797-8aef-903c79552851",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa083fb-474d-48a8-9b4a-b3dd43e148b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf043aa-491a-4a5e-852b-5f324c0d67b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86608fa-e375-42f3-855d-a42d21bf9d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c53f251-16b9-4238-821a-cbf39cdebb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2321b0ba-d959-4b55-bc68-a7ab04fbd1d2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98eb3646-5de8-485c-aa35-c01045866893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f04c547-611c-4155-bf34-c5ab3c542c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee21937-4a56-4d63-9e6d-c6431bf7d837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a22d6ae-db5b-402f-9737-6231c4af7cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44331b49-6c7a-48d9-bb51-4130f736954b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddd71ae-aed5-4b55-9a5e-2a78ff78ac2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8b60ab-5591-4487-8553-882f3c651b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cf3644-c515-4638-8fee-fb0b354b396e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "971919d6-7e85-492e-b4f0-d390af6ba0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143df92d-a920-46cf-8144-252ea7063f4a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ef77cc-7239-45ce-ab4c-f0d083c0c761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9ca659-ea3a-48bf-ba28-3d7aa0379608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e86bbc1-bebd-4587-a17c-618cb4224de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6abe4b95-6092-4de2-9252-c130fe3ac6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b8a54e-b0ac-47c1-9951-6245d8d82751",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28bcdad9-d5db-4fa4-92e3-b807517fb2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b83186-ffc9-4bb4-be37-097b0346e4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce16cc8b-af86-4bb4-87b0-d29d374fb0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27f96924-fe7d-4d0a-90ff-9b9626d7fbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7317b9bc-71b7-4dd1-826e-afb2979e2a51",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fd44f5-0ddc-4050-b24c-7b25bffdf133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c5435a-e05e-4f45-9552-e63ed5d084c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f3447c-475e-4a30-93ab-594137c6b3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2073cc5-259f-4308-a831-1d020539141d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6cab79-a8f7-43ad-a84f-6d1abb33112e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd9c7d7-c34b-4834-bc6a-e23f3cb4fd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12aad7f7-3c69-47df-b422-494842d6c559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b48f8a-e177-408f-be23-285145f21f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0e4d71-ac12-4296-b51d-9d1c5b1e3876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136e25aa-9cc5-4929-9d65-420e19d277b7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def86587-3600-44ce-9c3a-52d8ec7ac53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68aea4c9-e0c7-4f88-a99e-9d96ccb9c06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc36882d-c8b3-4a90-8d92-4572c22f3594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7adbdbe-8878-49e5-b54d-f805f0ade912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f5f1da-676b-45a2-ad6e-481a19095f36",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c262574-be76-47dd-9952-a1caa945a983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a918c5c5-fc11-4add-9898-dee3002606bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb10ebc-15e8-4510-8550-5c6cfc040866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ea9e7e-1dd1-47cb-962b-5ac494ae3350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7ea585-61d9-4e77-bce6-c8d427938730",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7db4bb-7945-4282-a656-41fdbad6e7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abf8e11-5cc6-4007-be6e-cb66d6901961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227e40d0-841a-49f7-97f0-02f5e70390e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4cea49-f03c-4272-b0fa-fddca8dcc470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa920a9-04b5-497c-86e0-773e3d38b346",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a665e548-4ed2-4370-a533-f9c56d352da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2e16c7-d14b-445c-a9fb-f196198a20db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa1aab0-bfe7-46d8-821b-e23760e6a406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6dea60-0888-4548-b81f-cdddfa16683e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "12d5f05e-7d7d-4f33-9f3c-bd6c7946a32b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "687f8708-16e6-41aa-b44e-1a277ffac5fb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a92181-a863-48c2-b422-67edfd551410",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "437df0a8-b07b-46dc-81b4-8723592b692a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a779f310-2ff5-4c82-a389-1ac8200dc68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "785c518f-3ed7-43ac-9292-bec972da23a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "200495f2-fc4b-40d5-8e90-71a303a327f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3ae77c8-2b17-4db6-b25b-44b8a2f3edcb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88d56c81-e4f8-4f74-b952-123398643471",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5cebce5-00e9-4751-8a0a-fafca98feff3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "011e03c2-0bf2-45a6-8760-dbfe2062f8fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6a4b7aff-adfb-48e0-b7ed-e624c042ab6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7df91e6-b81a-4907-bff2-9375bee790d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d34813f-127c-4d77-aa10-07ccf39cd74c"
            }
          }
        ]
      },
      {
        "id": "8b70b664-425d-4355-8792-ce69868b4e06",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ee2114d2-c24c-4583-af5e-639cc4c304c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e641102f-bbe9-4817-8052-0f487f9351b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cad5fd0-857b-4582-99c4-abb4fc6b7056",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179a00db-6866-484c-8816-0f18e8345fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625bc944-e013-466e-b556-5a4e57afec78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8754b886-b337-4339-93ca-0b7523020d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7a4926-5dd9-45bb-b685-34a97f93c60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29082636-8952-4446-860b-8c75281b2274",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1e567a-13cd-4718-b4f1-3c332bf8b9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c48691-15c6-44de-a4a2-4aa063da96f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a8ccd3-c24d-4927-8929-96ebfc26b8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e66c0584-4a93-428f-89fe-616caf1a1148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0abfba-b204-41a1-9cab-9e13c4af5616",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564f7393-8c9f-4aeb-949f-96873143e244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f1252b-0ed0-43e9-8485-536ec3a2c4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26471e24-1c10-4e51-a8f6-e6614b207409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a21ab80-3fcc-485b-97ef-c8fe7bf7d659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dde097-76bf-4dd2-883a-9e3ae0ddc66c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be19191c-d399-4a9e-b43b-62553aab3e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1571a51a-e4da-458f-9aea-115aa170799f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cef2086-3ffa-46bf-9e2d-a89935fb07b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d13aa6-7a4f-42a7-93da-15391ab4128d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602c1c58-3298-4645-9550-b98e69ac8149",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec4c1a8-d7b9-4660-bbc4-d38d85c0d492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f87471a-acf7-4214-ae5a-b715f4128295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43e8b13-0b47-46ba-a60f-3c53e412dfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4302915-9e43-41a8-90fa-87667a0fce83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540e710a-fc15-4e6b-b991-7e5dde7e424d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c44c8d-b369-41d7-aa7a-3b300ee02f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8b4240-6251-4095-b140-2e1b11ad59df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40358e30-92b5-4179-909f-73317af48de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9198fad-3f33-4099-ba00-a01368015e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc93ef9-767a-4eeb-af04-537c7d21a3db",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364cc1a1-07cc-4aa3-bb2e-43b4f0af5f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756165c9-76d1-46a3-a399-710efec37dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edac3789-431d-4f7f-b9fc-6373d338690b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1c724d2-dc8a-405e-af99-d2dca46e950c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d193bc-5a2d-4671-9a8d-37e71e3f550c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412d3916-274f-48a7-b803-3f163b6e2b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04acc86d-f085-409d-94af-73f9396ba65e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5121574d-2837-44bc-9aeb-f4e4b739111e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eed16492-4829-4649-a625-c394d4879338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a390d2ad-b5f0-4343-b671-6117382ee230",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f951a03-4453-4e1e-8c2b-0f9803af3460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa90efc-08de-40aa-ad9c-619ab45340e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e6091f-19ba-45a3-9ac9-7e0b1e847b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fbf724-a713-47d6-ac0c-973ac374fe99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87d4efc-3b32-4c46-956a-ec5a67bd7c45",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c18fde-e7b6-4514-b435-6793fe96e44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df42b4d-6dc4-4bb8-bc6a-53499bde43c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc29cec-7089-43ae-b5aa-a4165047dbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68bebf15-ad53-4f9a-97c7-c124421fd617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce518186-5a81-49ab-97a5-1974731547c1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbcc48e-b8ea-4a47-83fb-cf01a61862b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7791cac0-6641-469d-9c91-0e89000243f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70367755-2185-4642-b24e-f505ed1f2df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b60ed1-75b2-4226-936c-efdce5c00b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323e3167-7f8e-48f2-9c47-93fc13f2f221",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5a199b-f09b-4721-bf04-0357d96c87dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343c6371-e6c7-4fe4-838b-ec56cebc3a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c223a1c2-ac2d-4747-92b2-b739f1845666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9621afa1-a0dd-46fc-9eef-8a7391f05df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d89b956-e4a1-4bee-b2de-82e46ffdf35e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060c37d3-d4f5-45e6-ae38-9a5a8e531055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc801369-ca4a-4c0c-8a64-bba205ee8044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd72c89d-7b23-40cb-82c3-5fa3c4145204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7b8826-b67d-48da-a6fe-fdce9973e96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55546ab7-9e39-4bea-9091-79475b94e12e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c258d3-7798-4569-a28a-3857f41b6590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452c0148-ce0b-48b1-85b1-1994e7c3063d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c901272c-b232-4a44-aeea-f06e6943de6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a78427d-13ac-4da5-941b-02c6b851ed85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfaca5e5-4a4d-4bd9-9c45-7cf38dba0726",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03907bd-861b-43da-bb61-83c51ae74d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ed2941-ed64-465f-bc44-a76476a96b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ce5658-fa54-4012-9064-d106cd50b178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "29c12a21-fa98-4a5c-becf-c3ab6fdd75af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e7a023-8ba6-4ab4-aade-9a2e8bf6935d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25fd142-83f0-42b8-acaf-e57d36387808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb3825f8-f3ff-4982-a002-10f7f1d59c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78743fe0-73a3-46c2-a669-ae84dab55819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0745ed07-4793-44d2-b50d-0d382693a0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f45f4ce-1bf7-42a2-bc76-715bbd888134",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa8eddc-243a-4123-b20b-df7b655738cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b5ade1-2b4a-40d6-95f1-f1ce33c05d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae01369a-41ce-4bb2-9b59-f3ff2aa1b2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1724d018-5884-4f3f-bdb9-13bbbb07068e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c03bfc-ec68-4204-87a1-792d4876a8b0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f824ff-020d-40dd-997b-a72c922f0197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b187cf6d-9c61-4683-a018-b62157be71ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b5ab45-3ed1-4fe8-ad57-1dfb1e256b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "36cb4aa0-3e00-4199-bb8a-d5ea6cd2700c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5848b331-4fa3-48b6-ad4b-2f86462078a4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c6b29e-946d-4c2d-85b3-fc8103530404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092267c2-a241-45c4-9303-5366d08de46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c27b00-cd0b-417a-a8f0-c7cec99b3097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c38cfe92-4026-4837-b64b-92cb98cf502d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb79a8d9-7d0f-4d4a-b00f-6bf747386594",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffd5b98-63af-422c-82b6-d2db9be241e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cbe0ed-c7c6-448f-b75f-7c209183451c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325c82b0-80ce-4503-b329-383e544772ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6d47aa-4479-4210-814b-1db8669f3c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d4f52f-164c-4c7a-bade-e9c1b399a917",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4af369-6dd3-416f-865b-aa80e3a930b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfb10a9-c8f9-45cf-ae2f-048f8ae03999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2c761d-00d5-468a-b4b4-2666ec3096e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "888111b5-3949-48e7-9c02-3e209f838952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d6c0bf-cee9-4383-bf91-b5e5f6dee931",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb2a1b7-972d-4acf-aef8-1f9504e61ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f23bcd-5606-4afa-935b-2fb014ceb25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f4a5df-97c9-4f96-a0d6-351bdc8e81c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34a005a6-46b5-413e-92bd-b8e9d577b186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f31084-6ba4-4521-afd8-1c686f166ceb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef621d5-9c93-4cc5-b12b-d980b8059941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba064f4-e13b-4020-a502-622f1a6ab5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a30210b-e42f-4c49-9a32-86b85cb45d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "547aaed0-de4f-4caa-aa68-bd1108e9613e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1370f77-88ba-4bac-823b-efcb3e99ba93",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526705ad-593b-4d2c-b2be-532eba3e8383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fed46c9-a472-4442-9b61-564fec4d1321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4680fe10-a8f6-4c41-9118-9579d18341ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea1f190-5296-4e46-bb98-fbddce42bb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d490a0-a3a6-4d22-9313-a78f87b31c13",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684e5f7b-5ec5-4720-8f56-da1bb57ed827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8685950d-578e-474b-8669-ee75891ae811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045c85a3-9a66-45b6-a1d5-9d819b7a9bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4af240f5-0c09-4150-a94d-e597f832e95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e9dc78-1ed9-4419-9177-05714cbf5eb6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c08dfea-be26-4b48-b3a9-416d62239e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5899a1c-9da1-42c2-9594-e62bfb2f6a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a404f4da-b9e3-4896-b0ac-455ad20bd71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b7c5da-e9ce-450d-8661-9a08312ba2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824a10a5-7be0-4972-ba7f-2968581a0ce5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e929ca9-c65a-4e74-b789-cf12514bb76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3daa2f9-f059-451d-8d33-e75ca97d98e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad80ada-5f1c-4270-b32c-5a1ce720e6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7861c5d2-ff0e-4c41-9274-4fc01da463ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5adbcde-e67a-4bc0-9bfd-f93b8d5b05af",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bafec1-7930-4dee-896c-e4ec6b495267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5994282e-d85a-4209-89ea-eac605ca5a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2629da22-39ec-4eed-837e-26f360dddf40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33313a5f-21ca-4b8c-8695-309c981d9f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ce31f9-0c49-47f4-a45c-ac41f1e92316",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bf83d1-a750-45c0-a660-26cf6a622a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207d2b07-4153-4544-bee1-f11cac29a2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe0bad6-273e-4a8a-b6d6-4564c7d3a61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bc00bf-bb33-4ef4-81a0-5144418bfa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b91e6ae-410a-4305-ac5f-01f396e649ab",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b153b05-f5e3-4045-bb04-0f7de732af49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2f61d9-c210-43c6-847a-c103944034d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bec733-2192-4301-8b58-a24ac97bda33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c03c1262-7cf3-4abc-9220-51b1836c14ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3d19d1-0855-43e7-9418-7dfd24748f5d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec80d128-43e8-4234-be93-7662ff370c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6584d22-12a7-412b-9668-4cd8a49dd7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade6381d-f19f-45ac-a79e-44f48968bd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3319d7-e0e7-42c8-9504-5c33b134000a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7454223-15d9-49ab-92a5-6ccc937217ef",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55aa1c05-6f42-4a9b-a806-504275d7e16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a11baa-cb23-44b1-b75b-58caf0e631cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b2bd8a-b0e6-4d67-b418-172171ad8971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "811b8372-3673-4b07-b607-f120c2ddedf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997dfcb5-63ea-48de-a634-1b6bb5107bae",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29aae7df-7bb5-4a94-b91c-3db7061366e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a3de37-7599-42ae-aa71-2d93d3a97e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82290808-8101-458f-8e3e-809ef3f45e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f40c5445-83d8-46bf-86e7-c967d2452b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee34cbe-1cbb-4522-8e13-4913faefd456",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2ad2d9-7208-4611-a6e2-6440365d7059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b102f9af-31f3-45f9-9747-d7b9cb334c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716f7814-67d8-446d-886e-7729327d25ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d66813d7-c0f0-49a4-a82b-e81faabb5a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b80e95-a91b-45d6-8db6-40528f6122bf",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8e951a-a922-4dd0-9e73-d2b1bca2e0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38832be3-bd92-428a-8d73-2eb8c75c3a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c756537-4ebc-4ffd-830b-129f9ac2e4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03e65552-ce5c-4e65-9aef-258cec70b9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863306b2-8151-42fe-96f8-420f057efaa7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6368093d-f1b0-4ec1-9b16-9400c3a36cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73efae1a-abcd-458a-a183-773c532da2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccdbe57-d5ce-4288-af72-4c56724c5368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a806a6c0-c28e-4f50-9491-16366905e157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e7eccb-9c25-425c-8c57-b6c612c7db6f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210a85a6-174b-44f1-82f7-15f08f82ba01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15156fd-1de5-4f96-82f1-4709399996d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbf0062-c165-48d1-a1b3-f3de296b43fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99fa4872-ad6e-4f0d-a1e1-0897686a8e1f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00198d95-b649-45f2-b023-677fe3b58844",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04cb8792-48fc-4f73-8b57-ad44f95b0aa9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e796682d-77a9-4cec-9897-6576e1168c53",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9e87db85-debf-41eb-89c2-91d00566c655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec20e82-1c5d-4fe0-b34d-81cbee653804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "771ee00f-8d92-40f0-aa65-9f35a1df1df1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2db2c4a-7e73-42b7-b7bd-99344ac2343a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d192115-3eaf-4609-849d-42777b93b000"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cbad8cd-d99b-463c-a9b0-2321235297d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "970143ea-9587-4b4d-abb5-5ea7df87bf48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "053bb443-85ae-422f-b7b2-228363bbec91",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "44c41982-2d44-458e-8021-13ad0c12447a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8aac83c7-1e2c-4ed5-8a88-f28ce61f9ea0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c2f979a-f5b1-4697-bfd3-fc4570ff554c"
            }
          }
        ]
      },
      {
        "id": "be47cb54-15f1-4db7-b171-9cf3741e3437",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "840985db-da24-4cec-8478-5e95e7cbc4f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7531dc00-1ae0-49ae-9fba-56f1a7e90aee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "110a4670-2d52-48ae-acf8-7d39b0bb6fe6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13d05c9-c861-4ea2-9885-a8de48853fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ded8d4a-4051-453e-9758-9c8957b4254b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfad9984-e2c5-47a0-961e-be9ca21af781",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fede1fa0-eb66-4d15-9970-5c091df89201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f5920d-2ed9-4c09-b367-a703d123f71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbd701c-dbb4-4b26-a2d0-87715e8c3399",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e0b99d-df1a-4f46-a6ae-d3aff2d08984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c2ff96-8583-4be2-990e-24a1b19f4aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4e55be-f35b-4775-8979-dfebac2f3ce8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c724908-16c5-472d-982b-fe26c7f78a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6fa788-4a5b-47c3-9ffb-01e44deabc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f16a2ca-0936-4eb8-928c-1164f135b633",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4518102a-35a0-4c81-9078-c1bd2aad4e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe2ae2a-6df9-4395-9a27-dfd90bce6b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2e5470-8798-4950-8e05-47617a83a092",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91134f5f-17b5-46fd-a0f5-3ec3d7f698af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c67142-4209-4ad5-a42e-5ac821d8d61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3060f4-7a7b-4615-a3e4-61522695c6a6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a57125d-d3a8-40d8-b626-24dd3815e5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bfb006f-2348-485c-9366-25a3a1eb8eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa5356c-e5a2-44b8-9c2d-b085e7d07a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3aa10c-d6b2-4552-9055-528a95e172f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c290b7-164c-491b-a883-6840f8ead2cc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e823c48-f15a-4d02-9a89-53f8f2db062e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5fcb2e4-ae14-4274-a62a-56e7d9847b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9759371f-078c-4982-a5d1-e648c34162ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e651b32-54ea-4e61-a221-e56a43f53615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759de453-3e2b-4188-87dc-a50b112b0b0c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fd6644-86a5-4506-ab5d-f2734bf86698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d17e3fb-5c71-4b91-a217-a9cbdd439827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be397ffd-df24-4cce-a553-66f9b424d867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f322d95-083d-4446-8d66-446897990702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02f727a-c5b7-42a9-ae7b-cb868573d14e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187846d9-f7ae-47d8-a79e-274f7255af43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b91b495-3483-43cb-8703-637f55232398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de54681-9cbf-407b-b4cd-560dbec5ef1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53139af-4db3-40b8-a58b-9e6efb7b5e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f1d237-f1f4-42d7-a1c1-6a31cbae9fce",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c245cd6-89d0-4719-9fcf-17d452c7c37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99610e36-3b63-4b0b-b7da-a2e92e8849df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb9307f-4975-4e1c-815d-4e6d564b2b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285617a1-1bb6-4362-b684-592e456af0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4913fe4-eff8-4e37-a24c-c26de08bb398",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cab091b-58c3-4cc0-8459-d9b7232e0f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242f9758-bdaa-420d-9f22-c33305059997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81babfc-dc6b-4d69-b4a1-7e54117296ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d00393-b91c-4d9a-b1de-11f819699932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5ccc17-c0c2-42e2-a7f0-d507e16a153f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5532101f-a81e-4776-99f9-32a90fa0c98d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8e9a2bd-608a-4fdf-b115-cb3befb4e893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5dfc147-67a4-4dcf-9836-ce3f533f1629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b15010-ece5-4b8a-9bea-a8f6e733fe33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208ff144-21bf-479f-9c3f-024e0b85484b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789af6b7-9b22-4b5a-ae60-435e178ace4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d3ce235-eecd-4151-bf65-4f9c59dee5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc406887-66d5-43e8-8b9c-1ae5835a5979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9b08c5-9fbc-470d-8ec3-271beb64cb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06375fa-1b26-4232-a78a-553dabbc44ab",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d76377a-cbb0-44d6-b642-859909a774ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0790481a-99a8-4ee1-918e-46a860595903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb5450b-8625-498c-ad27-e6e6fe45cd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51b5ba7-2667-4296-8751-a576cd44a2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7157986b-5e6e-4a65-8ddd-27d9b7f10ef6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c03d601-200d-49ba-bb03-0ccf30d16144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30ccf671-3b70-4f7e-9dbe-2c0258d6d4d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23890f94-ef16-4691-ba74-44521876785e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5129fbca-b9b3-42a9-9a12-72ac01366523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dddcf93-63ed-40cf-a9b7-0fca554f86d1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0560cf-4f0e-4adf-be65-18ec20f6c249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3220510-95f5-4d06-86cc-8e01c9f9fa4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92140530-82e0-4a7d-87ff-fb332427d4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12706f0-dd1e-450a-a8e1-e81fc1ea78c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e256c55-c511-4cb4-9417-c8901581ccf4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b851ba-c4c9-44c2-affb-b8d745acaa14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16aeaedc-e4dd-49ec-a7fc-f52c9aa69d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c66e4ba-728d-4bdf-bc2c-e91d011f4edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c803ca6-2858-4aa0-aa5f-c6b7f6d48add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a9d2c7-c710-4e79-9947-9057f2869e38",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205c59f2-59e4-42cb-81d1-803284ab7657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98c487c-747c-4aa5-bb54-268a5833f6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04992d38-5d1d-4e07-acae-f8c7135c951e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa63a502-79c1-4914-896a-26b343ecc443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932e8c68-b9b8-424e-9b93-8cf2c23dd395",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e381cc-b72f-4eab-a176-d7ba1faa6080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbdd769-630b-4eb8-99c2-7faf805f6f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "547130a1-83f9-4b3e-83f0-cf8e13e2ab07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f29cf1e-dc4c-4573-a187-d86f88917294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f013706-aeb1-4987-9ca2-64b0a49f8660",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31eed5d-3739-4f3b-bd2f-bb73254248f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ad2383-5eb1-432b-af01-60e1f64efc2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3287eb64-417c-4724-a2f1-e54380325120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7332de1-1292-4c77-923d-126bc45e807a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631b1d1a-04d2-491c-aa62-8a2d4c58f1c5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a65c5bc-4190-44a9-9569-ef3e9d8dcf03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2c4cbb-f430-495a-adb1-67900f4d4c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a9c369-06aa-409b-9c11-e56accbe5669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb21a8b1-2621-40b3-bee0-5b01a0e0839e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52badc7a-fb8e-4368-98d6-2affe6d84419",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7ad4bf-0bdc-4852-ab0c-acb960290b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1829e04a-1fec-4589-849c-a51f8b05cc52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2973229-13cb-4d90-9b11-92ae1cc02a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81d1911-19e6-445f-b8a2-5f5ea0fe2280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed67543e-489f-419d-9e24-79c6c5c6dd26",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563a0490-63fd-4c5d-b06c-bfd176201e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d406e9a8-9460-4c57-83e4-2b8ce4c3b162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ceb475-6ffb-4832-930c-c36e7fe4418c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fbc974-4c54-4e23-bf8e-b41c38da4cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a486c049-507d-441c-8c72-ba41fc457092",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0973aa73-10ab-402e-83fc-455250ccbad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "331100bd-a244-45aa-b4a4-67f492a53440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce167a7-12e6-41c5-8935-67e2d90a44b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd711a58-ec07-4ed7-85e5-f0f2401e5c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed884897-2f5a-4eed-b55c-c6bda095260c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff09de4d-4ca1-4bca-ae02-4e07a3a0db45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a73c1b49-1f57-4ea0-baaf-a9c01a80b58a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a01e67-388f-4d49-a1e9-73fe5b71e151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daac73f5-a3d9-4160-9eca-4849675f5f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112132d0-240c-4403-b792-0ba21568f86c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9c312a-40e2-4999-9c08-52f856ff07bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0cf4e6-94cc-4666-bbe1-196c613e8c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "410f3b0e-059d-4a13-a236-5957ed07db43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0fa61f-fa4f-4c51-8b2d-284f2d7ee905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a9a871-460a-4bb5-a83c-daacdceba858",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a09d3e-0e17-42fa-ad1c-252cd837ae65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d7abf4-c824-4982-8c21-571cea12f075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ed78a6-b987-403b-9384-1c640e1cbe3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9271a87-4d6c-418e-9e21-01add6afa85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3085c1d-9521-489b-8b4a-7dd08e146a3e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989bffb3-10f4-4147-9e8c-1cab950c86a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1602b43c-cf52-4adb-9a3a-3aba5a3c5967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15f38c0-8af0-4403-b962-22f690d90164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5331a7-660d-49a2-bef6-de9cdd10d5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfc3989-f6fd-476b-90b6-96de7d8436a2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d79819-d1a3-4e3a-b79d-5b69613126b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c695958c-4f95-4d7c-86e0-1bfc9fa280d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc4da7a-e593-4776-a849-9930f4fe7db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6cd9c8-f302-4424-a044-90e138c95eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7e03d5-dbe5-404f-ad8d-08d2ce76afb3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e412d9-5650-45b7-86c7-26deb56eb6c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf6b7e9-f70b-41c4-a39c-1c66bea58f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0414d42e-406b-49c0-adf1-611278b3ddd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf36b95c-ee9c-489b-85d3-767b94cb8fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52817f3-540d-46a8-aabc-400088d34e97",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a001f6e-51ef-4925-a246-58e517a2e8fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4928bbac-e08f-4545-802d-4d2850844c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de23c874-7c66-400a-9d65-196456397266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ddaf23e-3443-4cc8-b234-5a3c84a1f2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e11965-d733-41e2-9d00-f8f4d93cf47c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2762fb-4efb-4ec2-b6b2-6d9bea646b54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa6f9319-f77f-4b8d-b405-e2303f6f2071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed68c9af-6974-4d0a-b671-dde25fdc2241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6d9a99-7505-40a7-9859-0767dc49bcc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f0510e-cf54-4823-86e2-eb31d8c4fa39",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc76864d-051e-4837-a894-40ac65500ad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1250707-8855-44b7-bc38-ecaa123bdaa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2ec306-b250-4cad-bc22-c3759ea3bf95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba5b092-8ada-4339-bbad-965facd2daa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce460747-5a28-4358-a578-c0b517c04867",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea4a339-5711-4fdc-8df4-6db791c3ca6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20e0c85-39a9-4136-a351-f7eb287d780a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c654b7-34fb-4fa2-916c-6c0673101b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd19321-c904-4b24-8cc2-7f6a8b78988b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5198f6cf-8571-495e-9e8d-d5d2adf83490",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27af4476-abbb-4cfd-97f7-99db9d5ac31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ecdffa-da15-478c-b4cc-9183c21b4ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a2492c-b338-4f46-a6c2-178089f9723c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8894e8f-fc17-4ef2-ae00-7724944a7b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f86ebd2-eb64-4cd4-bfd8-2f8b20a771c3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cd8efe-25e1-49e7-84e5-e142b9ccfe24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428b1606-5134-4bd6-955b-7bd71fe8ebd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59bf3f9-30b9-4da6-8be1-9d1fa080959e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf0f0da-f06a-4037-bca7-4275cd57aeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94071754-eda4-424d-bb6d-93b959dbf049",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf9763e-16e6-4a6d-a178-459a7bc4eee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52f3efc-c191-474d-8d5e-6ae3a45aed73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605cbcbc-8f53-4c96-9c87-124f36d3f6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd047be0-817c-47eb-a0e4-7f8439a91c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9211f3-c4a3-4ef6-b6ea-04cdc6e4ba96",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceca4721-8a3f-4f26-8c36-a7b341e4d443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d53fbd-b7c9-4476-ad16-c5090c13ed84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9bacb0-96e3-4322-8fd1-68a9f3252468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f54d790-4824-47a3-82eb-6677eab8b34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1622c425-6bce-44a3-876b-92481e0d8820",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265b23d9-d3e7-4eba-93f1-8e0700805e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed8ffe3-04dc-4424-a555-32c642fcc918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e143a21-ec65-4d5e-995c-28499bceedd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2464a814-50b9-4a27-8f5b-bdbd4c0d2ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9df393-c605-4056-bbcd-e1f5ea289297",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d578dff-467b-4d88-a3bf-03475973dec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceefbfb3-25e0-4d92-a6ef-37dbc3e67418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9acb576-abe5-433a-af5c-9e643f6374e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119354d2-d7db-415b-a279-2e58c0a6c879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d142bf6a-1c66-40a6-990f-96a978b3eb90",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc0a5a0-426f-44cf-8e9b-af955317efd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f32ceb1-daec-45ff-894c-421a67176a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55123e91-610e-47cb-a4ba-4508d725826f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b5cebd0-cf3a-4728-af82-556dc6355119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edfac66-fc8e-457e-8d43-917d7c84bb0f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47898686-5445-4106-980f-ec32076d812a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bbf1dd-b989-4041-bb07-07f79959ea91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5711bbf1-a16a-45c3-bf77-0a43eac52484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda241a6-6003-4c19-9c5b-ef97762fab10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e4f937-2fdf-4af5-96e7-e6eb618f53d5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa41182-6e05-45af-a634-f95daf6915bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577fba5c-84b5-442c-b6bb-e53610f04338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10764402-19ac-4506-b958-07a110cfbf25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fe6ed2-b171-446d-a7be-d8a25bdcd454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45673de7-1178-4589-923a-04919f880ed4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265cc93f-870f-46aa-bd7b-8d4d570e81c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8781b5-a095-4f6f-91ec-1b217e05b9c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5465069b-c677-4aaf-bb60-5bdc07802c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691670cd-80e9-4908-85a8-31862d735962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243bfb19-aed4-41fd-b04f-af4f8f85d8ef",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0884f340-5a76-4c57-b462-927a3749d1e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f06cf0-e496-4281-91b4-ca8c1e7b8d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ffa94c-c48d-4ce8-80bc-d29190e1cd08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2cdacf-d251-4def-bde7-e263f20506b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da498cd-ec08-4c61-b066-412e11959e0a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca33e0d-0ee2-4cc4-a0fd-2eb4d01641cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76f558f-39c5-46dd-a535-5a3b118e3030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e74566-370d-4f11-b5bd-cf23171010cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a890ae94-dc5c-454d-80db-c53fcc0f0979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43214352-1893-4ba6-afbc-a9ade6942e16",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d250ee8-563c-4193-826d-68fb375be8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8724ebab-9b38-4907-bd35-3f74960bc98b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e0b17d-7960-4e15-a193-0faf5d6f655c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9705388-625b-4997-a8d7-52492e63e5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc5b6c4-116e-4a72-9ad9-51f1afcad8f5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674813d7-9e07-4c83-a49e-bc88174fbc17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4534de5-9132-407d-9d91-bfdd018e149f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd617af-d380-4d2f-9ac3-2a201b609465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b00ed49-fd10-4457-95b9-1038662b4a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177c91f5-b4bc-4414-b549-d6e07f25d7e9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dc9e2f-249b-49f9-92b5-f49672e579f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bcf424e-36b5-48ab-acca-01d9ee208252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9ca44e-fa8c-44f9-b37e-62a268e5d66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a74c30-e88e-4e35-b0cf-95638a590576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc69121-543a-4f84-908f-e4f3a94b0e39",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53475af-82f3-48d8-bf53-2cd3cfacbc28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0e871a-7f7e-416d-af15-70a8fefd12d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb7d573-07e1-41aa-8537-7db0df3cf957",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f27689-5a88-4774-b09b-49f669d5e84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754a264a-df29-4304-8953-1b2a767fa159",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd016f1-e532-4c2f-b9ab-22a62a13cdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f581d807-26ff-4792-a80f-e6d109df5134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50aa1835-3a25-46d2-91bf-e312186ef20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac93a42-9554-4179-80e3-c634d16da4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40412dd4-cd50-44c4-8b14-0cc157424326",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1da46-5f34-40a0-ac46-6301314dd082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8548c7-0c6b-44ca-b101-4bcb72b087fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2dbc1a7-e023-48d5-b2d9-611c4b46286d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec27f1d-ce10-4042-9f38-e5abd5a71532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121fa6d3-c727-4f68-8788-cd8fb0768225",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbbb5ff-ab42-43e9-a27c-f37326a3ee4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3619b8-7b82-4b15-b5d5-fd105e012089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71ea282-35a1-450a-bf49-e2b4c509a867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3346d2d4-89c9-4e04-b26e-af57459f623d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0e0d95-39e6-468b-b40c-8915097b1074",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fea119-0e37-4bb1-bda1-986e8ccc529c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67eaa92-df17-4fe9-bd9a-6050f620b471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfea88b0-e527-4ab6-97d0-fcec70e9cb1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1de029f-4831-45a8-8310-0b5408e352a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a15440-da7f-48ee-9416-3efeadeca2bd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bddae53-f106-4d70-b250-097fe65729fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6144db-3a59-42fc-9b8e-fe2187c03b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa71fa5-e5fb-4a4c-9402-f8c47dfc93e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509001df-26ca-4b53-b8f4-bc6291b1c768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b17d4de-9e36-46da-8a7b-f3221f20f0c2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311c86a3-faa4-4694-a120-312466a47764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470fa541-634c-4997-8550-052c86cb7ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f5937f-4fdd-4951-9d63-203e0d2cfd58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779fb62a-21b6-4640-ac50-f241ab08a8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3fc215-6ae4-477a-9906-258626543c94",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7187f0a-b2e2-4996-b4b8-6b8fae715fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf69fd7b-7cbb-40e4-b8ff-c7ccecdb93b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae267e1-d37e-4ed3-834b-a973ea03993b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44469344-3a89-4b10-9635-2b21f049c413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ca946e-7a9f-4320-a49b-035c9de4df58",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01b5c48-a5cd-4ba3-9623-219ccbda365b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4176794-4f90-4c36-827a-4c147b30cb0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9405a0-5884-479f-ab2e-dcbf72f112d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f82fbc5-3cba-46aa-a3c5-c93e1a349d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788175b4-fbbe-407c-8c59-03d4a365131a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b148c91e-fdbf-4bc8-b3bb-6e8f0ab25663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f164461-313e-4412-8ad5-84dfdaab9f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75501f68-6b30-49b7-af1c-b13a0598ddd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1c69d2-dd0e-4c41-939c-e0cee651eb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208e3a5a-4dd9-412c-b7ff-742cac0a7c4e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bbed94-5ab0-4001-8d04-5a753f5e7d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63c5e8f-39b7-4062-a8b4-c379ff4a18ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7fc58c-d712-4777-a870-97537b794938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a18f07c3-aaf1-4117-a461-18190f1a0d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5829a8b-0c22-4b7f-968a-ebee3ade7f05",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8c3924-f8ff-4d5e-95cb-27c18cf16014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78125b12-bfda-4157-ba55-439401976d94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68003e7f-1105-4456-89ef-517d783d5e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2083390e-ce56-4d02-83d5-89012ccaa64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d456ac85-e9b3-4b44-8706-700d7609d122",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03dcbbaa-1b61-4e81-8e2c-50bf0d38ea10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed8c243-6f5c-4ad9-8d10-cc657573eff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b157e4e3-ac7e-4bc9-b75e-704a82dae991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ed002d-876f-4a08-9147-8eb68e2ecd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445c9696-1fb7-4971-b155-d6fd8e6e7a0f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ad471d-fa32-4c98-ab45-3f9b46bb4621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47026920-e0f0-4a4f-8186-44bcf2a5e95c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8123b4-e9d9-40d4-a2bf-707134bee4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fa76e5-ef27-4c36-8a63-7b778b149e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34f1d79-8a11-4578-a9c5-4c5c4703b2d0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db00086-c16b-4b8b-bbe7-6de0bf2d8151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b64f1d8-8417-42fe-9eb1-e2fccfcd9e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4122a3cf-5df2-4a32-b606-57c3e521f6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ddeacf-e689-4dfc-9d61-abc5670eca3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd54dd64-f076-4a66-b807-6a8709f13c8d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc22e558-79ec-458a-afe1-4d28a27a1a9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12bf8325-f5ac-452e-8860-0bfb8df24d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90307504-4cb9-4ad0-8c60-9770222e001d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d269e3-d138-424a-a40e-035eb495ce95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108c4cd6-cf2d-4d4d-ad3b-c0c91254d4f2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82d0b6d-1d2a-4519-ab62-4e14e3dfb9ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "934a2141-268f-45cd-8032-ed6c042f2aef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33373b00-2a26-4416-aa13-764be3d4b629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322677a7-4c7b-4f4a-9def-6b83f6a157ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a67dc8e-0f7f-4287-b291-4cc26444623f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb1841c-3bb0-4262-a906-28a0e063fd67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7432a9d-57b1-4fac-866b-1f4700a9382a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c17119c-24ca-4ca7-92fe-e49d3939133a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b0fe4b-948a-4484-a28a-3c77ddec892b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c792428-ea1d-4267-a4da-9501be526262",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bdfc10-1613-4d61-8f2f-3d99a7549d1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f64d770c-9fe9-4c1b-a596-db753cd22861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971377a5-56e6-4b75-9927-ad591734bf08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2934a3e-bdc8-42e4-85ba-c8a18e938e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a846985-4c25-44ad-aa0a-cd6db05b1d13",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81900a69-5625-41ed-9e74-882a1c2b4f9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35f40d99-361c-46b8-a279-e8aa40f44c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fc212b-b4ea-473c-8922-24992f219be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2e8223-4183-41bd-92f1-c55fc6cceee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5a186f-5d81-467e-b282-d5f6ffc83d75",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37908de8-fcc1-44cd-9114-0cad9751c04a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ae3e6e3-512a-4c44-9a41-ff4314577525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51708fb-5f14-4a63-a97f-b2cc8bdeeb6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c65fbd-e9ed-4644-9ca4-83e90e9f0919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cda2636-6f37-4955-bac9-7620758cd000",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91fd8b8-d5df-41a0-8906-32faccd599f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63a0c1f-8969-47a1-b369-60d7bf1e9777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df84d19-977c-4a2f-9e07-ec6e6c4d112f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c32c095-7be3-4997-9bd9-afcc20c3e39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f077f2ee-ee72-44a6-9c05-045ddaf1ae7e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d92a91-cb45-4080-91a0-9deddc3b499f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2080461b-e527-4ca7-a604-ec52987fcc89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e8860f-abbf-44e4-8eb5-14e877079433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d53b83-df9c-4922-931f-2592c33d2ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef73352e-c78f-4fe0-bdbf-d0711abde38b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0a80f5-ac8f-4e8c-abe4-f7d436faa2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ed0d114-c0e7-4db7-8ee7-4e8899389664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60bc8f7f-1d5a-4afc-932f-84db5919677e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ace23d-236d-4742-9182-8ee452640abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad94a6f7-3981-4292-bdef-407b2fe61d83",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972f4142-1640-46be-a191-9c2b8f58de09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3253402e-9e67-4d67-88be-d53a322ad612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8ced51-6991-45d9-b854-95ef130e8f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583079f9-95af-49c8-834b-5753426a5f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7a6979-e071-4b4d-a064-bc26e90191cf",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be64af64-ef79-41b6-8ca8-20f692bcd9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc63325e-abc9-417d-81d6-9e72e0599184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f168a3c8-72a9-4063-bcdb-db1346387eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6370cce-e06e-47bb-a191-60019816d531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d727966-3b5f-4098-a4d8-55631f7453ef",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc8b5b9-b8c4-4ba8-b44c-48d6cbaa7c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d91033fd-27f9-41d0-b9e8-de873bbfcecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093e20f1-aaf5-44b7-b1fb-c53fa9683218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004544a6-8578-4bd2-9e48-ab3898c5afb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55677167-b21e-4c6c-8204-0d37b9bad86b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cf9bea-65d7-4c8b-99f3-9dbb559668af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86ccd735-ecf6-44b0-8623-1a03e7ae464d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "306e3004-d067-4fae-b558-1ba1fade192a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f99a59-5bfb-489b-ab5f-0d9ff05f44cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5763439-c82b-4a6e-bc07-ff7f27891d32",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ac3861-95c9-4127-8d6f-b85f66e4fab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72cf0679-8aba-4386-94d7-f1c7f8fa1f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de945de5-dda3-4ab0-8fdb-b50962141829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83656d2-758a-4a45-a476-90bae90355a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd9c19b-0db2-4843-9d21-eb0efee4207c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac27a9f4-5b7a-494f-9088-174e8864f247",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c93bbb81-5e4a-4ada-887f-c50e8cfd95b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33035599-1d46-4b15-91f0-23c64444dc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28536ff-9e90-4506-9d25-663f13a5790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eecff3-c7fa-4e59-8339-534086018515",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a1a4b4-c621-46a1-bdd2-379a3cc33c52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc0569b1-f6ce-426a-b860-2981efa1c0ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e77c91b-8395-4485-88f2-03d04c26175b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b54330-db20-4581-b333-7697658ba524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56edd4df-7926-4bb2-a5e4-5ba1900bfbd7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4fa6cb-4944-42af-9478-3e47013ad62b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed4ab13-a73e-4a3c-90f0-3a0d6eb87ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407d86e5-8303-4602-8542-0086139a21dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306cb44a-0192-4763-b043-108a10804012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ce2010-fb97-49c3-a56b-2202a731bc74",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c445444e-955d-40fb-9eb7-aaeca1c10fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b744b6a-ca12-465c-96cd-a6b42672c427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80db478-6e24-4323-8b3c-b9a76a220c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cf949c0-f81f-463a-867b-fc538f2ab2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91960d4d-c00c-4a9c-8d05-d7709b1709bb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a7d8d8-abd7-4a75-af76-96cc35aeae32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f6d2d7f-74f7-4fcc-95c4-aa2553d18b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6f4ba1-02b4-4f5c-9045-df1457118655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b558c03-47a4-4e80-a121-1a8d85c7ed2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e33b5a7-6120-485d-9683-76c0c8ffe4d6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dde895d-df14-4234-83b3-13ce4963d5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "565b0ce3-a498-4347-aa9d-073ad6640531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19436a79-5a3f-49ca-ad20-be89b7c7c1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8346808-9bc8-42ec-a060-6b370253b984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fcbd07-895d-430d-a26c-8ca0170240e1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baac161e-d348-437f-bdcd-829d499048e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "807e634e-1156-4f45-9bf7-7476779630d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd13841-151d-48c8-9e0c-732f9481af8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd59764-8aef-4045-b49c-697713ba33fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e019e5-0b59-40a2-93ac-c40e422215b0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6ceee3-9248-4d3d-ad7f-41dc49acc16e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a1ecc20-ef50-4629-acb8-50b0006973e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51477b0-f68b-4429-bb09-5287c191ab04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81def84-246f-4677-a55e-87d92567fa79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0148ba31-df1f-46df-9acf-58e23caddcbe",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef715baf-ffc1-4afc-91e2-27af173740b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f567a622-cb7f-46a7-9078-3c0856c879e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a88756e-de89-4112-8af6-16691c0da3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f944fa-05aa-458e-ba96-4ed7d92b6233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd211046-a810-40da-8f9d-af91206947f1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cba1af-37d4-4ba2-9e03-5c15f15e88bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56e3af36-cbef-4027-91c3-732b7e2e4d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a90b0c-24f8-4ed3-b704-4c9815a411bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501f73d6-edb5-4368-a9c3-48a2d4535f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbc639f-d262-4d19-8f3d-ee6b5e389f3a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2778362c-2330-4268-8a9b-5089a48d4dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "241fd68b-0c86-4404-abc5-5aa378728838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6b23a7-f49e-460f-a012-22ded6f41778",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85d1aca-bd22-4327-89c1-b010b6f002cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b519ea-b53c-4f9d-8d8d-f84eee0cb58c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5abda0-6912-4d39-99ce-039d028cc28c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e299946-acaa-4b73-b949-ef510d05585a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddde6179-49e0-4d6e-beec-d34c68c53a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688dc0ea-b4f6-4bce-b8ff-74afbe6ac6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bc0123-8a24-4d37-bc8f-e7377e74ba74",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7160db94-5289-4250-9fd4-f9f425582b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd7f8735-d9f0-4214-901c-6ab6e9a94984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c40d6f-2a59-443e-b822-8c7b98bb0a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f0153d-75e1-48a1-887c-e17d97dec93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f034c042-da71-4876-823d-bc99a5dbac6f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898bc53b-f9a0-46ad-83cd-231cf9757909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2a30149-6dd7-4056-a79f-a0e452ada1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3373cb-e99d-4061-b55a-1b13cfc8f2c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a873ae7f-5b9b-4752-b9c2-0ecbc7c683d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11eb0410-5f6e-4520-822a-b98024126d0e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e703dd-71c1-4adc-99ae-03a9dc89227d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e8856ca-7dbb-4d47-8d06-fd46fd4bd9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5189e5-8d27-4180-9ec4-ff582e47be02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d34c712-fde7-46b2-9524-e54040660c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495e791a-7584-4c0f-97b9-69b4276af2c5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a311a4f-42df-4be1-a0e5-ba2befecc30a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ede779-092f-490f-9904-5219bda4205f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f41582e-8c78-4484-a7e1-1cf4f1fe1a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7811cf-4ad0-4631-af01-f78f0d3047b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7981590c-3091-4231-9819-1c32aa2a1b6d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c81e48c-0abb-465c-b980-394bd95fbb3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "255ec826-7c2a-4aac-86f7-8854154ac410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d27bcbe-f4b8-4198-a172-b0eeaba7f04a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b787e9cd-ba23-4463-a4ff-b965b398ee4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d385c8d6-9287-449a-8ee2-4265f2eb640a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1164f134-2309-461c-93de-93be9fed0f21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29429bc9-5a5f-4922-9dd5-ae7eaf5903e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fbc71b-6e22-4949-b277-e4dab3c5ac37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8a85bd-c0de-4546-8374-7ba509c1bd3f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "572d3e07-29f2-4112-bf25-aca6bf46bd8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32d028d1-4ef5-4953-8e48-bfd4205ddd84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "962110a2-09a5-478d-af17-c66b06687106",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c57d51f-41fb-4722-87c5-186e81c21056"
                    }
                  }
                ]
              },
              {
                "id": "8bfc4c78-178b-4c02-8ae2-e391caf0d30a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc8cef37-a51a-4978-849e-533159ad1b18",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6b3072-1940-49eb-a944-6e223dce5399",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "11c3a839-a9c5-4344-bbf1-1c1fa95b7e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae081706-eceb-4d1b-9d80-75ecb20b62ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66155348-c8a8-47c0-b9d5-231ca1cc1915"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59d4d66b-9e82-4cc7-9be2-8b1da63f5e55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "965cbc79-d8e2-4ef9-bd8f-a6a3999ff7df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9b267c8-d107-4a66-a463-cb685b100cc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cbcc1fd-cc2c-4537-935a-d60533ab2fc1"
                    }
                  }
                ]
              },
              {
                "id": "3d3655b5-895f-4404-9a21-bb852150b14c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a0fa3f84-9512-4372-8afd-bb7fdc91ce10",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f82d16-8174-42c2-8d9d-c13d7bb26a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0525b3e7-aed0-47ed-aa92-15c977230e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfd91fc-7c3c-4f08-8fcc-1c7bca509fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d52aca-a2ba-455d-9731-92bd0ddfd653"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "377a5a3b-45bd-419a-bd72-31c9b9357095",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e2a1b8b9-3049-4b42-8f32-ff846bbc7651",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ed2b92e-175d-4702-9fde-a683382d839f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce87f012-250b-4656-9e3e-8b5fa2d9a599"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3446640d-55a6-4b24-b8c1-e7e5963e4f0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f21df0a3-cbd2-494b-a67d-61ae10d444c9"
                    }
                  }
                ]
              },
              {
                "id": "3c5f77cf-e61a-4cad-a5c4-ab3ef3311c5f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d840618-5cef-4211-891a-932bc51b8ba0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d4d6fac-5a35-4ba6-8d89-9e3157b56345"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f67a150d-cf13-472d-baad-c670d2db736e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13a30524-6c62-462b-94f3-f76b60831f77"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4e62359-ff09-448f-9ab2-d37f1e17813b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "613f8491-ca51-4e21-969f-0a1724409b38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e68c8b8-b025-4853-8461-a1603cc04890",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30e6f118-a175-419c-9766-8a04e10f0104"
            }
          }
        ]
      },
      {
        "id": "30144d08-713f-4bc9-b173-793df54727aa",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7cf1487c-0b18-4986-a629-cb63487680c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e28d2fdb-c909-46e3-b00f-ad4c8dc6202e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04f4ce3a-b9fb-4aeb-a547-6f8130cadf65",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b82cea-5e8d-4d89-ae50-9e61366f5a9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6b1d70d5-3b8f-40d1-a935-21ee82747170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb4a615-f808-4ba1-b473-b09a2f092d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25128e9e-ec47-442c-aa50-9df4173e0782"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86466d02-5605-4fdb-8af8-699b9344064c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59a6b602-1e7e-45d0-b29b-816cb9446346"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5224e412-4d9e-4d74-a07d-bdf45fd8227e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b705e8e8-dc2c-45b6-bb44-aace0904bd82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "039b48ea-3461-4d27-8ae7-266acb3c4ff5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3d4f147b-1f19-4c35-a126-758fd029250e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f63ca1b-3754-4e61-af4b-1197201f5171",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56eda4d7-44ab-43fd-84e9-34ba9d9b9683"
            }
          }
        ]
      },
      {
        "id": "9a6dbf4a-69f9-495e-bbe1-527591069a4c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c8beb10b-2446-4fdb-83b0-59848c74a40b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5b5023e-04dc-449a-a782-630ce08339e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "360b7b6b-b0a1-4a74-b921-d7cd8cb0c2de",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329e7235-5712-4d6e-a355-aac1447bc396",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe5fb648-d09c-459c-a1e4-73552f73cc83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5897ee-1de8-47a8-a8e0-9816dc5bd581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75cd2994-269d-4441-8fdc-b3356c864691"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bc0ff3e-60c0-4149-a858-30f89bb1e8ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f49c98f-eba4-469c-bfcd-1af02b1550b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d1c4aa2-c7ec-4a5e-98c8-3dd174a6b3c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dd64cb8-6e7f-4ced-a4d0-d659fbb5bb60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86c1396e-7bd8-4178-ac7f-444e5e57aad9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d7a3e652-2fe4-4f4d-8fd2-e5f7a2226f6f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "462194f7-60d2-4343-95fd-83ae2ee339a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd9fcf47-4528-44c1-913b-d3d25f9e698d"
            }
          }
        ]
      },
      {
        "id": "93ee75bd-1e3c-47fc-9a9f-c32e7841b348",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "72fadcbc-1c25-4d26-830e-3b19444514c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e121a1b5-43e8-47dd-882f-18a7c0bcf5e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00dd1653-6e20-4077-a321-af09b1458f3e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1cdbcf-84c0-4cfb-a454-75365bca5ea4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2f32aff-bba3-4adb-9235-1b22e860979e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd72244-64ee-4bcf-bf03-859776d1153d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "598a527c-04f4-4deb-a903-a4c59548ac0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10b0ba96-b906-494f-8a71-fd9a7dc3cef4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bafc676b-f304-49ed-8c27-fe3a6bb0f33a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8de8c572-e58d-4734-bf4b-bc3597e2ae2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "713926c6-8d9d-4714-8a9e-dc6b368a9d0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69aaad26-0199-4ba6-8a5f-b454fcc65a3a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ff91947d-677d-4b2c-9dd0-0a82fabd20ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88fdac0b-e1f2-4ddc-852d-92184b07e300",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a3152fa-1acd-4cd5-abf1-60d594a5c923"
            }
          }
        ]
      },
      {
        "id": "53188504-d12b-4267-ac4f-0429544ffe4b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "342759d9-d56e-4fff-aa49-585736dbd291",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e13d9712-b223-49bc-91f0-f996019b24ff",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "bcea0afb-8943-4895-92bb-ad06c70e7e62",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd27ef94-fa9c-4cdd-8ff1-d4bf2b74e55c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24fbb069-28b2-4529-9744-4571cade94e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.698245614035116,
      "responseMin": 6,
      "responseMax": 611,
      "responseSd": 70.71499627855833,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705451801637,
      "completed": 1705451826948
    },
    "executions": [
      {
        "id": "a23fc32b-3dea-4215-b1a5-38b59555ad44",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6f4f849d-0a12-4b7b-9a0a-3e9dc1ee1cb1",
          "httpRequestId": "cce86247-7d67-44ee-a5ff-a3704cc0eaa4"
        },
        "item": {
          "id": "a23fc32b-3dea-4215-b1a5-38b59555ad44",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "aa3e3a18-56c1-43b3-b102-1ed951dc589f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "4c287aa3-0d07-4de0-b773-cc00d1106ec9",
        "cursor": {
          "ref": "b3f2f3c5-9f04-4958-afe6-75084a644cf0",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0386adef-0769-4ee5-a819-8178e7420040"
        },
        "item": {
          "id": "4c287aa3-0d07-4de0-b773-cc00d1106ec9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9f47b304-6c74-49b2-9449-531c456354c3",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "fa5e26f2-b758-4300-91c1-43a1e576b075",
        "cursor": {
          "ref": "b4490e13-161b-40d6-9f21-01eeb0ba7d11",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3763d90d-89ac-4e8a-9784-57578cc41f14"
        },
        "item": {
          "id": "fa5e26f2-b758-4300-91c1-43a1e576b075",
          "name": "did_json"
        },
        "response": {
          "id": "e4109df1-726b-4640-88d9-5ae4907eb78b",
          "status": "OK",
          "code": 200,
          "responseTime": 348,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c93295a-323b-4a5a-9b99-08f5e02b7b35",
        "cursor": {
          "ref": "aa87a54b-9931-4ed6-a5e0-a7a6367cceeb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a164e5f9-b61b-45cd-8e5a-78fda6bda272"
        },
        "item": {
          "id": "8c93295a-323b-4a5a-9b99-08f5e02b7b35",
          "name": "did:invalid"
        },
        "response": {
          "id": "f1ba421c-9d16-49f8-9f88-7fe318783e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c93295a-323b-4a5a-9b99-08f5e02b7b35",
        "cursor": {
          "ref": "aa87a54b-9931-4ed6-a5e0-a7a6367cceeb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a164e5f9-b61b-45cd-8e5a-78fda6bda272"
        },
        "item": {
          "id": "8c93295a-323b-4a5a-9b99-08f5e02b7b35",
          "name": "did:invalid"
        },
        "response": {
          "id": "f1ba421c-9d16-49f8-9f88-7fe318783e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161365b9-d0f7-4a54-992f-e352507c1840",
        "cursor": {
          "ref": "16a0e1d3-9be2-4eb6-b737-ed77ef015d65",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b537c94a-edb9-4eda-a87e-6da559627557"
        },
        "item": {
          "id": "161365b9-d0f7-4a54-992f-e352507c1840",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d1192f93-ea47-45c9-9ec7-49366eb24131",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bf9eb6-c807-44d9-802e-5104458f53dc",
        "cursor": {
          "ref": "860a0681-1e98-4f86-9354-2a69661ac35a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5f71976a-7a65-4308-bbf6-0296275ee1b9"
        },
        "item": {
          "id": "09bf9eb6-c807-44d9-802e-5104458f53dc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "464e9917-0008-481f-b442-f830b7a2da73",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734062ef-bd84-4bc6-b8f1-6339bcfd158c",
        "cursor": {
          "ref": "51b281a4-6055-4ad7-8c6e-364e511a7dbe",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b568bed9-f09a-4523-b2bb-ec9c9d057b7d"
        },
        "item": {
          "id": "734062ef-bd84-4bc6-b8f1-6339bcfd158c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cd1fdb28-2602-49a9-949b-825efe4f1dec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02ef538-6253-47eb-9a00-132dc58e2d74",
        "cursor": {
          "ref": "2aca7027-1e8c-4ac2-970b-6d7f330d5620",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a46944d0-dc91-4b22-8256-141900defdc6"
        },
        "item": {
          "id": "f02ef538-6253-47eb-9a00-132dc58e2d74",
          "name": "identifiers"
        },
        "response": {
          "id": "8d57d1b0-f6e0-4d39-a5c3-ea08a64f76e4",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbeb02ff-3b96-4f01-9ca8-dab50bcd0387",
        "cursor": {
          "ref": "0de02553-1307-4f8a-a31f-ea7647812372",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "00e7ed26-5984-4edb-8206-5ee7448565a0"
        },
        "item": {
          "id": "bbeb02ff-3b96-4f01-9ca8-dab50bcd0387",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b0fa1a89-ddd8-4f9e-a220-09a504c39701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70d4c52-3b41-4bcd-a2fb-3820f54b04fb",
        "cursor": {
          "ref": "72969312-3469-4f3f-90d7-4a408bbda8f5",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5072d270-cea8-4de1-88a9-5c8292eacc8a"
        },
        "item": {
          "id": "b70d4c52-3b41-4bcd-a2fb-3820f54b04fb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e235a348-829a-4e67-97e7-1e5cba6710ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f9aa17-a5cd-47a1-83d2-a83b47e9262d",
        "cursor": {
          "ref": "e20d4c30-2567-4444-a1ae-59784b49a97b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e59e2887-6968-46fb-b6cf-1b841e13dc8e"
        },
        "item": {
          "id": "42f9aa17-a5cd-47a1-83d2-a83b47e9262d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9995b243-3674-4538-a829-ae0ab04dd159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f30eb8-cc56-45c5-9d7d-48adb60f696e",
        "cursor": {
          "ref": "0cd06b57-7ea8-4e63-985b-f6138abbde0c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1709b319-1e63-4ab2-b7f7-537e64d8a34c"
        },
        "item": {
          "id": "b8f30eb8-cc56-45c5-9d7d-48adb60f696e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f5a49701-2432-49cc-9aab-3dd746a0e53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce4cb6e-887e-47ef-8274-2c689ca0c4c6",
        "cursor": {
          "ref": "4ff92510-eb5e-42af-b212-80b36de5199e",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8421750e-e3a9-4e7f-8963-d8499a85354d"
        },
        "item": {
          "id": "cce4cb6e-887e-47ef-8274-2c689ca0c4c6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ec847f48-4ce7-44cf-b0a6-f65b0032325c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276014a1-942c-4b5f-b436-8454a7502702",
        "cursor": {
          "ref": "772fa457-d91c-4326-8660-dd5e7ad139ff",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "66e39afd-b403-41b1-b717-ea816149234b"
        },
        "item": {
          "id": "276014a1-942c-4b5f-b436-8454a7502702",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "64f181a5-3020-41c1-bff1-efdf51a78535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27003052-d666-47ce-aafe-d9e6d7bfa7d2",
        "cursor": {
          "ref": "36970ac9-8e0d-4514-bd4e-7d53f99dfb8b",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8b64b0f0-bc46-4fb8-b59e-281a3dad2ede"
        },
        "item": {
          "id": "27003052-d666-47ce-aafe-d9e6d7bfa7d2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c08e1ba3-b9f6-445b-a412-e96faf9c3ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c142fe-ad8d-4064-94b9-ddbb09889570",
        "cursor": {
          "ref": "ea988e70-bb44-454a-a5da-b3c4a22f2ecc",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3135a8bb-5c69-4b32-baef-e5b63076afd5"
        },
        "item": {
          "id": "24c142fe-ad8d-4064-94b9-ddbb09889570",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1616c427-58d6-4a74-ad54-a87a1eb9c9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada2f851-9369-46fd-bde1-aa5cf12a2698",
        "cursor": {
          "ref": "f3162386-60d8-4014-921d-f8ef04fbc56c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "31e7c26f-75c8-4f42-bbe6-301986cdce16"
        },
        "item": {
          "id": "ada2f851-9369-46fd-bde1-aa5cf12a2698",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "09970e99-a57b-4fd6-8ad0-bdcfa0b6e82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f39daef-f476-48ad-b056-984dbcca63de",
        "cursor": {
          "ref": "7bf257be-0589-45d6-bdd4-6679f4dcbb08",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "523dacb7-cf69-4ab5-8a8d-e462f44c7bb5"
        },
        "item": {
          "id": "5f39daef-f476-48ad-b056-984dbcca63de",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7b569f32-745d-48dc-9ec7-742ccb15aa2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46628eb5-9134-4cc5-9643-d3e545198230",
        "cursor": {
          "ref": "b7317403-ac24-4818-83d4-cfd07cfa6682",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "eb2f6c91-be85-4bb7-87f7-c1ff35955aff"
        },
        "item": {
          "id": "46628eb5-9134-4cc5-9643-d3e545198230",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b9f7b64c-7bb8-4dd7-b301-e3512a79133e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87f38b4-b66c-47d5-9320-79fa2eed472e",
        "cursor": {
          "ref": "43a14141-9bb7-4f89-bdad-4f717bbdbb7d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5a5884b7-4752-4b8a-a9d5-43f576addd98"
        },
        "item": {
          "id": "e87f38b4-b66c-47d5-9320-79fa2eed472e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e8b976e1-f778-4cf2-b602-ad04c570d3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf82877-1f87-4c44-9890-407a5b078ad5",
        "cursor": {
          "ref": "da2d3143-4551-44bb-8d7b-d04c5b41a4c2",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "63be92ff-ed4f-483c-9ee3-49bf80617410"
        },
        "item": {
          "id": "caf82877-1f87-4c44-9890-407a5b078ad5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3836a44e-cccc-487c-bf78-4d367d1965f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d44402b-130c-4d19-b122-08328c6229ea",
        "cursor": {
          "ref": "3e3f699d-5534-41c7-b7a6-84a73b5d90d0",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dbca5b49-2509-412a-a577-0674a0215fc0"
        },
        "item": {
          "id": "1d44402b-130c-4d19-b122-08328c6229ea",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "03d2be4b-6d00-4042-aaeb-6dcaf656fe5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e7537f-f7ee-4f50-b342-d648117b636d",
        "cursor": {
          "ref": "bf6931c7-ad9d-4107-9a5b-adf5691fd180",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7e16b8f1-a74c-4aa9-881d-a218c5ba1056"
        },
        "item": {
          "id": "99e7537f-f7ee-4f50-b342-d648117b636d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d24f5aaf-3180-442b-b594-c29766439200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5e7069-a463-4425-8392-516aa666c682",
        "cursor": {
          "ref": "56313c62-d170-4d99-bd23-d28f580933c4",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "14bf1750-5256-4af6-bcb9-0f07654701fb"
        },
        "item": {
          "id": "eb5e7069-a463-4425-8392-516aa666c682",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5b0b71f7-8134-4dd1-ad6e-bc407e5a3e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584ffcba-9e20-4f00-ade5-1c105c715c7b",
        "cursor": {
          "ref": "9f6e4b90-8395-42a6-88a7-777a5929da26",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "04d55e66-8364-4c8c-8f28-7938c42b94de"
        },
        "item": {
          "id": "584ffcba-9e20-4f00-ade5-1c105c715c7b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "40e84d1c-9613-4427-9c63-2312a70871f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04100073-bbc9-4c2e-92bc-c4e3746ff2dd",
        "cursor": {
          "ref": "28e30bcb-4613-478e-8125-e8b641402eb1",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f0641b05-4048-432e-8594-1e37a514fef1"
        },
        "item": {
          "id": "04100073-bbc9-4c2e-92bc-c4e3746ff2dd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "773c92e4-2310-4905-8f6c-ee428adceaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b8cba6-05c0-4e37-b0af-39bed08e3fdf",
        "cursor": {
          "ref": "4d4c4221-fcad-4835-ab30-7c68b8d00d73",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "553fca15-2832-4b22-a08c-ef0b558c9942"
        },
        "item": {
          "id": "e7b8cba6-05c0-4e37-b0af-39bed08e3fdf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5bfde8db-3a10-4ce9-a7d3-d5780546874d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14663b25-a1ac-4154-9e48-3f26ae2bd6cb",
        "cursor": {
          "ref": "54498f44-d722-4984-8f36-e5e496240f6f",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cb02591e-5341-42bf-81fe-eff89db42acb"
        },
        "item": {
          "id": "14663b25-a1ac-4154-9e48-3f26ae2bd6cb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "21aeded9-7f2f-4fdf-9942-c9c1297044d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e36804-b6f7-42ed-862e-dc3e2d241c33",
        "cursor": {
          "ref": "bf5876d0-6f20-411c-841f-04f47fd374b2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "256c8421-9506-4599-9428-1e36e0eb33c2"
        },
        "item": {
          "id": "96e36804-b6f7-42ed-862e-dc3e2d241c33",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "22ddd272-f3f9-423d-b578-c075eaee01c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b8e933-7cbb-4d7f-b7f1-69977cfe92b5",
        "cursor": {
          "ref": "0c77f9b8-1233-4ddc-888d-5ba82f8f1e0d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cd7db80b-d9eb-4bfb-a6cb-48ee3fd7fdbe"
        },
        "item": {
          "id": "96b8e933-7cbb-4d7f-b7f1-69977cfe92b5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5ae58160-b984-4112-b274-2b55a25a2c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded057be-2b5a-4a9a-8cfd-6e65e623e1ce",
        "cursor": {
          "ref": "2289a184-421f-4202-9c7e-25c05633fd34",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "42136a7c-b53a-4509-9b97-ea8f3c9068f3"
        },
        "item": {
          "id": "ded057be-2b5a-4a9a-8cfd-6e65e623e1ce",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a378128d-506c-48d5-bde1-5166220f1d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99800db3-7ba9-4cc7-bc10-cc1bcfae03d4",
        "cursor": {
          "ref": "9e3cbc82-2f91-4e42-9303-033b35755a01",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7367ab5e-463b-4c66-bfae-5fc8c50a28a5"
        },
        "item": {
          "id": "99800db3-7ba9-4cc7-bc10-cc1bcfae03d4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "92365742-aa25-4252-bf1f-5895ad8a98ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89febea-9b39-4760-b225-445266067455",
        "cursor": {
          "ref": "71abce82-4cca-41a7-ab4c-e7cd85534fa2",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9fdb261-15f8-4ed2-aa56-fe1b026c8d9d"
        },
        "item": {
          "id": "f89febea-9b39-4760-b225-445266067455",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "54b0dc68-c887-4410-b1be-c9bf9c3d16b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60e0bb6-7fbc-476b-b3ee-40ec95b83f01",
        "cursor": {
          "ref": "b5d58bd5-86d7-4333-85dd-a2ac9996bed2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "455baa3c-700c-4fb2-8e9e-23da8e9bb9ea"
        },
        "item": {
          "id": "c60e0bb6-7fbc-476b-b3ee-40ec95b83f01",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "53bca04e-dc5a-4a14-9e38-e8b714b3dc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e28f00-cc82-4614-9568-c8dc5b29f1f2",
        "cursor": {
          "ref": "31b9b9e2-10aa-4040-83c0-f7ab1a9c6d35",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "675784cd-d12d-4c65-9ef8-20382e9cfdf5"
        },
        "item": {
          "id": "45e28f00-cc82-4614-9568-c8dc5b29f1f2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8dd13278-479b-4c21-abd1-ca03b011cf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b3059c-7b76-4755-9389-1716f22beea7",
        "cursor": {
          "ref": "d2b40d47-4f11-4e32-bbd6-046d43075357",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9937ff32-5c66-4f46-a5a8-35c23fc1b32b"
        },
        "item": {
          "id": "c3b3059c-7b76-4755-9389-1716f22beea7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "961c7c70-60e4-4663-93cc-4bbe727d3939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9e4c18-4cb7-48fb-a92b-7f00516ffbbc",
        "cursor": {
          "ref": "42ce9885-8e0c-4e78-91ac-6b5bfa936474",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fff57432-2c1d-4771-9b2c-c65f43c56b6b"
        },
        "item": {
          "id": "7b9e4c18-4cb7-48fb-a92b-7f00516ffbbc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b076ca96-42f1-4658-9946-a15f96ca6854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f80e81c-640b-4e9d-b802-fecc08bc94ed",
        "cursor": {
          "ref": "c88f9141-32e1-4d04-be0e-f2e12b4ba3f2",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ca5991e4-f6ee-4a37-9003-aee613b3f74f"
        },
        "item": {
          "id": "3f80e81c-640b-4e9d-b802-fecc08bc94ed",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e18a5e93-6f49-4d8a-bcaa-bdab9ca9417d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519f0929-a3be-4c08-bf7f-4ca21ddd38f9",
        "cursor": {
          "ref": "312e80cc-6859-4c60-b62a-d0ce2f33d74d",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "042c8efe-fd45-4ea7-b7c6-088957f8e6dc"
        },
        "item": {
          "id": "519f0929-a3be-4c08-bf7f-4ca21ddd38f9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c225a12a-d8d6-41dc-ad97-981eb704ee96",
          "status": "Created",
          "code": 201,
          "responseTime": 611,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f081b653-b652-422c-94bc-41d303c893ee",
        "cursor": {
          "ref": "3212e9bd-5f12-4c4c-b5fd-e09b51edc842",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8da50f14-fb38-445f-97d7-40995a3da8ec"
        },
        "item": {
          "id": "f081b653-b652-422c-94bc-41d303c893ee",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "31db7779-4deb-4ddd-a60b-b7dcc6e1861c",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8a96659b-6db3-4dbb-b158-018f379da72f",
        "cursor": {
          "ref": "953cab19-90ca-4175-93cf-11ed20216ef3",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c58841fd-7881-4068-8d25-3fe3b4242cd6"
        },
        "item": {
          "id": "8a96659b-6db3-4dbb-b158-018f379da72f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2b51a31c-6152-4a9d-8442-e046bda3dcc6",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "134f9750-7e8c-4553-a451-e5f77138bd94",
        "cursor": {
          "ref": "82faf897-f04e-44fe-8088-4f2a886edd06",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f00a5740-ee19-490e-b81c-3e6cc8f26a0c"
        },
        "item": {
          "id": "134f9750-7e8c-4553-a451-e5f77138bd94",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "19efa485-6004-4bb1-b853-610d1e13974a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2995ae95-7f76-44f1-882b-258e4069ff27",
        "cursor": {
          "ref": "7e7dd36d-fcce-4b74-8361-8238f89460da",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aaf8c585-eb57-407d-9c10-4f4f727284f6"
        },
        "item": {
          "id": "2995ae95-7f76-44f1-882b-258e4069ff27",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ceeb0a45-093d-4e0f-9fde-eff285f7eb38",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a5d126c3-19ed-4f64-af35-ccadb18065fd",
        "cursor": {
          "ref": "842e90ab-5a37-427e-8268-f43fb7c3a182",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b61495b2-f3e4-484f-9e5f-8ef7e1e18074"
        },
        "item": {
          "id": "a5d126c3-19ed-4f64-af35-ccadb18065fd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e32a8cfe-e471-4523-8b18-840709daaf82",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "31cbfa50-9800-4fc2-a4d2-c9a4b568615b",
        "cursor": {
          "ref": "bc09fa18-3edd-4ca1-898e-c18dcf32b923",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "41f89f34-6021-4dc0-ab46-9bfc97830ec7"
        },
        "item": {
          "id": "31cbfa50-9800-4fc2-a4d2-c9a4b568615b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "546b7e5c-47bf-44f0-b26b-26b0cda796ed",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "399b2d14-2225-448a-8021-65758b17c035",
        "cursor": {
          "ref": "f7c2dca0-1ebf-4166-8a38-b352deb0fb9b",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "818cd3bf-26b3-4ad1-9897-e03d41f37b56"
        },
        "item": {
          "id": "399b2d14-2225-448a-8021-65758b17c035",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8a88f5a4-2d46-449d-97fa-eafacfaa53c8",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2cf9b4b0-7bd1-45f5-ad12-eb9c21ac817f",
        "cursor": {
          "ref": "95d6b42f-5dfd-45af-8ac8-3bfac3a5b54a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7054615f-2f82-44a7-9829-597e0d0b2d45"
        },
        "item": {
          "id": "2cf9b4b0-7bd1-45f5-ad12-eb9c21ac817f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "df6a665c-cbe7-4e2f-a4e7-ef12f5efc861",
          "status": "Created",
          "code": 201,
          "responseTime": 205,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f6650614-6679-4a51-bbc0-6cfea7c214e6",
        "cursor": {
          "ref": "2c9c7fc5-172d-425d-984b-32b046976f68",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7996a755-a2be-4b96-9e3e-1eb24deb53cc"
        },
        "item": {
          "id": "f6650614-6679-4a51-bbc0-6cfea7c214e6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2ba9d30d-3326-4fba-85f3-7e7eeee3ed34",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "931a31f7-5193-4bcc-9524-addec737670c",
        "cursor": {
          "ref": "b3464e02-7bf4-4eaa-931d-64711d06be52",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f7ebcba3-c069-40dd-bf1f-f42cf3dfd97a"
        },
        "item": {
          "id": "931a31f7-5193-4bcc-9524-addec737670c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "69c54122-7dca-4300-b6a9-5e2bc700b30c",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1958ecc4-78fe-48ca-9f90-68f54106fdbe",
        "cursor": {
          "ref": "47f56743-9459-4ea2-9404-5fb0a22c9ead",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "75435d9d-f388-4793-966b-5fe830e4eed1"
        },
        "item": {
          "id": "1958ecc4-78fe-48ca-9f90-68f54106fdbe",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5c2f9c5d-2b69-4210-8a75-93c4148c33ac",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "93c92141-1f21-4f48-8e21-5316e0fd1f89",
        "cursor": {
          "ref": "e00351e4-ed51-4ec5-90f9-1a155d6120dc",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fae81230-22c5-4230-a18e-facdb14714a6"
        },
        "item": {
          "id": "93c92141-1f21-4f48-8e21-5316e0fd1f89",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "db36159b-ec3f-454d-a4ca-1c09c8202d04",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6bf6401b-70f2-4e77-8142-897071d9a684",
        "cursor": {
          "ref": "20090c8b-6648-474b-a90e-5759b4eb93e9",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c528a6ab-e052-4422-a327-1ec32e8e9d3a"
        },
        "item": {
          "id": "6bf6401b-70f2-4e77-8142-897071d9a684",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b93d6dd4-74f0-442e-8224-8acb5c3b9e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7fe410-5fa4-4e6d-a74d-973c733a89b0",
        "cursor": {
          "ref": "e88f9522-03dc-4a9b-89e0-f81f9b8d22cd",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fc7d9472-e41f-4480-bf0b-27fbee811eb6"
        },
        "item": {
          "id": "af7fe410-5fa4-4e6d-a74d-973c733a89b0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fb53a08e-420b-42fc-bf8d-aeec5c2f28cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c676f38-5490-4bdf-ad26-93828f81004b",
        "cursor": {
          "ref": "72279415-3dd6-46a0-bb95-35ac612e4f80",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1cdc91b0-0469-42d5-a9ab-1d80b5d3a863"
        },
        "item": {
          "id": "6c676f38-5490-4bdf-ad26-93828f81004b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ab4e1278-5b87-49ac-9a28-6add8cfc5bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb81c3a-2c87-4310-af2c-13cca057db09",
        "cursor": {
          "ref": "7af4f32e-490d-4df6-a8e2-24fbce0f69cd",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d3bcd52a-47b6-4a7c-b8a7-370a36e1e7ee"
        },
        "item": {
          "id": "8bb81c3a-2c87-4310-af2c-13cca057db09",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "49aea40c-d624-46af-9294-23a7a736c9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b767ac-d897-40ec-be4e-99786b7c5920",
        "cursor": {
          "ref": "1ec73b64-98e4-4ad5-bf1d-c1d9192bbe80",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fe0a5b29-c1ce-4f4e-bc97-6f72133f824d"
        },
        "item": {
          "id": "88b767ac-d897-40ec-be4e-99786b7c5920",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "77a847b4-df70-47f6-93bc-afccc4754f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1672dea5-9cc5-467b-964b-52afba095755",
        "cursor": {
          "ref": "4864a026-2284-4250-9c20-3778563bd016",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f7a246ee-ff3f-47dd-943a-02c2134650c8"
        },
        "item": {
          "id": "1672dea5-9cc5-467b-964b-52afba095755",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "961d715f-f897-458a-bffd-ef05ad8be4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4be5f90-3ede-4a5a-9bec-9bdacd6043bf",
        "cursor": {
          "ref": "7e67eefe-d6b5-4422-bc5f-65dc952c3133",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0a51c5a2-ce78-4a1c-87e9-c29584e347f4"
        },
        "item": {
          "id": "d4be5f90-3ede-4a5a-9bec-9bdacd6043bf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4499bdee-2a23-4341-8546-8bea698d49ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66749130-66c1-4fa3-b579-b6a72be83779",
        "cursor": {
          "ref": "90db2f6a-a72c-41f8-b0f9-e682b99229ae",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9ce83b9f-0196-4029-a0c8-79d382048487"
        },
        "item": {
          "id": "66749130-66c1-4fa3-b579-b6a72be83779",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1a553948-c613-4d56-b6d6-3d5cafd5a4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c354a3-5619-4449-8f03-0dff6e6ce0f6",
        "cursor": {
          "ref": "04989470-e67e-40d3-80ab-7fe3368eaef5",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "17061864-6e66-4db6-ad60-6e3b2e3ce68d"
        },
        "item": {
          "id": "c3c354a3-5619-4449-8f03-0dff6e6ce0f6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ff8c9918-6ff3-4b34-8b1c-6c8bf1d8483a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f766f760-07fd-4569-b058-98c0340866c9",
        "cursor": {
          "ref": "21d5834d-abc5-4d2b-a7ea-0de07df6b56c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f86fb041-d952-4b20-a7d4-230c5422a8a8"
        },
        "item": {
          "id": "f766f760-07fd-4569-b058-98c0340866c9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "20c9eb4d-0cb8-4039-9c0c-70c83b2b99c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24502b87-bf31-4324-8ecf-c446ce7b6f8d",
        "cursor": {
          "ref": "74b14aca-c2e6-48cf-8679-eae092f71f43",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "651d592e-28be-424c-ba67-ef1ee3e1ddb3"
        },
        "item": {
          "id": "24502b87-bf31-4324-8ecf-c446ce7b6f8d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1652ea20-7561-4d2e-9a7c-47e219c04967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bcd4df-8720-46b3-8cd1-4348c0240527",
        "cursor": {
          "ref": "acff51f9-2aaa-47bc-b17a-5731fb1cb778",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "da6a5eb7-20ce-4e28-b06e-5302e786c8dc"
        },
        "item": {
          "id": "80bcd4df-8720-46b3-8cd1-4348c0240527",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "637fba0f-9d8d-4070-bc25-68c49e02b3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32ab255-5c7f-4d57-80f3-7b15dedad6dc",
        "cursor": {
          "ref": "bf3ed88d-8dee-4b16-aae6-1c2511a8dd68",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "67dc2ca1-0dc2-4274-9db8-2f6e92ab6d6b"
        },
        "item": {
          "id": "a32ab255-5c7f-4d57-80f3-7b15dedad6dc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c3b87a01-bdab-4fa7-bf49-d9449f6a5a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ac6455-8652-4a35-a8ac-a98a9a2904f3",
        "cursor": {
          "ref": "8965ebe7-0b07-4a6e-b6d1-967f830e3b8b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "75d662c9-b42e-4ba0-912c-de958a8e166e"
        },
        "item": {
          "id": "61ac6455-8652-4a35-a8ac-a98a9a2904f3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "136fdbb8-1890-4898-b57c-309d8caa4334",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3c9b3b80-36a1-4654-b228-beb3fc840695",
        "cursor": {
          "ref": "ab9646a4-c897-4174-813f-d2f41c490964",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "406e8fe9-0de2-44e5-968e-6aa96f7c36f5"
        },
        "item": {
          "id": "3c9b3b80-36a1-4654-b228-beb3fc840695",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4de967ed-ef2e-491d-8a31-3c7721e88195",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ad839466-9927-47fd-a4d5-fe2ab7339555",
        "cursor": {
          "ref": "865fc716-8744-4e8e-b8a5-2574302abfc6",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e055f849-7f7c-406f-9e94-a0dfa6a07a25"
        },
        "item": {
          "id": "ad839466-9927-47fd-a4d5-fe2ab7339555",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "94131f9d-8394-4fa8-9585-98307c3d0853",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ee671869-c8ef-412c-b00d-109402a80f19",
        "cursor": {
          "ref": "abd6a274-0fc9-4777-82ad-e83305b5a6ff",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0c222ec8-0a30-4134-838d-0e1753e1d9a0"
        },
        "item": {
          "id": "ee671869-c8ef-412c-b00d-109402a80f19",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "577bbc77-0390-4ab6-a317-3b2485750f69",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6258f04f-3c5c-4a39-b5ae-47b7c0f7ce55",
        "cursor": {
          "ref": "9e9e634d-8817-45ca-b585-00be50f88cd3",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c55d4939-8b9c-440d-af34-367b84ab6493"
        },
        "item": {
          "id": "6258f04f-3c5c-4a39-b5ae-47b7c0f7ce55",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d77c7372-a007-4e91-8dc3-aecca367c7b3",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6ad98c52-4306-477f-8aa0-94a4189af052",
        "cursor": {
          "ref": "c1bb96bc-72f5-4549-b75f-541dfe3c2948",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "86299f19-f5e5-455d-a5ee-cf6edaa0fbff"
        },
        "item": {
          "id": "6ad98c52-4306-477f-8aa0-94a4189af052",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "844f3d47-d58c-46af-b7be-5c2d7a2b3443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff6929a-f257-4999-ad17-aba8f8ca85bd",
        "cursor": {
          "ref": "473425b1-3f29-4177-bd2e-1f7ab5c06ecc",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f450c1f7-a760-4ad8-98b8-b12282149d53"
        },
        "item": {
          "id": "2ff6929a-f257-4999-ad17-aba8f8ca85bd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bedcd0ad-d61f-4cf2-87b9-0f48abd082b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8dfb3b2-2aea-4887-84a3-c603b7d90e15",
        "cursor": {
          "ref": "256e1bb6-7177-4559-a864-0e0e0851d92e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7caf05f-d88a-49dc-992d-d7c89fda7700"
        },
        "item": {
          "id": "e8dfb3b2-2aea-4887-84a3-c603b7d90e15",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "86fe63cc-20e0-4a21-899f-7e9a6c5b6d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1bdbdc-c500-4349-ab1c-307d4010054d",
        "cursor": {
          "ref": "26d7949a-b07d-4616-b3cc-d0d53f1491e9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d086992e-4d52-433d-9687-227413224040"
        },
        "item": {
          "id": "cd1bdbdc-c500-4349-ab1c-307d4010054d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ca8403e8-3c3c-4ef6-b066-7c673cd6d5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d2dd7b-391f-4310-aa9c-5c9bd33f536e",
        "cursor": {
          "ref": "8c19ffbb-a6eb-4841-a57a-b462ee75d053",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cb008fbd-63f7-4c57-9fc7-f571d4a0a355"
        },
        "item": {
          "id": "39d2dd7b-391f-4310-aa9c-5c9bd33f536e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "37e91aa1-6ced-4025-9e83-e0093154d715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897465d2-6eb6-422d-91cc-100a25b7fee8",
        "cursor": {
          "ref": "de75674b-0485-4b7b-8ddd-bb549f9d8d18",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bb2a81dc-989f-4272-98a8-79a9e7b0e717"
        },
        "item": {
          "id": "897465d2-6eb6-422d-91cc-100a25b7fee8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4a5cbc18-c132-463c-b5c8-7d95b33c73ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307b74a8-ac07-4fce-a210-9367c7da797b",
        "cursor": {
          "ref": "6804be10-4ad5-47bf-9a59-9c51f605c8d2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5c01834f-ab7f-4cf1-97e2-c6996aaaefc0"
        },
        "item": {
          "id": "307b74a8-ac07-4fce-a210-9367c7da797b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d8b920f0-e8dc-448d-9933-9cb4749ea75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc617c0-10fd-4a1f-b53f-ec23ec4a7eb2",
        "cursor": {
          "ref": "075b10f8-2593-4ecb-8152-b3d33e670cbc",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "23a68a99-92af-4dfe-8528-c2706c5dc8e3"
        },
        "item": {
          "id": "0dc617c0-10fd-4a1f-b53f-ec23ec4a7eb2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "39f2e5b6-3db8-47d6-8441-21770d03a120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763aa95c-486b-4f71-96b2-f0e6a3fdf161",
        "cursor": {
          "ref": "126c72bc-0351-4a2f-af2a-a224188b2d71",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "17398ffa-c059-4316-b0bc-3ea8d2b2fb20"
        },
        "item": {
          "id": "763aa95c-486b-4f71-96b2-f0e6a3fdf161",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "afa6cf14-d260-4970-820c-75651aab0f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e294d252-0c47-4340-aac7-72f4be0c51e0",
        "cursor": {
          "ref": "3d7bc442-7ebd-4737-a046-f7414d8dfcb1",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ab719bfa-f8aa-4c22-9f8f-f6993884ba93"
        },
        "item": {
          "id": "e294d252-0c47-4340-aac7-72f4be0c51e0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2a41ffb8-2f36-4043-bfa4-c4ab2287ad15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed506e7-3aaf-498e-87ec-ea782163ec67",
        "cursor": {
          "ref": "68dc9546-5776-403c-8df0-6f73c71c7d63",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6c4531dc-a80f-4e27-9b75-f05c6148b077"
        },
        "item": {
          "id": "8ed506e7-3aaf-498e-87ec-ea782163ec67",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "330e75e8-e459-4f24-a760-69e99333bdc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace44639-c7db-4708-b2f5-eaba3dd2bbf9",
        "cursor": {
          "ref": "756481a0-0848-4c46-af5d-3c3af90d8af7",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b116c2f5-c270-4ec9-bb43-abb988776601"
        },
        "item": {
          "id": "ace44639-c7db-4708-b2f5-eaba3dd2bbf9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e0309197-7363-4c6b-a9ba-b1b2f0d05a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910cdc25-c2bb-4668-b39d-dab6bef9bda7",
        "cursor": {
          "ref": "fe9d28d4-5ebc-4ce7-8518-ceba776518af",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e3343553-7c34-4a69-acf1-5ba964fbdb0e"
        },
        "item": {
          "id": "910cdc25-c2bb-4668-b39d-dab6bef9bda7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1388f80c-2aac-42c2-8c49-49d377acefb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e678143a-fa29-4422-b408-169f72d12729",
        "cursor": {
          "ref": "275e9cd8-de31-419c-b151-503a23b20428",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "80496341-4625-44d0-9ac5-b684fbd5da5a"
        },
        "item": {
          "id": "e678143a-fa29-4422-b408-169f72d12729",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6df263c1-3c85-4987-b9a2-b249705c94aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf3e6d0-889f-4096-96bf-062ab7abc8e0",
        "cursor": {
          "ref": "db891e34-6add-4fdf-ae8e-9071038f502e",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fdc47763-620c-478c-9b13-5fb5f38a0b90"
        },
        "item": {
          "id": "faf3e6d0-889f-4096-96bf-062ab7abc8e0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7d1cdde7-4d28-4e3d-b46d-66985d68649f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9d34d3-1d49-4daa-82ee-531e565db177",
        "cursor": {
          "ref": "10303741-be3b-4f70-be1f-1a118983532c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "48bb54c7-ba07-4024-9c02-22b5009e6d20"
        },
        "item": {
          "id": "cd9d34d3-1d49-4daa-82ee-531e565db177",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2cd86bbe-55c8-4193-9980-289c13167628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb460b28-cc8e-40f0-843f-0f98303e5f7c",
        "cursor": {
          "ref": "0c661631-6699-4a30-8767-30849032cf91",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c6048539-6ef6-43d1-a480-7618f25179ff"
        },
        "item": {
          "id": "bb460b28-cc8e-40f0-843f-0f98303e5f7c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "088b6557-111f-4b93-ab43-ab7881002d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1bfa63-373e-4db1-ae2c-7a3576cb68a0",
        "cursor": {
          "ref": "997731da-b995-44df-82b9-fef17d350aa7",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b9fa4e82-fe01-4d43-a760-74aa04e8a1ca"
        },
        "item": {
          "id": "8a1bfa63-373e-4db1-ae2c-7a3576cb68a0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "09a00620-de6a-43fd-a970-1ac401acd840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663b3d10-0d3a-4979-8275-5d07fd391d5d",
        "cursor": {
          "ref": "52fb1c5d-d39f-4457-85fe-f17988a61127",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "95a9b7cc-9e4c-432c-a8f8-0bb90b23bae8"
        },
        "item": {
          "id": "663b3d10-0d3a-4979-8275-5d07fd391d5d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f29283b4-f046-466d-a5cb-78b59e8a1c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2bc3a8-ad0f-43b1-854b-7d263d73da2d",
        "cursor": {
          "ref": "a61bdf83-e4e1-4278-8f83-1ccd1ecfa1df",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "68b3071d-e827-42f2-9950-9ca0810b31fb"
        },
        "item": {
          "id": "6d2bc3a8-ad0f-43b1-854b-7d263d73da2d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6f56aa47-d876-4720-a8df-43ed040fcadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bb44ea-c375-4e1a-ac72-ee80d20c641a",
        "cursor": {
          "ref": "18b1b518-b66b-4523-9b68-59ea557ac290",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f0f45a32-6ebb-4b6e-8915-45d57c1a7668"
        },
        "item": {
          "id": "70bb44ea-c375-4e1a-ac72-ee80d20c641a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "98187da2-6dfe-4f58-970b-7f8f07cb39af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ab6864-cf2d-4028-a8ee-a794e63d7118",
        "cursor": {
          "ref": "c0084e57-6e69-45cb-97ce-5089994759dc",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7849c743-72e8-43be-ae46-18c40faaac1f"
        },
        "item": {
          "id": "74ab6864-cf2d-4028-a8ee-a794e63d7118",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9932c64c-34e0-473d-9ec0-990098bd9d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da9697a-ca2d-4e56-b585-2a6fed70c99b",
        "cursor": {
          "ref": "45d6998d-b4e1-46c9-892f-bd5a729c943f",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "590daedc-f71e-476f-b810-6e4462851097"
        },
        "item": {
          "id": "5da9697a-ca2d-4e56-b585-2a6fed70c99b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3837c7dc-9c7d-4bb2-b8d9-f95079412905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64da40fc-32f4-497f-8079-70b20afb551d",
        "cursor": {
          "ref": "4b6d71c3-fd08-4cf6-a1a7-325a0ee71de2",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "72ac6d85-00ae-4c6f-a0f1-1b260d0ff156"
        },
        "item": {
          "id": "64da40fc-32f4-497f-8079-70b20afb551d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d983939c-ebf3-4c0b-8c3b-accc8f85e16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b59f66-fdd8-431d-93dc-a79be79d6a73",
        "cursor": {
          "ref": "173b345e-efde-45e4-a722-e107ab2befb0",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c1fd5e6e-3800-456a-96f3-1b817c8bd711"
        },
        "item": {
          "id": "f5b59f66-fdd8-431d-93dc-a79be79d6a73",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c2cb2390-2aa2-49a8-a047-76203ba44d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a4fcb1-16d4-4aa3-85e7-1db023aa3862",
        "cursor": {
          "ref": "c333f00c-cff2-48d7-bab3-ead4fc5c98cd",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a519543f-8ad5-4fb4-a795-f3c61ff88e39"
        },
        "item": {
          "id": "21a4fcb1-16d4-4aa3-85e7-1db023aa3862",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2d639e1f-d35d-4854-bc69-1e63dc0b6f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "335310e3-f600-44f5-814a-b4dff2eb597d",
        "cursor": {
          "ref": "a02a21a3-a3f8-4d0e-80bc-62bbadb845b6",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6355da5c-66a2-4a76-840b-167d5c153ac4"
        },
        "item": {
          "id": "335310e3-f600-44f5-814a-b4dff2eb597d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "54139b0d-02d2-4d9d-9462-84fe1da17331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b342a1a-afc8-4404-8b8e-abe680f6856c",
        "cursor": {
          "ref": "df94656f-5ac2-4bb8-8727-b7a91d6ed37f",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4e0fcfa8-2c7d-46ed-9bd2-cdb61a30c951"
        },
        "item": {
          "id": "7b342a1a-afc8-4404-8b8e-abe680f6856c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c92ff500-a734-4919-8346-f024a5d5cd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db894de-4bdd-4c6c-9e24-bc01bc4627d4",
        "cursor": {
          "ref": "90ebace8-898e-42c7-a126-0df515d04145",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "52a0e663-48ca-473e-8e7d-0eb09acf633e"
        },
        "item": {
          "id": "8db894de-4bdd-4c6c-9e24-bc01bc4627d4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2fad7287-537f-4adb-ae15-c93accfd5986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9858fbf-51b3-416d-994e-ad5d901d0a8e",
        "cursor": {
          "ref": "b65fd769-c32b-44b7-b626-907026d5211a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5bcce3b1-1da6-4fce-9673-092bddac115b"
        },
        "item": {
          "id": "a9858fbf-51b3-416d-994e-ad5d901d0a8e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f03f51de-65c4-410b-996b-835422fbb3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb36e56-81fe-4e19-9aed-dfb2518b9247",
        "cursor": {
          "ref": "73e57e0e-e8ac-4b9e-ae7f-6cc2ed1b06d2",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "612af173-c165-4a4e-8c48-f3ec8abd7e86"
        },
        "item": {
          "id": "beb36e56-81fe-4e19-9aed-dfb2518b9247",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "20fedd4b-6749-4a93-b115-e1389eda5715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83fa4b7-a272-4bc2-934f-b3c2fb6bb636",
        "cursor": {
          "ref": "97e62a27-ae93-487d-8414-7418a41b5f41",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "39a378d6-1418-47d7-92e8-4792e2c3b1f7"
        },
        "item": {
          "id": "f83fa4b7-a272-4bc2-934f-b3c2fb6bb636",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "98e9de29-6255-4309-986c-f075b53c5e03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7b999a-fb9a-40ab-a456-d971d3feeae2",
        "cursor": {
          "ref": "168c44ac-3ea2-4fa9-b5e4-58cb607b163c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0cbc31b5-2a26-4f5b-919d-1d49e5501ac9"
        },
        "item": {
          "id": "9b7b999a-fb9a-40ab-a456-d971d3feeae2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "81a57ead-71b7-4296-9451-216fcd516403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1391a8fa-c799-458d-977f-8a253330f3d9",
        "cursor": {
          "ref": "0bf5e02f-aa46-4dfe-86c4-5e945794d528",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c1ec8cab-7616-4b41-a5f9-f68c1e1c977c"
        },
        "item": {
          "id": "1391a8fa-c799-458d-977f-8a253330f3d9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a890f1b2-a9a6-4ded-a863-e553632fa271",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a009eb-3cad-4870-8415-b505526edb4e",
        "cursor": {
          "ref": "e8625bd8-f315-4536-9d17-094a0b056647",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "de22d7d8-df59-4a81-9a0e-b2a665d0d611"
        },
        "item": {
          "id": "21a009eb-3cad-4870-8415-b505526edb4e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ded80d08-ca17-458f-b0ad-6069cab2a49c",
          "status": "Created",
          "code": 201,
          "responseTime": 404,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4caf90-1573-4501-b05a-667082263e19",
        "cursor": {
          "ref": "5c993a31-d794-4fce-96d8-3d2f6019034d",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "29e389f8-2eb6-4cf8-be1b-01f6c33bc0d4"
        },
        "item": {
          "id": "6b4caf90-1573-4501-b05a-667082263e19",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9a1229e1-c360-4f02-8240-9a0867932e3f",
          "status": "Created",
          "code": 201,
          "responseTime": 204,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf5aa57-2818-4404-9c2c-425094f3d07b",
        "cursor": {
          "ref": "c5314315-32ec-46ba-b2c4-6f139dbad1a3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cf878af8-9672-4499-868c-6b4a47a524b7"
        },
        "item": {
          "id": "3bf5aa57-2818-4404-9c2c-425094f3d07b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c3b21e6f-4acd-469b-9836-a658fbdb0106",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7430b10d-4fe4-41f9-af3a-c24c45d6e596",
        "cursor": {
          "ref": "cbda51fd-3c12-477a-a511-41524982b2fa",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bf6aa4b4-d4f8-4efb-a1c2-6856253e14e4"
        },
        "item": {
          "id": "7430b10d-4fe4-41f9-af3a-c24c45d6e596",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3e53b14d-6878-43dd-a949-321494f2d667",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-17T00:36:54.315Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-17T00:36:54.315Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "07a58e71-a7e8-4dde-a9ea-c34d80b4e1b8",
        "cursor": {
          "ref": "b09b127f-0855-4e9b-8936-b596d63a8408",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c8058a70-3438-44c1-a592-9e2aae3b47b8"
        },
        "item": {
          "id": "07a58e71-a7e8-4dde-a9ea-c34d80b4e1b8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9bacb1b4-2939-4431-adcb-827f6c4c79ca",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c346ec9-6c90-47d8-bb9d-f2cdf24dd42c",
        "cursor": {
          "ref": "d99e35da-7f9d-4b74-9bc1-32e61b56be03",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d5db5a33-cd2a-4105-b7c4-49a0c25d4765"
        },
        "item": {
          "id": "3c346ec9-6c90-47d8-bb9d-f2cdf24dd42c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "58d7321c-44e4-4b5d-a7c7-f0ba0399c586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c4a5fa-d4d3-43f9-b5cd-f2189981b928",
        "cursor": {
          "ref": "4daf9a1c-8a7c-431b-8927-13f0ebc5aae8",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fb198010-3aee-4dea-b097-c54f732f04b6"
        },
        "item": {
          "id": "99c4a5fa-d4d3-43f9-b5cd-f2189981b928",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a658edc8-5683-48ce-abe6-63b235d7dade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b5cd95-fd53-435c-ae54-34fbc517ca15",
        "cursor": {
          "ref": "93bd0caa-1dfc-42bc-91f4-7a233e0da18b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bb530fec-d1fb-4568-8eb8-374874103810"
        },
        "item": {
          "id": "85b5cd95-fd53-435c-ae54-34fbc517ca15",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6a678a3c-f684-40a4-a321-dc82b3bb6fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fb6e04-148c-4fcb-bbf0-fc27afb05c9d",
        "cursor": {
          "ref": "055a1627-2dba-4f2b-bd01-c97da238a867",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7bffd6cc-be26-4159-9f63-505fcb622088"
        },
        "item": {
          "id": "77fb6e04-148c-4fcb-bbf0-fc27afb05c9d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d90c4e6f-2243-44f5-a7d8-8dee03e925da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ce3206-937e-4c9f-b791-17a25dd18b52",
        "cursor": {
          "ref": "cbb654db-ac73-48c9-b0e0-85dac8373e54",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "78275745-292e-4c5e-8a04-cfff4831c06a"
        },
        "item": {
          "id": "99ce3206-937e-4c9f-b791-17a25dd18b52",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a665cbd9-d3bb-4e6e-913f-5941ed9dbf15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7d09dd-ac4a-4343-a71f-1117cf925b3b",
        "cursor": {
          "ref": "387ea3e6-59a0-4f56-a44f-3b4ef9a14456",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "58397e12-0179-45be-a396-7c5dfa432893"
        },
        "item": {
          "id": "cf7d09dd-ac4a-4343-a71f-1117cf925b3b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "40eecfcd-2b6b-4ff4-9d68-cb90114ac046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40fdbd0-a86e-405c-9140-51fcbee1cabf",
        "cursor": {
          "ref": "7f04d6dc-8dbb-415d-846f-a387264f36ad",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "87732c41-b499-49ca-b689-be815f08187d"
        },
        "item": {
          "id": "c40fdbd0-a86e-405c-9140-51fcbee1cabf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "422763e3-0966-4555-865b-7028498be998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b28b036-5230-463a-8668-1c56ef786751",
        "cursor": {
          "ref": "3ab1b7bb-d5a1-498b-b627-a148738bf9f7",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8cec9fb6-b371-4dc9-9dea-c60f5c110734"
        },
        "item": {
          "id": "3b28b036-5230-463a-8668-1c56ef786751",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6a14c080-63ed-41cc-9b21-ce3b33edb3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16c9399-9684-4dd3-b989-fc0ce2ad57bc",
        "cursor": {
          "ref": "f5596dd3-f5a7-481a-b403-e6e06d666863",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3a63c95f-b63c-4214-8a84-7de98c3044d4"
        },
        "item": {
          "id": "f16c9399-9684-4dd3-b989-fc0ce2ad57bc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b1967879-c9cf-4e31-a490-3a214fd8b5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e8c30d-b127-47a9-be44-3648bd1c4dce",
        "cursor": {
          "ref": "49c6b915-8fb5-49aa-9b27-df55dd8fcbef",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "81ce38f3-1c42-4e9c-a456-41f868d8f513"
        },
        "item": {
          "id": "21e8c30d-b127-47a9-be44-3648bd1c4dce",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0aec8c6c-2be9-4b37-b9be-d65869272034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c235da07-ca9c-4e03-9cb5-5a3c422fe227",
        "cursor": {
          "ref": "f4dc99e6-4db2-458e-95b6-84a08e5f04c9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "29682e24-ae0a-4e6f-b6d1-c87e4cb3957b"
        },
        "item": {
          "id": "c235da07-ca9c-4e03-9cb5-5a3c422fe227",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "29ce4189-8448-4867-a7d1-530878433450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02b0650-9b98-4156-9d8c-acbb6474abde",
        "cursor": {
          "ref": "c423ba26-bf9f-454a-9b8c-829d3c9b1d27",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "85bbcbb9-8d6f-4cc0-b7b1-c5b407661e0f"
        },
        "item": {
          "id": "a02b0650-9b98-4156-9d8c-acbb6474abde",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "084d535f-7b3b-433e-b03d-02df25f69dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ee46d8-96dc-485b-920f-a4038bf8352e",
        "cursor": {
          "ref": "e6339889-9626-406f-af25-61782bc8544d",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b0631b21-2ab5-48c7-afee-50372abc2807"
        },
        "item": {
          "id": "06ee46d8-96dc-485b-920f-a4038bf8352e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "529ff5f9-52ae-457b-873b-eaa8028c2d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d770226f-983d-4a8f-975f-5ef6510e2864",
        "cursor": {
          "ref": "5f7552c7-7f65-4964-904c-d78ee061b28b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "52179aeb-2d64-4f2d-a379-c713ad2ab0df"
        },
        "item": {
          "id": "d770226f-983d-4a8f-975f-5ef6510e2864",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "162580fd-ef01-4742-b6e6-3fcc4dfe79e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bee888a-af26-4b2b-b31d-092102b41d63",
        "cursor": {
          "ref": "55e60739-9da3-47bd-ba0a-2f5bccd26045",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ffe11676-6c9a-430f-b311-aac0a6537fbd"
        },
        "item": {
          "id": "6bee888a-af26-4b2b-b31d-092102b41d63",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3d80c063-ea6c-41b8-885d-a80a88cf2642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac1547e-6d9f-44cc-85fc-c9e1ba5dcb3b",
        "cursor": {
          "ref": "dcc89f37-438c-4ed8-bb90-17400f6e7e83",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c007d6df-cf84-44f6-b214-87e486d889c3"
        },
        "item": {
          "id": "4ac1547e-6d9f-44cc-85fc-c9e1ba5dcb3b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c0f8059e-695f-4c8e-82b2-9b3b07e4bf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c19a868-643c-492c-87f9-3d791e4f4c01",
        "cursor": {
          "ref": "aed0db06-95f1-4a8f-b11c-99c148c6faf5",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "84ba6e69-f66d-4009-b6db-0e51efc76a3b"
        },
        "item": {
          "id": "9c19a868-643c-492c-87f9-3d791e4f4c01",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e8b6e844-9f1b-4420-9723-1eddcb0bec93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1614bf69-bd68-4722-8f31-fcf8e947e088",
        "cursor": {
          "ref": "d482871a-7b34-4ff3-ab2c-97c573cc05c0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "229621ef-3757-4e33-8ef2-df3255d65284"
        },
        "item": {
          "id": "1614bf69-bd68-4722-8f31-fcf8e947e088",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c24885cb-5eeb-4846-a516-a00ea18245f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8493175f-b07a-4dc6-98dc-b93188e762b3",
        "cursor": {
          "ref": "6a013f7b-35ad-4c19-8ef4-02812a0e48f0",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "de923638-f8f7-44fb-a5d9-c5084052e3a5"
        },
        "item": {
          "id": "8493175f-b07a-4dc6-98dc-b93188e762b3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "367b240a-e772-40a2-be4d-6969bb8ddbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6520e1-460b-423a-b470-2997c1e47871",
        "cursor": {
          "ref": "b0eac899-57de-40a3-bb26-185ae58281c6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3bdbef1f-170b-42bd-b96b-30a3f8f12c16"
        },
        "item": {
          "id": "7a6520e1-460b-423a-b470-2997c1e47871",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5c5db813-0f58-4544-b7cb-7403e1c095bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82a9811-59b6-4045-81bd-91b5ee539d8c",
        "cursor": {
          "ref": "73301f4f-080f-445b-b2a6-9e9e1b1de0d1",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "479f9b2c-1416-40b9-9a36-886c36e26e42"
        },
        "item": {
          "id": "c82a9811-59b6-4045-81bd-91b5ee539d8c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "efe32110-a531-4bc3-816c-db7ea8b7d7ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788c32dd-3365-4797-8aef-903c79552851",
        "cursor": {
          "ref": "9019cf18-3aea-43ee-b154-b964e7931b01",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f50d0955-a788-46f7-aca6-75862c6e6fcb"
        },
        "item": {
          "id": "788c32dd-3365-4797-8aef-903c79552851",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a7891b74-e4c0-4195-91a9-5748e37ff59c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2321b0ba-d959-4b55-bc68-a7ab04fbd1d2",
        "cursor": {
          "ref": "27c9825d-0e1f-4895-b58a-9972ae0bd9ba",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2cf5d881-8780-4df1-aeeb-3fe1e4708437"
        },
        "item": {
          "id": "2321b0ba-d959-4b55-bc68-a7ab04fbd1d2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ca257334-0e46-49d7-88bb-e24a7dfded48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44331b49-6c7a-48d9-bb51-4130f736954b",
        "cursor": {
          "ref": "ccf39196-2d28-48b9-9bd9-265cd863de9c",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "18a2e46e-52ae-4b81-9fa7-f200c343e0ef"
        },
        "item": {
          "id": "44331b49-6c7a-48d9-bb51-4130f736954b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "72d7b849-e0c7-47fe-aefe-d11819109ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143df92d-a920-46cf-8144-252ea7063f4a",
        "cursor": {
          "ref": "85b6d169-43ff-4fee-88a4-638666de5fc0",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cb4d8954-0ef5-4306-bbaa-ce80c641813c"
        },
        "item": {
          "id": "143df92d-a920-46cf-8144-252ea7063f4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce5a9c00-22d5-46c6-a7e3-488f6a7324f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b8a54e-b0ac-47c1-9951-6245d8d82751",
        "cursor": {
          "ref": "63295105-57ab-4cb4-ae93-eb162495ffe5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c10e65c4-a265-4ccf-b6b7-12459eadcfe8"
        },
        "item": {
          "id": "50b8a54e-b0ac-47c1-9951-6245d8d82751",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0de3e200-b67b-4e30-8811-5e811898ef93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7317b9bc-71b7-4dd1-826e-afb2979e2a51",
        "cursor": {
          "ref": "34193b4f-1fa5-403c-a618-0a93a26b8a7e",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2b35d70d-c56d-466c-b113-da8c583cbac8"
        },
        "item": {
          "id": "7317b9bc-71b7-4dd1-826e-afb2979e2a51",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "60e09974-e5b5-4c2a-a0f2-51b7f1e62fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6cab79-a8f7-43ad-a84f-6d1abb33112e",
        "cursor": {
          "ref": "8a1e7587-9df2-4278-af04-dc8b56d47cfb",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b449dd2d-ca2e-44d8-a1b7-2092b2e0d84f"
        },
        "item": {
          "id": "4f6cab79-a8f7-43ad-a84f-6d1abb33112e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "69875d63-31fc-439e-be8a-77a533be2f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136e25aa-9cc5-4929-9d65-420e19d277b7",
        "cursor": {
          "ref": "ed9a1473-27f9-43c4-ba82-6f97026ae667",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "06e826a9-fb7f-45e6-ae8f-53d1264031ef"
        },
        "item": {
          "id": "136e25aa-9cc5-4929-9d65-420e19d277b7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0f088bed-8f7a-40ba-b067-c0597a4b9e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f5f1da-676b-45a2-ad6e-481a19095f36",
        "cursor": {
          "ref": "4738298e-aeb7-4df7-bed6-4f53aeb1e68d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "973e7d3d-8f1d-40b4-84c4-5aa365bc5382"
        },
        "item": {
          "id": "a4f5f1da-676b-45a2-ad6e-481a19095f36",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fa49bce0-da8b-4945-adee-0a26177bb5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7ea585-61d9-4e77-bce6-c8d427938730",
        "cursor": {
          "ref": "892e4ede-c7d2-4c80-a882-37f3336a823a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "01b0a947-b2e3-45bc-bfe9-e5eae9a35c35"
        },
        "item": {
          "id": "ec7ea585-61d9-4e77-bce6-c8d427938730",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6a40a4e4-3775-4b74-99b8-fe1b871fa850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa920a9-04b5-497c-86e0-773e3d38b346",
        "cursor": {
          "ref": "3c03835a-568e-44ee-8d0c-8382c9f27424",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7ddb797d-b8b9-4a97-8080-a6f1e166fc21"
        },
        "item": {
          "id": "dfa920a9-04b5-497c-86e0-773e3d38b346",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d9951e5f-c3c5-4e67-9f9a-01444e643596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687f8708-16e6-41aa-b44e-1a277ffac5fb",
        "cursor": {
          "ref": "43e25818-a520-4d79-9184-e91f240bd4dc",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d0247986-a8de-4a8f-9ae9-d9fccb280dd9"
        },
        "item": {
          "id": "687f8708-16e6-41aa-b44e-1a277ffac5fb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "52e349fa-835b-4d88-9847-295e671a6044",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cad5fd0-857b-4582-99c4-abb4fc6b7056",
        "cursor": {
          "ref": "6f0ad1be-877f-441b-975d-841893e89a6f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c470d48b-26d5-455e-8018-cb537bf2e3c0"
        },
        "item": {
          "id": "0cad5fd0-857b-4582-99c4-abb4fc6b7056",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1d3da8fa-e17c-4577-86f6-6a155f119aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29082636-8952-4446-860b-8c75281b2274",
        "cursor": {
          "ref": "70bb7a30-53a2-4865-b820-610cac23d18f",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "57c1b8c7-2332-42bd-a85e-48846b8114e3"
        },
        "item": {
          "id": "29082636-8952-4446-860b-8c75281b2274",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7386b865-d69a-490f-87b1-50cb8f835728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0abfba-b204-41a1-9cab-9e13c4af5616",
        "cursor": {
          "ref": "1d83b9e2-349e-4e5e-a5c3-367be33bd88f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "169a7974-4b60-4517-b068-66d05451e00e"
        },
        "item": {
          "id": "9a0abfba-b204-41a1-9cab-9e13c4af5616",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7016a044-f6f6-48cd-bf64-a62229d4fd51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dde097-76bf-4dd2-883a-9e3ae0ddc66c",
        "cursor": {
          "ref": "aae7b68e-9226-4fa3-a246-d90c0c897139",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2c5cb8ee-4d6a-42e9-a40e-0f15c59e229a"
        },
        "item": {
          "id": "10dde097-76bf-4dd2-883a-9e3ae0ddc66c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4ea2c892-9cdb-4519-9868-a79fb6586112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602c1c58-3298-4645-9550-b98e69ac8149",
        "cursor": {
          "ref": "962ec86f-19a1-4b35-882e-77035e35a106",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6ee8d304-b489-4916-8ec6-5ac2ba132529"
        },
        "item": {
          "id": "602c1c58-3298-4645-9550-b98e69ac8149",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "da49241b-d7dc-41a3-8dba-c9c3de6f40fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540e710a-fc15-4e6b-b991-7e5dde7e424d",
        "cursor": {
          "ref": "f69f3afe-1d39-42aa-b849-8120f462fdfe",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "589ca94f-219b-4428-8785-2ff015c8b9c4"
        },
        "item": {
          "id": "540e710a-fc15-4e6b-b991-7e5dde7e424d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3502c502-3873-4029-8d3a-cc65daced471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc93ef9-767a-4eeb-af04-537c7d21a3db",
        "cursor": {
          "ref": "8253f2af-8e79-490c-9758-fae1ea33e7dd",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a6ac7a1a-88f9-44ab-880e-202e251c0966"
        },
        "item": {
          "id": "edc93ef9-767a-4eeb-af04-537c7d21a3db",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "425236f1-a8a7-4fda-a2ae-3592820aed56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d193bc-5a2d-4671-9a8d-37e71e3f550c",
        "cursor": {
          "ref": "60315b7e-8594-4fe2-8e9e-68c048d590b2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "29ab4d7d-e6d9-4243-8c90-bf80bceb8f16"
        },
        "item": {
          "id": "31d193bc-5a2d-4671-9a8d-37e71e3f550c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "218f5a34-a33a-45ad-9c07-e9b4dd90027d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a390d2ad-b5f0-4343-b671-6117382ee230",
        "cursor": {
          "ref": "47ec9e84-4fd4-4541-9301-5cf3c2c8b31e",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8e10a9de-c00c-443e-93fb-4b24b16f643d"
        },
        "item": {
          "id": "a390d2ad-b5f0-4343-b671-6117382ee230",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "024abb4a-5953-41d1-ae17-6faa7344a482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87d4efc-3b32-4c46-956a-ec5a67bd7c45",
        "cursor": {
          "ref": "759e8ce7-24b0-48bd-812d-eb5dbcb5dc2e",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "23e1f3fd-9ffd-4fcd-ae00-bcda9614a7cb"
        },
        "item": {
          "id": "b87d4efc-3b32-4c46-956a-ec5a67bd7c45",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "00ba1e12-ade1-4fe7-8689-c2007c97442a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce518186-5a81-49ab-97a5-1974731547c1",
        "cursor": {
          "ref": "eb01434a-dc32-49a5-aa69-89b123ab77be",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6017ce3e-b855-48e4-bcae-a04dbf2eb131"
        },
        "item": {
          "id": "ce518186-5a81-49ab-97a5-1974731547c1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e9c8d095-eec2-4751-ac1e-abd0aa19f3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323e3167-7f8e-48f2-9c47-93fc13f2f221",
        "cursor": {
          "ref": "d4fa82b3-7558-477f-ba2e-dfdefd2aeb20",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "699e2cf7-07f2-4a83-bd05-cee0de70d712"
        },
        "item": {
          "id": "323e3167-7f8e-48f2-9c47-93fc13f2f221",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f54b368a-49b1-4ad3-879a-2f25d0e47708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d89b956-e4a1-4bee-b2de-82e46ffdf35e",
        "cursor": {
          "ref": "b5bf75c6-9d64-46ed-8781-391f326a68e0",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2480dc97-74af-441c-9abd-a70e7786bc65"
        },
        "item": {
          "id": "1d89b956-e4a1-4bee-b2de-82e46ffdf35e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "96b33bd4-0cb7-4bf3-9595-7257d82d34b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55546ab7-9e39-4bea-9091-79475b94e12e",
        "cursor": {
          "ref": "2a0979ce-0c5e-40fe-b806-4fc94dcc91d3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "69f19761-033f-404d-8558-f278412aaa0a"
        },
        "item": {
          "id": "55546ab7-9e39-4bea-9091-79475b94e12e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9c9189b2-1880-41b4-9d86-79e2c3ede8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfaca5e5-4a4d-4bd9-9c45-7cf38dba0726",
        "cursor": {
          "ref": "692e7ec8-20d2-4339-8cf4-6c342478f3a3",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "77baa9a7-8817-404c-96fd-2cfaa519e1d2"
        },
        "item": {
          "id": "bfaca5e5-4a4d-4bd9-9c45-7cf38dba0726",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "baec90f8-eb21-44fa-8570-ac28ed328f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e7a023-8ba6-4ab4-aade-9a2e8bf6935d",
        "cursor": {
          "ref": "26942b0c-5ad7-4097-8c74-b3c1f5612861",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f11eb04d-4d62-4e9c-b19a-6075ee40eeae"
        },
        "item": {
          "id": "11e7a023-8ba6-4ab4-aade-9a2e8bf6935d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e417dd32-8339-4359-9c29-f801259cf383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f45f4ce-1bf7-42a2-bc76-715bbd888134",
        "cursor": {
          "ref": "8936c429-d5b6-4d97-b3af-07c88467b8ad",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "324dd013-f0f9-4e10-817f-8535fbcd0958"
        },
        "item": {
          "id": "6f45f4ce-1bf7-42a2-bc76-715bbd888134",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dcbf6a90-01f1-4255-954a-9ba05719d361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c03bfc-ec68-4204-87a1-792d4876a8b0",
        "cursor": {
          "ref": "bc6d8ddb-0f4d-439f-802f-81ed0ebdc307",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d8b6b900-3641-40ea-80d3-22010678b695"
        },
        "item": {
          "id": "e7c03bfc-ec68-4204-87a1-792d4876a8b0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "aa9547b5-d6f2-415d-b89a-e0f256e21c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5848b331-4fa3-48b6-ad4b-2f86462078a4",
        "cursor": {
          "ref": "fdf22fa9-8b70-45c7-bed5-950bd4cada86",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "506b4765-0254-4727-8b29-d0ec9ff500f5"
        },
        "item": {
          "id": "5848b331-4fa3-48b6-ad4b-2f86462078a4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0e2fe3f2-3d39-40bf-94e5-ed973d9b9bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb79a8d9-7d0f-4d4a-b00f-6bf747386594",
        "cursor": {
          "ref": "2be59474-4127-4869-a590-57b597db4033",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "75d38ee8-ffce-4c17-aca7-3afe521f35a0"
        },
        "item": {
          "id": "fb79a8d9-7d0f-4d4a-b00f-6bf747386594",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a1eb0b94-3562-49a8-8a26-e470aab4775c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d4f52f-164c-4c7a-bade-e9c1b399a917",
        "cursor": {
          "ref": "ea78d301-550a-49f3-af34-1936b5b0747b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "22f51fdc-9e70-4006-9d56-85f927c29eb0"
        },
        "item": {
          "id": "46d4f52f-164c-4c7a-bade-e9c1b399a917",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8e82096c-0ef9-42ab-8dbd-c3a4c8a856c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d6c0bf-cee9-4383-bf91-b5e5f6dee931",
        "cursor": {
          "ref": "c4f01e21-a2f4-4892-8fed-515e22ad80a0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "32784233-49f9-477c-8b4b-289a33979343"
        },
        "item": {
          "id": "34d6c0bf-cee9-4383-bf91-b5e5f6dee931",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "66a116fd-ac99-42ee-a8d3-5af3821c7019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f31084-6ba4-4521-afd8-1c686f166ceb",
        "cursor": {
          "ref": "01fac73e-897d-4044-94c5-06dddbba8f57",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6eca925b-5d53-4f35-9b82-fee9f29abbe0"
        },
        "item": {
          "id": "08f31084-6ba4-4521-afd8-1c686f166ceb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "04848a94-db3c-4f49-9945-db0ade59be54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1370f77-88ba-4bac-823b-efcb3e99ba93",
        "cursor": {
          "ref": "7081d2f7-ed39-4a95-b83d-f9fa3b42d4ef",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "40cee12d-af01-4334-93fc-573c72074c4c"
        },
        "item": {
          "id": "e1370f77-88ba-4bac-823b-efcb3e99ba93",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ba2c7221-1b69-4dd5-a365-5e6b9e9acb1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d490a0-a3a6-4d22-9313-a78f87b31c13",
        "cursor": {
          "ref": "06503706-42cb-4644-987e-bace4d413425",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ae1f0a73-2902-47c3-9afa-30d6ed6bd8eb"
        },
        "item": {
          "id": "67d490a0-a3a6-4d22-9313-a78f87b31c13",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "74df0018-38d1-4a76-9b03-e903490d28a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e9dc78-1ed9-4419-9177-05714cbf5eb6",
        "cursor": {
          "ref": "28559f3e-b265-47ef-a455-28a261dd82b7",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f4172962-a1da-4fa6-b7a1-b7c141a69424"
        },
        "item": {
          "id": "31e9dc78-1ed9-4419-9177-05714cbf5eb6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9cf843a8-2771-4f6e-8803-d90ac9ac086a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824a10a5-7be0-4972-ba7f-2968581a0ce5",
        "cursor": {
          "ref": "75c99e46-e27a-4ee9-bd21-935875fc2a83",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "685dcef3-aa90-4719-ba66-cd6d3c64401f"
        },
        "item": {
          "id": "824a10a5-7be0-4972-ba7f-2968581a0ce5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "041e5f2c-dc3a-47bd-8051-7f4611869217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5adbcde-e67a-4bc0-9bfd-f93b8d5b05af",
        "cursor": {
          "ref": "9e95f394-a43a-4249-b2a5-1f07d34d3597",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "23e0033e-0d20-4e34-8f73-2e3b15f93bbe"
        },
        "item": {
          "id": "e5adbcde-e67a-4bc0-9bfd-f93b8d5b05af",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "46e24da2-1de7-4eb7-bd02-a619f96f3ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ce31f9-0c49-47f4-a45c-ac41f1e92316",
        "cursor": {
          "ref": "4e3d0f3b-1e4d-47a6-9364-c240cbadb659",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "49797bb6-dae6-4762-8ec5-41b456d46c84"
        },
        "item": {
          "id": "62ce31f9-0c49-47f4-a45c-ac41f1e92316",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "88388ccb-1905-4d70-bf90-8b9c1633a305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b91e6ae-410a-4305-ac5f-01f396e649ab",
        "cursor": {
          "ref": "ee54c127-f6e1-466e-bca7-29166757ce4d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0c58d271-7838-49c3-94a7-785bcffbd9a7"
        },
        "item": {
          "id": "3b91e6ae-410a-4305-ac5f-01f396e649ab",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0b3067cc-de54-40e8-bbe4-387820e579ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3d19d1-0855-43e7-9418-7dfd24748f5d",
        "cursor": {
          "ref": "a4a8db54-b0db-4f86-be74-d3aa35cd7a3d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "11ad64de-90e1-41a7-ae5a-fceb2ec4e173"
        },
        "item": {
          "id": "ca3d19d1-0855-43e7-9418-7dfd24748f5d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "be4f566d-ab1e-4a32-999d-345676cd2242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7454223-15d9-49ab-92a5-6ccc937217ef",
        "cursor": {
          "ref": "a85b493c-efa9-418f-a342-28dc7470104c",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9a3ebdf7-3293-419c-9312-9ebd4b1b039b"
        },
        "item": {
          "id": "c7454223-15d9-49ab-92a5-6ccc937217ef",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a31be3dc-5a74-40e8-8a41-415d67fc44fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997dfcb5-63ea-48de-a634-1b6bb5107bae",
        "cursor": {
          "ref": "b3c1d340-a30e-44c0-a133-395760d0ca75",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "371d13a8-7cc3-4646-97b3-9a2441df5954"
        },
        "item": {
          "id": "997dfcb5-63ea-48de-a634-1b6bb5107bae",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3f3cb783-4c45-4113-a79e-8b5500987dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee34cbe-1cbb-4522-8e13-4913faefd456",
        "cursor": {
          "ref": "d6587e60-8630-414a-bcb0-879d5cd54c0c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1d3997fa-aa34-4423-96c6-c498c9658b1a"
        },
        "item": {
          "id": "3ee34cbe-1cbb-4522-8e13-4913faefd456",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ae868d52-27e5-4ea1-991b-6c6124415a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b80e95-a91b-45d6-8db6-40528f6122bf",
        "cursor": {
          "ref": "1a4bbf35-39e6-43ea-91f8-0bbabeee1599",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "24c0a3e9-7a25-471d-b5f8-b139ec979bc1"
        },
        "item": {
          "id": "d6b80e95-a91b-45d6-8db6-40528f6122bf",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "a1274e1a-a111-47f6-8898-f79e45138281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863306b2-8151-42fe-96f8-420f057efaa7",
        "cursor": {
          "ref": "a1fa0b68-1400-4a4d-b974-9847a893dd3b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "489a0dc3-76b1-458d-8778-15bd84954ca2"
        },
        "item": {
          "id": "863306b2-8151-42fe-96f8-420f057efaa7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "53fd9ee6-92ef-4bff-a3c6-640d6be010a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e7eccb-9c25-425c-8c57-b6c612c7db6f",
        "cursor": {
          "ref": "54b31904-1852-4c95-8168-7bcf5b869860",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c1c0c44a-02fb-4bcf-84c9-c612bf742a10"
        },
        "item": {
          "id": "36e7eccb-9c25-425c-8c57-b6c612c7db6f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e1dc9b00-ee73-4034-b805-4bc10ee3ea69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cb8792-48fc-4f73-8b57-ad44f95b0aa9",
        "cursor": {
          "ref": "5031f60e-4f4f-4a8f-a3e1-b8241502372d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "acfcca1c-c6eb-4241-82cb-b221d8a6915a"
        },
        "item": {
          "id": "04cb8792-48fc-4f73-8b57-ad44f95b0aa9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ac6d9654-d0ae-47cb-98cf-d83e54d1e46c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110a4670-2d52-48ae-acf8-7d39b0bb6fe6",
        "cursor": {
          "ref": "c8c57fa8-b6e3-4eb6-ae21-e3fca425bd79",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "76ecf99f-dbd4-4002-82b2-568a979b57ac"
        },
        "item": {
          "id": "110a4670-2d52-48ae-acf8-7d39b0bb6fe6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e44322dc-80ca-4b6e-96d6-a29c14cae4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfad9984-e2c5-47a0-961e-be9ca21af781",
        "cursor": {
          "ref": "99b51eba-77e4-4ebe-b8f5-214447be32a3",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5fa788ba-cad2-40eb-93e3-1ac98003966f"
        },
        "item": {
          "id": "dfad9984-e2c5-47a0-961e-be9ca21af781",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1fe8fc6b-4e05-4122-b205-3f19e3b0647b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbd701c-dbb4-4b26-a2d0-87715e8c3399",
        "cursor": {
          "ref": "e6ecd8e8-990d-4e88-9352-8aa8a410796f",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "835799ed-fadf-4658-b276-7b525f06ab2a"
        },
        "item": {
          "id": "6cbd701c-dbb4-4b26-a2d0-87715e8c3399",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1c21d82a-1581-400c-b2ee-d5f7591f8bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4e55be-f35b-4775-8979-dfebac2f3ce8",
        "cursor": {
          "ref": "e5e86b3e-9fb7-42c3-ad46-4adeb1e1384f",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4de340c3-2013-4a5f-9195-d374e3475bac"
        },
        "item": {
          "id": "ee4e55be-f35b-4775-8979-dfebac2f3ce8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dba34602-f571-453c-9def-aca405f2d896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f16a2ca-0936-4eb8-928c-1164f135b633",
        "cursor": {
          "ref": "545e60d5-db8d-4a51-8de2-ee3736d480f9",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4203e2c3-cf59-4b37-9f3c-b457a8980bf3"
        },
        "item": {
          "id": "6f16a2ca-0936-4eb8-928c-1164f135b633",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "021a14cd-f9ce-477b-b6aa-4699be0c64bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2e5470-8798-4950-8e05-47617a83a092",
        "cursor": {
          "ref": "18ce948e-a34b-439a-883b-8d029493285d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "603a8b63-d09f-4ace-8b2b-2af29cbd295b"
        },
        "item": {
          "id": "bd2e5470-8798-4950-8e05-47617a83a092",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1399b526-412d-4aec-9203-b145a392cc40",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9f3060f4-7a7b-4615-a3e4-61522695c6a6",
        "cursor": {
          "ref": "c5a3529c-9c04-4f4a-8003-843109203833",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a49a9983-57db-4e53-bbe5-49fe7cdf95b0"
        },
        "item": {
          "id": "9f3060f4-7a7b-4615-a3e4-61522695c6a6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0a9977bc-72e4-4ff1-83bd-8d9e6ac0582c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c290b7-164c-491b-a883-6840f8ead2cc",
        "cursor": {
          "ref": "66d3252b-d0da-47f0-bcf4-bbbff3e232b2",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "49ea4c49-6117-4f78-bbf0-87148c95a125"
        },
        "item": {
          "id": "41c290b7-164c-491b-a883-6840f8ead2cc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e58ae49d-0587-49ea-8fce-38a7c0a7a81d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759de453-3e2b-4188-87dc-a50b112b0b0c",
        "cursor": {
          "ref": "fdf50b03-03b4-4e58-bbe4-938b9e96e877",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3f31b4bc-9866-4e48-ad13-2a3ce401d663"
        },
        "item": {
          "id": "759de453-3e2b-4188-87dc-a50b112b0b0c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c185e63b-99cf-4168-af41-3c2a4a52b17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02f727a-c5b7-42a9-ae7b-cb868573d14e",
        "cursor": {
          "ref": "dbd8709a-2b7c-495f-9816-51a25fc573c4",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "36e426ab-1690-4ad2-9324-a8a1f345ff3f"
        },
        "item": {
          "id": "c02f727a-c5b7-42a9-ae7b-cb868573d14e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1b1102ac-842c-492e-8fd8-454dfcd8848c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f1d237-f1f4-42d7-a1c1-6a31cbae9fce",
        "cursor": {
          "ref": "7c072ff1-900b-4330-91c6-bc043e68d24c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9924fcab-d948-4c0f-b705-a3fe8775e5de"
        },
        "item": {
          "id": "e8f1d237-f1f4-42d7-a1c1-6a31cbae9fce",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2ad7b29e-ed14-4156-805b-c86c5e8cb5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4913fe4-eff8-4e37-a24c-c26de08bb398",
        "cursor": {
          "ref": "0019cb9c-2c7a-4675-b009-da0ed1885a22",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0ed210d5-cd0a-4a3c-ba1e-43efda73b5d4"
        },
        "item": {
          "id": "d4913fe4-eff8-4e37-a24c-c26de08bb398",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c33c5cbc-558d-4ddd-8a06-d31fa3bf790d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5ccc17-c0c2-42e2-a7f0-d507e16a153f",
        "cursor": {
          "ref": "bc6ac6a6-3739-4206-8dfc-c3ee2d6a0633",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "23bede91-90d6-40d6-a0c5-6eaf626c9e72"
        },
        "item": {
          "id": "ed5ccc17-c0c2-42e2-a7f0-d507e16a153f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5c8795ab-fbcb-4788-8a75-4443879cf2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208ff144-21bf-479f-9c3f-024e0b85484b",
        "cursor": {
          "ref": "bc8c33c5-ba8f-4e93-a4de-e5af785a5fc5",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b0c346a1-a47e-4150-909f-a77b3abfc9b1"
        },
        "item": {
          "id": "208ff144-21bf-479f-9c3f-024e0b85484b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "27259689-32f8-470a-b362-d833abda11bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06375fa-1b26-4232-a78a-553dabbc44ab",
        "cursor": {
          "ref": "562217e5-eead-4347-804e-b101daecda70",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d2719d7a-66d0-4b61-9a92-ce6e03a8dfaf"
        },
        "item": {
          "id": "a06375fa-1b26-4232-a78a-553dabbc44ab",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eae2aff4-2053-480b-ae63-2575214d3d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7157986b-5e6e-4a65-8ddd-27d9b7f10ef6",
        "cursor": {
          "ref": "af7172d5-3061-4001-b2cd-bc4f06de5379",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5842a76c-1fc8-4cb8-af02-8694fce8838f"
        },
        "item": {
          "id": "7157986b-5e6e-4a65-8ddd-27d9b7f10ef6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ab53a738-3265-4fcc-bff8-e910f1efd9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dddcf93-63ed-40cf-a9b7-0fca554f86d1",
        "cursor": {
          "ref": "493c5582-57b3-43b2-b57c-3b88b11e51f1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "73844965-61de-4ad7-ac76-6f309f67623a"
        },
        "item": {
          "id": "4dddcf93-63ed-40cf-a9b7-0fca554f86d1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "165d5a88-41fa-4c7a-8613-94786c0541f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e256c55-c511-4cb4-9417-c8901581ccf4",
        "cursor": {
          "ref": "3296e853-916f-4b20-9182-1d72757909c1",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "aa49414b-af65-4a12-90be-1cebc6e8de0e"
        },
        "item": {
          "id": "5e256c55-c511-4cb4-9417-c8901581ccf4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ed69c468-006f-4817-ab8b-c80c3c660957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a9d2c7-c710-4e79-9947-9057f2869e38",
        "cursor": {
          "ref": "8e466cdb-69de-4552-91c9-1cbfb83d665e",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "23270caa-cdba-4041-b0f1-3e96d70447dc"
        },
        "item": {
          "id": "e9a9d2c7-c710-4e79-9947-9057f2869e38",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3c5a9540-3c5d-482f-a2cb-8419dd42dc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932e8c68-b9b8-424e-9b93-8cf2c23dd395",
        "cursor": {
          "ref": "dd7bf2a9-c555-4bfd-9d3c-e66d047c6cb4",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "65122a94-598b-4856-9d42-bde01da96c42"
        },
        "item": {
          "id": "932e8c68-b9b8-424e-9b93-8cf2c23dd395",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "56fa3b59-536f-495d-8661-d2e7f318e869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f013706-aeb1-4987-9ca2-64b0a49f8660",
        "cursor": {
          "ref": "4e1929d5-3653-4e73-ad23-4603e8af5cd6",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5b8b34a7-84cb-4400-8b7f-d6cf09ffbd84"
        },
        "item": {
          "id": "8f013706-aeb1-4987-9ca2-64b0a49f8660",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4f1f26e3-824c-4e54-a6cf-ae1641bcc8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631b1d1a-04d2-491c-aa62-8a2d4c58f1c5",
        "cursor": {
          "ref": "ffcfdc9e-bb2b-43e7-90b1-9d81ad4ccdd0",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33590010-26be-4fb7-adad-fa4b4eefd46d"
        },
        "item": {
          "id": "631b1d1a-04d2-491c-aa62-8a2d4c58f1c5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6602adea-614b-46d4-b587-e5d1a65f60c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52badc7a-fb8e-4368-98d6-2affe6d84419",
        "cursor": {
          "ref": "7415afad-fae1-4724-b54e-4a765a312baa",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a0c8172f-883e-4645-b238-88d02b5805b6"
        },
        "item": {
          "id": "52badc7a-fb8e-4368-98d6-2affe6d84419",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c5e62dfa-e960-4309-8f9b-ed691ebbddc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed67543e-489f-419d-9e24-79c6c5c6dd26",
        "cursor": {
          "ref": "3c1c06db-b62f-4f8c-a7d9-5628c6a680f6",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9efcdef7-1069-4a09-9299-db4b15384ae9"
        },
        "item": {
          "id": "ed67543e-489f-419d-9e24-79c6c5c6dd26",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f7c4fa1e-088e-4873-91ed-31efa13a07e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a486c049-507d-441c-8c72-ba41fc457092",
        "cursor": {
          "ref": "2366f5cb-fb9f-498d-be6e-c66cb78b639c",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cb1ad0c9-d359-40d8-adad-113580a56f5b"
        },
        "item": {
          "id": "a486c049-507d-441c-8c72-ba41fc457092",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4bbb7a1d-ca46-4819-a45f-1f3dde766a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed884897-2f5a-4eed-b55c-c6bda095260c",
        "cursor": {
          "ref": "1ef0853e-d307-43e3-8f69-56739fa15a9b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e573a987-0920-49d4-820d-76ff305b0406"
        },
        "item": {
          "id": "ed884897-2f5a-4eed-b55c-c6bda095260c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "32300ec5-75a1-42df-8767-4d7dc336e7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112132d0-240c-4403-b792-0ba21568f86c",
        "cursor": {
          "ref": "98aa124a-ef98-4314-8629-0c80336f0e57",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e46c8693-d01e-451d-981a-53e814e2fe15"
        },
        "item": {
          "id": "112132d0-240c-4403-b792-0ba21568f86c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1645ec8c-4bec-435f-bded-54c7bb992944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a9a871-460a-4bb5-a83c-daacdceba858",
        "cursor": {
          "ref": "4433b7d0-06bd-4703-884e-32698044725a",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "27f6333b-1e55-4871-88ef-b6ebbae3d2e7"
        },
        "item": {
          "id": "a5a9a871-460a-4bb5-a83c-daacdceba858",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6a40e6e0-a2a3-46fe-a7bd-3ae3954b68a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3085c1d-9521-489b-8b4a-7dd08e146a3e",
        "cursor": {
          "ref": "300f7726-4988-464a-a150-d7e48a6789a5",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3039708d-ec99-4d1e-8910-88244773ba13"
        },
        "item": {
          "id": "e3085c1d-9521-489b-8b4a-7dd08e146a3e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0f9997e7-8680-4ff8-8ac2-eadcd3c5b376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfc3989-f6fd-476b-90b6-96de7d8436a2",
        "cursor": {
          "ref": "30f4a751-a9cd-4980-982a-a64d81a088ff",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "53134e02-add4-4bea-8067-09d85cd5ff11"
        },
        "item": {
          "id": "5cfc3989-f6fd-476b-90b6-96de7d8436a2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "00f03245-2b9f-41bc-aae1-23ad63017884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7e03d5-dbe5-404f-ad8d-08d2ce76afb3",
        "cursor": {
          "ref": "16984007-e1d5-4916-951a-ecba7bb8adb9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "700b6ecc-75ea-4c12-839c-7aee589b5e26"
        },
        "item": {
          "id": "7a7e03d5-dbe5-404f-ad8d-08d2ce76afb3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "04901b6c-e23a-4b6c-8e80-0aa3951559fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52817f3-540d-46a8-aabc-400088d34e97",
        "cursor": {
          "ref": "784e4327-cf7a-4323-88f5-160c03e94a81",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8ffdbe03-df6d-4a78-b1ec-22d1cb52c3a0"
        },
        "item": {
          "id": "c52817f3-540d-46a8-aabc-400088d34e97",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b7a383d8-6de1-4af2-ad45-071b8a7d227d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e11965-d733-41e2-9d00-f8f4d93cf47c",
        "cursor": {
          "ref": "4a8820d8-ff18-43c5-b0fd-9470aea47063",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "eae43439-c54f-447a-b1c2-78fe04da84a6"
        },
        "item": {
          "id": "c8e11965-d733-41e2-9d00-f8f4d93cf47c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5b69aaea-c56f-4199-bb29-0d1b2781f7de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f0510e-cf54-4823-86e2-eb31d8c4fa39",
        "cursor": {
          "ref": "5c3aaa2f-dc84-4147-9c68-3e61936bfbdb",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "41f3e9cf-2a3c-4e70-b01a-8621d7a672e1"
        },
        "item": {
          "id": "f8f0510e-cf54-4823-86e2-eb31d8c4fa39",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1c139bcd-173c-4e8b-b4c7-c8442d6237de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce460747-5a28-4358-a578-c0b517c04867",
        "cursor": {
          "ref": "236ba4b5-4d95-497f-bb56-4dfe8e91b15e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f7633f56-2d70-4eee-b1a1-22ff9e3a0781"
        },
        "item": {
          "id": "ce460747-5a28-4358-a578-c0b517c04867",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c6beeca2-022a-4142-875f-d8336d6ddd9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5198f6cf-8571-495e-9e8d-d5d2adf83490",
        "cursor": {
          "ref": "5eeab4ad-82a3-41c8-acd0-7f04f0211b2c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "147d2a36-a71f-4018-9a41-a6b5a18bb0b1"
        },
        "item": {
          "id": "5198f6cf-8571-495e-9e8d-d5d2adf83490",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8b594a76-3cdf-4228-83f4-1cf5b6ced71b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5f86ebd2-eb64-4cd4-bfd8-2f8b20a771c3",
        "cursor": {
          "ref": "ad377271-0147-4ace-83fe-a3fe5b04754a",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b293e97a-ffa2-4497-8151-94a515ef891a"
        },
        "item": {
          "id": "5f86ebd2-eb64-4cd4-bfd8-2f8b20a771c3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5499e8d2-f9ba-480a-8a9e-0a7c56b58b9b",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "94071754-eda4-424d-bb6d-93b959dbf049",
        "cursor": {
          "ref": "39c2fbfa-a862-4c32-abbb-e8e975a98dd4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0dd11b9f-fb36-429d-a196-166ab9021afc"
        },
        "item": {
          "id": "94071754-eda4-424d-bb6d-93b959dbf049",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e01fd369-919f-4979-9b35-0b23220df2fd",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9c9211f3-c4a3-4ef6-b6ea-04cdc6e4ba96",
        "cursor": {
          "ref": "48264caa-d02f-4bb3-aaec-5f7deef4696d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7e0b698f-9d0f-43fb-9b8f-bfcf4adf14d2"
        },
        "item": {
          "id": "9c9211f3-c4a3-4ef6-b6ea-04cdc6e4ba96",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d64388eb-8b3f-421a-8069-b9b0ec07b9d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1622c425-6bce-44a3-876b-92481e0d8820",
        "cursor": {
          "ref": "8dab7a9a-5987-4980-9aa3-951232df3257",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e7b1b402-51cb-46a2-9d95-9718ef2c9717"
        },
        "item": {
          "id": "1622c425-6bce-44a3-876b-92481e0d8820",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5e422edd-725a-4a26-8d05-6ef58fb7f8e0",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cb9df393-c605-4056-bbcd-e1f5ea289297",
        "cursor": {
          "ref": "f292a186-9c97-4e11-94f2-29d41129ddc6",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cb0655dd-6164-4e5b-9344-0ccade05fbd6"
        },
        "item": {
          "id": "cb9df393-c605-4056-bbcd-e1f5ea289297",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9e937d05-8bbd-4ff5-aa7e-743aeec50415",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d142bf6a-1c66-40a6-990f-96a978b3eb90",
        "cursor": {
          "ref": "ab43c0ed-d63f-4adc-83ed-cd63d0a7f565",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d55718f6-bb45-4c6c-8c98-9f7a7f8373cc"
        },
        "item": {
          "id": "d142bf6a-1c66-40a6-990f-96a978b3eb90",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0d4e7e99-d0c7-4ab3-b751-9f25dd3360f8",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3edfac66-fc8e-457e-8d43-917d7c84bb0f",
        "cursor": {
          "ref": "fce412dd-f002-4b11-b0a0-9bb2ea7052d0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "77999b03-d742-4194-8243-40196d6c1212"
        },
        "item": {
          "id": "3edfac66-fc8e-457e-8d43-917d7c84bb0f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "60e948a0-65b2-4a36-ba3d-307dcbf7be7f",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e3e4f937-2fdf-4af5-96e7-e6eb618f53d5",
        "cursor": {
          "ref": "a7c9a8aa-6efd-4284-94d7-c0bf95a04383",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5b4040d4-9f02-4305-b819-06d020257ff2"
        },
        "item": {
          "id": "e3e4f937-2fdf-4af5-96e7-e6eb618f53d5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "441819a4-03f3-444b-a337-7f012a9217ce",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "45673de7-1178-4589-923a-04919f880ed4",
        "cursor": {
          "ref": "c9cac9dc-386e-4f11-af14-55c14eeaeb68",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "75968693-6507-47e4-a853-db0796199cf7"
        },
        "item": {
          "id": "45673de7-1178-4589-923a-04919f880ed4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3be53e4f-7964-43b2-b606-c21f6b6c6f5c",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "243bfb19-aed4-41fd-b04f-af4f8f85d8ef",
        "cursor": {
          "ref": "6430e4fe-4dfc-4c45-8ff8-9ce60343608f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cd69820d-80ef-410e-a1ec-8553eb9ea02f"
        },
        "item": {
          "id": "243bfb19-aed4-41fd-b04f-af4f8f85d8ef",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e8fd0855-6b15-4feb-abab-d5736e066e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da498cd-ec08-4c61-b066-412e11959e0a",
        "cursor": {
          "ref": "102eb21f-f8e3-414b-b3c9-2610d926459c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2bf23c35-6dad-4061-b89f-7dfcf16f0bbd"
        },
        "item": {
          "id": "6da498cd-ec08-4c61-b066-412e11959e0a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9a4e489d-fe1a-41fa-9ed1-cd13f4bfbbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43214352-1893-4ba6-afbc-a9ade6942e16",
        "cursor": {
          "ref": "d6ef0cc6-07ee-4d0a-8427-219757a500bd",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6ae55b13-6a4f-4a89-8c03-2d1ce0f49315"
        },
        "item": {
          "id": "43214352-1893-4ba6-afbc-a9ade6942e16",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4a1728e7-b442-4035-b89f-824de17ded1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc5b6c4-116e-4a72-9ad9-51f1afcad8f5",
        "cursor": {
          "ref": "a29813a9-ca37-4360-85b9-cbbdff9df29d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8913177a-163b-4a10-bb11-14a4586dea29"
        },
        "item": {
          "id": "3bc5b6c4-116e-4a72-9ad9-51f1afcad8f5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "caf488ef-5bc3-4d5b-acda-f211d2d43e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "177c91f5-b4bc-4414-b549-d6e07f25d7e9",
        "cursor": {
          "ref": "7b0c5e8e-5638-4a28-aa61-5e09eb915650",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3bee0485-b454-4a31-aeb2-d0cb0752bfc7"
        },
        "item": {
          "id": "177c91f5-b4bc-4414-b549-d6e07f25d7e9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1784ac48-8e2b-4a43-9927-05dc0b304628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc69121-543a-4f84-908f-e4f3a94b0e39",
        "cursor": {
          "ref": "5b2f904d-5128-40bb-bb1e-1be993bf4a43",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fe84f9aa-66d5-4804-804d-43b129b53ee3"
        },
        "item": {
          "id": "9cc69121-543a-4f84-908f-e4f3a94b0e39",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d59cb65e-f85c-4855-9c57-048c59aa4746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754a264a-df29-4304-8953-1b2a767fa159",
        "cursor": {
          "ref": "d4ab6fd0-a6c2-49ea-8bb4-af1df39e20bf",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3d8f0d8a-b257-4e22-b6e1-8ffa4b69b544"
        },
        "item": {
          "id": "754a264a-df29-4304-8953-1b2a767fa159",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d435432f-d141-4aa0-80ed-5aa3f6145103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40412dd4-cd50-44c4-8b14-0cc157424326",
        "cursor": {
          "ref": "2dd0fdd2-7d92-4dfc-8775-a1c5c8565424",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bc09c9ed-fdbd-4c2b-8f63-50af7e555156"
        },
        "item": {
          "id": "40412dd4-cd50-44c4-8b14-0cc157424326",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dccc51a1-bb53-470b-8679-5f4774457e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121fa6d3-c727-4f68-8788-cd8fb0768225",
        "cursor": {
          "ref": "66d859fe-b485-4c94-8db7-1a0b98f7172c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "beedd5e4-6739-4751-8a86-6449ffa5d357"
        },
        "item": {
          "id": "121fa6d3-c727-4f68-8788-cd8fb0768225",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8d5d5598-13fc-4695-a0ba-8fc3d565762c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0e0d95-39e6-468b-b40c-8915097b1074",
        "cursor": {
          "ref": "68d695d6-09e7-49ac-ae4b-5a584ba78bf8",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e956d4f2-6d53-4bd9-a351-40d521c879f5"
        },
        "item": {
          "id": "bc0e0d95-39e6-468b-b40c-8915097b1074",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3daf282d-c5f5-46d6-9d19-d998e922efc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a15440-da7f-48ee-9416-3efeadeca2bd",
        "cursor": {
          "ref": "8a2ef45b-1b1a-4346-80a1-a2b42524a00b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "25911fd9-fab8-4ce0-b58f-c6d39d64f557"
        },
        "item": {
          "id": "f0a15440-da7f-48ee-9416-3efeadeca2bd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4099b05b-7500-4829-bdd3-eb298568a9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b17d4de-9e36-46da-8a7b-f3221f20f0c2",
        "cursor": {
          "ref": "118d5982-5724-4463-8bc7-42fa06e77fff",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5909c549-25a7-4a5e-bfbe-2c3813f17697"
        },
        "item": {
          "id": "9b17d4de-9e36-46da-8a7b-f3221f20f0c2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "90b89c60-a717-4045-8d22-88f12aa24999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3fc215-6ae4-477a-9906-258626543c94",
        "cursor": {
          "ref": "cbc9af6b-a1cc-4272-9964-80ff1a2ab2c7",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ce2a3d6d-bc53-4c9a-a5b8-cc5a532e8472"
        },
        "item": {
          "id": "aa3fc215-6ae4-477a-9906-258626543c94",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "945c9ec0-23a9-4ef4-a370-3f5775cfe6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ca946e-7a9f-4320-a49b-035c9de4df58",
        "cursor": {
          "ref": "449e2afe-f876-49a6-ae89-96ed69fa35fc",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "90dd40b3-0da8-410a-97d8-0879416e9c96"
        },
        "item": {
          "id": "38ca946e-7a9f-4320-a49b-035c9de4df58",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b168615a-5214-4417-9adb-e3fe31a2df42",
          "status": "OK",
          "code": 200,
          "responseTime": 197,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "788175b4-fbbe-407c-8c59-03d4a365131a",
        "cursor": {
          "ref": "886d9f36-2336-4106-a8df-ac2b7394ea26",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d3c1f527-4000-4450-bc51-970016bcaa60"
        },
        "item": {
          "id": "788175b4-fbbe-407c-8c59-03d4a365131a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c2a8736b-a250-4b51-b63a-741874de985a",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "208e3a5a-4dd9-412c-b7ff-742cac0a7c4e",
        "cursor": {
          "ref": "ffb75eb1-70c4-4d33-bf16-8574de02d12a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ec45d61d-db8b-49f2-b945-f7f7b06b6993"
        },
        "item": {
          "id": "208e3a5a-4dd9-412c-b7ff-742cac0a7c4e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "405a7bb6-af3b-4b33-b6e4-83957922f36c",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a5829a8b-0c22-4b7f-968a-ebee3ade7f05",
        "cursor": {
          "ref": "1a51eb9c-9351-4382-a9ca-df6dff3c5b24",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "44d3bb30-864a-4829-97ae-2f40bc32f23b"
        },
        "item": {
          "id": "a5829a8b-0c22-4b7f-968a-ebee3ade7f05",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e9572945-6937-437a-916b-5b7470564153",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d456ac85-e9b3-4b44-8706-700d7609d122",
        "cursor": {
          "ref": "3bac48f0-2329-4161-bcef-458a3978560c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ecd2171b-c018-446b-abc2-5d09eddf568b"
        },
        "item": {
          "id": "d456ac85-e9b3-4b44-8706-700d7609d122",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c21fbda5-4867-4f26-b66f-c569600ad137",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "445c9696-1fb7-4971-b155-d6fd8e6e7a0f",
        "cursor": {
          "ref": "8eb6f5f2-1b93-4509-a0a6-cb93ab53a31a",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ce0aab9c-8f31-4f26-b681-1305ed816a02"
        },
        "item": {
          "id": "445c9696-1fb7-4971-b155-d6fd8e6e7a0f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fcca995a-8689-46e1-b2e1-0b631e45c89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34f1d79-8a11-4578-a9c5-4c5c4703b2d0",
        "cursor": {
          "ref": "f3b70867-4bdb-4336-b9ea-9c8cc582c544",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "738105b7-63ea-4050-ba54-8a754c6eadfd"
        },
        "item": {
          "id": "b34f1d79-8a11-4578-a9c5-4c5c4703b2d0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "971bd872-8e9d-4022-98ca-ad4c32f6c842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd54dd64-f076-4a66-b807-6a8709f13c8d",
        "cursor": {
          "ref": "decfea82-98d9-4bf0-b766-bcefc4a1cc45",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9aa197c1-db4b-4a7f-9412-c0edf2142f21"
        },
        "item": {
          "id": "fd54dd64-f076-4a66-b807-6a8709f13c8d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c791902a-257f-4ce2-9432-35a3e7a2c47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108c4cd6-cf2d-4d4d-ad3b-c0c91254d4f2",
        "cursor": {
          "ref": "ea57ba4b-e269-464f-a1a9-c2feb3c018bb",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "714dca3b-fa86-4ef6-abe4-fa1015772d24"
        },
        "item": {
          "id": "108c4cd6-cf2d-4d4d-ad3b-c0c91254d4f2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b12ad090-6ea6-4409-95a6-ebd41ce796f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a67dc8e-0f7f-4287-b291-4cc26444623f",
        "cursor": {
          "ref": "afb402b3-4be3-478a-8906-f3040958766c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2960c923-a78b-473f-90b5-793cb0231121"
        },
        "item": {
          "id": "8a67dc8e-0f7f-4287-b291-4cc26444623f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4f38a1f7-ce4b-4483-afc5-16af8339309d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c792428-ea1d-4267-a4da-9501be526262",
        "cursor": {
          "ref": "8413471b-8203-4430-95d9-cec57ced8da6",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dd8742b2-0cd3-4ef6-a199-f9883823e1a6"
        },
        "item": {
          "id": "7c792428-ea1d-4267-a4da-9501be526262",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6fa78075-dc85-47b9-a53b-01f30cfdf337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a846985-4c25-44ad-aa0a-cd6db05b1d13",
        "cursor": {
          "ref": "0df1ced9-84d2-43b6-ac0a-23ab4f0146f7",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "129708ac-2da1-449c-93f5-a27517360a0b"
        },
        "item": {
          "id": "4a846985-4c25-44ad-aa0a-cd6db05b1d13",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3be0f920-5ad1-40d7-81cc-51ec7f7966c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5a186f-5d81-467e-b282-d5f6ffc83d75",
        "cursor": {
          "ref": "8d5c16cb-835d-4680-bdac-7d81bc16e07e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7ec660f3-db31-4b66-b623-3ae88d9b9e34"
        },
        "item": {
          "id": "eb5a186f-5d81-467e-b282-d5f6ffc83d75",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b5274fc2-45c8-4aed-b72e-c00788c6b6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cda2636-6f37-4955-bac9-7620758cd000",
        "cursor": {
          "ref": "63f06c30-d2e0-4e95-8310-86bde4ea44ca",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "517d640c-b472-4e1c-893f-c7e02200cf91"
        },
        "item": {
          "id": "9cda2636-6f37-4955-bac9-7620758cd000",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d1a596da-506d-405f-b885-92e175d2ee70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f077f2ee-ee72-44a6-9c05-045ddaf1ae7e",
        "cursor": {
          "ref": "a800c28d-1a9f-4e14-85d9-e073415a8e43",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e672917a-147a-4cc8-a549-1e9787e141f1"
        },
        "item": {
          "id": "f077f2ee-ee72-44a6-9c05-045ddaf1ae7e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "91aa42d7-0f03-43c1-a701-2a10f80beee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef73352e-c78f-4fe0-bdbf-d0711abde38b",
        "cursor": {
          "ref": "fd84e9d0-f23f-4eeb-849d-cc28732bbd20",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e9e950e3-3306-4afb-9aa1-675b0365e112"
        },
        "item": {
          "id": "ef73352e-c78f-4fe0-bdbf-d0711abde38b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9878bafc-4c88-430a-91ab-4212fb8e9e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad94a6f7-3981-4292-bdef-407b2fe61d83",
        "cursor": {
          "ref": "5f547e07-7a26-4d95-aab7-7c4e2e41437b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e962e121-7b86-4fda-ad61-03a89e543a83"
        },
        "item": {
          "id": "ad94a6f7-3981-4292-bdef-407b2fe61d83",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3e5990ab-d87e-43f4-90b8-b6f5098aea2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7a6979-e071-4b4d-a064-bc26e90191cf",
        "cursor": {
          "ref": "7fb382a0-6bb0-4e5a-9b4d-3ded28f9724d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "566a94d9-a86f-4e33-89a0-93e65d72020e"
        },
        "item": {
          "id": "9e7a6979-e071-4b4d-a064-bc26e90191cf",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c38d4004-e7a4-49d5-94cc-64987765b34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d727966-3b5f-4098-a4d8-55631f7453ef",
        "cursor": {
          "ref": "659c0ede-bdd5-4a4c-ae5a-e5b2ea73b9f2",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "40e67445-14d6-4fe5-9afe-9e63a0eaecc2"
        },
        "item": {
          "id": "0d727966-3b5f-4098-a4d8-55631f7453ef",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f786fd2b-3130-4b69-9f22-5fbaa7bcf4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55677167-b21e-4c6c-8204-0d37b9bad86b",
        "cursor": {
          "ref": "9d5c5801-b405-468c-a2e6-6438f8efc815",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "77837905-3634-4e2d-a758-6956dedfd712"
        },
        "item": {
          "id": "55677167-b21e-4c6c-8204-0d37b9bad86b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "027621c4-4036-406a-9412-fabd4ebd322e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5763439-c82b-4a6e-bc07-ff7f27891d32",
        "cursor": {
          "ref": "dfd480e7-657f-4749-8162-7f3467466bc3",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f9290805-942a-44a5-803b-253025803f53"
        },
        "item": {
          "id": "f5763439-c82b-4a6e-bc07-ff7f27891d32",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "217dba5e-2adf-447f-bd16-f3f4853e46a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd9c19b-0db2-4843-9d21-eb0efee4207c",
        "cursor": {
          "ref": "a7af56a6-b464-4739-92b9-4634d4724c40",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "02ef10b6-2f2b-45f5-8724-8263c8ca704b"
        },
        "item": {
          "id": "1cd9c19b-0db2-4843-9d21-eb0efee4207c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5a5607ac-c45d-41b7-819e-4504c2e6cce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eecff3-c7fa-4e59-8339-534086018515",
        "cursor": {
          "ref": "c05ac1e5-1aba-45a6-b543-9570cdeb3ebf",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "676da4a3-2d65-4b4d-9481-d7db54726a20"
        },
        "item": {
          "id": "d3eecff3-c7fa-4e59-8339-534086018515",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "336a4bb7-b3b0-49f6-9e1b-5caec0098e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56edd4df-7926-4bb2-a5e4-5ba1900bfbd7",
        "cursor": {
          "ref": "3baebbf3-9835-4181-943f-c63798d3236b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "eda65b5f-dcaa-4206-875a-f4af0a413591"
        },
        "item": {
          "id": "56edd4df-7926-4bb2-a5e4-5ba1900bfbd7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0ccfd98b-a9b5-46dc-9a22-22377c04c0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ce2010-fb97-49c3-a56b-2202a731bc74",
        "cursor": {
          "ref": "3f24bf8d-a640-443e-88b1-4dc35ef58d29",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "70f3287d-2adc-4248-a7dc-1dc983d38d0c"
        },
        "item": {
          "id": "89ce2010-fb97-49c3-a56b-2202a731bc74",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "39c64473-5de3-4c40-a13b-833483643a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91960d4d-c00c-4a9c-8d05-d7709b1709bb",
        "cursor": {
          "ref": "2400e50d-e8b4-4a52-884c-85bd77e02b94",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "49f6a60b-f35e-4645-95d9-8700ae26861b"
        },
        "item": {
          "id": "91960d4d-c00c-4a9c-8d05-d7709b1709bb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "68609427-80d9-44a7-bc15-9abfee384321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e33b5a7-6120-485d-9683-76c0c8ffe4d6",
        "cursor": {
          "ref": "1fbce1d5-a467-4531-b8f1-3177b2cc45f4",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cf37117f-69be-4597-8986-296a5f1d3bf6"
        },
        "item": {
          "id": "8e33b5a7-6120-485d-9683-76c0c8ffe4d6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2dfa1199-a931-49eb-bc1b-6c667c4a3e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fcbd07-895d-430d-a26c-8ca0170240e1",
        "cursor": {
          "ref": "da0829ad-faff-4421-bc95-8707806ab111",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ea0b2f1f-5c43-4200-a3d3-6add6f30c284"
        },
        "item": {
          "id": "71fcbd07-895d-430d-a26c-8ca0170240e1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ed915bb7-7464-4783-a5fa-98926d8aca7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e019e5-0b59-40a2-93ac-c40e422215b0",
        "cursor": {
          "ref": "2e171b15-b6c8-401f-aa2c-27535b53187a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "29605d78-888b-4751-b7bb-7c058be59232"
        },
        "item": {
          "id": "c6e019e5-0b59-40a2-93ac-c40e422215b0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a009fda6-1dec-4048-b9b3-15d2ac927b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0148ba31-df1f-46df-9acf-58e23caddcbe",
        "cursor": {
          "ref": "19051ae1-f61b-4e02-8343-69387ba479af",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "83b70d24-f14d-4dc2-bfa1-c623b24cf00c"
        },
        "item": {
          "id": "0148ba31-df1f-46df-9acf-58e23caddcbe",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bb9ba59c-239e-40e6-8d98-54ec6301d6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd211046-a810-40da-8f9d-af91206947f1",
        "cursor": {
          "ref": "431f0f0c-be0e-4e29-92ee-aa909b00bab9",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "029a4527-750a-441f-b85d-8d6e6d5b3b48"
        },
        "item": {
          "id": "cd211046-a810-40da-8f9d-af91206947f1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d4d6c353-a548-48b8-84db-6c4b8bfb2a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbc639f-d262-4d19-8f3d-ee6b5e389f3a",
        "cursor": {
          "ref": "dec6e460-69f7-4823-9700-ac7da84c3f28",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "48477849-0925-4812-b360-708aef9f4600"
        },
        "item": {
          "id": "4bbc639f-d262-4d19-8f3d-ee6b5e389f3a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c5212e97-1ee8-4664-be38-4dc4615a2525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b519ea-b53c-4f9d-8d8d-f84eee0cb58c",
        "cursor": {
          "ref": "e8f8f437-0bf1-4600-b32e-5b4cecb26c94",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3a403fd8-28bf-4cf7-98ee-ab222b397398"
        },
        "item": {
          "id": "c1b519ea-b53c-4f9d-8d8d-f84eee0cb58c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fd482026-dbc6-4f3d-8365-a1ae41781a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bc0123-8a24-4d37-bc8f-e7377e74ba74",
        "cursor": {
          "ref": "980963d3-b644-4903-8f0e-5aeba9633c83",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6fbada97-3702-4122-b418-1a0c93dc3676"
        },
        "item": {
          "id": "c2bc0123-8a24-4d37-bc8f-e7377e74ba74",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ea411f35-b07c-4117-8b04-19af08ca3481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f034c042-da71-4876-823d-bc99a5dbac6f",
        "cursor": {
          "ref": "5bd5ebfb-30e5-4f40-ba3d-8dbf007eadf7",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "acdf29d4-3511-410b-b699-7119c894b1ca"
        },
        "item": {
          "id": "f034c042-da71-4876-823d-bc99a5dbac6f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fc058340-3ded-406a-9e68-f24b23b3b09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11eb0410-5f6e-4520-822a-b98024126d0e",
        "cursor": {
          "ref": "dda17908-d057-4da7-ba86-71f0bdf65978",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "e2f5a011-6e12-475f-86ad-7c0d9730f703"
        },
        "item": {
          "id": "11eb0410-5f6e-4520-822a-b98024126d0e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f50aaf3b-75b0-4fee-96f5-d546b068abe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495e791a-7584-4c0f-97b9-69b4276af2c5",
        "cursor": {
          "ref": "16f4e00b-0bba-44be-bc6c-5281a82bd23c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "049eb586-8492-4621-a649-4947dedc00e6"
        },
        "item": {
          "id": "495e791a-7584-4c0f-97b9-69b4276af2c5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "95302951-1b81-4d0e-a63b-6872482aed98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7981590c-3091-4231-9819-1c32aa2a1b6d",
        "cursor": {
          "ref": "d536c61e-91ef-4dd3-85fb-5566d5d316ce",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "1b853b81-7de0-4bb3-b158-24438086f8c3"
        },
        "item": {
          "id": "7981590c-3091-4231-9819-1c32aa2a1b6d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cd61db01-72e1-4154-aa21-a3c8e2f8a61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d385c8d6-9287-449a-8ee2-4265f2eb640a",
        "cursor": {
          "ref": "70eb5895-f379-4db7-8b29-5fd52a5c9867",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "fdaf3818-8cda-4812-b163-ed449dfa2ce6"
        },
        "item": {
          "id": "d385c8d6-9287-449a-8ee2-4265f2eb640a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2ac6c282-fa43-49ff-8408-67555c1be9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8cef37-a51a-4978-849e-533159ad1b18",
        "cursor": {
          "ref": "581e5489-886c-48be-a977-01d8232157cf",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a5dc18a9-d642-4364-ae98-a6de48669a1f"
        },
        "item": {
          "id": "cc8cef37-a51a-4978-849e-533159ad1b18",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "827d49ff-d028-40e2-8963-2334bba75746",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0fa3f84-9512-4372-8afd-bb7fdc91ce10",
        "cursor": {
          "ref": "142bbcfe-f1bd-40c1-ba12-ed194c701dcc",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "32f1a8aa-4708-46b1-94ec-b78912b81ac5"
        },
        "item": {
          "id": "a0fa3f84-9512-4372-8afd-bb7fdc91ce10",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "be87573a-1b7d-49a7-b0a0-2158e1c8a8a3",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e2a1b8b9-3049-4b42-8f32-ff846bbc7651",
        "cursor": {
          "ref": "eb1ba217-89a1-4945-b562-d7d669b37026",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "caad5f42-1662-425c-b9d4-6a2bd96b41d7"
        },
        "item": {
          "id": "e2a1b8b9-3049-4b42-8f32-ff846bbc7651",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3abaa418-3d51-437c-9632-cd499b6e3735",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5f77cf-e61a-4cad-a5c4-ab3ef3311c5f",
        "cursor": {
          "ref": "5d50f432-62fc-4938-a537-b87d43d2ba96",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "81406689-eb5a-46d1-b81e-8cab6932c84d"
        },
        "item": {
          "id": "3c5f77cf-e61a-4cad-a5c4-ab3ef3311c5f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "00816a68-3365-4e7c-a627-84544c0630fb",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f4ce3a-b9fb-4aeb-a547-6f8130cadf65",
        "cursor": {
          "ref": "1fa83d6c-abda-4f0e-af4d-3219ca6c1eb6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "226a69dd-8f7e-40c3-a310-b2c499183731"
        },
        "item": {
          "id": "04f4ce3a-b9fb-4aeb-a547-6f8130cadf65",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d74b040c-2477-45fe-9c9d-83180b0935a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f4ce3a-b9fb-4aeb-a547-6f8130cadf65",
        "cursor": {
          "ref": "1fa83d6c-abda-4f0e-af4d-3219ca6c1eb6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "226a69dd-8f7e-40c3-a310-b2c499183731"
        },
        "item": {
          "id": "04f4ce3a-b9fb-4aeb-a547-6f8130cadf65",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d74b040c-2477-45fe-9c9d-83180b0935a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360b7b6b-b0a1-4a74-b921-d7cd8cb0c2de",
        "cursor": {
          "ref": "4ac3f1c4-a19a-453f-a9b5-e677337ce55e",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d51dc3aa-6e01-4ab7-aeea-baab0c57ed23"
        },
        "item": {
          "id": "360b7b6b-b0a1-4a74-b921-d7cd8cb0c2de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d9c84532-286c-463a-8ad7-646e52eab7a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00dd1653-6e20-4077-a321-af09b1458f3e",
        "cursor": {
          "ref": "1c4e7d0f-5b8f-49bc-ae8f-fb3f279bc8f0",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "11d046b9-dba3-484c-8b49-0ac2a62704ac"
        },
        "item": {
          "id": "00dd1653-6e20-4077-a321-af09b1458f3e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2cbfc110-6fdd-4427-8318-1b95c1e5116b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}