{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "596b2fe5-439d-4f79-8122-65b571f39fd3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ab06e5bf-60fc-43e0-a441-4272d97dd355",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d97fcaf-7a09-4a65-92fc-5037773a318d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9b4093bf-5257-41a4-b68e-89541d3833e4"
                }
              }
            ]
          },
          {
            "id": "5b2844b8-f811-4ca0-bb3f-4b858a8cb01e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d16d21e-bfca-4a2f-8461-295d55cd5cbe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6d34a2c1-8e30-4fcb-98f1-ab42d456a8a2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "07ae9763-afd6-4ee4-bda3-0c706ccb1c26",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1f2225f6-00bc-4b08-951b-ade097eede4c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7673c7fe-fcc4-4bc4-a9ff-459a87e89540",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2c94f7a-702b-490f-9fce-efd5d071d965",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61ba12dc-3c43-4bdc-8293-859dd17a7650"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2cdd19b7-d231-4678-a020-87c03f5ae148",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "920fbaab-e721-4631-a3fc-dfcb36b6db53"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e87ed502-30e3-4a7f-9bdf-539c4feb193f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b69359e-6ec8-4327-97f5-e756b3ecdc18"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eacb29fe-ef51-4ea5-a4ed-af81b80ffe03",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "21244b5b-c743-41db-8126-dc6ce7314266"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eeac3503-3ee5-4876-9ea7-d453f304e88d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0348445c-ff6e-46d8-b0ce-db5150a55c16"
            }
          }
        ]
      },
      {
        "id": "761754e7-9cc8-474e-b407-746ec43bc02d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "26830bce-7ef4-4d8f-bd95-4adce051be09",
            "name": "Negative Testing",
            "item": [
              {
                "id": "799f1d33-2ebb-4d09-8e7d-656a6c742f8f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "da0c9cbf-a41e-4271-ae4f-94b5a149adba",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8bb5f8-bc96-4423-9129-ec9fe5be83b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db6bc850-5027-4283-a3bb-9a99aeddc34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f289df-212e-4c93-8b57-3536793db466",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc277148-a013-4c40-8141-b12fe7bf478a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2da2892-0913-4bc0-9f6e-3fcfd1194ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4241a915-fa03-45b9-97e6-86f56831c53b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793cdbe2-8100-463f-b51a-2a0e0873d660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb6e0b69-846e-49af-84d6-383faca036c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e3529b28-3a66-45d2-811a-979c2ea1d20e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8b49385-1b7f-490e-92f3-74701914ab08",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4112af08-349c-461d-bad6-7074403e0e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "175355ac-afdb-43c1-8ef3-c5c8427dffda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5401effc-8a54-4bbf-a510-6d36d50b8469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29737f96-3b3c-4223-8abe-c505e43c2117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73852652-1e51-44eb-87ac-fd94eca52053",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65e755f-4046-4be7-9ba5-305584c01294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b2f736e-d15f-44f1-a9c4-068c59f4eada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d0deb5-9782-4ba1-bc33-ae492e9cdb79",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "310b5cb9-2b3a-46ac-8e98-c8a9c24985cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8e989d4e-a2de-4b72-b0cb-9505266aef7c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "349ba5a8-4b2b-4085-8567-e6703548141c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5c84a65-3b59-42f9-9c18-7b3f37f5f325",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0d93d9e9-526a-4967-9608-1fbd2eb52315"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d0654e3-be32-4a05-a5db-5610ec056164",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8bc08aea-3ab1-4cee-9979-df3dd0b3dd02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4aef00d6-a8b9-48ef-924c-f429de6554bf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1eb10ab0-2120-46e0-971c-074b3dde48d3"
            }
          }
        ]
      },
      {
        "id": "8d077a50-8e58-4d6e-bf82-654d4482496e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7510b004-2ff8-4398-9d31-b71a5338297a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff6ad71d-e168-4ae4-b51f-5c50dbfeaefd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "15e19426-0712-484f-8ece-23b17eddac52",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea027daf-475c-418e-9c82-230723e82773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e1989b-4dae-4928-ade4-318d5a4d8fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddfd912-d995-4f55-8d72-36ae19ee3409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ecab7bb-2960-4253-9ec7-cb351ea7d3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5189efbb-d704-4b9a-9577-21ec9054e9d8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc26a842-5116-4f96-8ca0-803fbfadd208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ef60e7-8fdc-41b2-aa71-0cfc94da4485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c014acbf-9f26-4907-8611-cf3cbc896e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "782ca81e-6c80-4256-b000-4d284f59c539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14895200-b563-457d-a425-d49470023f25",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff13ad33-7f9e-4c22-820f-1dee972a2908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62791561-a453-4536-a984-6bde5e03364d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c4499d-7c8c-48b6-a3d7-5ce7b8743745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a232812-be78-4f1d-b8dc-0aff30088087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4b4301-e890-4cd7-afdf-936896dd0bfe",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94b7da2-c648-4ae6-9589-cbad108f9a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667c546e-2682-4f26-b40c-cc1dfe6c886d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79797eab-33a9-41bb-90b6-8802f3b46fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2931f212-9493-4a4d-b2a6-6cb842c0e057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac4b938-a368-4b5b-aa6a-a03934a68993",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7abe37-b950-4685-8951-5904a6c7c2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c12cf1-826a-4cce-8819-35ab976fbd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46421d4-7cfb-4580-8d2f-19c4889d99bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19b4d86b-0d07-4a62-9c4e-1f3f71fd3c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce4b96a-a024-482c-ad53-1733f49aadf0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db74a19-ff75-4d5f-abbb-fdc73ca7c89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94dfec20-f77b-409f-b5eb-99e0a2a9c87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae6e6e4-5d2f-486b-8efe-56cb64833afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "390ae331-c8b9-40a4-b661-95327d10cf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ef4466-610d-4081-8e4c-923b097cd96f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1957e4e-df2a-47fa-8220-db8b66875015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f994ca-2f1f-4284-a29e-5816333d81ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979d30d9-ef69-4cdf-852c-62b1730d1f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "340ad7ee-1f50-4d9e-8b8c-2187861e51ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5de2a36-ea6b-47ba-9933-e93caf200798",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9471d864-5333-42cd-919f-9e48e123f0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65acf3ab-a0fa-4014-9d49-1af34c3f1479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651b454f-d6a0-4aec-971f-dd12b45482ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "747575a1-d874-4d0c-a154-90b969cbe502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a4f104-3732-490a-804c-0109426b1f36",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d34004-ecd6-46bd-973e-c2afedfb9ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9e1640-1aee-4381-a643-1feb4c6da6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e08050-b96c-44cb-8828-dcddcdffff54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eecbfb91-0c22-42eb-a1c1-eaee87765a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594d349d-172d-4320-827b-8190b08b5185",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e10c1f-37c0-4844-b580-b2a93ae60f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaaf852a-d48c-4e74-a554-f19db75e0426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bd7ab0-9bf4-4b8b-a032-91bbe2050707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f250fd77-f89e-4d2a-a478-5ce0c3c49e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1463182f-2316-46d4-a401-f04c92bf9d15",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb572bb7-8310-4864-a7bc-12cd1928a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923103fd-10cc-4a3d-b4e6-d07ddb5fc25c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5401610a-9456-46e6-a60d-cba7fe813736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb872744-0685-4526-8558-8218d819bdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea9c076-a75a-49a8-8240-a717cb8745bd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3277c227-d75b-4ef3-910b-28e0f112d182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e502aea-5102-4633-9bbf-38446a976a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79d74ce-fa07-4fbe-801c-fff4c72df962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc7f05fe-db4b-4d38-b01d-644562a6d374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b2a5c0-116e-462e-bb93-e7cffb5c32cc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0431a0c3-96b2-4b6a-830b-53059dfc381a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8cde83-5285-4b9f-b511-f9a3c05b444a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3fec7f-ac91-4eef-b205-2606c5486e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f32f6580-796e-4b17-886f-c23b69ba6432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f465325b-7fa9-40dd-8823-4d8b33b7a5c6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40e2f55-0d6d-4849-811d-eb064f0db1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ece7ea-eb7b-4069-83ad-27ff0ca71418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe90124-2ad0-417e-979d-5f3327cdc009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6eab11d7-7f1e-4bc9-bf9d-6e19fbacded0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344d2a9a-143a-4d54-ad94-a3e0c8dde6fc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e88e0a-8104-451b-9def-89b9db49435c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a5e004-5787-434f-959f-bf919886ac2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2161fdbb-3a79-4365-8a8e-0e46e29026e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e099d7d-a702-45f7-bf51-f9263308c512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6074c7e6-3596-4d5e-a73f-ea5aee43ba87",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4a60ca-7581-4862-bb9a-c90ebf934cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d36b23f-0cd2-4a32-8d7e-08e757f70144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7932dc9-7f99-49ae-955b-932b3ddc510a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbc51a81-ae67-4d2d-8edf-b6701b112c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d79fed-737a-47e8-be19-d38f55fac131",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbe4c79-05ef-4d7d-9760-85dc3806a0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391f6a90-458f-4285-a099-2930b3376448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df8224c-6bfe-4122-afcb-df11c47fda74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18fdea45-6774-4a18-ab65-eb082a26fb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f5439e-712f-4734-90e9-906d21e75dee",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcc32c5-d828-4585-9d27-1a5bfe839b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62946b5-66ea-4b33-afe8-105fcb375849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7c5a73-e94a-41ef-9fd5-c5d135d3aaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1d46b0-7ecc-433c-92ae-73d6322dacbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d9191a-8791-4353-bd92-8d9cf315d1e5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc5aa77-7dae-405e-8407-af6ff8614acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e1492d-de8d-4da5-ae00-e16039ca9321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5212711c-1840-4481-9bf2-7a756d7c6e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad6b731-bd60-43a2-a4bb-a8bad1e8e70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27f5d47-38e3-4a0b-a079-2779972e9b8b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce660e2-12db-4bb6-9138-030a032c1596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4dde516-ac48-44db-8c7a-d138c68bfa7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0194c91-d4bc-4b6d-95f4-1bc038e2a80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e93bb19a-bb7f-4b7e-b3eb-b1e18ccebe3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67358c16-3e1f-4b06-8e58-45aa293ba23c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c648cf-f9de-46b7-acf1-46062fa1301d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdd38e6-8859-442e-8ce2-2dc8a46c5c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70504e3e-235e-4905-a547-b65f81c7ab28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9247d0-1283-4542-9d72-e747a85ee991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08912a63-5e9d-457f-8be1-055fa6d08262",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a72c15-8409-4677-87ac-1e0ead4f83c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421f362a-a010-4063-9ca7-a687e2ff6ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4439c6e2-937a-4212-b423-72bbb9de3969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf81d6ca-804d-4aad-90aa-a54208c67b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dd42c8-782c-4ec6-a3d0-3b5661ea9cc9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd0a10a-f80b-4431-b7c6-25a994534859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3fce13-a47b-4515-b945-c47435d4bd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6bc218-df77-4c97-a190-e68698456270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "160e4b8b-0e6a-4890-a2bd-e7ef66ca6028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c44b01c-e223-43c0-9166-83513567b1c3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3d1805-b5ac-48c0-a9d0-c9eb29c595ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e0c8a6-074e-49b8-a03a-485a811088f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05af1558-c68c-4fc6-9056-d54485f46597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6431355a-00df-4a33-a1d3-16bd4a94433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d74c6e1-56b5-44c0-92a2-f5a3646d588f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb57d5fc-16b1-4bd4-894b-9e2bf276a825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769edb14-0bc4-453e-9d0a-f5b94c3a46c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3fad878-c5a2-4138-b5b9-01228f981da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b97bb592-e9ce-4808-9879-5ce43af6408f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805733ba-3460-400b-bfea-cb0251acaa0a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58bd0b4-fb7d-457f-b087-dd4ca705937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a4577f-ec51-4cc0-9c48-ed662b4de883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1277cb-4e52-4182-b9ad-ff4b4bd623f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e19670-0d06-4948-9e7a-548da770c8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e18540-5151-4d90-8d87-d31e4acd6d13",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8404a8d-60e7-429c-85ce-0bb5ce467060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8eba22-801f-4baf-bf41-f7488f3544ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67e1478-0caa-4bf7-a558-a3e9b700cfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6bf0ca-8733-43af-8305-8c044731a3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c0e977-720d-45ba-a155-73c99b745aa6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078d8d14-1d10-4c1a-bd76-ce75dd8da3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea25d0e3-119c-4fa7-b0d8-6f5c3b28912f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6550f83-48fb-4273-9213-030c7034c27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31dc5a6d-6d7a-4827-a65e-4b4ecaa09c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48abaa2e-114b-4f63-95b0-0eb46533187f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47eb809a-3685-4a77-9c83-e6eca43795a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e629171-bcf9-4dc9-a195-943c256142c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86af629-59a9-4cb8-a50d-305ed7758165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3367549e-53f8-406b-8e36-ce38a6facd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9dfc51-1aba-4789-8771-a711a0b58e46",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2f9208-ca2e-4f4c-9b6e-b8e47c021743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884a7541-8e30-417f-9472-e2c5ecf2fd34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337e122d-632b-4698-8742-5f807bd7dc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a6ee200-f92a-4301-943d-b88e24344ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b9c273-aecd-4472-9d84-9408301c90c4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59399254-8bf3-4267-8a23-3e5d4c769931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3099e1-051c-4108-8b50-6ee81af1be8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39a0ef8-3531-4571-bd63-0972ebd3c48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f15d491b-6744-4ffe-ba42-3aca57f1e54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f67164-478e-4a70-9855-06c91da0e0c6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b4f8af-292b-4a5c-bfdc-c72d7b6e1b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8420519-3426-4f2a-a4fd-90518b640f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984d9fa2-f448-4b11-af00-a0f1c125d764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f199eb1-c44c-4593-84d5-59e5905d3fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784050ea-857f-4479-aa6b-9f37268e9b36",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69beedf-c707-4870-bcb4-d576a204ceff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2e8b33-6a48-45eb-9004-68d6c6aad0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c922a0ce-2c70-4222-9680-449737f324ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19370267-d2e1-4b99-9222-dab3502f3adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef267c85-cc0a-41d0-9477-c51a924279c8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d108f2-2f33-4486-94e2-e8cae65c1a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6160d21a-3a97-401f-9f51-294c40b0977b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f194b80e-7a39-4054-b075-93a0d6e3b09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "434e19a9-e6df-4395-8385-84b17937b7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed3f2ed-e1d6-4853-859e-0f31f21e082a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25bb7a0-5664-4453-939a-a0af017fe666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "942694da-8e71-4ffd-8e0e-dd15ced27b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23986ef4-7f1d-413a-a903-84f004ed61b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ff532d76-e886-4a7d-864b-6669017c57e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2c4c2e-5f85-47c5-8b77-608dedaa8de7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dc5311-4985-401a-8873-62dbebfd2e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6605366-d371-401c-91db-7781a598c164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c2654a-1096-4c89-9289-6b5e876db8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85205637-6929-48c0-bca8-9838f63be216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8312f603-5e59-46f9-9011-5f328ee17efc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05df713-aec2-4596-b6d4-c9c5dc10ced9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b260a288-65ea-4d46-9bfc-9671634230ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d9d0fd-2780-4635-bbf3-6e8dc188e1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a726a5fd-eb7a-4d29-8af7-0ed2cdc49cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a6202d-a762-4706-86e5-55e554eed6c2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4d9ad1-8ac8-4b41-843e-7c855f18a2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5060492-dc5b-4cc2-8a1e-7f7571d819ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0c9d44-52d5-4b9f-849f-bcb1e994c5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "37462cad-7ed7-4b1b-a9a3-5f51afba5706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761428ef-9c53-40e0-b5cc-636a73dafd78",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df49469b-1671-48dc-8e76-d678b8d89ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95a1c07-109f-4b6f-9978-2cc41e5ffc0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497c3dfb-c68d-4be8-8f05-53a79a644d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "92cb155c-cd50-4f79-a543-f3f17b7c1800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2de65f9-2b66-4967-b726-e590d8e98435",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45df5b5f-c32d-45da-b6e9-28a8191a4673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8541763-0613-4789-a435-38179a8543ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e883b6-69ad-4bc5-8188-bf1caa6be1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d620f11-1b4e-4ed2-ba2b-17170ff2cf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b11783-4d27-401e-93c0-440d316f0ac2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06f117d-af27-4f57-9db0-e8aa0bd13701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34c3767-221d-483f-9265-ca5b80051f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa0ed0c-284d-4b54-a56f-6b22b10a566a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4abac739-d48c-413e-b2e5-5ff5f42ce57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000bb12c-313a-467e-a361-2b9698f717ca",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9db83f-e4f4-4a6b-b12d-05d0513c1173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8cd2fb-5d41-46a4-8233-c8e4619dc1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c40bd52-4b24-47b6-b625-6891b5c03f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "69adbdb4-d690-453d-92b1-8510fa6be387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a77642-236a-451e-a72d-2c4a22b8192a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118b49dd-77b8-45fe-b1f0-1345476a38f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de06588-6b6a-4b36-836f-abd1b1a15598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b789dc7-6c03-43b2-967a-b6f65be15762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca73f10b-318f-4afa-9ac8-5b651423c91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c77b30f-492e-4947-ba8f-bfc75618173e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65a046e-f87a-4b26-a86b-a905c8d08124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932d9bb6-0a73-40fc-b1c3-820c2ac7a02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff19664-4e92-4445-a0af-a9bc68ce781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ee0155-916a-485e-aa7b-5ac2f3c0f973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa99a4f-6094-444b-afc3-139378ff00b2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40141f7-5f3b-41de-8586-2755b67ce357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9721cb78-6a69-40c7-9d87-89ff89e45d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2c8255-748c-4502-b0b6-0186b8d2989e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3e32c9-dba5-4bc8-b281-ec2a504c4dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1389fc9-dd1c-45ca-a1ea-b03d8dcc58b8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154722bc-e8a1-4c13-8bc9-ed3d5dd59213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8890e2-3c6d-41b5-b344-739518153e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb7d409-2c52-41ea-8945-3a467a89f469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7269007c-60e9-445d-8fd7-adc0e77729cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4cfb9d-8d4f-4bd1-9b4f-845881e4d0c5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a34583-38bd-4478-8a43-f672af767d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50379012-1d11-4b97-bde6-4f9d3f356dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb02d50-75a6-40ee-83b4-4e44414e3798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3bb1e39-9ec6-44b4-b991-f095100611f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c5e932-1527-4ed8-9521-0482a033ec9a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075a1f73-97d8-4133-b776-086c6d247a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa6b609-f17b-4896-b30c-239f14d0e31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a93ac9-9aa9-4f74-91b0-c4d250df15c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f891e8-6401-4593-9990-bfb2d9ab51f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7983ca2a-a0d3-4179-98c3-049dbf4e3bc5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f408f9f5-248e-46e4-babb-b839505336e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9256c6f-5acd-4c64-a8db-0be33acfbc14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71772bb6-03d2-463e-b165-cb2cbf86b20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf32e51-d2f0-4d0d-997e-06cecc442170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40be8b9-6a88-4c57-a0cc-95b63e4bb072",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21406223-a332-40e1-9054-6002011d940a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3261cddd-541c-46c5-b304-00b415e75fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6704d63a-dbdc-4253-97d1-2fbfccff2409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2a63cb-181f-43ed-a36e-56249513c551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1acf41b-508c-4860-a2f0-b244d92658b0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c361c26-ee8d-46ff-87b2-7976547d9dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8abf6861-d87c-4aec-b2ff-4f848aaf0d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cefdade-87b7-4a56-b307-21992ccdea24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4848f2cd-ad87-493b-b752-81929d446d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0a051f-3b51-447d-bab0-9446ae5059be",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0bb823-f4cf-4881-a27b-825865976d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8b25f3-8f68-43cf-b4a0-6f1fa55021b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20314da9-93b2-4813-bb47-c1d343e41f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "112131f7-4a77-4f6b-b88c-4a58acf6b1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4045f7-6324-4562-b4aa-bd5e7ef89dde",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9184050d-d120-45e9-9f01-b73b56b63620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c92b5e2-c88e-407c-8e48-efe7be9532f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4bddcb-9978-40ba-82e2-7b9c97f1de97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a16bd67a-167a-4526-a7a4-53dfb9dacc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbf5eb9-6896-4b1d-97e9-a309d3dde118",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa61530-34d2-414e-8e50-f405bba97e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ec7bdc-260a-4e32-9215-c1edfd3ebf7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2e7edd-f054-4417-a4d2-a69d660ceae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32e3bcd1-093a-4ac8-8d7e-59c5fd70d552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fda13e-006c-4650-a84d-d056eadb3534",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf6a5f5-66f0-439c-a160-44ae2f38ded1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecc8cb4-c716-4a94-92fd-f9e4b379189b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913ab045-8dfc-4d30-8592-3a49774d8e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "106a33fb-2789-46db-ad42-bb97891d3995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90730900-445f-42af-abe9-9c1114155348",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c45181-dc3d-4bfb-b8c4-a8dd802d5ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6c479b-ee8f-43f2-a3af-d770318f0fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22b3a4a-4f09-4eb1-a6f0-9ceb77ebff94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1405b9-c1a1-4086-8380-f5ff80686129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b0ee69-5f1e-465b-9bb4-0a4802b1ce68",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30364b9c-1f79-4582-bfb2-e9ef91c42f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45510c61-0f06-4f14-9a17-16cb38c4358a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c91a713-e44a-4ad7-a783-905080a4c822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6959a026-f2fa-49e6-b66f-dd818a792bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af54b935-4fa0-455d-82c6-86d4f959681f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7aac1d8-7ce5-4eff-bf9b-84e19f4e060e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2aead2-d454-45b8-8330-d278cfc07246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2478e590-de09-488b-8f3d-8b1e0705e3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "930ffe85-e116-4420-aab0-bf23db1a8dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60594ef8-c02f-4596-a71a-ec88ab00fbd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e7dc19-2dce-48f6-8317-2fb51f839315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b07e47-63cd-42aa-87f5-f7783fd73c47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac559b5d-de45-4667-83be-5a46d0ebfa4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3110685a-f806-4f32-b8c0-5ef6c4789298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbce0399-7c5f-4c8e-aa8a-5c3e44a29e20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93439160-e0cc-4de5-bdb0-96fdf833f2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d85ded9-6d29-48f5-ad20-4192b9647b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279b8171-4d26-4664-84a2-b94e787242bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4389293b-6262-46d1-8f81-c895d8295f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb7f551-040b-49a5-9d1a-950c8e231dbd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3290c46a-a420-4ff5-9674-a1b0251b5ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd9dafa-9cf0-4346-adc9-e3be76878a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39c7da2-cbc8-4153-8de5-49e9935dec9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6ac70a-d876-4590-bf8f-071f7061b330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2e02a1-3872-4e3a-aa2c-bbbc426f14b1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8adebe-a193-4165-9a27-22d09bc4b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd53b47d-d882-4540-8a3a-78642ac2a16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdc1991-af40-4d82-9192-ce6eb17f3a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3be65976-5164-4e90-af93-28b82f0eadea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8209fe8d-aaba-41d2-b0fe-26708db4a926",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710f8f72-5a77-4970-94c1-fba71b7de6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6939894b-b4d0-451e-a07d-989f3b079617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54e347c-a7e7-458d-8ec8-00b6d76a272d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "24bfd846-baa1-488b-b2d6-a0221605315f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02193680-444a-47d1-b785-cc6f71bbc831",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc822f15-832f-434a-8b8f-49d8e6fdd54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf5b0e37-0b59-4655-8ec8-aa9b92c7f857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdf847b-303f-4cb1-bee2-d0aa19552684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "621fb6b3-dcd2-444a-8d3a-76ae9d966f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067744af-f23a-438d-b1a5-76b76faea091",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0a40c8-9913-4064-ab99-2f9ce1091b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44cbca23-9863-4858-bd1c-77e37f1761ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec25109d-4df1-405c-afb6-a4a8feb97b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e841838a-525e-4200-971d-0cec76c2a1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0f8491-5325-4c38-bc0d-449d5154e01c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2adf22a-eef3-448c-bd03-86880f9d94ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60eb9de-a6ab-4a47-aff1-3e65195793d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f3ebe0-259e-45f9-b9b1-ff01db6330d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51e272a0-6008-41ed-a5f4-5c82265d2c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2463fe-068a-4ca8-9717-08ae2ed47b83",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911b024b-9b51-454e-a4ed-674553aae4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c956dde-d3cb-412f-ab5f-4480cc68d2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a836ad-8520-44d3-8025-a55a88205e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "642246f2-5771-4d10-aa0c-d542b5611ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491daf1f-1826-4c09-ab70-18adfa69471a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f236b1-83bd-418f-a14a-a353cc05e9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab1b44f-6a8b-4427-b823-24eacae14d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfac3d8-ea03-4efd-a8a6-ef91337ceb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe672d2-64f5-4b32-ba82-789dcb8bfbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590ebd5b-b6b2-4403-bb3a-15d1d5280f5b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ab5817-4652-46c4-baa7-3febe6d7ee47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28a2ab2-76c3-499d-af47-2e99e5319f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2393225d-4790-4876-a33d-92e298e38da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a056b026-fa9a-4f0f-824b-a816948364c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f54f6f-bd1f-4456-bae6-2b1a8e016d07",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4061a9-4ad8-40d2-89b1-ab682cc77bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9faca510-0ec1-4e95-9d43-3679bd608c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0bb6f0-542c-48b9-9dc2-5bd3f3464c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1bdcdb1-e357-49a9-91cf-0ab4f7e21754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438ab213-e584-4fde-8378-80dd37f2fb4d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a936ed5-48ac-4d96-b119-970b98e426f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a8aca1-63ee-44a8-870c-517455ebfcfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a1ef9d-8607-486a-90ff-3528ea3c97f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3249eb32-637c-4197-85e8-c9df80e2ab68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006f24c8-544e-44aa-9325-b83a0ebc497f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9606b9fd-5c86-4c22-8db2-694269b2f574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc7b294-b485-4125-a785-a96fddda411b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3bbb57-855f-4401-9b24-4769e2541b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7af12e-2922-4d2f-a6c2-3a4e608fee47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7033ec77-f4a3-4d04-91ec-d150e0f90a9d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f271827a-9102-488d-8c7b-c973c31ab41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8549679-0b58-4e34-ad98-96aad6ad29e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af0fbff-b53b-4d3a-9fe6-6e623f117e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01b3a959-2334-4735-8825-e11c4166c498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea584aa8-318f-49b4-bae8-1ebac0cab2de",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41411e0b-ff11-4fe9-b9cc-2c436e6c03b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3d9f92-a9af-48d9-b547-70a4ce4d692e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88965ece-a77a-4dd3-a2c8-88fcbbe4eec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aabb15e-714e-4bfa-855c-4305929823fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23ed102-2eb7-4a70-be47-a02f7c05c816",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07cecfe-ebcc-4d31-a6dc-9df4103e21ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ecea009-c5d2-4fa6-a8ce-a0d615df6127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087ea2fb-48ef-4d79-b93b-ac84f1d42786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "196deae7-f5b7-451f-8c18-255344a72afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1904f086-f884-4692-b5f1-1b322e9f2af1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee31dbc5-0040-4358-b860-70344c910e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18ee32a-5f25-4968-9bd0-acfe03d28a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60548dc-bba6-4ad1-af51-009303c48f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9251f2-ca75-49dd-b0e8-0897400ef7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1c264e-3de1-47b9-ac4b-815963bbdf1d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae728ffd-ab93-40ae-8105-2807c4dfb958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d210004e-edf0-4bbd-9544-8aa7ab0fa825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54ec8e1-c503-4c4b-8a89-0abad2c44414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8960ead-0a30-4278-914b-a11d4e16eda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851c8cf4-1978-40d5-be08-8bc5c72af05a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1179f01e-405e-4a33-9144-3e05d1d1b8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "664e63f8-637c-4d1b-97f1-0ae743f26b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b589103-e7d3-4cce-9e5d-339ba0bb65f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eea12215-26d5-4f33-9b30-270fc6fd99ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15209d2-0adf-490e-8ba8-01cbba3af110",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610cede0-2958-4b84-b063-32efd4b080af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70c919e-9edf-4155-9474-b5bead36dc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccc8c24-d957-47a3-a6d7-87dfda81aca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20a88985-8836-479f-9de5-eaffa6a00233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2c5ac0-2e97-4f96-83bc-833d43cc7f0a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a045c95e-a365-4e2c-bef1-f327372767ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf71f0c0-39e5-4878-85d8-e9659e47e161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166a46dc-517b-4bd7-ac4f-2598bb9c815e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2995df-cb16-467b-ba37-a5dcd91fd562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66799aca-8af5-4f86-94ac-ca8a29a5a82e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4b8081-16b2-4cb8-8344-fdbfe10eda9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a51f11-b0ab-4251-9ccc-6c956c93da7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77bb6b8-a354-438c-bca8-fd234ce7c4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0484b4e9-34cd-41dd-9cfa-47a549b9f206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede41a64-f58a-41d8-83e8-94b25b6487c0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33511d9-9e10-4667-a371-badd25892776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819cf55a-f271-45f1-bc09-0a6b7dcde8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7630ba7c-60f7-488f-975c-c8cea46360a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee20587a-fbab-4f07-8fb5-dbe18b334615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6bbb3f-d13e-47b5-a876-1c59f2aca394",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998d31f8-455a-4825-bfc2-fc2708334206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebb32d6-36c5-4657-936d-d94cd35b4c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65260c73-6924-49d4-8977-43ac8cf42b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ec1150-edc3-4dca-85c2-bb388bdfd2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a92e8b5-24b2-44f0-a557-401826a31cc5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903e0e4a-ac63-48c0-831d-3f11e7992eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0603870-6776-42cf-95bd-1d56961225cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393e974b-3298-4b39-8f8d-ce430f53ab2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "941d36c8-2e02-4dfb-ae2f-fa0d46d9b531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff64d81-f92f-45c8-b638-5dc5d7f4a5fe",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28302d9e-1e49-499d-982f-75ca3287145d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff75928-ae24-427c-bf75-b5ca0e977332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edce9c7c-ec99-40b1-a9e9-05bbfcab1b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c825fed-5c27-4fba-99e8-abfc3d602ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b220812d-c268-493c-a804-7c57528db1d1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5df2a77-086c-451e-8b43-8c1c7011ae41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b4fe36-66fa-4719-ad19-d93ebbc7769a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e4f911-9f87-48fa-a33b-c553b94b3e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ae5f7c-a0c7-4acb-9224-f27e9b2e64dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c506f325-8773-4b93-9d92-db52b3b887de",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819523e4-3c37-4e7b-a2b8-9435f0ec547a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5f58cd-3414-4575-bb00-d43f74e014e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9878ebd1-a25b-4811-ac59-3575688db239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e02b6f2-40e4-4e1c-af35-6109cefb3389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29494c1-5216-449b-943d-e1f8323233f7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cc1644-ad07-4de0-8a8e-71ff47145caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0483a3-3a7d-47a4-9629-558b44eb8ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5daa278-9081-42c8-b375-0a528b054f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "536aecd5-3f6e-4dd5-a1f1-063938840630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25da45c-fd81-44df-b699-4d15f41986da",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bccded-49c3-4034-b1ae-bcef46087d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b97174b-a283-40e1-b30a-b25339eb4cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe6eaa1-dd5a-4c90-8dcf-b0e4a0a7d06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "da34244e-aaaf-40e9-94ac-0d50e349384c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a598f1-8388-4ae8-8fe6-7afec143b1ba",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2faec5b-3c59-4794-a4f4-f4f773e335e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cbc4036-f49c-4238-84a0-76e3418ecc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f802f2-8182-4c42-be0c-2392f3f007c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "74e1afd0-9a76-431b-acdb-b98c8292e07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688bc7fa-e76a-4c4d-9bb6-6fb9baeca14a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe6abc6-9445-4e75-af5b-d4bf754fa823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ed982d-96c5-4192-b95c-fedf91cbe815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d423690-9ced-42a7-aa52-f57da1b7c450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba860835-e392-49a3-bfd4-3487f507f2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3f4f9a-6486-4e3a-b133-39d22cff59eb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d496fd-89ca-4171-b4ea-93712f0dd385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9565bcae-6435-4c5b-aadd-bfb66de5f196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58250b26-0973-403d-9169-dd1a49267f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "73951717-9a61-479f-9fe4-d8c1a798412d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f87f2bb0-c5d4-4951-ba6f-fb883c2d10c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77fccb32-eb71-4d67-a120-bb835647b49b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02815c1e-b1a6-4b78-b8c4-0f6b0e805dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b996c857-f97a-4116-93cc-487586234d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a39db0b-db10-4745-97fb-c7ea75b24419",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b3226a32-baba-440b-89db-e78fe17560f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0de2e8c-aeb3-46ec-a757-781a432678e2",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824e5801-de29-415d-931c-0b2d23dd3377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22f8cc47-44c9-43e9-a180-7077155b60af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c219f4-ef43-4729-ba53-858124aa9735",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "34a3dcb1-c0f3-4ab9-a710-4f69cc6e95a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d23a1eba-cf8f-4dd6-b28a-b4479262dc54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8cd30e58-f6e1-4ed3-9164-1650afd16ac7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c6563e2-eddc-4e90-a7b0-210f52bbecf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60908e58-f3c9-4ed2-b3d1-70f27afd8ae4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b6a5bc3-ddf6-4f06-8a0c-a100479c355a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aec88547-a889-4717-b670-80968d27dff7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "da56198f-84ed-4be6-840e-b32c96742b6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd93c23d-ebfc-4502-ad54-c3ec7176b00f"
                }
              }
            ]
          },
          {
            "id": "78ca5063-216e-4749-a941-093e79b380e3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "35dc2097-2a92-4d51-a88e-c1333ce58b2d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f2df9b8-1900-4327-9be8-36573ea42855",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6cf30151-bd50-452a-bdf9-4312eeefeeac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef378a1f-7ce5-44b6-8a6d-ceb565960c55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cdbc7330-4f01-4cad-80b6-83bf92cefa9f"
                    }
                  }
                ]
              },
              {
                "id": "18906244-80bb-4156-9bd3-23dd941f6aa3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d240b2ae-28c0-4c52-871f-2e14a24c0c4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f14c4d6-99a9-41d5-b9c2-13532d1608e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a8366a1-dc4b-4b37-ac24-03b78094f4e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e5b20672-5daa-4e87-b34f-010f4c7c9ecc"
                    }
                  }
                ]
              },
              {
                "id": "a7cde4ac-74bf-40a1-aff5-730d494e8349",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86b188f9-ca73-4750-8a5d-c68cc76fe68f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a2a7754-bdb4-4afe-9e96-63d9dd501d8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83a46f87-89b7-48d3-888e-e3034ca60f83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a7f7d86f-223c-4d4b-b4ee-4567db5a4d7b"
                    }
                  }
                ]
              },
              {
                "id": "26b3e3a3-36b3-4e93-903a-36210ddaf8fa",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3423eda0-8608-40fe-9ab0-17b3f3e89193",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8302cf9-e9e6-4980-a01c-44cdcbad6321"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "393f734c-07d9-4f76-8717-bef9ff672685",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9de98adc-5b1d-4877-acb4-3b528baa59ac"
                    }
                  }
                ]
              },
              {
                "id": "ee284850-2454-480b-9dad-2ce5265476b4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f101806-3141-42a7-9a64-cc929ed6042e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96f8b8e1-33c0-4b15-a857-6cb9a3bf9dab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "070066e6-2f7b-46ec-a252-d4de56aeb4db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c606107-b059-41d4-ac7e-36cd6cc704a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff28c48c-b482-483e-83c8-fbdf4bae6b1e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5da04d04-4220-4424-adb5-b664438ac0e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3a565b0c-f632-4d4b-9e56-c85a4963b96d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e86789bb-c40c-4cb8-9464-9ae2dab8895b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d5f5cb9-f696-4000-90bb-8fbbabf96e75",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ac2659c8-3db4-4677-91b4-d590304f11b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d30f090b-05a9-4313-a3c6-51f873449193",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "542a26d7-8b70-4767-b798-6efe367276e7"
            }
          }
        ]
      },
      {
        "id": "26015629-d047-4134-9af5-e6cdc45f5e7b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "34412fa3-4a3e-4f40-8c8d-52b0a8030a19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32b1db04-b304-4540-b8ae-c7b129f8f230",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "456c4593-9e92-4f23-825d-a4ab61fea693",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3444fe-0bd5-4c96-ac2a-282ef971e961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248f5b2d-fe02-47df-ae98-8aa261e9b3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb494781-1a26-40e5-8b42-77388b6c73df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "47845152-d3cc-437d-98d9-5681cc70b360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134a9e7b-b4cd-4e0a-8020-757e9b438a10",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7917cf6-c2cc-40cd-94c9-8a939563dded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94926a96-dba3-4724-9ed4-266fa21e3733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8d4c94-ead8-420c-a55b-951366ddbb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11b70b5-bbab-47db-a54e-ee397e6a1b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6d9bbf-457d-4c1b-9581-a9b8d4d5942d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea1a867-4383-48ae-bac1-efed30ae68f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da90da1-d159-471d-b894-1b490a6f0d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2401086c-6c80-4d8d-b0d5-0f73b5520bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67d83bb7-def0-41e1-a196-2f3c30db5bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7524f35f-a4c0-4758-9d1f-ae1c5ef94f19",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e0f349-31e9-46b8-ac59-1436474758d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436e30ee-9f3b-4892-9540-77c92533a015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6854aa1a-f968-45e0-89a3-396348ae62f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca36abd9-b94c-42b1-b7fb-398481ea247f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fce8b41-fa6e-4506-9db7-a81b6621506c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc1aad7-1fde-470e-8186-dbaeeb903814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71bcfbd-22d7-4391-a4b1-832c3dd4b262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a5c82c-8310-413b-b7fe-b1295269f532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "523278bb-b9d1-4d67-b305-a8be2a580549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741b94ec-a6a2-43ae-8c90-aab197f422b0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed0590a-c6a6-401e-8926-c459f5448a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e24d650-0fc9-49bb-ad80-b0fd55c9e8f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81e014e-7d88-4875-91f7-c77e5222bea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c570094-5bcf-46b4-92f1-6f5d5fe7648f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ea1b74-d99c-4004-8aa6-0fe6fd2ce9d6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acf47cc-84a3-4074-99c6-2e0cf7e6fd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515ee2ef-ad5c-47d4-957a-d4b51c77d20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af482b0-c59a-4e8b-a028-2cadb386d83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2e9674-4450-4a99-87a1-bc826b5e307f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45901e5b-d513-4576-9810-2801382d6d63",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6103dd56-b47d-4b48-ba4f-2a5454f294cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6da1f6-de9a-4197-a000-76ff3dcab7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db71c5b9-16c4-4191-9ca6-27389311c2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a09a5e7d-22ce-4dae-b25a-bf18ea4eaf56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fcea57-10c1-4e5c-a133-6ef9e4091fdd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb6825e-1ebc-430d-b0f0-483ef86bb722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385c6021-1207-477a-93a2-c3a679ef8942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bc7d47-a1dd-4640-af79-5bab418e19b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b67ddb1c-627b-45d9-98a0-e228ef711a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b290c49-f5d1-41f1-8820-23dcc766d9fc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62025f6b-fb58-4bda-a057-a30e45b9c0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a2501c-e0a4-4c02-be2a-f2c3d56843c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8732972-1696-45d2-8bef-38ec97f04b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd39e7b-58b1-4a15-b655-2934125449c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f617a4cf-df87-4017-b038-62af6ce770af",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ea49ae-93f7-4602-ba7b-ba53a02cf1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17876e4c-4e20-4172-a694-703373280de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e5d4ac-b0ed-456a-92a2-baf6817e36e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8822df-30db-42f2-843e-321d2fe2596b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecee3bad-ecfd-4007-a11e-2e329e220ed8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694d3f6c-0d21-48c1-8719-e267a61f0f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f74ae61-61c4-4970-b5ca-69fe0aead57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913684d1-014a-4efd-a14a-c72d08e60f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e36d4e-d5a6-4bea-b13b-e8e73620f998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db93d7f-b06e-438a-891f-13376700f917",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6bbdf7-5321-4140-bdc1-4c6ac27dff19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fef9aa-6278-4e74-90eb-8033124117aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec72dce8-da43-4da2-a3fa-e035278d9698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eec5bc5d-b884-4611-b2ad-d4054d34d5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b6e9e3-a14f-4e35-a7c4-89b8b44cc1ef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfddfa3-4027-4510-85ff-1f574d09bdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f1e693-f0bc-4cd4-af3a-b845f46e5676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c425f95a-5f4d-4a48-a007-9b76719427ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b057b28c-63af-4b00-86f9-eb6d1c9f7f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd40c42-01cd-45e6-858d-59a0ef37443c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc6b96e-0512-45d1-a601-dd43f019946b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d340de-d717-449e-bb7f-27e045369d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf964338-4b4d-40ea-9b5d-1df972ad9574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9636fc25-9021-4671-87cb-4467e6234cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152bd8a7-0b95-4393-87e4-108206b6b656",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c5951b-e38c-45b1-a75b-4fc995093b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc5d5e5-bfa3-4ea2-aaed-24a4c2948728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59abcc20-c064-4dcb-a6c2-035e0ab66233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "850c7588-bf7f-43ef-b404-799e21c5464e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edef6f6-5034-4206-bfb7-cecf1a164424",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6babaa0c-5d06-4667-9cbe-1f53ea842ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba93806-60d8-407b-9fc0-450d2e546b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa4007fd-31a7-4456-beda-98fc90160c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "741c336a-7daf-436c-ac2d-73967c8b2493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd51574f-7f86-411a-a774-6d525ec400d9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba058451-5d14-41de-86f4-327ed450fd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8709c9-fc45-469b-8431-71c04831b31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4fb347-117d-417f-a285-7ec29f4f8de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59c9137-d1c4-4eb4-9917-cfd268be7263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba0b8ac-c5b4-45d8-b550-4ef896086b4f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c5226d-dc6d-4733-bbd1-99db111ba5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dccbb9c4-d6a8-40fd-8438-43d9a95afd10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd085e2-4938-433c-9ebc-4aed25413815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeae2448-b44e-4cd2-8f47-d1ba8aeb124a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5df97c8-d59c-4590-a5a1-438e809fa332",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c625d3-8578-4931-8ce8-9b0ce06a0359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e6cb78-2029-4083-85e2-007122ae8866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93251d7-4ec2-4a80-8d71-f72a252aa3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd02af1-05ed-4797-8da3-6908ea5a677a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79933ecd-cb2e-49c2-866c-d5a6cd2b86c1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1292d862-055a-4504-b64f-02bfd036b0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6aa090-87b4-4476-b705-8e25d77a4bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6857dae-9448-4278-8a43-a44e83f66f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2f0415-471b-4341-a059-551a47d6fcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299494af-8cb7-4445-b3c8-bb3ace2f2993",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c79616-21a0-4983-bab5-dc298c85fb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067c83e5-0920-424e-abc4-9e731798d1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770f6651-907e-456e-b127-782e7c8bb360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65b95036-eae3-4b03-90b4-3b71de860445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbcd32a-56c9-4399-9b63-4a49559bab8f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b447579b-7fb3-419f-9d96-f7f791967070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2541d20-098e-4cd8-88fc-b578fb1bf86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b170ac-6369-40c4-ad69-7f51350b81cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5795ef51-5623-4c71-9117-8779865bcb08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d3c67e-5f9f-4cf9-9744-3f8141ac53b6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb48cf9-20fb-456a-ba27-88fe4b435618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade7c54d-019a-40f5-9dfc-bfd767157285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51e354c-3403-474b-98aa-15a83d7a397b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b50ef763-92a8-4d71-8246-8f1a2bdbada5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b35236-f08c-44e2-a928-17f5dc575b73",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42617573-fd3c-4312-9936-725cc081d44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263b7a32-ebc7-4be7-a8a8-148909a140aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb35693d-581b-4177-b917-ff754e134fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3ba992-372d-46e7-ada4-df423c1a4255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330eb57b-6eaa-4f3b-acae-254c4097c121",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f9cc53-3485-4a7e-aaf9-2b8e2429a017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a5dc61-52bb-4b76-8baa-7bd3aabf6f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91283ce3-ec65-43c5-8e07-c325e65fe9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d6bafe-3fe0-4044-a81a-6e9dcdd9ed00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29eb7d4-2d44-4c07-9919-1029a69ad14d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1f5bc1-fe0c-4b52-b3e8-a8018ec77007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87904bab-35c6-4803-89e1-2c373f111d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc12917-5bfc-4045-b6b3-08988cefde4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9026d5ff-547d-471d-b8e2-48cb932ef723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d83e85e-4188-4491-aea5-492b7ad3492a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44da68d-1eab-4bcf-8070-7d6ee23e7c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6303fb-ed0a-47f2-b5a9-fa843b41ef1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c5b53e-40c7-4195-a8a8-7fb7f3be24b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff551b31-ac72-47a7-be15-664666479f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a758074-3a34-47b3-ba21-2eb75ecbc7f7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d0ab84-a077-40b3-b317-2e3f5108d1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e802a1a-0f99-4640-bee5-d0bbf0737333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207ca189-421c-4b20-af67-48399d92e71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5852962-e637-43ef-ad7d-774e4c1f3679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7e50b5-e447-4039-ad4a-2217ad384eea",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f942016-7d0d-4479-9082-2f94c322ed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f436d685-35cd-4642-bda9-317a5cddf482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c75459-bbfe-4e5e-8058-8c61e2104a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e21ef27-f2ef-4680-b047-9d223413fee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7e78be-3f01-4eda-93b9-dd32096c959c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffe63b7-7cf8-4c3b-ba95-6ad3925408f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86aa183-23b4-47e0-867d-faf9b9c982b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331513fd-0245-468f-8b66-15d3bc5156e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "474a3c88-8162-4f1b-bd25-d4c50d99695f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc13125-13f2-433e-9ef0-9e16290c65f8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e70cc0-31c7-4420-b8b2-3f934dc54184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe29f79-942b-4471-890d-7e8e64877d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8992834c-2c8b-44d2-a9ed-e542c48cf84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0d1745-e8fc-4cf1-9bb3-92f510056fbf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b216382-0469-4743-a0b7-bd7cd999d4cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc2a2fc8-3f61-4b7b-9507-30f6be90156a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcbaa67-9763-410b-a033-ea6260260ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5e9c4f-348a-4359-bae0-a6c092b54180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "689e48ac-fa0f-46ab-b4e5-b2eb993a7dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9aa1f3c4-93af-4142-ac00-c9b9b074c60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ad9070-6790-4545-a5b4-2ac3912b1028",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74259870-12f7-4811-9550-158ada1d8809",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2a6aa7f5-4e05-42d5-8597-6fbf8955367c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25913d2-8017-431b-a746-e79edfc717d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2e19eef-81d3-4c92-95b0-fc9bc9d096fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56f263ff-22ee-4b3f-83e0-645ab958ca2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e34aea3e-f7c0-4cd4-b0b5-89445ddf7ede"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0eab54c-a927-4f57-9ac3-c7e0efb8f4ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "449e9c7c-9420-4c62-9606-3157fbcc2869"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5ead109-d123-4fbe-9bdb-7b255f47ea95",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d4bb498e-810d-4f36-afc0-5036d2d67cb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce1384c6-f25b-48c5-b32a-ab17080a186d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb498a0d-9e93-4a95-a390-d267f4303994"
            }
          }
        ]
      },
      {
        "id": "aae9d240-dc29-44e7-ba98-50d7dac7f201",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f835cfc7-333f-4273-9376-c94bf0baaa81",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8068af2-33e5-41cd-a061-c79199189978",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ec8ed3ae-0924-4dd0-9db5-b4cbf605a112",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091192d6-8a96-4b72-a2c9-4f4c3677f192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c66b81a-ce72-44aa-8639-21102460aea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fe7b47-ad70-4e67-996c-bacbebe41186",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4453d0ac-099c-4c04-9a6a-099688b5cd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef7d59d-5f73-49c6-abd1-591cf9590dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee1a124-c787-4e4a-93f5-ebb9fbf23f23",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c132c065-209f-4a76-bdfb-0a722e768175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4071b660-091c-4664-803b-5fd0736176d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458ced53-0da8-4182-a45c-6c60f86515a9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b49421-6b43-4ea6-9c68-b9f81962ea1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a8c253-39fb-453d-b155-5abe80c1ab65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c851935c-58f9-4148-a68e-307174ad9777",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcf6f30-e294-43d5-9da9-cda55db3d493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e927f27-b489-458f-98ab-3cac85aa0de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8719b3b3-ac43-44e0-b155-07cc07f43cb1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f619745e-1151-4d61-974f-434a46ab378d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7967b2-bb8c-43c2-bb66-180ae7f52110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ada3884-3c2e-47d8-9c09-fd386ff2b669",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc76cacd-7c9c-4a47-8725-d78c8b986390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b80d06e-db4c-4bf3-8aee-1f1eeb7bd565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740abdfe-f9a1-4979-932d-f4e917d34738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70daf765-8565-4f7d-a88f-9946ee8a39d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6739dd55-0954-4919-b05e-5d50e8c72bfe",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce2adf8-1ca0-45ed-9897-120b80f4eb2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf13f760-1063-450c-be74-e797bd8bce45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d7f995-d366-4197-ac6d-95a73ec57259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70878c6f-56c1-4b27-a968-cdbc80d990f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7030de7-5577-4e89-aea4-accf22ec2f80",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f290f46-6b76-4f03-ba51-e60eae21eac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc30681d-34ff-441e-b19b-564137111a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de89f4aa-b43d-4024-abbe-dc512abdcd3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80ac6b8-8fdb-4596-b6d4-ddb15dc63c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b6def3-eabf-4bd3-b833-f4134474d846",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44a2531-d658-4847-9921-00c942d6798a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5edf61a5-79d8-4079-af24-678f6df5f5bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828ec302-cb36-4a5e-b5c9-f1c44990fe50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1419a1-8888-4d14-a499-bb124074c1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1264b0-52f3-4e85-80e9-eabeef5c0c35",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab8a260-bca2-494b-96ca-c5f89de50485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643d1503-9e90-4e0b-ad06-6f827d93f64e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2fa32b-28f1-4b89-b69f-903418fbba98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195b052e-e0a2-431d-9dda-a134fb2aa5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659c7bba-9f27-49b4-84a2-baf2fcd806f9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b43957-6138-4a99-85cf-a819f9fbd23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804cb0a2-769d-4bdd-a2ae-afd187a3b1cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01884f4c-16b0-4d07-a4d2-da2bd51797a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4e7513-d43b-4f43-9b12-500ef84a8dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd9b56d-be29-43a9-8475-10d5e4b92bc9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db7a94a-cea2-4be9-aafd-3ad240fe8e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172afe67-bb49-4f08-9122-87b87731e90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea896b2d-790a-4e3c-a5cb-e3f920726b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973fa6f0-2e9f-4014-a6ad-8fb517cbde1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fad5c74-9c98-49ab-a814-951abbe6db4a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3af219-0f39-4970-bb51-283cb273d48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b338fe-9bc7-4d17-a005-ae86d7af4ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bc2134-22cc-4c34-b413-dc00ecb7b238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46aecf45-2e39-4fe6-b932-c3eac750f086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79b0e34-82c7-4e1e-8d63-91e116dee43a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db1ddb9-828a-4607-93ed-9f3c6d14a7d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93cdfb1b-2a26-4d77-b1dc-b1f173c97785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d4751a-2084-4f68-8113-3ff1f5230ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e350b1bc-7446-439f-b444-9165368a2d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be6c883-a02c-450e-bc40-7d9c1d18dfb3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bdcc24-15be-4bde-857f-140f68af1d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48fe24d8-c0cb-4b2b-8313-e5e003d2b13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f503ed99-ffb8-4e42-b17d-85002a850a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128ff60e-b17a-45a5-bc1e-d5f4c576b90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212df632-4427-415e-8368-72187c41431c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc0a827-5ad7-463a-b34e-631351941c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f7abc5-cd4e-4c18-8759-ac64ae7cdbd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7ef636-0333-48a0-bb64-4574c35472bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70f6464-c40d-4120-8d06-6ad3602d0188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597f7c7b-d22c-4a18-a9e7-1961587d7ea8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675e246c-7554-430d-b47c-eb5f24c49d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ece5b3-7d31-4ce7-a551-289beae2d3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7586d0-46f9-4054-950b-92b2fa62208c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56e858a-093f-42e1-881d-7f5b05dafd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f443c98-5c65-478f-83a7-4071704ffcc4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d23a366-3906-4521-ab1a-6fda1b1c6367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e88498a-5a00-4d55-9de5-f3e33795523b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb62ccc-4ab1-4755-b56c-0fc699681442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b67af90-328e-430d-b16f-75da724fd555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6234e304-2815-42ef-a5f2-3fa990ba62ab",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94f1cf3-3ba3-4571-8434-f112c291e736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689c78e7-7649-42cc-a213-bbe75c4f8ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9533c7c4-9fa9-4b19-9cf3-57ff8f9f05d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701011d8-f796-40b5-b414-2a4916c21009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ee36e0-d69c-440e-ba47-b37561a921d1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b456ec88-0a96-4be5-9ab7-2e46de2e323d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8916d133-8fe5-4d70-9a77-918fd1e92cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c46540e-88ac-4661-b6ab-15bb9889a8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09888b0f-5302-4b43-9ac5-62b8b3311a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd44d897-6c41-4dd4-80f8-c1f1ab94a684",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b827f2a8-a91f-4b58-a8ea-f22a1d7e80ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077917c2-c86f-4580-b46d-4f75dc7ed107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d01716-1515-4f06-9031-95b1d00ce497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9645c75f-299d-4b9a-900e-18c45d26dfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bc34c5-832a-489e-a05f-0b569f6888a2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18928de-da78-474e-b158-f6e4bd47198a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da171c9c-8c4b-4eef-a184-a5c74b18eb41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b50ef0-4f0d-4b6e-80e5-ae06deb502ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3bf687f-290b-4577-b9f5-293368d726ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af10e5b-ec5b-4dc6-9b81-0815fb77dc26",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1475fdb2-88a8-4b48-b946-6d2a613620d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8570db32-f385-44ef-9df4-db7bf70e1595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc85614a-4362-4bca-b682-54962497b0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52543a86-c9a3-47b8-ac1c-1dcdeb11b0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5453954-e209-4efd-9473-6977f3f475d5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350ece99-8565-4d65-8373-0c8fbb23d2d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a95c4519-5626-4d41-a48d-b0bf64e0a69d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36c9ea4-22d8-4a99-9009-07e8fc2396df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1355eba8-4d64-44f7-b892-cb4c53efa123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec8d31e-dadf-4d98-9312-07f9537d8ded",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11434c0c-d014-4cf6-9450-3ee022a1e49a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480a6c2f-8c29-49c0-9e50-77649d6d45bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c109d99a-e502-4c41-afbb-54ef2618f0ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf04469-903f-43a8-b59c-790ca14d2634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d03fce-9e90-4ae1-9aeb-73c987e3ce56",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be40eec1-7aca-438d-82b6-9f63cefb9145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7407e442-f375-42d9-a3d0-6348cf6441f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea2a8d7-8fa6-44a4-ba86-60a278fbe621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4c6c56-2b8e-4df6-958e-b4bbd1ad03c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af194e0-2dfd-4d3e-9426-62627221e199",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb48a5f-530a-4264-a877-0d1bc8709d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb275888-61ea-49b2-94c5-4f31dfad9eed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05341242-f1c5-4571-9aad-d83149573e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94241d1-1bca-4539-b1df-a3ead648454d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8754825e-40a6-4adf-b413-93b7342f7f4a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65b0ff0-b711-4158-bdc4-a21e4a5d20d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6adcc1d-7bc0-4547-9f3d-b4b3e81e94ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eaa633-8563-45a1-8290-9870d85cc744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c8d903-a623-4d15-b13b-778adeaa627a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9428a572-d61f-433e-8ed2-0a995b2405cf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b18457b-8b84-4dec-9a8c-4a4df1ba6717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e8b2b5d-64dd-42af-9b51-e9792b33d32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087c11d5-d8d2-4e7f-b73b-5f0ec91eff11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684ada4b-166b-49a3-b2fb-80377b5cb6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b53e49-4aa0-4538-950c-02b3b337be59",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a3bfb7-f5dd-4b0a-8bb4-4f2c15cf9a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceea0887-ec45-47cd-8f05-54add469ddb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b59d703-91b0-4101-8423-6e6229b282bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e309d2b-b36c-4344-b778-3680eaa9df9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea987a0c-7754-40d0-b671-bbfdab4f8b82",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930a270e-4d24-4de8-9239-4ffa86de9f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9c7b2d1-7960-46d0-bda6-1c64d15a391d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86798c0-3b54-43db-8e9c-c11919f7b794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a389b77-5a2f-4e66-962d-887cc465b6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a006325-9ecc-4fdc-a543-1e2dd5f3decd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d43c266-c22d-432a-bd27-db3192613c4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "857cd2f5-0c04-43ac-9842-b1c600e493d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f30bea-7a9f-43ad-9c01-8a43220f4548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62455a77-6822-4984-bbe6-93d36e233c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da7e6ba-1a5f-4c03-a8eb-3650d29e44ad",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab0293f-b63c-4bdc-9839-a6f7d9abcf74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df688f6b-200f-4320-a717-50008f1f93dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241cc5e6-559e-4283-8801-539a6bec0b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ffd26d-e482-46c0-923f-a052f3b0d09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2873d0b1-5bc4-4962-a25b-958d09f4dd36",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573a6b05-6238-4419-b7a8-b20306cbd203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c43611-4a92-4320-8d83-bc88b3ed6e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d612572-45bc-41b6-9aec-35fa3edec729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce14a62-2ad4-4b28-bec9-03b03122fba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78774408-1e9b-4c8a-80ef-beebc51089dc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e2f547-eb02-4d01-8052-59fb25f1896f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a13424-5851-4540-bfd6-ebcd7e9d6d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9961c96-fea0-40a7-bc67-e26856e645f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557114fe-dda7-439b-8295-68ea3dbe9734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2c67f8-937b-4a48-af2d-bda986595083",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07badaf-b3b4-49a7-b8d7-0401357d3e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a0e733-963c-4664-8c59-aae32308d749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008ab621-fea5-466b-9b6a-f98e8234e9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e68763a-e59e-4fa7-a57e-0f9e5aba7c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9246785-68e7-4f4b-8fe7-1721b3b64cb4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68336b8-f4c6-4b7a-b920-830314b0dee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a26637-c7e6-4aa9-987e-36414fb6eeb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "524aa69e-808d-43d7-87ce-3bcc28ebffba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbc6c2d-2b16-4e6c-8f23-418d22ee9342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edebe39f-353e-4083-9747-cd41636aef0f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349db127-3031-4b68-b885-28fdab16d911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677f24d7-8a3a-44e0-99f8-1e331d5038e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91845b83-168c-423a-858a-9bbbe0d90bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8804caa2-315d-40d0-8375-129cc1894d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ac5378-aba5-4443-b5c0-91fc67b7edc8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe20ef37-e4bc-4f4c-aacd-1ef01614206f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1d0d33-4c9b-4477-83f7-f99a62e6c23c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81a5d62-be6b-4822-a897-7b61b00ec960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559c75b1-e732-452d-8f21-30d18aaec01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91adbad-b312-423a-bcb4-2ea7408c7f35",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d38329-f013-4455-b6dc-498eafd0a61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "454a6ad5-973a-45ae-9528-7a5ae4754930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf28b22-57ec-4f49-92f1-a49334179dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a68b40-058d-4a03-9946-09d95b35f5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8ead34-a426-42df-9b08-ea268391bd69",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55854bf6-be21-4d82-b99a-d049e1a857f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eee4dd2-3219-4e95-9d7c-15fbfb7875c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738f28d6-09b4-48f6-920d-05d94465625a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4b8cb0-b33b-4b91-bcde-86e946cba95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb86076c-e916-4a5c-8f6f-471b24f2f94d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a51ca8f-09ff-4615-9cfa-f9fc6741357e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a2f1d4-7ba3-41cb-86ca-7edcd89ef7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f43ca4-6310-4478-9189-79a140a77498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a623aa1-124d-4be7-933f-3ac61797ff99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ea8bcb-2539-46f3-a8f7-daf83b809157",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512c05f1-da3c-4eac-8169-0fab19c1fd09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c7ac8d-bb10-470d-a87a-37f34c3c8470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c558f61d-934b-480a-a5e5-d3eeb50da5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59235afd-4d32-400c-aef7-d8e7eb4fddcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412b09c1-2be0-4c09-83e6-a9844a5c85af",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54ca069-08da-4a71-9a1d-3550ccbcbb94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698b1ae1-3a3c-432e-98d5-5e0398eb9b65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0b7754-a1af-4459-a4a9-4b172c508982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87998e0c-d3af-4d5c-b4ae-7c4e06bebbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c9dca1-eb87-4112-a599-ae5151ecbb97",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f09076-f018-499f-b5b0-01a76051b868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c051e26-5805-4b28-97eb-208311698fde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e7044f-1008-47c1-b501-ea46a16cd1f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c320a1-5ba6-46da-b9db-2736e9193167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9105e1-7837-4e5d-ba5f-81af7142abcf",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852921ca-4792-4780-bf22-1a7cdcf034d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752f94d6-3479-4f18-824d-ee1f79b7e72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73201a87-c8e6-4096-ace5-6316e0dbdbf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb805f4f-068f-40d7-a81a-0ad4c21e6f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd09ea7-4d61-4a35-84db-6f087e7546cd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ac5fb1-7262-411c-805d-15798a79e78d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d31415d-9f3f-422a-afb9-9dd82537532e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a74fe84-eada-4173-8420-42d47266d92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87bb635-19e4-4950-988f-eedeb943c249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3118f4-325d-49b4-bd59-2755bf28aa3c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad7f3b7-c02c-4916-a2c0-8b9a8fd80fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ef712a-98c6-4c7d-a827-e2d0a4da0684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b717301-6ac3-452c-be53-6526a036c32d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f41237b-107a-48fc-ae81-28bdca397a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60494215-38e6-4c7b-acfd-600ddfe47fb2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db7bd8e-ca3d-4919-b823-07d6ae5cfadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563036c7-5937-46b8-9b8c-c349750fe5d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19482b3a-6787-44e5-9ffa-3673fc9b15c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "507cb9b3-9af6-473d-ba01-4b11a2f2bba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36846529-a11b-4e08-ba94-bc81b73686be",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8f7ca9-4835-4eaf-8d3b-24e3fda83282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faab43a8-7522-4b54-b647-77bfd930a398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff72e78-46f5-4df6-bb81-e2625c0ef1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b779e4-2b43-48b6-9f53-cbf1aaf13dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e73f19-aa22-4ebe-aa9e-9eb639eb97c0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c86ec1-13c0-4562-9292-a9cad185eb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46348f5-097a-4060-b06d-9d93baad044d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36895e7-a1e4-4671-8ab0-0023b871998a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82198bc-aeb6-41b0-a5c5-b4b97417d507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566d1a1c-23e8-4a67-8d92-e62ff5a8c182",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0413740-2e36-47a5-b5eb-b49333f4bf99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fc8f10-92b5-4514-8ae1-4819e34c34b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f772c3af-1550-4a68-919b-ce7641bd2638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e456445-ae69-4ef6-8568-cb0c2d237818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ce8d90-e2b4-4f2b-b50b-051b2b430c7b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac858c4-a91d-41d6-a7d0-8ebc24d45287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5755d9f-5980-4a64-99f9-33e103b5400b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18831cd1-212c-41a4-acf1-c807a33246e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a7abd7-1efa-4460-8771-5100a1a5d2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b63ae6-36fa-4f80-9b84-fc0891765f54",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b1ca22-8cf9-4005-a5ae-6fd5e978b9a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce390469-b422-43a1-9013-62bb42b59329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7631903-6f4d-464c-9d97-a61a291ccbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42de873f-1f59-4e3f-af85-2ec63329c643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe92fd3-a405-43a9-af57-c3eb11a556be",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9097a769-d4ef-4f99-83df-2307f6c25cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f31d9e6-ae3d-483d-a652-1296635c1704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc709b74-42a7-4b34-bc09-5dddb3b36655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06589db-8a8b-40a2-b71c-e03e3cd2c304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de3cde9-28f0-4d40-af73-ae818b56594a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a1a5a3-0fa1-400d-8917-f4bb78794c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8d0e25-6093-4ec3-a39b-da06b019046c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5d91db-bb34-4d08-a28d-e67ab59db2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63feb4b1-a6db-4a05-918e-7044462f3478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7722ebc-fc40-47e4-91da-3a7029bbbe90",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe57ca6-c651-4276-b9df-1a451c45ea6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bd1199-7d0e-4811-9e55-cd79c7f6952a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c66ff40-0ea3-46f1-8e8b-530a422874a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad116153-6b4b-447e-a306-90d84c6ae7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777616bc-6516-4164-88a0-92d77f71f2e6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a86a27-e532-4cda-8f32-a4ec13bd6c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feeadda8-168b-4d20-8735-2b8ff79735f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a75021-1f97-445e-ae98-fcbf17a7f07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f0eef3-e2c3-47a2-b8ff-fb5e29149bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363f3f74-ea47-47de-bf6f-ad8cca2fbd60",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed64b76f-62ef-4cfd-a558-de16423fac4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ae0741-b142-4847-8924-60a3f17ea55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a8f0c0-915e-42ed-860d-b22127f92375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a99730e6-431f-4e2c-9e9e-f48c90ea1027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581a27c8-5192-4e5c-9b0c-e91eefc27501",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de266d2-52bc-4d16-8b19-b2df9637b12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1fe5d1f-e186-4014-beba-630fab361b5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b12822-f419-4417-8b33-c9c5d1a70d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8784172f-f52b-43aa-8ffb-567aed9f6c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f480654f-a5a9-4491-a692-7b44c290e5b4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260050af-4859-4859-9535-c66000bd3fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e3e0cd-0d8b-4d89-9acb-188801d9110f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb61d29-1201-4b9b-9d61-2fe55f5d45da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "635dc3b3-f5f6-423d-a07d-0fc2f0d7e96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f99abc9-801f-444c-a253-c6bc9c9178b7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d95e25-f03d-4a50-b17a-0fa3f5379107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0722b2fa-6a26-42cd-af9a-f2f696e60900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56987cdb-df72-43c0-9c18-9fe94bbba536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff17075-a31d-4884-a1c0-aed11ebc9169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e238096-e590-499e-b2b8-3e47d1cc1343",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3b954b-cf6f-49d2-8cbd-df2ea2d23cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b386786-f763-414c-a29e-a443614eba4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487eca6a-2f15-4330-89a0-0b5556485e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee40a52-1d90-464e-a77e-7e0c8c1d7ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6fd8ba-b501-40b6-87ff-5470f0d0c492",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca266e8-9eb9-45cb-9c48-cb1e110070f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a5af90-d99a-419c-9627-5ff4c42c5a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bf9bbd-f256-4d69-9022-8029085c0169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef459f0a-2816-4c40-90f6-337955f90039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f007673e-4af4-45a6-b81d-3b89e9fa04ab",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e0645c-0e7a-4a02-bc11-76475afb1035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c950d15-a6b7-4beb-b54f-0fd2b02881b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f45636b-6866-437c-b28e-d69fc2618bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08372f01-af23-4978-8ac6-71b8e93754e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c50888-4b53-422b-ae1a-3fb5c0ec9847",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a139b7-0b29-4852-a25d-607085b8a018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62881ec-d34f-410c-8dd4-950fc13d2cad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dcfbdd-3234-455c-9449-8520f8d3cf12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58a592ee-1b89-43a2-95f8-d467487c948d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a2af86-0f8d-4e2d-bd28-fe8f1a4d0c95",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f855b0f-7bd7-4c5a-befb-f313240cbf68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a364f82b-6194-4602-b643-e13ba6c8ad87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655b2898-6793-4925-b397-1d54ac99a722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "374decaa-8ce5-4b0d-b516-a233c90a9169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84795861-1598-455e-a49c-60ec933411ec",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dc0735-ba9c-4228-a484-7f513ce0fcc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a11aea0a-eb8c-4ac2-9c47-eb8634642a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3caf67-f6dc-4ef5-a6c3-4a40b7463112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922855a9-1ee7-4211-9cf4-2ca3b51488ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35328df8-bb64-43fe-a202-26dbebda128b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba63f70c-406d-4196-a189-b824e82960f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f8f882-dd89-4a55-8360-9fafb9144a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19404772-76b7-4ed6-a326-ba56c3488473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129106fc-2a57-4a13-9c7a-78895428f0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c337980-3c6b-4168-ad3d-653ce6849aab",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387d64c7-57fd-4584-b3c0-8bf7439b3a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a6dd41-6a03-45a3-9a34-d341ca89bf52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc670b6f-4b37-4093-b8f7-4253d2b6aec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fefdfee-dfc8-4103-b9e6-c183ac7f6900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0490153-4b09-4487-834f-0fa85a53e9a0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69841152-9441-4940-9534-b073832e478b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce32d02b-8812-4d0b-8ad7-7ae16fee83d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28de6a0-8303-4a8e-a1e4-ed1075aa2233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba00697a-c412-4211-a62f-0a16088effe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22f35ef-a917-4853-9df2-b217dc0eb579",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434fda88-5e3c-4dfd-95af-bafd0d64c935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62878210-6a93-4297-b10f-d8a760d37ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6000d3b-d5ef-4b2c-a36a-56e9fedf9119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92603651-3257-43f3-b6bf-037e49e452d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1e2b53-5183-444d-ae7a-929e807fddad",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b303eba2-f11f-4cda-98cd-e0886891577f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d646b49-ffed-4dd7-b207-9eab5657b96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272487ca-3c83-49d2-804c-cbe3ba559ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484fdd36-bcb0-4071-994b-588aa82bcd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b64f7aa-e1d6-4b4a-bb2c-5f51ebb672ce",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d859d586-7f40-4595-aece-c859e25fec02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b12794b-9f98-40be-86e7-e78396968241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a35153-936f-4bfb-b370-1efbe79b78a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e11938-7cc5-40e6-adf0-70a88d80822b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3f9da9-39fd-4d3a-ac25-2d088acbb446",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17750d0-8a0f-4b81-8175-77b35bdaae27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "007c924c-9fe4-4277-9b2b-0f66d4b14339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00e6f73-7530-42a3-b5f9-1b5522199785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14a03a2-4d34-4ba8-9b4f-b1722fcd46d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cd620c-c948-401b-9c5c-bdd44f526265",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ed09bb-6b6d-4320-a234-a96f2f08fa1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c59216f-45cc-4b6b-89c5-04c2f2bceaf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51beccb8-acd9-462a-b104-11e01ab9e1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a00b26-a70a-47de-8967-9dfad767e007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2048ce-b06c-440b-9505-cfa8fd36a1a6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b749e5-6257-4911-947d-a1aa9a4c92be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "661cd281-4363-403d-a0ba-1000b63abb35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e21b3d-90cb-4525-b7e1-a3f6067a1b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e984014d-9359-4326-b937-6215284d8a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82323a22-feb1-4168-90e0-f5372d739ad5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4d0f9c-9372-499e-9c75-cb7c33780e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd262af4-eca5-4e43-9479-2ae727bc10b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8558727c-c71c-463f-8cb6-fc8bb43949e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2fdb78-904e-4791-988a-8c88ab278e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515d6b09-2937-4f0c-8c31-bd7a52678424",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccb4a51-1aba-4792-be90-2702fe107e1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85bce1ba-28da-4b8d-a0d8-ab03d6b372d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c39351a-1313-47be-a4e8-5ac9651386c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce7b47d-78d5-407f-b804-b4942d304544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d73133-c1bf-42b5-8e2c-773f7ba58641",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c432f78c-6731-4978-97e6-3078a22329dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8deaa3-cbd1-4d24-b91b-d4fc3d2a81e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc9727a-860f-4880-9b05-8449847c0da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d4fbda-ea39-4b67-8c0e-d3409683c94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0068f6fc-6d9c-47aa-aafb-faaab0dd4d80",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb3ad54-b65e-4de9-ad06-1b7fdb7ff718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67028694-4c2d-4f69-b702-100bcb406abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b2dab3-1c23-427d-99fa-26e502b4f9ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4f8cfe-02e0-42dd-b849-1a5a4c32a6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc9dfa1-f3ce-47f1-bad7-9647059c7a65",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20e70ae-0d6a-484e-99fb-09efeb4724b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed78407b-c7b3-4d41-b3d4-dc2501e778db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44131f9f-2377-46f1-9f2b-ed59728a912b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b666d04-46c4-4636-9512-7ebc0a95931b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9598e9-fe23-4e84-b625-8bbcbd401e82",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66b3a28-9171-4753-bcbe-cef87a6765f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd5730d-f953-43b8-8877-622fc3309dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0745f78f-5f16-4f5c-97de-3a96a94f8e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4e3284-9f13-4389-9bee-aca0da7f0b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3244afa7-4fee-42c1-a1b9-8fc694562f37",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83410a0e-ef59-459c-9205-621a66602229",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f85eb538-8e60-41d4-85be-6cd3332f8cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525f3ca4-8314-4d86-bacc-8d433da4bce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7012dc74-634b-4eea-80a7-34c8642e1d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7927c9-0d83-47b6-b2bc-fed0828f619f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b6aa94-6752-4eff-b350-17c35585823b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f17d57-6bb3-40ed-ba39-1218a3838cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6270e2-48bf-44c4-a32f-e8efa7290910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2644445-23aa-4069-b1ff-df4768f33ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfc08b0-c94b-4764-a90e-70a85b3c7c0f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c9b4c0-eeee-434a-bb6c-76d8a987b39b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01d0947e-619e-4a87-b7db-f85e847e9c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "184fb4e9-872c-4cdb-832b-ca4cca414aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149ab2da-b051-4ecb-ab14-81d534107f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b661cf84-36b4-4efa-8649-556047d0f982",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0ffd1c-a254-4be4-a2af-25b66d9311cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e699bf7b-a45a-4a7f-bebe-ccebc296485f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fe973e-cad0-4512-989d-d9b960285a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b94d66-794f-4677-981c-883990937bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64a228b-e775-458f-83ed-b62e8987e162",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf34698-b58b-40b6-af36-e65467478aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69022608-c1d5-458a-acbb-b15c31f39887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "572b7b36-e921-4bff-a7be-536dbfff3300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabfd257-7ec9-44fe-9b9c-4ed53bce0221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c7991e-a2ef-4ad0-a0c8-93c403a6ebce",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1bd7d7-6034-4273-881e-f5c2b54a7bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47818f22-e2b0-4b18-90ec-bbfd931675c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293c131d-2b64-4c48-b5ce-d95147df1057",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1360208-d60b-4c01-a0ea-6fac4d3081b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f98030-66b3-4298-8b84-60a44508ce40",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f368b3-97f2-475d-a410-5856533e4b88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ad85ef-a47c-4d74-9425-af169e00fe98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94245a0c-cbf9-4cc4-bba4-f8c843662e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5079ec-9194-486c-9a79-effb615c0377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a256549-3ce7-438d-ac8b-a481a008e02c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0f3610-18e0-4318-b2c3-9b758f3b19d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35c7452b-e970-465f-a487-cf6a45642a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b9f127-220f-4386-b123-a24096e0289f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef87640-98ec-45f4-ba4c-6e1532815c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bd1836-ffc8-49ff-a4d0-208a6d491226",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c57310b-a1ea-4020-97ba-b5da93cd9fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c664ed0-9344-4319-9af8-cd6ee9dd5065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fca7338-c56a-44cb-a9bf-6edd48304c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bec7e7-595c-486e-a12e-69d075c1c9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a513b302-57d0-42d7-aa06-d3a9ac65f9b9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e845237e-f346-4519-b665-e4b0ffea17c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dba9e25-aabd-4f3c-9aa1-89ea1a986634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384d7265-a4c0-4aa6-b397-4df9a4d152ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f091ffd3-6f41-47f4-b8d8-af8daabe6565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff54f91-b231-4fe0-b7fc-dfe02fbbdc34",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3012b15-22cc-4df3-9a88-8a5d52768fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516e9ccc-c13b-4b65-b79d-d8c9da1cba93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f260dc-52c2-4d0d-97d3-c2a660dcad62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ce2229-224f-4efc-8941-baa17cb4af7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adc9e89-b6c0-4fa2-8700-95ac9bcda8fe",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb5b56f-376e-4eb3-86f8-5d594b2b6e6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d36d2f7-c771-4571-ae4c-9ac513b38e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cea2f68-c591-4df6-925e-f620d73a913f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57faa9c7-d264-415b-b67a-ca6ca840717b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6374b4fa-70e0-493f-a1a3-cdda58997fd6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85523b06-c7cb-4eeb-9d34-0e7fb8e437e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36ff72df-35fc-4ed5-9459-88a29ce7d76a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fc3a27-62f2-491d-9e29-8b0e659ea32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902eb966-2238-4f8d-a235-bc664cc3eea8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18e4a55d-bc02-47d2-8f8b-de719925b7b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38b02fef-3a24-4735-9741-6fa77ecb4828"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acc3b998-1e1b-4bdd-add3-6279a1f8b863",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47129088-c826-49e2-a9dc-32e44099e66b"
                    }
                  }
                ]
              },
              {
                "id": "65b2d4c4-76f9-461c-afb3-529a25192880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "213c2414-e6db-4ac0-8cac-2a05d78f5a23",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f0fd19-c24d-4f59-80b6-6a985475de00",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7078b9e3-60e0-4bed-8089-24a4844af4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4bcb9a-e530-4a7a-8deb-1f503a6774f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf816390-0773-42eb-9417-8842cf1dc40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adb7e45-dbab-40a5-ae4b-72940f6e694f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e6aca8-0f14-41f2-b8a0-864d9f02b46a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "609672d3-e39f-41e0-af5a-beb001a19918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2b8b63-76de-4698-8867-c56ecf64680b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba8cd100-472e-44c1-b7b7-9fadf2451d66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a36d9c8-4683-41ea-981e-8520f261ba88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36be73b4-a3fb-43ba-af1b-d69bb29f90ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3efbb28a-928a-4f4f-93e2-1dbdb6af85c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18a0e853-7edd-4d28-9376-668604d87c51"
                    }
                  }
                ]
              },
              {
                "id": "1c10a57b-4300-4237-bc77-9ec7dc3b28e8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "25fd7efc-79e3-4044-a711-dc9a3d346e5a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54b7d0d-37dd-4e0a-8efa-6476864f7785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8789dba1-2820-4c66-9d60-6667a319f45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05a2e99-a789-4329-8f4d-7e03cddec34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e7c245-c8d5-4275-b420-3a725f7de417"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "82a8d425-ada3-4d10-8930-a78a292ee8f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "faf1129b-59db-4965-9043-8c749c42665b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b95e766-06f8-4ddc-8aa7-621704f5ee11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "757d7130-1182-4b7a-9398-aa3969c14b6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b61c172-6ada-4f6d-a8bc-0fb3bcb6f05c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a21471eb-9838-4659-baee-ea3db853d8e5"
                    }
                  }
                ]
              },
              {
                "id": "37c9fd75-02e1-4616-88d3-bea44d492db4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1584d409-5988-430a-afbf-119e92115671",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "174c7341-9ecc-46d1-b0db-fc5549b50c8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0816f559-7ed8-4f05-b3d2-b6324d6ee2f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dc062bf-dd52-4e52-8d39-d77023d31c9b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16b8fd90-1aee-42d9-9306-e99a6f686730",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "17976bbe-2372-4888-bace-b032e43c4530"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "418b7beb-bbe6-44e6-af18-26417e7bd7a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "563eeca1-b7d3-401c-a062-21abdd544e4a"
            }
          }
        ]
      },
      {
        "id": "bedcd175-9df6-42f4-b17c-31dfd99913b9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a873fa5d-98dd-4212-bcef-7dea69dc2f02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4172878-c3c2-432e-b203-e520bd5645e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fdd1b2aa-bb1f-4a88-8113-64369097024a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08d6aa2-ac57-4670-a6be-d5902d0969fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e1bc9463-cfa3-460f-b35b-00a16122bd60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1359ab8d-3b75-4e0b-afe1-cf4f941a024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3df0abd-480c-4f91-87a3-06df55eb7651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66835964-b766-4e5f-b1e6-a22352c1c690",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23aaa849-fb69-4c9f-bee3-ab75fee0a04b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "89a58678-168a-4446-b0af-baa82efb3f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cff927-340c-4d56-9d89-2263a0f0f35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2407b9e-4051-4bb1-a97d-e520db6223a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "156ec9b4-8cbd-4214-bb38-4c73da33f14b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2a09620-c8af-4931-bace-8034aae026fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bad97fd0-f35d-4652-9bd0-4bbdf7e50395",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d30f03fd-6301-45ab-bb43-299d5c43003f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2676e0a6-183d-42d0-9cbc-ef929ff9146e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "349be200-5dff-4947-8d4d-39a29e970b94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8503eea2-b18c-404b-8dc9-85aa20b3aadb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86974972-963a-4909-bae0-e2fef04eee7b"
            }
          }
        ]
      },
      {
        "id": "679e823e-7a7f-40af-9c83-03755be3f86a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "84014fdd-c49e-4fa3-a5f1-4b98d21537bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d79e0e3f-d061-48fa-a775-cd091bdad489",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6369bf9-7055-4d0e-8488-b7373a120207",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25b5e16-60ee-4f2b-b841-8f588cd3dc4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1376360f-20e6-495a-bb99-fbd716989833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ae7673-7a28-411a-96e0-20188d85d85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6eebb00b-ba71-4907-bb25-11ae0645254f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7076ff8a-c3b4-437f-a494-1e05724dbe64",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520eee35-0273-425f-8d79-96664a5d882f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "72bf2668-ebc2-4f9c-b610-8949c64e806a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a832a29-76c1-426c-a85e-763b402f200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb32a7f5-ec2a-46b0-bc93-865fb06e9459"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78518c1d-e701-4191-9e48-3f6aaa2fed3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4325167-3489-4193-beac-b6eddec75c88"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96a825f8-bc09-4141-abbd-e8e8623470d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35d9b2d0-dc46-4601-9937-c1bc26c24475"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f47584f8-cbf7-4540-9a13-8b270f559378",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "705dc5d3-7a5c-41d9-aff5-3740564bc08f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "647ef287-61ed-4e2b-afb6-4d0f25824a1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df58b8de-fe87-40dc-aa65-e15aaa65739d"
            }
          }
        ]
      },
      {
        "id": "1c123360-f656-43ec-96db-5d4a70d1b12c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6e7639ab-48da-40b4-a47c-bc792dd3a2b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "716539b8-970e-4a07-89fb-8cdcffe5d48d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69fba689-6731-4f6b-bcab-c7a6118748dd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9079a4-c7e0-4cfc-a8e3-3312de94dffc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b4785dac-a110-4bfb-a754-c173e9fa39f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e56ac56-d3be-4e64-ba6c-709f0c9bebf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8774eb49-feab-4f8c-b924-4186808ba6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b517202-b2b5-4bc4-93c5-d64c7de4aaa2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8757aa75-5209-4e7b-927f-b0b43ab8861a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2c68c9c2-6680-4a13-9bf6-5a24db7dfaa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3c27fb-c8e4-43be-bdb4-ce973ab6efdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4aeeb7b-346a-4b90-9b58-d05eb524bab2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2dc8c54-70b2-4ada-8199-4d122907042e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da596b98-c7bc-459c-9780-237ed211b013"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5098612b-99d0-49d5-a2ab-5c4b152ac574",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4844c1a4-bfb6-4ebf-9be3-0b22d47f9e4e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f3d8abe-a35d-4546-a965-bd859d8c1c39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c7cc1cb9-270b-4208-bf84-a4f1b8662994"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3400396d-ad2f-4471-876c-2c1544fa4d73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b44193dd-ba95-42e8-8957-6ae564042c6c"
            }
          }
        ]
      },
      {
        "id": "342a9341-02fc-4e4c-9e89-0b9e93b5c75b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ed58a8f-a4e5-4240-a78b-acfa5ffbb274",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91ef2d37-54d2-4990-8e47-be775e12263a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "006326e5-89e1-46ab-abcf-cbeed9b3e0eb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "118d8909-db70-4a09-859c-7b49291bf033",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2145a40-e027-4340-aad7-1cd0f442caca",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 291
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 651.0000000000002,
      "responseMin": 18,
      "responseMax": 5037,
      "responseSd": 1238.7505287937825,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677458492484,
      "completed": 1677458672355
    },
    "executions": [
      {
        "id": "ab06e5bf-60fc-43e0-a441-4272d97dd355",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "17bcd3ae-b6e2-4ef6-9997-3793d053768b",
          "httpRequestId": "c9e6ed15-7e66-4aae-9cc2-423712ba9f76"
        },
        "item": {
          "id": "ab06e5bf-60fc-43e0-a441-4272d97dd355",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6246d004-99af-43f0-b549-2ae296ff4347",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "5b2844b8-f811-4ca0-bb3f-4b858a8cb01e",
        "cursor": {
          "ref": "b78a46b3-abe6-4b93-9867-586eb46f2e0a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ffa23b7b-d851-4b5a-9ed5-e2c5135db48f"
        },
        "item": {
          "id": "5b2844b8-f811-4ca0-bb3f-4b858a8cb01e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a9a9c440-088d-43df-af04-c4dfa0feb9e3",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "7673c7fe-fcc4-4bc4-a9ff-459a87e89540",
        "cursor": {
          "ref": "5f328388-e620-44df-a39b-28cec902983c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0cd9fa13-5462-4f6b-afcc-004bab6fecd5"
        },
        "item": {
          "id": "7673c7fe-fcc4-4bc4-a9ff-459a87e89540",
          "name": "did_json"
        },
        "response": {
          "id": "4e55c685-bf8f-485e-bab9-63f25441317d",
          "status": "OK",
          "code": 200,
          "responseTime": 239,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0c9cbf-a41e-4271-ae4f-94b5a149adba",
        "cursor": {
          "ref": "fc669d9f-f943-4134-b610-920bd7fc9e75",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "98f469e2-f327-4161-bc4e-d8201798ab4b"
        },
        "item": {
          "id": "da0c9cbf-a41e-4271-ae4f-94b5a149adba",
          "name": "did:invalid"
        },
        "response": {
          "id": "aa35cdee-259a-4b7b-a104-1dd71b030cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0c9cbf-a41e-4271-ae4f-94b5a149adba",
        "cursor": {
          "ref": "fc669d9f-f943-4134-b610-920bd7fc9e75",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "98f469e2-f327-4161-bc4e-d8201798ab4b"
        },
        "item": {
          "id": "da0c9cbf-a41e-4271-ae4f-94b5a149adba",
          "name": "did:invalid"
        },
        "response": {
          "id": "aa35cdee-259a-4b7b-a104-1dd71b030cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f289df-212e-4c93-8b57-3536793db466",
        "cursor": {
          "ref": "41cb11c5-31c9-4993-b709-15540d8ce62c",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "96281781-e340-4ba2-8541-3b06e1c5c025"
        },
        "item": {
          "id": "37f289df-212e-4c93-8b57-3536793db466",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0b431b96-ceed-439f-ae2c-992bea6c8b47",
          "status": "Not Found",
          "code": 404,
          "responseTime": 160,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4241a915-fa03-45b9-97e6-86f56831c53b",
        "cursor": {
          "ref": "68e8977e-ee28-48f2-8832-6132c0aea9fa",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4ed9da97-0b79-434d-859a-6c92f334ad98"
        },
        "item": {
          "id": "4241a915-fa03-45b9-97e6-86f56831c53b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2cfac391-8af9-4752-9588-04a59805a7aa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 56,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b49385-1b7f-490e-92f3-74701914ab08",
        "cursor": {
          "ref": "78dd1b41-1b62-416d-a39a-a5ec8736629f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e0593d2f-0aca-412a-8866-b357dd360d4e"
        },
        "item": {
          "id": "b8b49385-1b7f-490e-92f3-74701914ab08",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "89f120b9-d8eb-426b-9a80-f17f03e636f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73852652-1e51-44eb-87ac-fd94eca52053",
        "cursor": {
          "ref": "671bd954-7b73-4189-897d-22de25422204",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b6fa8c9-8315-468e-ad97-c2ace1f01c3c"
        },
        "item": {
          "id": "73852652-1e51-44eb-87ac-fd94eca52053",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff1851a8-6352-4a17-8b3d-ad2ee4348b9e",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "73852652-1e51-44eb-87ac-fd94eca52053",
        "cursor": {
          "ref": "671bd954-7b73-4189-897d-22de25422204",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b6fa8c9-8315-468e-ad97-c2ace1f01c3c"
        },
        "item": {
          "id": "73852652-1e51-44eb-87ac-fd94eca52053",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ff1851a8-6352-4a17-8b3d-ad2ee4348b9e",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "349ba5a8-4b2b-4085-8567-e6703548141c",
        "cursor": {
          "ref": "1e84876b-40ee-40e7-a3fd-aaa269d24d9e",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a273ed4c-6492-4471-9155-df362701fdc9"
        },
        "item": {
          "id": "349ba5a8-4b2b-4085-8567-e6703548141c",
          "name": "identifiers"
        },
        "response": {
          "id": "627b9c8f-c539-4b3c-b576-af5184d5b8cf",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e19426-0712-484f-8ece-23b17eddac52",
        "cursor": {
          "ref": "df6e6777-f1ef-4816-a9ea-d17657036e6b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "735f9c03-8f4c-4303-bf29-4c71bf1d2e51"
        },
        "item": {
          "id": "15e19426-0712-484f-8ece-23b17eddac52",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a179fb4d-a3df-420b-8d20-62c22de12185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "15e19426-0712-484f-8ece-23b17eddac52",
        "cursor": {
          "ref": "df6e6777-f1ef-4816-a9ea-d17657036e6b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "735f9c03-8f4c-4303-bf29-4c71bf1d2e51"
        },
        "item": {
          "id": "15e19426-0712-484f-8ece-23b17eddac52",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a179fb4d-a3df-420b-8d20-62c22de12185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "5189efbb-d704-4b9a-9577-21ec9054e9d8",
        "cursor": {
          "ref": "a9921714-f7a6-473b-81d1-fafda5c11a22",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6ad62f5d-f7f1-4456-8917-b98faff7dd78"
        },
        "item": {
          "id": "5189efbb-d704-4b9a-9577-21ec9054e9d8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7cd2b89e-73af-4bc4-a7c5-be8617dd8486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "14895200-b563-457d-a425-d49470023f25",
        "cursor": {
          "ref": "ca1cb5d4-ea7f-410d-9e27-fc6b68edb59e",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b210d817-ecd3-4270-bb92-17fcba51ead2"
        },
        "item": {
          "id": "14895200-b563-457d-a425-d49470023f25",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fe80c4ed-9e96-4a90-ba2e-204a9946145e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "af4b4301-e890-4cd7-afdf-936896dd0bfe",
        "cursor": {
          "ref": "dcd55142-83b3-4829-b260-f1b7e3c61eae",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "62ea7d87-eb91-41f9-a2d9-0886231c212c"
        },
        "item": {
          "id": "af4b4301-e890-4cd7-afdf-936896dd0bfe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "47dbfa7a-3c80-43fd-8f1a-3298a5783139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bac4b938-a368-4b5b-aa6a-a03934a68993",
        "cursor": {
          "ref": "06ac13a9-9681-488c-8eef-85b1b2b3dd84",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5054556d-d8c7-4851-a8ed-e43c8286b393"
        },
        "item": {
          "id": "bac4b938-a368-4b5b-aa6a-a03934a68993",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d3bbe4d6-8a16-4882-8cbc-a2e286fcb85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "6ce4b96a-a024-482c-ad53-1733f49aadf0",
        "cursor": {
          "ref": "f4bfed92-2c57-4034-a11b-54a8fd54114d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58810034-4306-4ea4-8fc8-8dbde746ac26"
        },
        "item": {
          "id": "6ce4b96a-a024-482c-ad53-1733f49aadf0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0781c12e-3f10-4886-92b6-50bb850ee246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "68ef4466-610d-4081-8e4c-923b097cd96f",
        "cursor": {
          "ref": "638c6d99-e4d4-47cd-8dd4-5cd82fc92fcf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d4fbc149-ae0d-466d-83d9-d1b5cc38524d"
        },
        "item": {
          "id": "68ef4466-610d-4081-8e4c-923b097cd96f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "534f4a6f-72fa-474f-8f7d-9be1b1621d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e5de2a36-ea6b-47ba-9933-e93caf200798",
        "cursor": {
          "ref": "b7c43079-2ea0-4ffc-8646-9d09b4ff4910",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d8e30e0e-5476-4934-b71f-fb8d62d631f4"
        },
        "item": {
          "id": "e5de2a36-ea6b-47ba-9933-e93caf200798",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0c1df6a9-325b-46ab-9ec6-d82f481bd6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "67a4f104-3732-490a-804c-0109426b1f36",
        "cursor": {
          "ref": "7d697866-62aa-4a46-afc7-5c682b871c30",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4c23369b-6e60-477d-9d30-e634f00d2595"
        },
        "item": {
          "id": "67a4f104-3732-490a-804c-0109426b1f36",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "83aadcbf-2e3a-49cf-9950-8094e3b40901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "594d349d-172d-4320-827b-8190b08b5185",
        "cursor": {
          "ref": "70225f0f-8a69-4620-b913-93cd74824ca7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2751845f-33bb-4227-aba1-01e9318b0dc7"
        },
        "item": {
          "id": "594d349d-172d-4320-827b-8190b08b5185",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "96a6616f-f8fc-47da-9655-1e6c00dfb5d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "1463182f-2316-46d4-a401-f04c92bf9d15",
        "cursor": {
          "ref": "0e80fb46-005b-4032-8a62-a2fc1ac76791",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fb76dd9f-cf4d-4c58-b39f-fa993c1be48a"
        },
        "item": {
          "id": "1463182f-2316-46d4-a401-f04c92bf9d15",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "db212a1c-8964-4400-b10c-ce894d0a28eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "bea9c076-a75a-49a8-8240-a717cb8745bd",
        "cursor": {
          "ref": "32796958-b969-4f13-93ac-70eaef0a9a0a",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "00aad536-d328-40e6-99ce-7b33e9cc5020"
        },
        "item": {
          "id": "bea9c076-a75a-49a8-8240-a717cb8745bd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "acf76122-c0c7-4271-bb8f-6c208ab92052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "90b2a5c0-116e-462e-bb93-e7cffb5c32cc",
        "cursor": {
          "ref": "5e6184c1-689b-4e9c-a23a-954bf9e472ab",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c6e7c1f9-fe4e-408f-9357-7715468e8b86"
        },
        "item": {
          "id": "90b2a5c0-116e-462e-bb93-e7cffb5c32cc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "be5e5763-9729-4691-9ddb-8141c99c4730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f465325b-7fa9-40dd-8823-4d8b33b7a5c6",
        "cursor": {
          "ref": "5d88d1af-e89f-4899-be5d-2eac795e9307",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "68ace866-8519-4415-b016-80d17f929bb6"
        },
        "item": {
          "id": "f465325b-7fa9-40dd-8823-4d8b33b7a5c6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f790ac11-1ba6-475e-8a61-fac6a73a62bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "344d2a9a-143a-4d54-ad94-a3e0c8dde6fc",
        "cursor": {
          "ref": "a0af7e61-57c9-432f-9c69-534bad493a38",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3d4cefba-014c-4908-a552-3014ecb7d2d3"
        },
        "item": {
          "id": "344d2a9a-143a-4d54-ad94-a3e0c8dde6fc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1875b59b-11f9-4b8c-94bf-30c3dfa951c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "6074c7e6-3596-4d5e-a73f-ea5aee43ba87",
        "cursor": {
          "ref": "29ded174-1d17-4dc4-b7df-d8ceaa39a3eb",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fe0f8190-701a-4516-92d7-fe1dcea8f201"
        },
        "item": {
          "id": "6074c7e6-3596-4d5e-a73f-ea5aee43ba87",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a6ca8c4c-31f6-48a1-a040-5bb5606a27fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b8d79fed-737a-47e8-be19-d38f55fac131",
        "cursor": {
          "ref": "dfec0840-b7e7-4507-9ec6-989e0c7f2d3d",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ed3a80df-5b8e-421f-b4b4-3930d2ffa05a"
        },
        "item": {
          "id": "b8d79fed-737a-47e8-be19-d38f55fac131",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e9bd84b7-78a8-4778-a48d-f9a743fdd563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "85f5439e-712f-4734-90e9-906d21e75dee",
        "cursor": {
          "ref": "c40efcef-4db6-4f45-89fb-23e9232b5272",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e05718e8-da48-4f69-8679-909b1373e8ad"
        },
        "item": {
          "id": "85f5439e-712f-4734-90e9-906d21e75dee",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3ba4a32d-1e9e-4944-9afa-8ec4cac8cf28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "d4d9191a-8791-4353-bd92-8d9cf315d1e5",
        "cursor": {
          "ref": "2ab066b6-32cd-43cb-bf8f-eac6890873c1",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "79ce3a47-8cd0-4011-97b1-8a8305877822"
        },
        "item": {
          "id": "d4d9191a-8791-4353-bd92-8d9cf315d1e5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "10c2f663-fce2-4623-acf8-ef3313849d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "e27f5d47-38e3-4a0b-a079-2779972e9b8b",
        "cursor": {
          "ref": "98c36613-e5c6-4b36-8a8f-c17bc8433efb",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0d44e9a5-b4c5-4a8e-917b-5d75c41a91ce"
        },
        "item": {
          "id": "e27f5d47-38e3-4a0b-a079-2779972e9b8b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3e726d62-dca9-4c99-91f8-73378a413ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "67358c16-3e1f-4b06-8e58-45aa293ba23c",
        "cursor": {
          "ref": "5a2c74f5-4e0d-4ab1-9de8-28e6bcb22f78",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9a28c53b-7083-4bdd-ab54-8ff60606a080"
        },
        "item": {
          "id": "67358c16-3e1f-4b06-8e58-45aa293ba23c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c9ad1d6f-ba61-4b8d-9cfb-e43819d6c92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "08912a63-5e9d-457f-8be1-055fa6d08262",
        "cursor": {
          "ref": "64106261-7004-4cd9-ba6b-d3a4e3638a2a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2c59371b-02d5-45fa-b37f-4a7d82d1f910"
        },
        "item": {
          "id": "08912a63-5e9d-457f-8be1-055fa6d08262",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e3ec3297-16ef-488d-bb0b-f97264571f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "35dd42c8-782c-4ec6-a3d0-3b5661ea9cc9",
        "cursor": {
          "ref": "54cf6909-50ae-4313-8875-438cb1a2f795",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ccefe8fb-8950-40de-a5c2-ec8c7ee1c4d8"
        },
        "item": {
          "id": "35dd42c8-782c-4ec6-a3d0-3b5661ea9cc9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f168f3e8-9d79-4828-90a5-a74bbaa5871e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3c44b01c-e223-43c0-9166-83513567b1c3",
        "cursor": {
          "ref": "e4374563-1a1f-4778-ad30-055825f8da98",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ca9155f5-3631-4652-8ff4-d48f5c4a6b61"
        },
        "item": {
          "id": "3c44b01c-e223-43c0-9166-83513567b1c3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "76ab3c11-9f2a-4233-a764-a96b81a08ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "8d74c6e1-56b5-44c0-92a2-f5a3646d588f",
        "cursor": {
          "ref": "8d9ac3d1-a2a2-4766-985b-4cb3b8979753",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "89cacb89-8113-4c2e-8052-56c290135fff"
        },
        "item": {
          "id": "8d74c6e1-56b5-44c0-92a2-f5a3646d588f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8f09b3fa-71f4-4d36-a6cf-abfda10d8e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5037,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "805733ba-3460-400b-bfea-cb0251acaa0a",
        "cursor": {
          "ref": "64b69329-a2e7-4a4f-a0ae-5a0ee90599ce",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "70aefcd2-dcac-420d-ac5f-60a75e6dd758"
        },
        "item": {
          "id": "805733ba-3460-400b-bfea-cb0251acaa0a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a7370267-3aae-46bb-a2f2-074071766da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4762,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b4e18540-5151-4d90-8d87-d31e4acd6d13",
        "cursor": {
          "ref": "58574270-9c8d-46fc-a8e6-d8905a080099",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "375066ba-9536-4725-a6d3-ad6851a7cbd8"
        },
        "item": {
          "id": "b4e18540-5151-4d90-8d87-d31e4acd6d13",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7bcf50e7-6187-46ad-8082-5d341241910a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2439,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "49c0e977-720d-45ba-a155-73c99b745aa6",
        "cursor": {
          "ref": "8d4b6666-fabe-4051-97d5-2735ba2935ec",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7043981f-f7ec-42c7-8d65-65800e93cb9c"
        },
        "item": {
          "id": "49c0e977-720d-45ba-a155-73c99b745aa6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "269acd26-0829-4f43-a802-f980f4a9a3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2465,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "48abaa2e-114b-4f63-95b0-0eb46533187f",
        "cursor": {
          "ref": "293066e3-06ff-4136-8231-ed9d78af82fd",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1db06aed-db35-438b-92e9-342ce2a42726"
        },
        "item": {
          "id": "48abaa2e-114b-4f63-95b0-0eb46533187f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d4e85a92-8c1d-4e47-8dba-dcfb7ceac3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4857,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "8c9dfc51-1aba-4789-8771-a711a0b58e46",
        "cursor": {
          "ref": "080a3cfe-9829-4858-a37d-5f44e930f11b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "df6399cf-bb4d-4444-859f-d64e22536a49"
        },
        "item": {
          "id": "8c9dfc51-1aba-4789-8771-a711a0b58e46",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d1ec272b-51ca-4ae9-9cbf-65bc18367bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d1b9c273-aecd-4472-9d84-9408301c90c4",
        "cursor": {
          "ref": "84ea01c8-ecd6-4db1-83ce-adb45a125d21",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b8940f7b-5ff4-40d6-87cb-1f15c432c29b"
        },
        "item": {
          "id": "d1b9c273-aecd-4472-9d84-9408301c90c4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7800f71d-23ad-4937-b5f3-e54614d373fc",
          "status": "Created",
          "code": 201,
          "responseTime": 2390,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "04f67164-478e-4a70-9855-06c91da0e0c6",
        "cursor": {
          "ref": "0a245ec9-a0b4-44bc-8be9-1ca53e79aa79",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "657d6b3d-9beb-487c-84eb-67e6a557ecb1"
        },
        "item": {
          "id": "04f67164-478e-4a70-9855-06c91da0e0c6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "262b6553-4601-4825-999c-3d4226429bdf",
          "status": "Created",
          "code": 201,
          "responseTime": 2725,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "784050ea-857f-4479-aa6b-9f37268e9b36",
        "cursor": {
          "ref": "f97aba33-9331-4c7f-849d-da779bd57390",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b343e268-19d9-435b-9677-ba98434138a2"
        },
        "item": {
          "id": "784050ea-857f-4479-aa6b-9f37268e9b36",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "88ce8411-e67c-46fd-a968-272a560ea3e6",
          "status": "Created",
          "code": 201,
          "responseTime": 4941,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "ef267c85-cc0a-41d0-9477-c51a924279c8",
        "cursor": {
          "ref": "5e23c3bf-e528-473f-8035-4dc63bf0f4c4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c3ffa3d1-d552-4c0e-8a5c-215badff44ff"
        },
        "item": {
          "id": "ef267c85-cc0a-41d0-9477-c51a924279c8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b4f26b97-c81e-4d87-bb6e-398851d05b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bed3f2ed-e1d6-4853-859e-0f31f21e082a",
        "cursor": {
          "ref": "15fe9fba-c85a-44b3-8a99-7a41160a18ad",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b36364b4-945a-4e5b-a8e2-7235bbf92a7b"
        },
        "item": {
          "id": "bed3f2ed-e1d6-4853-859e-0f31f21e082a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b3285b07-bf95-4c6d-bc72-027dcd80d7ae",
          "status": "Created",
          "code": 201,
          "responseTime": 2466,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "be2c4c2e-5f85-47c5-8b77-608dedaa8de7",
        "cursor": {
          "ref": "e8dabb9b-4a2b-4e15-b2d8-4bb0c076ef35",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6f8c90c2-425b-43fe-ac4c-6b53e6da5275"
        },
        "item": {
          "id": "be2c4c2e-5f85-47c5-8b77-608dedaa8de7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "97e4ec9e-ca0d-4563-9419-5d2d12a048ea",
          "status": "Created",
          "code": 201,
          "responseTime": 2569,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8312f603-5e59-46f9-9011-5f328ee17efc",
        "cursor": {
          "ref": "4a74a6bf-cb6d-44ad-affb-ec2a51121395",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d0999481-9bf7-4fd6-affd-5249e447f72f"
        },
        "item": {
          "id": "8312f603-5e59-46f9-9011-5f328ee17efc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d521a188-6438-43cc-8bf5-0c2b241dec04",
          "status": "Created",
          "code": 201,
          "responseTime": 2697,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c4a6202d-a762-4706-86e5-55e554eed6c2",
        "cursor": {
          "ref": "95e2c82e-f843-4326-9e1f-0125abd49a54",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e884a45e-2ffc-40a4-a054-1738f745bafe"
        },
        "item": {
          "id": "c4a6202d-a762-4706-86e5-55e554eed6c2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2a3fa255-4c00-4112-928b-31c6283d04e9",
          "status": "Created",
          "code": 201,
          "responseTime": 4282,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "761428ef-9c53-40e0-b5cc-636a73dafd78",
        "cursor": {
          "ref": "84cd5a27-71c0-49ab-b095-7cf854f904b2",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "616eb67c-8c5e-41f5-a9a0-45ff815da829"
        },
        "item": {
          "id": "761428ef-9c53-40e0-b5cc-636a73dafd78",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "baeb6fcb-1ae1-4f85-88f7-ea30b4895b35",
          "status": "Created",
          "code": 201,
          "responseTime": 2539,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d2de65f9-2b66-4967-b726-e590d8e98435",
        "cursor": {
          "ref": "69bd3f33-bf2f-4628-a810-e8438f35b5a1",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4f65892c-fc9c-465e-a41e-9b83b29b13c7"
        },
        "item": {
          "id": "d2de65f9-2b66-4967-b726-e590d8e98435",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "040635ca-c497-48c5-98db-e07499e46f38",
          "status": "Created",
          "code": 201,
          "responseTime": 2698,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f1b11783-4d27-401e-93c0-440d316f0ac2",
        "cursor": {
          "ref": "b93dd2f1-418f-4207-9e16-e8c21ae3a700",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "07a7ba10-e40f-44e5-8ab2-79bf2423a8d7"
        },
        "item": {
          "id": "f1b11783-4d27-401e-93c0-440d316f0ac2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e7a454a9-30b0-4928-a3e9-13557c5216f5",
          "status": "Created",
          "code": 201,
          "responseTime": 4273,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "000bb12c-313a-467e-a361-2b9698f717ca",
        "cursor": {
          "ref": "f2e97fb6-7aad-4f3a-a75a-137243f8bef0",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1066ac35-ed24-4e4e-9934-a21f30b1dacd"
        },
        "item": {
          "id": "000bb12c-313a-467e-a361-2b9698f717ca",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "61092bd2-436e-4d38-b0cd-8ddf1078b8e6",
          "status": "Created",
          "code": 201,
          "responseTime": 2556,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "97a77642-236a-451e-a72d-2c4a22b8192a",
        "cursor": {
          "ref": "7821c4d5-ba9b-413c-a203-700c9b8ea42b",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "aeeb3682-ee0d-40a1-b4c5-5cf5f776145e"
        },
        "item": {
          "id": "97a77642-236a-451e-a72d-2c4a22b8192a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4b7dba61-842b-4f4a-89e0-b49920ac3f5a",
          "status": "Created",
          "code": 201,
          "responseTime": 2718,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4c77b30f-492e-4947-ba8f-bfc75618173e",
        "cursor": {
          "ref": "2fe157a8-c524-4f33-95e9-e1cde1a8c69e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "28c8ad84-a68b-492f-90ab-bf5e70d6df83"
        },
        "item": {
          "id": "4c77b30f-492e-4947-ba8f-bfc75618173e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "01ba2492-2785-44d2-b206-a4b04f89c2a6",
          "status": "Created",
          "code": 201,
          "responseTime": 4085,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "6fa99a4f-6094-444b-afc3-139378ff00b2",
        "cursor": {
          "ref": "6a3eacfc-0ea4-4ec1-97f5-53046cf07e42",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a05da3c8-4fdb-4af7-b972-1a0acf2e495b"
        },
        "item": {
          "id": "6fa99a4f-6094-444b-afc3-139378ff00b2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2b4ae5ab-b616-4b98-9338-40e51fa400af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "b1389fc9-dd1c-45ca-a1ea-b03d8dcc58b8",
        "cursor": {
          "ref": "5384175c-022c-4060-9778-be9b708453cc",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "33da9d28-6de1-4653-9dae-6aa627eb68c6"
        },
        "item": {
          "id": "b1389fc9-dd1c-45ca-a1ea-b03d8dcc58b8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "804e132e-eb7e-4405-824e-ca6694096c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "7a4cfb9d-8d4f-4bd1-9b4f-845881e4d0c5",
        "cursor": {
          "ref": "cf7f2ce3-a958-4e68-9104-2f90379099b4",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "24972d11-f6ec-4434-bd06-c10424e0d342"
        },
        "item": {
          "id": "7a4cfb9d-8d4f-4bd1-9b4f-845881e4d0c5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4d4cb9b2-22df-4be3-9d98-079f3590bb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "07c5e932-1527-4ed8-9521-0482a033ec9a",
        "cursor": {
          "ref": "0f9f7acd-f09e-443f-b62c-ca2226d9adf3",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1ee1cafb-a0a3-4223-b92a-6ebe7045dce0"
        },
        "item": {
          "id": "07c5e932-1527-4ed8-9521-0482a033ec9a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6a4be964-8fee-42d4-9a61-a1168228d513",
          "status": "Created",
          "code": 201,
          "responseTime": 2506,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "7983ca2a-a0d3-4179-98c3-049dbf4e3bc5",
        "cursor": {
          "ref": "06356a75-e56b-4ee5-9d3b-ef80247070e0",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5e3540e8-71f5-4e8f-895a-abf9ab49b2fb"
        },
        "item": {
          "id": "7983ca2a-a0d3-4179-98c3-049dbf4e3bc5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c4088b5d-3519-4738-a102-b04ca8a7b83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "b40be8b9-6a88-4c57-a0cc-95b63e4bb072",
        "cursor": {
          "ref": "ebcefb5f-3fc5-4faa-a6fd-edee7a541130",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1a1c31da-a48a-4465-81bf-0c8e60cb722d"
        },
        "item": {
          "id": "b40be8b9-6a88-4c57-a0cc-95b63e4bb072",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bd353169-371f-43e9-9443-4af89d86d095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "c1acf41b-508c-4860-a2f0-b244d92658b0",
        "cursor": {
          "ref": "3570995c-0c2c-4486-a5ae-c1382d839bc9",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f3abc231-bf7b-4023-9baa-7272bfa13f40"
        },
        "item": {
          "id": "c1acf41b-508c-4860-a2f0-b244d92658b0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0960b33c-26cd-48f4-a531-58b47cdf34d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "ee0a051f-3b51-447d-bab0-9446ae5059be",
        "cursor": {
          "ref": "c145aa1a-cbff-4b96-bd15-e7903b86828d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0768d6bc-9d3a-472d-994e-17a808e47844"
        },
        "item": {
          "id": "ee0a051f-3b51-447d-bab0-9446ae5059be",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ea47c52c-19a5-468c-89ec-fed72d76a826",
          "status": "Created",
          "code": 201,
          "responseTime": 2921,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "0b4045f7-6324-4562-b4aa-bd5e7ef89dde",
        "cursor": {
          "ref": "6c2f73a2-5a2e-4180-9cd2-14cb72444c3b",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "51dd8f75-497e-404a-bdff-789c726e30e1"
        },
        "item": {
          "id": "0b4045f7-6324-4562-b4aa-bd5e7ef89dde",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d67b5f54-6567-4550-86e6-b3e1ba952e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 460,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "dbbf5eb9-6896-4b1d-97e9-a309d3dde118",
        "cursor": {
          "ref": "6f89a13c-0e7a-40a4-9524-ab7b05145a5e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "723f6f37-af05-4b21-b9bb-8b685a87b429"
        },
        "item": {
          "id": "dbbf5eb9-6896-4b1d-97e9-a309d3dde118",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d31fcf08-289b-4ae5-9684-05b35e8487f4",
          "status": "Created",
          "code": 201,
          "responseTime": 3495,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "56fda13e-006c-4650-a84d-d056eadb3534",
        "cursor": {
          "ref": "111fc479-e1fd-4243-b352-9736468283a7",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "946d0428-14f8-4da2-9677-28c03b2de37f"
        },
        "item": {
          "id": "56fda13e-006c-4650-a84d-d056eadb3534",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "dc42c2e9-5be2-41e2-a14b-383fb016a3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "90730900-445f-42af-abe9-9c1114155348",
        "cursor": {
          "ref": "9ae135fa-0717-46ac-b17c-a12aef476f32",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3f2d1d26-0aed-4f98-9da3-6814c7577a9b"
        },
        "item": {
          "id": "90730900-445f-42af-abe9-9c1114155348",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a0da5c01-a845-4266-b970-6d154d33c623",
          "status": "Created",
          "code": 201,
          "responseTime": 2416,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "87b0ee69-5f1e-465b-9bb4-0a4802b1ce68",
        "cursor": {
          "ref": "8a67d726-5ee9-42c1-8260-55de67ebb6d4",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9121261d-b410-400d-b41d-b8d465087557"
        },
        "item": {
          "id": "87b0ee69-5f1e-465b-9bb4-0a4802b1ce68",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "47c34e3a-df0a-4950-a9a8-2f75b4bb5bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2323,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "af54b935-4fa0-455d-82c6-86d4f959681f",
        "cursor": {
          "ref": "7208583f-5484-4473-a3e7-dd44e643d826",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d5a9ca65-06d7-4627-8577-31ac46dd3c1d"
        },
        "item": {
          "id": "af54b935-4fa0-455d-82c6-86d4f959681f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e2bd95d1-9b9d-4fac-a744-191f2d7d66fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4530,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "60594ef8-c02f-4596-a71a-ec88ab00fbd9",
        "cursor": {
          "ref": "3a819173-737b-46a6-bf06-4b730a8224b4",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "aecfe952-3330-4005-ac89-5f3db08d2f26"
        },
        "item": {
          "id": "60594ef8-c02f-4596-a71a-ec88ab00fbd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "00d51075-9e51-47db-af29-6534ff22578f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fbce0399-7c5f-4c8e-aa8a-5c3e44a29e20",
        "cursor": {
          "ref": "c8155a7a-6052-4a75-91ff-e0f126e2171d",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dd7215b2-799b-4215-9f01-698d299a1b66"
        },
        "item": {
          "id": "fbce0399-7c5f-4c8e-aa8a-5c3e44a29e20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "20c98d34-b832-4c67-987a-a6e9b4597531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2177,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7eb7f551-040b-49a5-9d1a-950c8e231dbd",
        "cursor": {
          "ref": "877b8209-b31a-434b-ab2c-60a77598d5a2",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5d1646ac-24fe-45f7-aa8f-be1a31a11e7a"
        },
        "item": {
          "id": "7eb7f551-040b-49a5-9d1a-950c8e231dbd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2dc4300c-f64f-460c-a655-ceedd8e757e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "9c2e02a1-3872-4e3a-aa2c-bbbc426f14b1",
        "cursor": {
          "ref": "67c8803f-c29f-4697-8927-5d93ff144a82",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4c6e1502-ecbc-468d-8d41-b10704924ae2"
        },
        "item": {
          "id": "9c2e02a1-3872-4e3a-aa2c-bbbc426f14b1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "48b05cac-a8db-4769-8114-baae73fc65a2",
          "status": "Created",
          "code": 201,
          "responseTime": 3754,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8209fe8d-aaba-41d2-b0fe-26708db4a926",
        "cursor": {
          "ref": "44b47a40-03bf-4001-9ee8-40d14ee36fd7",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2d70375c-62dd-4bb5-957d-f38b873cb3b5"
        },
        "item": {
          "id": "8209fe8d-aaba-41d2-b0fe-26708db4a926",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "53839bca-efae-4112-bba8-c1bf3be218b6",
          "status": "Created",
          "code": 201,
          "responseTime": 4889,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "02193680-444a-47d1-b785-cc6f71bbc831",
        "cursor": {
          "ref": "75aab430-780e-439e-9846-a5cad563861b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d623b762-207f-4891-8239-73ac4ae669d2"
        },
        "item": {
          "id": "02193680-444a-47d1-b785-cc6f71bbc831",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c0aefc69-da0f-4773-905c-e39ae426d704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "067744af-f23a-438d-b1a5-76b76faea091",
        "cursor": {
          "ref": "dc0a38c0-ec40-401e-b488-c01414252d82",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2bbe4a46-0149-4b51-82e2-d3722915671f"
        },
        "item": {
          "id": "067744af-f23a-438d-b1a5-76b76faea091",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a4c38d0e-b21f-494e-b3e5-c195f3583ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "7b0f8491-5325-4c38-bc0d-449d5154e01c",
        "cursor": {
          "ref": "b179c4aa-2126-4a3f-9058-014184f89c7a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "09ee8208-91a2-4e5e-9713-cbc1057f017c"
        },
        "item": {
          "id": "7b0f8491-5325-4c38-bc0d-449d5154e01c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a2e9f456-b34b-403c-9a7e-d085432bc7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "9d2463fe-068a-4ca8-9717-08ae2ed47b83",
        "cursor": {
          "ref": "2ef4cde2-9134-4e9c-8689-fdf8ec9f4e64",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cabcaf8f-7674-4358-b733-cf4ba6df5f16"
        },
        "item": {
          "id": "9d2463fe-068a-4ca8-9717-08ae2ed47b83",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "19386b5a-864f-4db4-a439-aa562a4a21b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "491daf1f-1826-4c09-ab70-18adfa69471a",
        "cursor": {
          "ref": "70e47c45-9962-4003-821c-36aed8d1b9ee",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b6805d0f-f481-412e-8ffc-2c0eef1b51bc"
        },
        "item": {
          "id": "491daf1f-1826-4c09-ab70-18adfa69471a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "50894673-1331-4b5f-949a-9ff59e6aa3af",
          "status": "Created",
          "code": 201,
          "responseTime": 2666,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "590ebd5b-b6b2-4403-bb3a-15d1d5280f5b",
        "cursor": {
          "ref": "f4b5fc6a-d77c-4844-a6c9-3b08c7faac18",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cd857db6-d64d-4f5d-9bc3-3d05bd94042b"
        },
        "item": {
          "id": "590ebd5b-b6b2-4403-bb3a-15d1d5280f5b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0eac8182-61e4-4ea6-8973-953d371e492c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "92f54f6f-bd1f-4456-bae6-2b1a8e016d07",
        "cursor": {
          "ref": "d12dc77a-f2dd-48cd-b262-778411d53931",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9e36f646-bc38-4226-aa83-7d010b690fec"
        },
        "item": {
          "id": "92f54f6f-bd1f-4456-bae6-2b1a8e016d07",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "dac5aab4-555b-46cf-9ff9-34791a1391d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "438ab213-e584-4fde-8378-80dd37f2fb4d",
        "cursor": {
          "ref": "ae0003f1-2c6a-4695-91d8-27cf4650d98b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2c1026a6-224c-4d55-bc3c-c0755c0660f6"
        },
        "item": {
          "id": "438ab213-e584-4fde-8378-80dd37f2fb4d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "50905952-a742-4659-922d-4b15bee87568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "006f24c8-544e-44aa-9325-b83a0ebc497f",
        "cursor": {
          "ref": "adc497eb-8c2d-4650-8b8a-67a0b4282403",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3efa620e-563d-428f-b388-403724173226"
        },
        "item": {
          "id": "006f24c8-544e-44aa-9325-b83a0ebc497f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8a80b367-29cb-4592-bf2e-ef5ea3e2f048",
          "status": "Created",
          "code": 201,
          "responseTime": 2913,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "7033ec77-f4a3-4d04-91ec-d150e0f90a9d",
        "cursor": {
          "ref": "ab7fc274-7082-4f96-8381-5723dc1b682d",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2621939b-4167-4631-837e-03eadc09830b"
        },
        "item": {
          "id": "7033ec77-f4a3-4d04-91ec-d150e0f90a9d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "877dbaee-72db-474b-ac51-7797561dc97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 548,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "ea584aa8-318f-49b4-bae8-1ebac0cab2de",
        "cursor": {
          "ref": "2d5139df-01e3-4df6-9b91-2092235a053d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7a3d47e3-4545-4786-9ae2-2fdbd39df849"
        },
        "item": {
          "id": "ea584aa8-318f-49b4-bae8-1ebac0cab2de",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6fe27c4f-84b7-40fc-981b-98cd7d448165",
          "status": "Created",
          "code": 201,
          "responseTime": 3590,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "e23ed102-2eb7-4a70-be47-a02f7c05c816",
        "cursor": {
          "ref": "62c6bad4-fa03-42f5-8702-0b6c4b2cb4e3",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c4da57e8-4fc6-452c-97a9-9e1bf2fe619a"
        },
        "item": {
          "id": "e23ed102-2eb7-4a70-be47-a02f7c05c816",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c3878d97-1907-4921-829e-8a463c360421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "1904f086-f884-4692-b5f1-1b322e9f2af1",
        "cursor": {
          "ref": "3a719c90-7fa4-44be-b1b8-e438cddd1c6e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8bbc3fc2-b9ec-4615-bfb7-b7281b708e17"
        },
        "item": {
          "id": "1904f086-f884-4692-b5f1-1b322e9f2af1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b236e165-d0c6-432a-90d4-1550c8258cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "9b1c264e-3de1-47b9-ac4b-815963bbdf1d",
        "cursor": {
          "ref": "eaced1b2-3899-4cc4-9faa-cf89196dd979",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a0b023fd-4b41-4045-aefc-f40af002da4d"
        },
        "item": {
          "id": "9b1c264e-3de1-47b9-ac4b-815963bbdf1d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4595c028-558f-4bb4-a82a-6465b1d871bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "851c8cf4-1978-40d5-be08-8bc5c72af05a",
        "cursor": {
          "ref": "e29f42b4-080b-48a7-bc80-67d94439fa8e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "43dd4d1b-caf0-4b2e-a76d-b5d58f150039"
        },
        "item": {
          "id": "851c8cf4-1978-40d5-be08-8bc5c72af05a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4d9b912c-2758-4e99-8773-68d1ba642c07",
          "status": "Created",
          "code": 201,
          "responseTime": 2457,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "b15209d2-0adf-490e-8ba8-01cbba3af110",
        "cursor": {
          "ref": "3bd9f6d4-4c24-4b2c-9934-3b1cf1798633",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "265e97c0-0226-46ae-bf6a-68216f056b2a"
        },
        "item": {
          "id": "b15209d2-0adf-490e-8ba8-01cbba3af110",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "48ddf97e-2223-4f84-9ab2-76e5ee4c6447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ee2c5ac0-2e97-4f96-83bc-833d43cc7f0a",
        "cursor": {
          "ref": "959efd54-de15-4937-b74f-382d025f54dd",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ab72cf7a-9190-4356-9e87-a3cfc9e702e6"
        },
        "item": {
          "id": "ee2c5ac0-2e97-4f96-83bc-833d43cc7f0a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0282c7ee-3458-4fe9-99a3-ebd517cadff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "66799aca-8af5-4f86-94ac-ca8a29a5a82e",
        "cursor": {
          "ref": "ccaa141d-de73-461d-88bb-e2c398c33ead",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "004f52ec-001a-42a2-b95a-20e145f65576"
        },
        "item": {
          "id": "66799aca-8af5-4f86-94ac-ca8a29a5a82e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "69cfc3ce-c2af-481f-9609-7260db4c6c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "ede41a64-f58a-41d8-83e8-94b25b6487c0",
        "cursor": {
          "ref": "0b56c1c6-d290-4104-be48-d7e687cc0033",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9350a408-2d97-4c26-aaea-c0143f4fcef0"
        },
        "item": {
          "id": "ede41a64-f58a-41d8-83e8-94b25b6487c0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0850a94b-2957-4c74-b168-18eacd5b372e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "7f6bbb3f-d13e-47b5-a876-1c59f2aca394",
        "cursor": {
          "ref": "b2240a42-8db0-4f42-acae-32f1ff077125",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6524a16d-d727-4899-b4cc-e8a577cfcf82"
        },
        "item": {
          "id": "7f6bbb3f-d13e-47b5-a876-1c59f2aca394",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "28acd0bc-f080-4e69-8512-feed2b7a6d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "3a92e8b5-24b2-44f0-a557-401826a31cc5",
        "cursor": {
          "ref": "b14ca06f-f223-4670-a327-84c51c9ab5d0",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6cae2a5d-ecaa-4a73-a7ef-d74833ad2231"
        },
        "item": {
          "id": "3a92e8b5-24b2-44f0-a557-401826a31cc5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1c5380f6-80e8-44e3-bb71-83705818bc53",
          "status": "Created",
          "code": 201,
          "responseTime": 2730,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "eff64d81-f92f-45c8-b638-5dc5d7f4a5fe",
        "cursor": {
          "ref": "2e8b20b8-b77b-406b-ad1b-b6f02c8a0040",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8f50b4e8-e2a9-4556-b8fb-4de0a8b02288"
        },
        "item": {
          "id": "eff64d81-f92f-45c8-b638-5dc5d7f4a5fe",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1eead19a-4a90-4be3-bf08-e74f10dc7258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 546,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b220812d-c268-493c-a804-7c57528db1d1",
        "cursor": {
          "ref": "65e5427e-bd3c-4864-8948-2bc33fd6147d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "40aebb7d-6331-4bb4-9b41-3e2255fed563"
        },
        "item": {
          "id": "b220812d-c268-493c-a804-7c57528db1d1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f3dd8f53-a7dd-4cb7-a7b1-472b423f0395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "c506f325-8773-4b93-9d92-db52b3b887de",
        "cursor": {
          "ref": "e0e5493e-90c6-4e71-a31c-fe31972e1ed6",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8beaf480-01e1-4187-a062-27246b63542b"
        },
        "item": {
          "id": "c506f325-8773-4b93-9d92-db52b3b887de",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b5f72b56-77a6-48b2-b8ad-b7e9f8baa696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 358,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "d29494c1-5216-449b-943d-e1f8323233f7",
        "cursor": {
          "ref": "e6b4190a-19ff-4ab6-a245-66b5bdc7e9af",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "20ed2cf0-b002-4c01-b016-ba80d44797fd"
        },
        "item": {
          "id": "d29494c1-5216-449b-943d-e1f8323233f7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5ead1f08-01eb-45ee-9bb2-db4f71ef50e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "e25da45c-fd81-44df-b699-4d15f41986da",
        "cursor": {
          "ref": "4929985d-9c6e-40a1-87ad-a5275bd36469",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a7792b11-44ba-420b-a7b3-dfc4385dd54a"
        },
        "item": {
          "id": "e25da45c-fd81-44df-b699-4d15f41986da",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0e36b51e-fc3b-4e5b-8ca2-aa4375e92bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 341,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "88a598f1-8388-4ae8-8fe6-7afec143b1ba",
        "cursor": {
          "ref": "07fcb585-a52f-4c89-891f-7bbdeedce31c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5d67546e-bd0f-4fea-b0a2-d0429b80f703"
        },
        "item": {
          "id": "88a598f1-8388-4ae8-8fe6-7afec143b1ba",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "908da58a-d28a-40c8-980c-7a5927a5feeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "688bc7fa-e76a-4c4d-9bb6-6fb9baeca14a",
        "cursor": {
          "ref": "6a7368ca-a139-40af-b3df-b362f7a15a8d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9f0243df-fcb6-46ff-a92c-66d3ba63c094"
        },
        "item": {
          "id": "688bc7fa-e76a-4c4d-9bb6-6fb9baeca14a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d05fcb72-a8a7-477e-9f6f-b1e2d63ea85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "bd3f4f9a-6486-4e3a-b133-39d22cff59eb",
        "cursor": {
          "ref": "653ade87-35f2-4dea-a1bd-276b33b3b215",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b0ad88d8-9db6-4fa5-8421-6914dc7288b5"
        },
        "item": {
          "id": "bd3f4f9a-6486-4e3a-b133-39d22cff59eb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a05b8546-4c1f-4641-935d-7370d8664f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "77fccb32-eb71-4d67-a120-bb835647b49b",
        "cursor": {
          "ref": "fd95675f-07a5-4c67-9c1c-c8d26749ea01",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9ad2c379-f12c-48d8-bd3d-4f58be878ae3"
        },
        "item": {
          "id": "77fccb32-eb71-4d67-a120-bb835647b49b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9ce00512-e2d0-4734-9dd0-073ead32b6fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0de2e8c-aeb3-46ec-a757-781a432678e2",
        "cursor": {
          "ref": "59440d5e-fccd-4fc8-a2b2-69eef696de65",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e0ee140d-69a9-4056-a1e3-7df814665e33"
        },
        "item": {
          "id": "c0de2e8c-aeb3-46ec-a757-781a432678e2",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3f93707f-a14b-4133-b193-b6fc1d792eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "35dc2097-2a92-4d51-a88e-c1333ce58b2d",
        "cursor": {
          "ref": "42f5f89b-72f0-4fcc-8c1e-4ccb17aa053c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cb226f79-fc6e-4241-8e26-fc963cb90c13"
        },
        "item": {
          "id": "35dc2097-2a92-4d51-a88e-c1333ce58b2d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "028b5084-1021-4226-953d-796c5b041fec",
          "status": "Created",
          "code": 201,
          "responseTime": 2373,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:104)"
            }
          }
        ]
      },
      {
        "id": "18906244-80bb-4156-9bd3-23dd941f6aa3",
        "cursor": {
          "ref": "89960337-b031-457a-af4b-0362b543ca54",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ace548b6-0580-4243-88af-1d2b80afed7c"
        },
        "item": {
          "id": "18906244-80bb-4156-9bd3-23dd941f6aa3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3dc62f1e-bf9d-4edc-9946-64268c818bfe",
          "status": "Created",
          "code": 201,
          "responseTime": 2512,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:105)"
            }
          }
        ]
      },
      {
        "id": "a7cde4ac-74bf-40a1-aff5-730d494e8349",
        "cursor": {
          "ref": "9595491e-131a-4c58-936b-c28c71d63815",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "19866ff4-13cb-4328-bee5-28b1c2bb05ae"
        },
        "item": {
          "id": "a7cde4ac-74bf-40a1-aff5-730d494e8349",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "67010567-8263-499f-b4e8-bfd7900938d7",
          "status": "Created",
          "code": 201,
          "responseTime": 2753,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          }
        ]
      },
      {
        "id": "26b3e3a3-36b3-4e93-903a-36210ddaf8fa",
        "cursor": {
          "ref": "4d3c4d13-ca74-4f62-9325-5d93c4d82c4e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e48bf937-3805-40b8-b303-9479d9a7b433"
        },
        "item": {
          "id": "26b3e3a3-36b3-4e93-903a-36210ddaf8fa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5f1d133b-c0c8-4310-ac31-5463a269ce53",
          "status": "Created",
          "code": 201,
          "responseTime": 4487,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "ee284850-2454-480b-9dad-2ce5265476b4",
        "cursor": {
          "ref": "0c2e50f5-304f-46f1-894b-c0a14aa87cb3",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d72370d2-a323-41ec-963c-57c800571d3a"
        },
        "item": {
          "id": "ee284850-2454-480b-9dad-2ce5265476b4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d426cf6b-39d5-49ab-9289-8f0784cf6c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 369
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "456c4593-9e92-4f23-825d-a4ab61fea693",
        "cursor": {
          "ref": "6f9b48f3-0f6e-4649-908d-032ee446a162",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "23b87110-0fe5-4a88-9e42-524042ee7ad8"
        },
        "item": {
          "id": "456c4593-9e92-4f23-825d-a4ab61fea693",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bbec4623-0cfe-4ee9-acb1-ecd05f786908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "456c4593-9e92-4f23-825d-a4ab61fea693",
        "cursor": {
          "ref": "6f9b48f3-0f6e-4649-908d-032ee446a162",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "23b87110-0fe5-4a88-9e42-524042ee7ad8"
        },
        "item": {
          "id": "456c4593-9e92-4f23-825d-a4ab61fea693",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bbec4623-0cfe-4ee9-acb1-ecd05f786908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "134a9e7b-b4cd-4e0a-8020-757e9b438a10",
        "cursor": {
          "ref": "9e45a642-b9aa-4dab-90d8-c197473fd7dd",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8fc02850-cae1-413f-b226-d17483d5b489"
        },
        "item": {
          "id": "134a9e7b-b4cd-4e0a-8020-757e9b438a10",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a9d15f94-9084-4584-b9be-1d8f2716d4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9e6d9bbf-457d-4c1b-9581-a9b8d4d5942d",
        "cursor": {
          "ref": "41773138-7a9d-4170-9b15-316b5fc58d1f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6d9a43dc-d384-45b1-a44a-2c136a6310b5"
        },
        "item": {
          "id": "9e6d9bbf-457d-4c1b-9581-a9b8d4d5942d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a26a7b63-8a58-40a3-a364-002b1543b513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7524f35f-a4c0-4758-9d1f-ae1c5ef94f19",
        "cursor": {
          "ref": "5bc61449-88dc-4391-a0a1-74a4c7d4aecc",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cba48839-05f9-4554-9917-3b8cbf6d9328"
        },
        "item": {
          "id": "7524f35f-a4c0-4758-9d1f-ae1c5ef94f19",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3ffdc693-01cb-4da1-a060-5762d2dac49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9fce8b41-fa6e-4506-9db7-a81b6621506c",
        "cursor": {
          "ref": "1d1d5452-32a8-4bec-8d69-d87112c05587",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ce268158-0d1d-4b3c-9e4f-f4128c53e9d0"
        },
        "item": {
          "id": "9fce8b41-fa6e-4506-9db7-a81b6621506c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "261d4c0b-30c9-4914-b1b6-757d3c8b3307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "741b94ec-a6a2-43ae-8c90-aab197f422b0",
        "cursor": {
          "ref": "42aab863-8336-42be-ba1e-920b97b8988e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b328af75-0036-4ba3-8d4c-cbcfec5dee25"
        },
        "item": {
          "id": "741b94ec-a6a2-43ae-8c90-aab197f422b0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "11dc0429-18dc-439a-8106-533eb358547e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e5ea1b74-d99c-4004-8aa6-0fe6fd2ce9d6",
        "cursor": {
          "ref": "ff6c2b0f-4179-47e1-9bcf-f83f386797ad",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "632feb9b-e473-405f-9320-9b861ca479dc"
        },
        "item": {
          "id": "e5ea1b74-d99c-4004-8aa6-0fe6fd2ce9d6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3c0b90e7-404a-4e05-9f4e-effc1d550ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "45901e5b-d513-4576-9810-2801382d6d63",
        "cursor": {
          "ref": "66f53078-4059-4b5f-8fab-61a7131fcb7c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b5864159-d4d2-4649-992f-44c134cc67f7"
        },
        "item": {
          "id": "45901e5b-d513-4576-9810-2801382d6d63",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "715cfa84-47c8-450d-89f2-b461c82b5568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d4fcea57-10c1-4e5c-a133-6ef9e4091fdd",
        "cursor": {
          "ref": "2490384a-2846-43e3-8f06-ffdff8a39035",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b0e2a1d6-edc3-4541-8c09-6f4d66579953"
        },
        "item": {
          "id": "d4fcea57-10c1-4e5c-a133-6ef9e4091fdd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a420aadf-9f8d-4b3a-a763-b01b12361367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "8b290c49-f5d1-41f1-8820-23dcc766d9fc",
        "cursor": {
          "ref": "cf6a15df-3dc2-4df5-b16d-e62d27e495ea",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c4084259-bf10-474a-9581-175c139f5609"
        },
        "item": {
          "id": "8b290c49-f5d1-41f1-8820-23dcc766d9fc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a93b210a-b5b1-4b0d-9ab3-c8ce21322032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f617a4cf-df87-4017-b038-62af6ce770af",
        "cursor": {
          "ref": "d03120dd-3563-42ca-862c-ac425fb6425c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "19ff174b-e82c-46f7-941b-9dd075f810e9"
        },
        "item": {
          "id": "f617a4cf-df87-4017-b038-62af6ce770af",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "78d7231c-5bf1-4e03-af00-d9d6338bbeb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ecee3bad-ecfd-4007-a11e-2e329e220ed8",
        "cursor": {
          "ref": "96ae2bdc-c822-4151-994e-d9db42133ccd",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "446d8ff3-1a15-4a4b-9295-48b3c41a1976"
        },
        "item": {
          "id": "ecee3bad-ecfd-4007-a11e-2e329e220ed8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "13dde081-4e14-4690-a55d-5bade58d503a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6db93d7f-b06e-438a-891f-13376700f917",
        "cursor": {
          "ref": "5fc139c8-dc92-44c1-9258-4d9408e4e2cb",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "60f6965a-e3a0-4a90-a5fb-78fbc4f1a60b"
        },
        "item": {
          "id": "6db93d7f-b06e-438a-891f-13376700f917",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "304268c6-019d-4b48-a5a8-4d6e5a01d678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "42b6e9e3-a14f-4e35-a7c4-89b8b44cc1ef",
        "cursor": {
          "ref": "5e673aa1-b6de-4ff7-bb89-a6cc97513ae0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "db805206-774b-4192-bbdf-a6b0840c5b67"
        },
        "item": {
          "id": "42b6e9e3-a14f-4e35-a7c4-89b8b44cc1ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4770acf5-5299-4895-9db1-1de7061a06a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6fd40c42-01cd-45e6-858d-59a0ef37443c",
        "cursor": {
          "ref": "90531ee3-2e43-48be-91c6-eff2916b1b7b",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cad4b5bd-6be9-44cd-bf2b-0ff2834d04b6"
        },
        "item": {
          "id": "6fd40c42-01cd-45e6-858d-59a0ef37443c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8268dfbb-4846-4125-ac28-6accf3d2d72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "152bd8a7-0b95-4393-87e4-108206b6b656",
        "cursor": {
          "ref": "29606008-0ec9-4955-b058-d9d93dd247e9",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "344a59bd-97d4-4aec-9a40-101e579ac6e1"
        },
        "item": {
          "id": "152bd8a7-0b95-4393-87e4-108206b6b656",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1be5c525-e511-4dde-9eac-62270d39926c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "6edef6f6-5034-4206-bfb7-cecf1a164424",
        "cursor": {
          "ref": "e3b22509-3bd1-49fa-a32c-d1c62aa4b06c",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "46f995c2-625b-419c-986c-89058fa17019"
        },
        "item": {
          "id": "6edef6f6-5034-4206-bfb7-cecf1a164424",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e0dbaea3-feb7-4a8f-863f-b4b4ba2a0a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "bd51574f-7f86-411a-a774-6d525ec400d9",
        "cursor": {
          "ref": "b6c6f549-d133-46a1-b88e-4d116c5e2dc5",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ab34ab9e-fd6d-4630-88c2-d3440c3f0447"
        },
        "item": {
          "id": "bd51574f-7f86-411a-a774-6d525ec400d9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1c88a5bb-fe57-4e44-9b87-c5b582536b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "cba0b8ac-c5b4-45d8-b550-4ef896086b4f",
        "cursor": {
          "ref": "f7f9aaff-716e-40af-a140-d3ec215dcc7e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9100bad0-ad45-4e22-85f3-90fb9187e7fa"
        },
        "item": {
          "id": "cba0b8ac-c5b4-45d8-b550-4ef896086b4f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0277f339-1b73-45ff-8dc7-f2e4ab8c8b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "a5df97c8-d59c-4590-a5a1-438e809fa332",
        "cursor": {
          "ref": "a2d6c2cd-2dc4-4837-891b-da33910366ed",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "78d6571a-a823-4b19-b285-70702ace429b"
        },
        "item": {
          "id": "a5df97c8-d59c-4590-a5a1-438e809fa332",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "83e6766a-ddff-4730-869c-86b8003d6d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "79933ecd-cb2e-49c2-866c-d5a6cd2b86c1",
        "cursor": {
          "ref": "5b583c27-cd17-4f6a-a082-ea7910f21add",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7b08337e-3dac-48dd-a0e5-d8be92043724"
        },
        "item": {
          "id": "79933ecd-cb2e-49c2-866c-d5a6cd2b86c1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e8da82af-23bb-4bc5-a4c1-1d79dc05e136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "299494af-8cb7-4445-b3c8-bb3ace2f2993",
        "cursor": {
          "ref": "ff7e3b38-3a11-4f0c-8325-50705d138804",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ba331714-88e4-4ba4-bf06-1d0370b277dd"
        },
        "item": {
          "id": "299494af-8cb7-4445-b3c8-bb3ace2f2993",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "62838622-d4c3-4605-a9ae-0997545ba529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "3bbcd32a-56c9-4399-9b63-4a49559bab8f",
        "cursor": {
          "ref": "2b906eeb-0a5f-4605-8fb1-d310339ec310",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "84ba967f-0e0d-4a89-936c-61fa19ce6f61"
        },
        "item": {
          "id": "3bbcd32a-56c9-4399-9b63-4a49559bab8f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4307b099-dc44-48ce-9c29-fc9c04a316a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "50d3c67e-5f9f-4cf9-9744-3f8141ac53b6",
        "cursor": {
          "ref": "acda9e05-7ede-4d89-b12e-d67112139af6",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0bf899bb-983b-4bcc-a440-8419e8f912b7"
        },
        "item": {
          "id": "50d3c67e-5f9f-4cf9-9744-3f8141ac53b6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9be58a29-bf40-4f1b-9f8e-dc9942648a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e6b35236-f08c-44e2-a928-17f5dc575b73",
        "cursor": {
          "ref": "b0b226c5-3e49-47e2-a0dd-52eac9d40d43",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "15d4307f-058b-47d5-97b4-8b47acbd2351"
        },
        "item": {
          "id": "e6b35236-f08c-44e2-a928-17f5dc575b73",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "54d36fd3-bb86-4971-aa4e-ee09d81d1886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "330eb57b-6eaa-4f3b-acae-254c4097c121",
        "cursor": {
          "ref": "577ec2a1-70a2-4c4e-9ab1-9aec4e6593b2",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "355c70d9-b40e-428c-a121-6b888cd2bb3e"
        },
        "item": {
          "id": "330eb57b-6eaa-4f3b-acae-254c4097c121",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "87f2827d-9d8e-4212-be62-e10b157c45eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "b29eb7d4-2d44-4c07-9919-1029a69ad14d",
        "cursor": {
          "ref": "1a556fc0-c454-4777-8959-3766268359f7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2dcbfab3-415b-4e3b-ae3a-318afa458b69"
        },
        "item": {
          "id": "b29eb7d4-2d44-4c07-9919-1029a69ad14d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "20a31d4d-28eb-4def-8e42-ec51789c8fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5d83e85e-4188-4491-aea5-492b7ad3492a",
        "cursor": {
          "ref": "962fe9b0-117f-4a10-b6bf-7f09eb578216",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "234046cf-d97e-4d6b-9b26-1be0ef71ce68"
        },
        "item": {
          "id": "5d83e85e-4188-4491-aea5-492b7ad3492a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dd2b0eee-a71a-4e15-80c7-843836f0ebc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9a758074-3a34-47b3-ba21-2eb75ecbc7f7",
        "cursor": {
          "ref": "b098f0e6-97ee-4ac8-af82-25469a8e31f5",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2993b95a-16c9-48d1-adbd-4bbe88d6e774"
        },
        "item": {
          "id": "9a758074-3a34-47b3-ba21-2eb75ecbc7f7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "91b17d1a-e7c5-4707-a5cf-755edc6004bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1e7e50b5-e447-4039-ad4a-2217ad384eea",
        "cursor": {
          "ref": "98043197-fad0-46bd-8c9f-f627fa84a8f4",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e58e34cb-47f3-4f59-9f80-17cf2a1b8dc5"
        },
        "item": {
          "id": "1e7e50b5-e447-4039-ad4a-2217ad384eea",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a0349754-ae41-46e8-b87c-5ec766e32393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ef7e78be-3f01-4eda-93b9-dd32096c959c",
        "cursor": {
          "ref": "c8aee2c3-166d-4d9a-bb74-23227225cfda",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1fd8ddf3-5699-441e-96cb-6e6bec0ae688"
        },
        "item": {
          "id": "ef7e78be-3f01-4eda-93b9-dd32096c959c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "406e1d5d-2811-4647-a1c9-54228b5a5fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "8dc13125-13f2-433e-9ef0-9e16290c65f8",
        "cursor": {
          "ref": "cde9ae29-9cb0-45d2-add6-16dc5936b53c",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b0825232-82b0-4db8-a6c5-c1e6d3b087e8"
        },
        "item": {
          "id": "8dc13125-13f2-433e-9ef0-9e16290c65f8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0ee7b986-d409-4b68-a20c-92be5ab8a47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cc2a2fc8-3f61-4b7b-9507-30f6be90156a",
        "cursor": {
          "ref": "012fb513-278b-48fb-a0f5-911c562c5cad",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0f2313d0-59c1-4c7e-bd39-5b4783889e8e"
        },
        "item": {
          "id": "cc2a2fc8-3f61-4b7b-9507-30f6be90156a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c96c9a95-f0a3-42ec-94b8-06e4c44c79ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ad9070-6790-4545-a5b4-2ac3912b1028",
        "cursor": {
          "ref": "b7d4a7a3-ec2b-42ac-816f-e7e579c97a4e",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "372a855c-9924-4fe2-9fda-fff1560a71cd"
        },
        "item": {
          "id": "72ad9070-6790-4545-a5b4-2ac3912b1028",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "22c272b0-c8cd-49a0-87a1-1d661f072d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ec8ed3ae-0924-4dd0-9db5-b4cbf605a112",
        "cursor": {
          "ref": "3f4c6517-259e-41f1-84e3-2da57b80787c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bf06c85d-ab23-4a95-a486-d1572e52e1f7"
        },
        "item": {
          "id": "ec8ed3ae-0924-4dd0-9db5-b4cbf605a112",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c98b8538-1789-401c-b646-bdbe0cc6b9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ec8ed3ae-0924-4dd0-9db5-b4cbf605a112",
        "cursor": {
          "ref": "3f4c6517-259e-41f1-84e3-2da57b80787c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bf06c85d-ab23-4a95-a486-d1572e52e1f7"
        },
        "item": {
          "id": "ec8ed3ae-0924-4dd0-9db5-b4cbf605a112",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c98b8538-1789-401c-b646-bdbe0cc6b9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b4fe7b47-ad70-4e67-996c-bacbebe41186",
        "cursor": {
          "ref": "68b6f997-fc5c-49ba-8a69-68fb09114637",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "57e5897d-4469-4566-b17a-f9ed98907c77"
        },
        "item": {
          "id": "b4fe7b47-ad70-4e67-996c-bacbebe41186",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8aa27034-6032-48e1-aa63-5c6e3823328d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "9ee1a124-c787-4e4a-93f5-ebb9fbf23f23",
        "cursor": {
          "ref": "076ae733-c472-4d9b-861b-e6a65ff520fa",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7968b962-7bb6-4af7-894c-9f8a6046a56b"
        },
        "item": {
          "id": "9ee1a124-c787-4e4a-93f5-ebb9fbf23f23",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "76602292-6408-4cdf-a8a1-7f345c3869a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "458ced53-0da8-4182-a45c-6c60f86515a9",
        "cursor": {
          "ref": "597db041-c493-4577-b467-bf1feed9a089",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b7cfe50c-2203-44a1-905e-76c6edb7c757"
        },
        "item": {
          "id": "458ced53-0da8-4182-a45c-6c60f86515a9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b230dc14-f289-4aec-ac37-3e2ea426ce7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "c851935c-58f9-4148-a68e-307174ad9777",
        "cursor": {
          "ref": "1da49eda-4597-48e4-b4ee-7f38217a5ed1",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c4c653e0-1fe0-456a-9aa9-9492e54874dd"
        },
        "item": {
          "id": "c851935c-58f9-4148-a68e-307174ad9777",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "99a9ac3c-8bd5-4ce2-bb94-992fcd501d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "8719b3b3-ac43-44e0-b155-07cc07f43cb1",
        "cursor": {
          "ref": "b93d9f8b-685c-43f8-a2ab-20ea2eb9f6a6",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "79d1a9cc-31f7-4beb-a62a-f5d6a09471b0"
        },
        "item": {
          "id": "8719b3b3-ac43-44e0-b155-07cc07f43cb1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bc7ff918-feec-4c30-b42c-97d3e4a0042a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "1ada3884-3c2e-47d8-9c09-fd386ff2b669",
        "cursor": {
          "ref": "e073fbbf-dab5-4861-9b33-e8e9d864d272",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c4f9b209-4c63-41a8-8580-570cec3a6638"
        },
        "item": {
          "id": "1ada3884-3c2e-47d8-9c09-fd386ff2b669",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a17a5a3d-3769-4716-bd15-a149e706287c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "6739dd55-0954-4919-b05e-5d50e8c72bfe",
        "cursor": {
          "ref": "2b8ab10e-6606-4ff6-b6c3-b7c29d64179e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "71c58fca-af20-4b3d-8395-f8600f14c8f5"
        },
        "item": {
          "id": "6739dd55-0954-4919-b05e-5d50e8c72bfe",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "49c85f27-ca8d-4d23-a332-9c52b1fb76ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "b7030de7-5577-4e89-aea4-accf22ec2f80",
        "cursor": {
          "ref": "96dcab17-d787-4567-97c8-aa3aea851ad9",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2b8a181b-409f-4b55-9ec1-275e0949ad28"
        },
        "item": {
          "id": "b7030de7-5577-4e89-aea4-accf22ec2f80",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "84fb50b1-001d-4234-94e2-d17e78bf1c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "52b6def3-eabf-4bd3-b833-f4134474d846",
        "cursor": {
          "ref": "4535d4a4-641a-4f45-a58d-69847a967e27",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a52ab632-2745-43ee-8e6e-3b07b387de13"
        },
        "item": {
          "id": "52b6def3-eabf-4bd3-b833-f4134474d846",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3906bba9-83be-4bbf-82a5-88b9c878d3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "ac1264b0-52f3-4e85-80e9-eabeef5c0c35",
        "cursor": {
          "ref": "d69be9e7-6d30-47ac-96e9-5047c33d6965",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "75021a06-21d5-4224-9e68-f9718c6acfca"
        },
        "item": {
          "id": "ac1264b0-52f3-4e85-80e9-eabeef5c0c35",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f4a9ddab-484a-44ff-a25f-5a32bf0bf144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "659c7bba-9f27-49b4-84a2-baf2fcd806f9",
        "cursor": {
          "ref": "2cdb9623-135b-4b07-97fb-05709e79b5c2",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "36d00a0a-d74b-4f02-9d9d-cdba4fe270a4"
        },
        "item": {
          "id": "659c7bba-9f27-49b4-84a2-baf2fcd806f9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "98fe9940-2dcc-4b32-89ec-6b2337d213b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "ffd9b56d-be29-43a9-8475-10d5e4b92bc9",
        "cursor": {
          "ref": "e610de77-f70f-494e-954d-3f618d34a0a7",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "04e16c99-1d1a-4dba-bafe-6f4d91d34acc"
        },
        "item": {
          "id": "ffd9b56d-be29-43a9-8475-10d5e4b92bc9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "54915418-3e16-4d46-b33d-3c9297ff8f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "5fad5c74-9c98-49ab-a814-951abbe6db4a",
        "cursor": {
          "ref": "8ff9e0b7-a35e-4e34-b328-611ad2a42bb7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d072241e-1df2-4e7a-a1ee-be19d4fd685a"
        },
        "item": {
          "id": "5fad5c74-9c98-49ab-a814-951abbe6db4a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "620214c7-f0a7-4f64-8a97-09fe35d2f60c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e79b0e34-82c7-4e1e-8d63-91e116dee43a",
        "cursor": {
          "ref": "768ba018-cdbc-432b-b41e-46f1f03e3f06",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8c2485cc-344b-4b22-8dff-0a5c06963506"
        },
        "item": {
          "id": "e79b0e34-82c7-4e1e-8d63-91e116dee43a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7c8e35e9-9967-45a4-980a-8abb79eb5209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "4be6c883-a02c-450e-bc40-7d9c1d18dfb3",
        "cursor": {
          "ref": "2715eb0a-69f7-46e0-859c-8f91a0b74156",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7c712765-b674-4ae0-b1a0-3009bef0bd83"
        },
        "item": {
          "id": "4be6c883-a02c-450e-bc40-7d9c1d18dfb3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4850ac7f-c828-4e67-8ea1-403d3853a2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "212df632-4427-415e-8368-72187c41431c",
        "cursor": {
          "ref": "ed78b4cb-ee7f-4d8e-944d-a40abbd0d369",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4939d293-fc90-4d3c-9a3e-d0cfe1f68cb1"
        },
        "item": {
          "id": "212df632-4427-415e-8368-72187c41431c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "64c2866a-dd5f-4b7b-82f7-b8701aeca20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "597f7c7b-d22c-4a18-a9e7-1961587d7ea8",
        "cursor": {
          "ref": "5af06628-fda6-4665-91c9-0dccc1817a89",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "be0b918e-3021-402e-b369-7e958756a270"
        },
        "item": {
          "id": "597f7c7b-d22c-4a18-a9e7-1961587d7ea8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8966887e-d3c5-44d0-b6e7-30af4948b69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2337,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "7f443c98-5c65-478f-83a7-4071704ffcc4",
        "cursor": {
          "ref": "1be12e9e-4c04-4318-8da4-473751363e90",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ac51a9de-6ecb-4180-af8c-c148504fc0f6"
        },
        "item": {
          "id": "7f443c98-5c65-478f-83a7-4071704ffcc4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6353a07e-2369-46ef-8020-77cc759b9090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2458,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "6234e304-2815-42ef-a5f2-3fa990ba62ab",
        "cursor": {
          "ref": "470a5d77-52a9-44d5-987e-9c50507cb6ae",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3b1eaa7f-f668-448a-90e3-f5bc5c00e6c3"
        },
        "item": {
          "id": "6234e304-2815-42ef-a5f2-3fa990ba62ab",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "aadab595-377e-4996-84c2-142125f55647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4753,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "55ee36e0-d69c-440e-ba47-b37561a921d1",
        "cursor": {
          "ref": "6ced4d12-0a6b-450c-9258-bdfc0fd170ac",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cfd239f3-c605-4dff-8c5b-bf79dfdd3a50"
        },
        "item": {
          "id": "55ee36e0-d69c-440e-ba47-b37561a921d1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1a32c654-147d-4350-8614-76618dbc4cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "fd44d897-6c41-4dd4-80f8-c1f1ab94a684",
        "cursor": {
          "ref": "6a7d40b3-2fbd-4192-98a1-3080ddae867e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "83fa583f-89c1-4e3e-aae9-2a46cb8d52ad"
        },
        "item": {
          "id": "fd44d897-6c41-4dd4-80f8-c1f1ab94a684",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "64dcf898-91de-469e-9d80-50789da30fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2356,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "35bc34c5-832a-489e-a05f-0b569f6888a2",
        "cursor": {
          "ref": "c7305169-c61a-4004-8529-adc565028153",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f114f102-33e5-4ea2-b0ae-26b109bb5233"
        },
        "item": {
          "id": "35bc34c5-832a-489e-a05f-0b569f6888a2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2edd1540-b505-4e3c-a928-85ddc1704a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "1af10e5b-ec5b-4dc6-9b81-0815fb77dc26",
        "cursor": {
          "ref": "e9c37766-1af3-4413-806a-27e20d02f8d3",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8985ae0a-b66e-4eba-adcd-80706e9237a5"
        },
        "item": {
          "id": "1af10e5b-ec5b-4dc6-9b81-0815fb77dc26",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "266b40fe-a425-432e-a2a4-7a7a5ed401ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "b5453954-e209-4efd-9473-6977f3f475d5",
        "cursor": {
          "ref": "74c5400c-cb9b-46d6-8eed-e64ff2309adb",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2eb70f51-cffc-4bc3-8a9f-67e4e0923433"
        },
        "item": {
          "id": "b5453954-e209-4efd-9473-6977f3f475d5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bb710150-1978-48a3-b69c-58c297a089f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "aec8d31e-dadf-4d98-9312-07f9537d8ded",
        "cursor": {
          "ref": "6629a7e7-3543-4710-a9e7-9104e9f72c37",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dabe87ba-a750-4b80-acc5-d8dd91aef276"
        },
        "item": {
          "id": "aec8d31e-dadf-4d98-9312-07f9537d8ded",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b7b71e6f-dc59-49e0-a104-a1dff5a675fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "32d03fce-9e90-4ae1-9aeb-73c987e3ce56",
        "cursor": {
          "ref": "889c6886-0504-4ac6-abee-73cfb8695774",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "12c426a4-2d13-4b06-b2b7-9ba9fd10c7db"
        },
        "item": {
          "id": "32d03fce-9e90-4ae1-9aeb-73c987e3ce56",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bcfe1fe3-87a7-4a64-bef3-6e7fed54d324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "0af194e0-2dfd-4d3e-9426-62627221e199",
        "cursor": {
          "ref": "f1e3a8a8-0618-4ddb-af26-b646728629d8",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cd65c329-4c85-4ade-a1e2-3e89dbbe248e"
        },
        "item": {
          "id": "0af194e0-2dfd-4d3e-9426-62627221e199",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8811a4ad-8460-4e31-bf46-15454d3d6081",
          "status": "OK",
          "code": 200,
          "responseTime": 2347,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "8754825e-40a6-4adf-b413-93b7342f7f4a",
        "cursor": {
          "ref": "7f114f4b-d8ce-4b16-939b-8e89bf89c9df",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8c232181-e264-4ec4-a10c-a4f8a2ae547d"
        },
        "item": {
          "id": "8754825e-40a6-4adf-b413-93b7342f7f4a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3ca88d41-46fb-462d-a9cb-983a90c75bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "9428a572-d61f-433e-8ed2-0a995b2405cf",
        "cursor": {
          "ref": "4d7e4953-cb53-411c-aabd-0fb7b7dc9206",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3017dd8f-9256-4db4-8cca-99ab7ec64515"
        },
        "item": {
          "id": "9428a572-d61f-433e-8ed2-0a995b2405cf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1321ccc2-31ba-4069-8d64-1a2583d48291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "a1b53e49-4aa0-4538-950c-02b3b337be59",
        "cursor": {
          "ref": "33d7c831-6df6-4c91-ab37-6604206d3fc6",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "936cc675-70ae-42f3-ab5b-5f846500ce53"
        },
        "item": {
          "id": "a1b53e49-4aa0-4538-950c-02b3b337be59",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "75862ebb-9e12-4f4a-89a3-b354ffa66686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "ea987a0c-7754-40d0-b671-bbfdab4f8b82",
        "cursor": {
          "ref": "3f7b513f-6822-4f0f-9830-a4568a7ba9ad",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c03a5bf6-74ea-401c-a8f1-584160d14c9c"
        },
        "item": {
          "id": "ea987a0c-7754-40d0-b671-bbfdab4f8b82",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "12f1d0b3-95af-4af3-9da4-f656cfecd302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 369,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "5a006325-9ecc-4fdc-a543-1e2dd5f3decd",
        "cursor": {
          "ref": "38188ae7-eac5-4aa2-b8b0-098c5ae33247",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c08ae36c-00cf-4712-aae4-f201fb8501da"
        },
        "item": {
          "id": "5a006325-9ecc-4fdc-a543-1e2dd5f3decd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7de36f9f-6e7d-440e-abe2-9d9e4582bf73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 445,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "3da7e6ba-1a5f-4c03-a8eb-3650d29e44ad",
        "cursor": {
          "ref": "c887ba83-20b4-428d-b3e0-1ac2add5aa79",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "933bc465-bc44-49f7-a3d4-d8bf25de8839"
        },
        "item": {
          "id": "3da7e6ba-1a5f-4c03-a8eb-3650d29e44ad",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6dac529a-f0fc-4dd7-b7c9-bee3fb0807e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 367,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "2873d0b1-5bc4-4962-a25b-958d09f4dd36",
        "cursor": {
          "ref": "39a067a7-e7f0-430d-b744-c5c5905bb92a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3213eec8-ab75-4919-9029-4530bddf0fed"
        },
        "item": {
          "id": "2873d0b1-5bc4-4962-a25b-958d09f4dd36",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1dd07d2c-435e-4ab6-9ee8-ec9d700c7da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "78774408-1e9b-4c8a-80ef-beebc51089dc",
        "cursor": {
          "ref": "0fc10ef8-55d0-4447-8970-9169f02b30ae",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f36cc6b5-0a3f-40fe-b8cd-2f09be7f94bc"
        },
        "item": {
          "id": "78774408-1e9b-4c8a-80ef-beebc51089dc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b37ed746-33ea-4a10-8a45-d83d4e41da87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "bc2c67f8-937b-4a48-af2d-bda986595083",
        "cursor": {
          "ref": "1fc9ea24-c95e-4068-bba4-735edeccde95",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b4108e41-1af5-41c8-bdbb-e7c49e198271"
        },
        "item": {
          "id": "bc2c67f8-937b-4a48-af2d-bda986595083",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "053036be-3f0d-46fe-a05b-155a7a010417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "e9246785-68e7-4f4b-8fe7-1721b3b64cb4",
        "cursor": {
          "ref": "40ba0c06-f918-4ee6-a340-0a00aff537dc",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d727853e-47a4-40cf-8af6-a47a21e2159b"
        },
        "item": {
          "id": "e9246785-68e7-4f4b-8fe7-1721b3b64cb4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "26168ce4-9a42-40b4-b446-34cf70f15e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "edebe39f-353e-4083-9747-cd41636aef0f",
        "cursor": {
          "ref": "30249ba6-28bf-4ea2-bae7-5aad36fb5e64",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9b471709-0f5b-4b21-b82f-f2d25deca83c"
        },
        "item": {
          "id": "edebe39f-353e-4083-9747-cd41636aef0f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c9b11000-9555-441a-9d6a-bdc35de1c7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "90ac5378-aba5-4443-b5c0-91fc67b7edc8",
        "cursor": {
          "ref": "12b731bb-56ad-45e6-9ce4-71ca27fe88a8",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0a476afc-a21a-497d-a404-e2b53b0fd3c3"
        },
        "item": {
          "id": "90ac5378-aba5-4443-b5c0-91fc67b7edc8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "84e6c745-fd32-49c9-b7a9-0455532b89d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c91adbad-b312-423a-bcb4-2ea7408c7f35",
        "cursor": {
          "ref": "0b64ab3a-b89c-4a6d-a8be-a9ac0d3bc008",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e9240bcb-62a2-4203-85b1-cf9628b30301"
        },
        "item": {
          "id": "c91adbad-b312-423a-bcb4-2ea7408c7f35",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e88f011f-d5e9-4634-9471-85922643191d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4c8ead34-a426-42df-9b08-ea268391bd69",
        "cursor": {
          "ref": "4d15f351-debb-49ae-be68-61818cafaa08",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6e61487e-8ffb-499f-a215-932921751722"
        },
        "item": {
          "id": "4c8ead34-a426-42df-9b08-ea268391bd69",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d79b2555-2d74-4623-aa36-54269e838243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "fb86076c-e916-4a5c-8f6f-471b24f2f94d",
        "cursor": {
          "ref": "26d6baf3-77f8-41fc-9b46-d3c68d824392",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "45be2f33-abf1-40cf-b0de-75f79461a68d"
        },
        "item": {
          "id": "fb86076c-e916-4a5c-8f6f-471b24f2f94d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3de8c37c-0c59-4989-a152-7a138ab983c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "85ea8bcb-2539-46f3-a8f7-daf83b809157",
        "cursor": {
          "ref": "59808d5d-e5f6-4941-82b5-28510eccf1ab",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1b048f58-e993-4f50-9055-55755b362fb1"
        },
        "item": {
          "id": "85ea8bcb-2539-46f3-a8f7-daf83b809157",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "be048d01-92a6-4032-82f8-ca602b8e5e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "412b09c1-2be0-4c09-83e6-a9844a5c85af",
        "cursor": {
          "ref": "a0dd1fe1-6453-49c1-9f61-b0d534807eb8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "08b33b01-6b6d-47d7-b686-6cd9fc4d8670"
        },
        "item": {
          "id": "412b09c1-2be0-4c09-83e6-a9844a5c85af",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ce269efc-15ea-4a08-875c-3b12736f1e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "23c9dca1-eb87-4112-a599-ae5151ecbb97",
        "cursor": {
          "ref": "5d88a401-e10b-4fa6-9536-a551c3ba69f7",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b0d9d310-81b9-4eed-bd64-6fdefdbc6258"
        },
        "item": {
          "id": "23c9dca1-eb87-4112-a599-ae5151ecbb97",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2d44b708-d076-44ec-8904-2089672559b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6f9105e1-7837-4e5d-ba5f-81af7142abcf",
        "cursor": {
          "ref": "24f7ced8-9c21-4100-b66a-7a6f409db761",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ef919979-1a73-4d8c-82ba-c7a9e3ca28d5"
        },
        "item": {
          "id": "6f9105e1-7837-4e5d-ba5f-81af7142abcf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c4b7c7ba-b3b9-443d-b759-e4ea38553fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "2dd09ea7-4d61-4a35-84db-6f087e7546cd",
        "cursor": {
          "ref": "dd786fa9-a7e6-433f-89fd-b007ead8267a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2d7345f0-748b-40af-952e-8ca0c9f56c67"
        },
        "item": {
          "id": "2dd09ea7-4d61-4a35-84db-6f087e7546cd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6d19f166-e195-4b68-8fc7-f557112707e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5a3118f4-325d-49b4-bd59-2755bf28aa3c",
        "cursor": {
          "ref": "1c57be09-bfce-418c-bcee-827e96196070",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a672d3ee-85b6-4cc9-af4a-41c36df85cb5"
        },
        "item": {
          "id": "5a3118f4-325d-49b4-bd59-2755bf28aa3c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "134c0ded-4fd3-4ce8-9e33-4138b2f12a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "60494215-38e6-4c7b-acfd-600ddfe47fb2",
        "cursor": {
          "ref": "715f738d-8b93-43c1-abba-ec90428ffa2f",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ec9835b3-09d4-4bc6-b63a-bc93ba9c66d9"
        },
        "item": {
          "id": "60494215-38e6-4c7b-acfd-600ddfe47fb2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "431de1aa-dddf-4a37-9485-13b4ae6463fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "36846529-a11b-4e08-ba94-bc81b73686be",
        "cursor": {
          "ref": "a34d74d6-42a8-4598-99be-c311aad105e8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9f5453fb-4b0c-4446-8ab1-4c75ec6a2b64"
        },
        "item": {
          "id": "36846529-a11b-4e08-ba94-bc81b73686be",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e2d03145-6cec-44ef-8c43-1ffd6419edf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "b6e73f19-aa22-4ebe-aa9e-9eb639eb97c0",
        "cursor": {
          "ref": "be0bdc57-31ae-438b-b4de-49eda43f5927",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4b79b0c4-86f3-4df1-87c2-443d7bd19b8b"
        },
        "item": {
          "id": "b6e73f19-aa22-4ebe-aa9e-9eb639eb97c0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3e5731ec-790e-4929-af79-3a55ed80879b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "566d1a1c-23e8-4a67-8d92-e62ff5a8c182",
        "cursor": {
          "ref": "6f2ba1d7-91d2-496e-b62d-fec7f53da8df",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8ad4c451-151a-46a7-837d-5f0ca0c2e851"
        },
        "item": {
          "id": "566d1a1c-23e8-4a67-8d92-e62ff5a8c182",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f9533f17-005a-45d8-b200-00537875e9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "52ce8d90-e2b4-4f2b-b50b-051b2b430c7b",
        "cursor": {
          "ref": "a633c81b-809e-4200-861c-c22aedcce717",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dc43b5b8-9941-412e-b276-8f2a36a7793c"
        },
        "item": {
          "id": "52ce8d90-e2b4-4f2b-b50b-051b2b430c7b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a7fb0e4f-4d71-4d67-97d6-42f5c2a47399",
          "status": "OK",
          "code": 200,
          "responseTime": 2183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "c8b63ae6-36fa-4f80-9b84-fc0891765f54",
        "cursor": {
          "ref": "c153f74e-0b11-4746-907a-a9ccc9bbea80",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dce79308-23bf-4b77-b601-463ec6be4e72"
        },
        "item": {
          "id": "c8b63ae6-36fa-4f80-9b84-fc0891765f54",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5fcbac77-a8bc-4f07-93c0-46303ad85bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0fe92fd3-a405-43a9-af57-c3eb11a556be",
        "cursor": {
          "ref": "0ef6e7b3-1dcf-41a5-8a05-7dd82b0acc3d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5f53f112-c1fe-4827-a106-c295f0f5a6ac"
        },
        "item": {
          "id": "0fe92fd3-a405-43a9-af57-c3eb11a556be",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6de0ac99-b909-46b4-96f3-d447058674dc",
          "status": "OK",
          "code": 200,
          "responseTime": 2448,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "6de3cde9-28f0-4d40-af73-ae818b56594a",
        "cursor": {
          "ref": "698811f6-0bfc-4e58-932b-17884834c025",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cf2cc9bf-3776-4918-b5b5-6e044b7a0897"
        },
        "item": {
          "id": "6de3cde9-28f0-4d40-af73-ae818b56594a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "810b32fd-2bb3-4da3-ab38-7f893eeecb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "e7722ebc-fc40-47e4-91da-3a7029bbbe90",
        "cursor": {
          "ref": "e3903ce0-8905-41f9-b691-9f18e00abf1b",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8875aada-0f5c-4dbc-a020-e84bed4e9d5e"
        },
        "item": {
          "id": "e7722ebc-fc40-47e4-91da-3a7029bbbe90",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "66868c0e-03ae-4416-acfe-0b5f8b69f8d4",
          "status": "OK",
          "code": 200,
          "responseTime": 2353,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "777616bc-6516-4164-88a0-92d77f71f2e6",
        "cursor": {
          "ref": "b94f20f3-dbf1-481d-ba3c-33cd97b71034",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5463e5ca-973a-4d0d-9e61-8a258926b2e8"
        },
        "item": {
          "id": "777616bc-6516-4164-88a0-92d77f71f2e6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "79dada08-61ff-42e6-893e-d4d94c263dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4552,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "363f3f74-ea47-47de-bf6f-ad8cca2fbd60",
        "cursor": {
          "ref": "754141e8-04fe-40a9-b0e4-1c07631b4bd8",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "aad56617-0990-417f-aede-65013dc8249f"
        },
        "item": {
          "id": "363f3f74-ea47-47de-bf6f-ad8cca2fbd60",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "03de5790-c02f-4454-b8ea-a9039ffe5874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2354,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "581a27c8-5192-4e5c-9b0c-e91eefc27501",
        "cursor": {
          "ref": "6573fec4-63c6-46a2-8cca-18c80620c72c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b3d58ba8-46db-4a64-bd19-7828ecdd7b82"
        },
        "item": {
          "id": "581a27c8-5192-4e5c-9b0c-e91eefc27501",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9d1980a7-12e6-43c1-9adc-b5feb51ec4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "f480654f-a5a9-4491-a692-7b44c290e5b4",
        "cursor": {
          "ref": "fe3bcd4f-033e-4d6a-b268-a3e91a60441a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d3401672-0822-428d-b638-d8eedc0907a4"
        },
        "item": {
          "id": "f480654f-a5a9-4491-a692-7b44c290e5b4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ed567dd0-7cc0-4513-9137-bac1cebe622d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2306,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "2f99abc9-801f-444c-a253-c6bc9c9178b7",
        "cursor": {
          "ref": "830c1feb-1212-4354-af3a-a425a5bd586d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "21ff6956-1486-4f46-b456-974a43e01eef"
        },
        "item": {
          "id": "2f99abc9-801f-444c-a253-c6bc9c9178b7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6a12df3d-fc23-420b-8b28-bac9d5876271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 441,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2e238096-e590-499e-b2b8-3e47d1cc1343",
        "cursor": {
          "ref": "c26275bd-bcc3-486d-b288-74744d76f953",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7de0f65b-30c2-4fe6-a0bd-873e0c8c6381"
        },
        "item": {
          "id": "2e238096-e590-499e-b2b8-3e47d1cc1343",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8265c3ef-f28a-456a-96c0-afea4f737cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "aa6fd8ba-b501-40b6-87ff-5470f0d0c492",
        "cursor": {
          "ref": "c9a1abde-e29c-4245-bc66-78f1cf101281",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "11c6a144-16ba-4d40-93d7-75c36a630b15"
        },
        "item": {
          "id": "aa6fd8ba-b501-40b6-87ff-5470f0d0c492",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0d06673d-8934-4e9b-898e-985291f734bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 348,
          "responseSize": 61
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f007673e-4af4-45a6-b81d-3b89e9fa04ab",
        "cursor": {
          "ref": "809443bb-ba80-4291-8808-d35393615478",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fe74b5aa-5a6f-4e25-8487-eb78545e43af"
        },
        "item": {
          "id": "f007673e-4af4-45a6-b81d-3b89e9fa04ab",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0ab40c36-bf19-4bee-98c4-eadff59b0554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 462,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "97c50888-4b53-422b-ae1a-3fb5c0ec9847",
        "cursor": {
          "ref": "3281ccf2-4539-48bf-9a1c-968bc9b75597",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c1980967-6569-4897-ae94-037c523f852a"
        },
        "item": {
          "id": "97c50888-4b53-422b-ae1a-3fb5c0ec9847",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "55289a45-d4f9-4ea2-a13b-5f5cc85fc143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "93a2af86-0f8d-4e2d-bd28-fe8f1a4d0c95",
        "cursor": {
          "ref": "77c6283d-40d3-43a1-9d62-4150f54800ac",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4eb7b08e-c09c-4c09-92c6-63376065b4d9"
        },
        "item": {
          "id": "93a2af86-0f8d-4e2d-bd28-fe8f1a4d0c95",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2d81f12a-5db7-41ad-90e3-1e993e30eb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "84795861-1598-455e-a49c-60ec933411ec",
        "cursor": {
          "ref": "91f49563-c0b3-44ce-931a-b30e58a334cb",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bcfb1cd2-0de9-4103-90d7-c1930ca006f9"
        },
        "item": {
          "id": "84795861-1598-455e-a49c-60ec933411ec",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d4752345-21dc-4673-b088-64c0034b7b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "35328df8-bb64-43fe-a202-26dbebda128b",
        "cursor": {
          "ref": "c2c00311-e6d4-437f-b6cd-49355368a5e3",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e0c9ca75-3e6f-4f44-aa69-d2a7b96c044a"
        },
        "item": {
          "id": "35328df8-bb64-43fe-a202-26dbebda128b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d523d59c-72d9-48b6-a159-6de95f0e260e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "1c337980-3c6b-4168-ad3d-653ce6849aab",
        "cursor": {
          "ref": "4600866c-24ad-4849-b19c-7fa8138c47ec",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7c12b40d-f2e8-4430-961a-353d6c4f778c"
        },
        "item": {
          "id": "1c337980-3c6b-4168-ad3d-653ce6849aab",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e230310f-4dc1-409b-b614-8a1e9702b0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "a0490153-4b09-4487-834f-0fa85a53e9a0",
        "cursor": {
          "ref": "d5cd0308-dd08-4c29-a244-b481e8f42380",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "593e2b05-053e-495e-adee-d3835621b866"
        },
        "item": {
          "id": "a0490153-4b09-4487-834f-0fa85a53e9a0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "018354f3-dd0f-4c76-92ab-68a108b94731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b22f35ef-a917-4853-9df2-b217dc0eb579",
        "cursor": {
          "ref": "5bf99cdb-f5b4-468d-9e3b-a3145c6e9ab0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f2d03ea9-3951-4b85-be03-8987f33cc6fd"
        },
        "item": {
          "id": "b22f35ef-a917-4853-9df2-b217dc0eb579",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "651948e1-2d27-426c-8455-fce3406a47e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3f1e2b53-5183-444d-ae7a-929e807fddad",
        "cursor": {
          "ref": "95abada7-bee0-4d83-9765-c27f146cc382",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "02ed4dc4-bfa2-4b18-a997-f2e63c3a01ab"
        },
        "item": {
          "id": "3f1e2b53-5183-444d-ae7a-929e807fddad",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5d72a1c9-d214-406e-9f4e-701fddbd3498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8b64f7aa-e1d6-4b4a-bb2c-5f51ebb672ce",
        "cursor": {
          "ref": "695bf451-1503-4607-b101-3d159107290c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8e7762a4-714d-4c7f-a672-0d4f64f7227e"
        },
        "item": {
          "id": "8b64f7aa-e1d6-4b4a-bb2c-5f51ebb672ce",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ac3497ed-4c90-441a-9af9-a12762c718b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "dd3f9da9-39fd-4d3a-ac25-2d088acbb446",
        "cursor": {
          "ref": "85551492-f5ce-43d9-a0ed-9d83abb37cda",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "16f37529-d516-4841-88ca-48f69208a7c5"
        },
        "item": {
          "id": "dd3f9da9-39fd-4d3a-ac25-2d088acbb446",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "174983d7-cff9-485d-accb-d336df584f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "19cd620c-c948-401b-9c5c-bdd44f526265",
        "cursor": {
          "ref": "7cec7ee1-24cf-496e-b631-a297dbc9ad89",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4cba3ace-5b8c-4d57-b276-e7fde47028eb"
        },
        "item": {
          "id": "19cd620c-c948-401b-9c5c-bdd44f526265",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0ee2cc8a-7397-4fa9-b81b-674730ccbc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cc2048ce-b06c-440b-9505-cfa8fd36a1a6",
        "cursor": {
          "ref": "94299f2c-2a26-48f7-9eb3-c35a4912056c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b6ce5bbb-a6be-4278-9398-8aa7fb737a2d"
        },
        "item": {
          "id": "cc2048ce-b06c-440b-9505-cfa8fd36a1a6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e64e008d-2666-40e1-95c0-a5a7b1ce7023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "82323a22-feb1-4168-90e0-f5372d739ad5",
        "cursor": {
          "ref": "762bdcab-da1a-4450-99ef-ef3081cba17b",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f8c7cd80-7d78-4608-969e-05754257500e"
        },
        "item": {
          "id": "82323a22-feb1-4168-90e0-f5372d739ad5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "63ba98a7-6a65-456d-9f8a-af395d92ffa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "515d6b09-2937-4f0c-8c31-bd7a52678424",
        "cursor": {
          "ref": "e8ec4a62-9a95-4444-a6ca-3359f6b61b56",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2b1b46a8-1a38-43c7-9169-7d4bf94a41d4"
        },
        "item": {
          "id": "515d6b09-2937-4f0c-8c31-bd7a52678424",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7c5da815-4951-410b-9834-a2d2d01a419f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "44d73133-c1bf-42b5-8e2c-773f7ba58641",
        "cursor": {
          "ref": "9eb6f45c-4fbb-4eb7-aede-e2ff010aa83e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b46a8335-e74c-4cb9-a3cb-c59144ea586c"
        },
        "item": {
          "id": "44d73133-c1bf-42b5-8e2c-773f7ba58641",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c3f94ee8-2136-42a7-80f9-b38b9d52d100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0068f6fc-6d9c-47aa-aafb-faaab0dd4d80",
        "cursor": {
          "ref": "606f58ca-a7f3-4542-9a5a-d4d2e6225c28",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a9e7207f-b336-4e4c-b6bd-3db07eabc8e0"
        },
        "item": {
          "id": "0068f6fc-6d9c-47aa-aafb-faaab0dd4d80",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3122de10-b5d0-4e0f-82b7-0e1513a03d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5fc9dfa1-f3ce-47f1-bad7-9647059c7a65",
        "cursor": {
          "ref": "61408a27-99cd-47a1-ad0d-7aee6fba41f7",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0f5d3b5d-c7a7-4033-942c-617dda7f4a1e"
        },
        "item": {
          "id": "5fc9dfa1-f3ce-47f1-bad7-9647059c7a65",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "20c8a83b-23c2-4272-89c0-0c84553e338d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "3e9598e9-fe23-4e84-b625-8bbcbd401e82",
        "cursor": {
          "ref": "7f5e5bbc-0134-41aa-9239-88e47ccecb2e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "709672f7-d07c-4e42-94be-ca364e9a9760"
        },
        "item": {
          "id": "3e9598e9-fe23-4e84-b625-8bbcbd401e82",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "74681dc2-f2b3-4053-b8ed-b763ebe43335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "3244afa7-4fee-42c1-a1b9-8fc694562f37",
        "cursor": {
          "ref": "fc1fb835-32c5-4d68-8a0e-34352cc26491",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ac3b13e7-20da-4c08-9305-59e8c0c24e37"
        },
        "item": {
          "id": "3244afa7-4fee-42c1-a1b9-8fc694562f37",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "58dba08c-ed90-42aa-b706-ac292726916e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "4a7927c9-0d83-47b6-b2bc-fed0828f619f",
        "cursor": {
          "ref": "52521aa9-86d9-48d1-b44e-48a2f68eb4f3",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7dd02960-87c6-4b12-ae71-a0e457193550"
        },
        "item": {
          "id": "4a7927c9-0d83-47b6-b2bc-fed0828f619f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dba2f94f-7675-42c7-85f4-f886cf510a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "5dfc08b0-c94b-4764-a90e-70a85b3c7c0f",
        "cursor": {
          "ref": "13d13ed6-dde9-4043-aaf1-b4bfe8d12881",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4fee8d95-cd4b-4cca-90d2-4504b90fadef"
        },
        "item": {
          "id": "5dfc08b0-c94b-4764-a90e-70a85b3c7c0f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "545c1eb1-5ea2-46e4-be08-835c37bab705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b661cf84-36b4-4efa-8649-556047d0f982",
        "cursor": {
          "ref": "7ab30005-7eac-41ef-8c5c-a6b29219722b",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "af12e416-ec60-47ad-9154-626c112b65ae"
        },
        "item": {
          "id": "b661cf84-36b4-4efa-8649-556047d0f982",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6d292fde-76e4-45ee-b3ba-988135fb73d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "a64a228b-e775-458f-83ed-b62e8987e162",
        "cursor": {
          "ref": "870bcf4f-2e61-45f5-aa00-eafc2231ae8e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "121a848c-5414-4d73-9f0b-df821fb3bc72"
        },
        "item": {
          "id": "a64a228b-e775-458f-83ed-b62e8987e162",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1ac6451b-00f1-467f-8881-70f96b403122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "75c7991e-a2ef-4ad0-a0c8-93c403a6ebce",
        "cursor": {
          "ref": "53bbdc5b-218f-4b82-9bc5-173bd4875181",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "45d49f95-32ec-485d-b3ef-70df564460a2"
        },
        "item": {
          "id": "75c7991e-a2ef-4ad0-a0c8-93c403a6ebce",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7c52d3ea-30bc-470a-a331-c85489568d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "a0f98030-66b3-4298-8b84-60a44508ce40",
        "cursor": {
          "ref": "b83ade31-7e47-47ed-9377-c739f1797aca",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a6d268d5-78ff-473c-b016-9a50a017027e"
        },
        "item": {
          "id": "a0f98030-66b3-4298-8b84-60a44508ce40",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "daa93d82-8fcd-44b2-be14-2812a691a24c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "8a256549-3ce7-438d-ac8b-a481a008e02c",
        "cursor": {
          "ref": "002d1ee8-b14f-4c0e-afac-2d066e5e6ea8",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6c9b3528-1042-4766-898d-ac975984fc9c"
        },
        "item": {
          "id": "8a256549-3ce7-438d-ac8b-a481a008e02c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "244b34bd-ca25-462d-a58b-026fc23d661a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "a3bd1836-ffc8-49ff-a4d0-208a6d491226",
        "cursor": {
          "ref": "19b34cd0-c9ae-42e6-aae5-507ac41189fe",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "802a3983-5cbd-4584-9771-0964c9d0618d"
        },
        "item": {
          "id": "a3bd1836-ffc8-49ff-a4d0-208a6d491226",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fed3d232-931b-4f91-a4a6-1fbc0d9d66ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "a513b302-57d0-42d7-aa06-d3a9ac65f9b9",
        "cursor": {
          "ref": "c9e007e7-c26e-41f0-97a5-e1fe8f694c77",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a6545c35-ccf8-4a08-85ef-bb486d10fe1c"
        },
        "item": {
          "id": "a513b302-57d0-42d7-aa06-d3a9ac65f9b9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b030c681-31ac-4031-afe3-596cbd1cf98d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "3ff54f91-b231-4fe0-b7fc-dfe02fbbdc34",
        "cursor": {
          "ref": "f167989b-966e-4012-8754-4497275bea3a",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1691053a-7c61-4069-8424-790d983e0214"
        },
        "item": {
          "id": "3ff54f91-b231-4fe0-b7fc-dfe02fbbdc34",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3a861006-865a-4ae9-b849-1f737901842a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "9adc9e89-b6c0-4fa2-8700-95ac9bcda8fe",
        "cursor": {
          "ref": "164e78b4-f456-47b9-a8f2-fef3962a23d6",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e5e22968-09f3-4105-9292-6eba91a3ba57"
        },
        "item": {
          "id": "9adc9e89-b6c0-4fa2-8700-95ac9bcda8fe",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "039cb0a0-6a38-4194-8eba-ae462ae10a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6374b4fa-70e0-493f-a1a3-cdda58997fd6",
        "cursor": {
          "ref": "ea26d398-b8ca-493a-84e2-25ec451668de",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "90d5a5c0-79e5-4af0-ae8d-98aa7d916289"
        },
        "item": {
          "id": "6374b4fa-70e0-493f-a1a3-cdda58997fd6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "92ca2add-af93-473a-b8f7-5f6cc7232205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "213c2414-e6db-4ac0-8cac-2a05d78f5a23",
        "cursor": {
          "ref": "05381923-966b-4e5e-8b60-077055b50299",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6f040fee-9e20-41bc-9014-3e6c5806f0f2"
        },
        "item": {
          "id": "213c2414-e6db-4ac0-8cac-2a05d78f5a23",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1c808fbe-8c9c-47ee-aa55-0525a9124d5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adb7e45-dbab-40a5-ae4b-72940f6e694f",
        "cursor": {
          "ref": "45d9466d-bc84-4a70-b508-e96a63f6962c",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9559a642-881f-4742-9d36-2a90ef3e5b3f"
        },
        "item": {
          "id": "8adb7e45-dbab-40a5-ae4b-72940f6e694f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "20993855-8dc6-4696-868a-2dd09e07ab37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "25fd7efc-79e3-4044-a711-dc9a3d346e5a",
        "cursor": {
          "ref": "9b1f235d-aebd-4908-91a1-c5d21da21f51",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3a85d490-fdbb-4db8-8d35-82a2f2b7b0da"
        },
        "item": {
          "id": "25fd7efc-79e3-4044-a711-dc9a3d346e5a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fd7e470f-71d9-4fec-b002-725c4b14160a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "faf1129b-59db-4965-9043-8c749c42665b",
        "cursor": {
          "ref": "d56f69f0-bc98-4384-92c7-81ca670aa9eb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dbf61173-6d06-4aa3-a7dd-789883865fac"
        },
        "item": {
          "id": "faf1129b-59db-4965-9043-8c749c42665b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e3fa7131-b532-40fb-ae85-b90efff4edff",
          "status": "OK",
          "code": 200,
          "responseTime": 2239,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c9fd75-02e1-4616-88d3-bea44d492db4",
        "cursor": {
          "ref": "b35cc878-8076-45be-9a46-06ba3daa351c",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "412b7188-27ca-43b1-9c15-4d3067d7fea4"
        },
        "item": {
          "id": "37c9fd75-02e1-4616-88d3-bea44d492db4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "69dee7e1-7558-47a3-a259-dcdcdeac3147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "fdd1b2aa-bb1f-4a88-8113-64369097024a",
        "cursor": {
          "ref": "700e92b6-5d59-4649-8a58-9baa83610e7f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "896e87c2-5dc1-4710-905c-723937b12cf1"
        },
        "item": {
          "id": "fdd1b2aa-bb1f-4a88-8113-64369097024a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fa75155-09c6-4eaa-a351-69571c78bb7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "fdd1b2aa-bb1f-4a88-8113-64369097024a",
        "cursor": {
          "ref": "700e92b6-5d59-4649-8a58-9baa83610e7f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "896e87c2-5dc1-4710-905c-723937b12cf1"
        },
        "item": {
          "id": "fdd1b2aa-bb1f-4a88-8113-64369097024a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fa75155-09c6-4eaa-a351-69571c78bb7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "fdd1b2aa-bb1f-4a88-8113-64369097024a",
        "cursor": {
          "ref": "700e92b6-5d59-4649-8a58-9baa83610e7f",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "896e87c2-5dc1-4710-905c-723937b12cf1"
        },
        "item": {
          "id": "fdd1b2aa-bb1f-4a88-8113-64369097024a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fa75155-09c6-4eaa-a351-69571c78bb7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "66835964-b766-4e5f-b1e6-a22352c1c690",
        "cursor": {
          "ref": "a543c902-573e-4d09-8e0a-cfb547f039e6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e9a8d971-4fd6-4c10-8cde-bfc193b79826"
        },
        "item": {
          "id": "66835964-b766-4e5f-b1e6-a22352c1c690",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0b18c0a7-59a7-4456-bd29-3e12d34fc184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 319
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e6369bf9-7055-4d0e-8488-b7373a120207",
        "cursor": {
          "ref": "6b9c861d-7666-48cc-9ada-30bddad887fe",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e4b69709-4c21-4d2f-b7f9-1e4851688fdb"
        },
        "item": {
          "id": "e6369bf9-7055-4d0e-8488-b7373a120207",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a7191052-54b7-4be4-b3d5-534e8c821e76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "e6369bf9-7055-4d0e-8488-b7373a120207",
        "cursor": {
          "ref": "6b9c861d-7666-48cc-9ada-30bddad887fe",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e4b69709-4c21-4d2f-b7f9-1e4851688fdb"
        },
        "item": {
          "id": "e6369bf9-7055-4d0e-8488-b7373a120207",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a7191052-54b7-4be4-b3d5-534e8c821e76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7076ff8a-c3b4-437f-a494-1e05724dbe64",
        "cursor": {
          "ref": "d829c27d-49b7-4914-a1c7-e5b3dfa7a0bc",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fdca31ad-ae31-4c56-b427-cfb06a613d9e"
        },
        "item": {
          "id": "7076ff8a-c3b4-437f-a494-1e05724dbe64",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c5d9e7df-74e1-44f0-91a3-f03f8aeed230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "69fba689-6731-4f6b-bcab-c7a6118748dd",
        "cursor": {
          "ref": "61b9396b-0622-4a72-9646-96aef8ff5ae4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f263962f-974e-4f28-b20e-647805f1f750"
        },
        "item": {
          "id": "69fba689-6731-4f6b-bcab-c7a6118748dd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3104a483-cd4b-4e85-acd0-b943312fcf23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "69fba689-6731-4f6b-bcab-c7a6118748dd",
        "cursor": {
          "ref": "61b9396b-0622-4a72-9646-96aef8ff5ae4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f263962f-974e-4f28-b20e-647805f1f750"
        },
        "item": {
          "id": "69fba689-6731-4f6b-bcab-c7a6118748dd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3104a483-cd4b-4e85-acd0-b943312fcf23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6b517202-b2b5-4bc4-93c5-d64c7de4aaa2",
        "cursor": {
          "ref": "05860175-61a3-4b22-bddf-062799d3df57",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9f9f7043-b6ef-4da4-9b59-26b758f96eb8"
        },
        "item": {
          "id": "6b517202-b2b5-4bc4-93c5-d64c7de4aaa2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "e31c602b-b95a-44b6-b34b-6b537318ed5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}