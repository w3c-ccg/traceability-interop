{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b9e17f83-f880-49e4-9339-e6def92fb8a6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3af49469-ec50-4559-aa35-68047eac7f99",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32099c82-bd64-40c5-bae6-3dee1229495a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e297ec1c-a786-460f-8d91-fa7377d49611"
                }
              }
            ]
          },
          {
            "id": "0b831c21-6576-419b-ba36-ce39eace7b2d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "832914ee-6dc3-492f-a9e4-fd0448b6c92f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d15861d2-3d77-4804-b85d-b0a90733587e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1dc8acd3-8709-4daf-b4a5-369abbb74d87",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b7a86eea-05ef-41d2-aa71-f3f718a99332",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a2ad2277-daa3-4cb0-a837-2a20a2624e9d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f956ae2-5fb1-4fd4-91fd-1ac8f0032cd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bdd2515a-25f0-4ea3-99c0-bdb35b182a98"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3155b6fe-20aa-4d33-bc9e-5812531a8a46",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e20010ba-89a6-424d-b4eb-e750345c5c4b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "83c703cc-928a-499f-944d-f21ff492ec10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8577dc25-6566-41d6-ba57-0c02c06092e1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4aee2d51-0476-46c2-a1cc-3deee3e5b893",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "77891ddd-8ce0-48a3-8820-e85457004be0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6a14fd0-3626-47db-82fd-c4e6e7fcebe2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b70b249-0df9-4a17-b071-e99b19cb1c0c"
            }
          }
        ]
      },
      {
        "id": "e442856f-b5fc-49c4-bd57-e4eb19f2d834",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "55365009-7d5e-48a5-8b78-acf4a7163329",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ccb7e41-b8b8-4316-89f1-cc36e9c75f31",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1f9427b4-5886-4941-a5cc-a630f314488d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8a28f0-ccf9-44ca-9035-af1143db84ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a38834ff-7ac3-4af2-831e-d7c6c9b22dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c88f602-174c-40b6-8702-9570dc826e2f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a3f76c-4f83-4244-a6df-b6dc4897d72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6dd6fe78-323a-4204-88ad-d23481d2da8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64938d10-5705-4215-840c-ce990d9d8e7d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd359e4-abbf-4378-8ae4-cda0b1186dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "079d4b20-88f5-42d7-b96f-7c35d52cf835"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3b94b9b3-984c-450e-90f4-8b8e8ada767d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61a74f5c-e857-49f4-8283-aef7b44efa17",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4528dacb-b3ed-48e8-a94f-582865139936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c54cfec-0856-47e2-9c70-1c0a81b0547d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e93ed5-839e-44da-a62b-242a446cbcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75082173-d6a9-4cad-bdbb-84646ab695ee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0f0f93b4-eaa7-445e-a560-8097530ef81b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "34709d6d-ef33-4768-9742-967d90049240",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29f5c815-58f2-4330-a282-c2bf589771e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8e5e0431-c903-4da8-9cc8-0367521064d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0526d386-12a4-4876-9b10-232ee2aa56d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "aff1d7c0-6dda-483e-98b7-5d7b7e662080"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f3ad9cf-f9ef-4063-9a2c-f6ae58ee24be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5d0d5d4-8b79-4c61-af01-e0af1bf0608f"
            }
          }
        ]
      },
      {
        "id": "c58caf38-3531-4cb4-9d5f-5f3d87d70936",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "aea50e7b-6067-49ce-8903-8c28b28e298e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec662f05-493a-47ff-b1c5-1213d3fc65fd",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "425682aa-98eb-4d78-9c5d-24779d492e4f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb1c475-303a-4852-b532-f65c8c632091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7fc40e-48c0-444e-9b26-aae147475319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b5beac-4d91-4365-ad6b-c8b6e0efe5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8d3d95f-f74b-4953-b52f-0cc244f51ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791378fe-6cd6-4364-b80e-a32e261eaed7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c560236f-6a75-49c8-8c91-2b066f48e8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8946e0-3a69-43d0-a9cc-2444baacfac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df98978d-3884-4de1-a5b1-12d78bdbff37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4d1a5b1-4db3-4811-ba6c-666e9bf1a202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abab1e1a-4b1f-4f2c-a9ab-23d0434cab50",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc23ad87-1e64-4478-9d9e-ae8466ccf73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a6bc38-b4ac-4b4e-b875-566400d4b91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7bcec9-ee13-4d24-9198-b3f6b90f84bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d10767c3-3220-433b-ac73-ef20a72f700c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6c7616-0099-4d91-8ac7-5d40b3b5a093",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a9edfd-4448-4ef9-a0e7-7687b2c6a3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b35015d-8302-4229-9c73-dd0f0d46c4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb5205c-2391-4823-bf32-a8d6006120e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b188f1f-31ed-4a15-9390-f396c8c2d97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac75ca4d-3e27-411f-8915-229392f253ca",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7115a31c-4119-4d41-acf1-f2dbb642ea18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d238256-79a5-4794-9ef9-60335306f5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a59b8d-d3e0-402b-9a79-35379164ebb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "869637bf-c6ab-4362-8a10-7e6d4d29c07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9274bea-f6cc-43c5-99f1-b953de5a2082",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a85ef44-7cb4-4406-b7cd-e5cbc10d9731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210888f7-66c8-4103-b4b2-36a1c88f5be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc473db-ac7c-4502-b2f9-33a3e720186b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a379ae8-e6b0-4254-9cdd-9a472a8fbe5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5587a0-dd78-40cc-885d-00bc22b50ec3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c031ce-d0dc-4f12-93f7-d5282cc90eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e65054-6d7c-422d-9b2d-25afa0da6a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b69970d-539b-4ac9-850b-e7f1ca266a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e11a1cb4-1030-4acc-acdb-adafb9dd1c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7201d05-67ff-4cd5-8a87-74ecc3f291f5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decc9da7-b771-4875-b315-c6f31b26be92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff28723-ee7d-4d98-a2aa-ff47d7e7d7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f752a2-89d1-452a-a8d7-9de746e62aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f84b141-899d-4390-a24b-eb8f94ae6347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2770a611-83c9-4b39-a7a9-095728702a5f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d528cbf-aa78-478c-8a7b-048298676762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6de685e3-4de6-456e-8323-cdfd4658cdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba04d6b-6657-4d1a-b337-25f01ca48545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8608faa-3e4e-4b66-937e-d57181bae9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1c839c-ef23-429a-9053-73a2ad43c7b0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751a1401-489d-46a3-a911-b9270c705800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc43c877-16ba-43a9-b377-4d0706ea1aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293b14b4-f195-41d8-a8f4-a76f9a59e292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef08b6ac-3d3d-4ba1-9074-56ec60f82cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115b13c9-96fb-46cb-80d7-c911cb403694",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0b4280-80f6-4a3c-a1fb-cb7ace7357e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8fbc39b-7026-4c9e-ab18-b2d2df216c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e85e28-7acd-4f60-a9c0-f9a38ea9f6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "635e7c78-62e0-4741-863d-9511dcc73d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d0b481-24c8-43c3-9401-6628229bc47a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00749fb-6123-47cf-bf01-9aa3f2d67de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bddec1-d2e2-455b-abe5-b87655b77716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0118f462-43a5-4c05-ac4e-29af0e27b99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b3d001e-76e7-4bb2-80fc-cfc1bbd12ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1af3247-8873-4049-85d3-7c75a69391ae",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19b31c2-5fc0-4fe1-a607-c37903943248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1627937-bab6-4826-93ea-a06b8ea76f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873f2185-7c90-413c-9772-bc5dfd0b25cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e43898ad-2f32-444f-a443-5c93a49b94f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d18883a-d185-4d18-b1d5-cdcc0e353f38",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac02f7a-55c6-4339-b739-b5a57959e5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ce4584-f477-4fa9-95db-61e76bbd1af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af986bcf-c48c-4912-928a-ba6accd11ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b0baf30-232d-4f75-afd2-6ef2a5843683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c8fcee-c591-4a77-9750-61e9b3369f1b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beebc30c-6448-4e63-a3f1-0eaa8d050b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89114189-fc58-4489-beae-b008d2c2dcb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9267643f-163c-497a-9a2e-7aed633c598d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04d03204-7d5d-47c6-94a2-6ef5aee45801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036d2e67-b57c-42aa-b5a9-a79692688eb2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2790e67-21a4-4fc0-8f69-102ade09ae2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e51087-15ba-4b44-af85-7dc190054811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb8a1e1-c34c-45c0-9fbb-6687c3383bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ae29275-6e73-4330-8f6a-db0381bd4c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83da9be5-bbc6-421c-bc02-47ec81b399a7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935b2e99-084d-49ff-8370-d27f82d8bb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97501400-c945-4fe5-896b-7250d0c211cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fef118b-446b-4b74-b832-fdf3d8b7810f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ea0e62f-3b30-4de1-aef2-22e776ea34e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10b0694-74ec-4c5e-9471-948cc344bcc3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a594f4b-9126-48aa-93b4-231178e76f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "973c0c51-6c84-45ce-8641-0a0c4bacf125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a751cc-ceda-43f6-b880-5cbf237b5818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bffd50d-e447-4058-8b88-3a6c3db9d37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f823b73-7935-4522-8e83-ff5db5360170",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f57d07a-0078-4087-9a42-0af0698793e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205dd8fb-6a4f-4182-ac79-0b9731ce273d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed48af08-2997-4281-ae24-b660c2af2759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb5696d-2f39-4fb6-b792-11338879a555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5794dcbe-91a4-4cf9-a67c-72cd4296ff93",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf71d18-e512-4300-bfc7-460da4f88c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd70702f-e825-47a8-a6e2-fcc636cf90e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc3072c-e959-4540-ab42-bd461a4fee7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e10bcc-8957-4822-9c6f-76433a4de66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b42e1a1-4ff8-4359-b960-73399d09ff42",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1721d5ed-4e80-4170-a9db-a7b6e329c143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ff9283-1eb5-4ebf-b39f-456229bcc77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b141a3cc-9ee6-4ef1-9d5a-2781fb3f1677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "010f81c2-0ea9-4b77-86d5-4afd23068615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf4b252-7406-4157-8ebc-8a0e8393acd7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc49b179-888a-4859-b919-4ccafa45954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ca6f84-a200-4766-8715-39e44d298a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ca224d-e15a-45ab-81b3-7b12dd7958cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31b87cf9-a72a-4d84-ad78-3b6720151196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b2bb2a-1d18-42f5-8965-56592a3fd159",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1138fb89-5aa8-4a97-8257-22b4322003ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd7f6e0-5ae3-4496-8916-32ac99e6dc9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f717541-7536-481b-9374-daec145f5bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f0622d-b825-4605-b521-36e81dbcf417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e51091a-8596-4280-8912-a6dadce00387",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f565c772-f2bf-454c-b0c5-073b0ddf3e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed71c98-90ae-48ab-ac1d-270963daef05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed68f6a-b9d4-4c19-b841-84f94db39dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1476075e-53de-4032-832e-e206cc9cd396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd023e9-456e-4c7b-9e3b-2f0103db466f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820fed4d-4383-4a2c-b4ea-13823b37d8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608fd4ca-faa2-432c-930f-6df850846750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81c27a9-4e3c-4678-8b28-c5be9100fc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bae6c3c9-25e4-49e2-9c2e-442e85bce6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f484274-9521-454e-9538-7e9be4b0d9fa",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9051b2-823f-45ea-b3c3-a0718ce20d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3bf3c5-fef5-4cbe-a3b4-48fd5f0963e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82458e9a-d508-490b-88dc-ea16c86cc5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62911c9b-f4fa-4273-a8fe-4138691bc4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7af549e-48ca-4e1d-b413-fd6c58df18b0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ee7f31-f997-4f0b-b601-5e08e8f9b805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbac1fc-8420-4955-b1c4-5a810bfaa25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6c1de3-1936-406c-aeec-4e907974ea43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25812edf-8168-48f4-8280-bac9b180b787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0050a0-bcd2-492a-84f6-0ac34bc1a7f0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d7640a-515f-46ef-b07f-31f43647d5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6617c1-3b3d-426e-8e48-6988a4959ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1100d62-b632-4fd3-a9e6-181f2f55b55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf3371b-a7c5-42e7-8838-7c4fb5c461b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e186a5-a051-4794-a63e-53a31e916630",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3123112e-b3ca-425a-a728-a707f2e5dfb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19316d6f-2703-4afd-9a0e-acc59fa968a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa98616-0ffc-4264-99cf-6ef3394056ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d731fcd2-7e70-444d-9e7b-2ef859dcc30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4094fbfe-e6e0-4bda-9e29-ca39bbc6a74d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30d6f21-30ca-4c16-89c7-3f7ad47474de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504556c1-d738-40c6-b488-0a2b27767688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f0aae4-b03a-4c99-9b17-5864ae836891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb93691b-e7b5-436b-87c5-4a69d25bb7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c277df4b-e813-4c8c-98d9-47813cfa40d2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ab7349-0562-41ff-9f5f-b6817c05acc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b227f5-9498-42cd-90af-7fa9a08c123b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2cbc8cb-b7ea-4d1c-813c-2935cd56d053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9f575a-9576-403b-99b5-10b67e980227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5a0d83-7134-4a40-9eff-ec5682a66caa",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299d893e-5265-4672-835b-04ea6f090445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808af726-4ee5-4eac-85d5-dd6f98a92dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5eb32a5-20dd-4ddb-84b4-42cd062b803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1882e78e-d5b1-4a86-8d87-13522d7b4912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319fc709-67f6-4820-a6fe-8254112cacce",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d80bcb-e253-4cb0-be20-e711d124668a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "793d9ec2-8152-4579-9cce-d6a632c6c6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e85cfb7-86f2-4872-b1cc-cbcfcf555952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64ac140b-3d64-4489-bbb3-678f8f59384c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e9c296-dbc7-4b6a-8cf4-f974bc404f7f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df3523d-d39b-454f-9121-d9d5198f5a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b37b78f-4b9c-4f5f-85f4-7c7ad91af2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0471cf1d-28e4-435d-9fe1-59488468813b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc00bfc-6ebb-4186-879c-bcfca2ca9179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f695dda-7a63-4511-9406-cb18f1744fa0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7241a69a-3b7f-466b-8770-17fb5c2cb4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc59b9f-d2de-493f-85ce-b507c90c7e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7505e0e-7eee-47b1-9b89-51ea3c3ec914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3db97873-9c0a-4114-b6b8-f2cfe4c6767e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5045cfe-a691-4acf-9b10-f32f1ec051d0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3811773a-752a-432c-8cbe-6f99bf3dd445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71315a87-8a70-49ac-9651-d900f9d6d6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7809a04-dcb0-410e-a207-18b747b60033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "765fb40b-8891-4d51-95e9-634fcb5967d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c0243a-0847-48fa-b701-ee6570e8565d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb21a516-ebe3-4317-8518-375a8ce4486d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52641989-c178-4ab5-b48a-bd8dc66e0687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c453a4b4-9b40-441f-b2be-811eb16a278b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e1b614-f42e-4b4a-a5f2-9682f790a10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a2eaf0-8375-48bb-93a4-429d2619680c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa462a95-2fcf-4821-8bd2-f24417c99c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5897ee-a734-4656-981f-b40895b74289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3a96b0-c7f8-4a65-805a-c949db703b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab512adf-f50f-4bcf-9ec2-d8416837e202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccb2288-9378-42cd-abc9-39e2a8c9a4a8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe327e0e-24ef-4b1d-9c61-50777b46636d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2e276f-09f2-4a0c-93c5-651e7265db2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cedaf69-81fc-4af9-b061-036d4b10c888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8713920f-2893-4000-826a-8120d0d2f910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958e39d2-5f99-4ce0-b9d5-d8b726d0b409",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d303a4a1-2e49-4b89-baef-761dde410863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42edb3bd-9b5e-4ee2-81ac-3d52832203fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76f6906-e30b-45d0-916f-a23299972296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba11130-4864-49b9-bd71-f1f8b7336360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8337c5e-e128-4ff9-90c7-b7dd57f2895f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bccc9d2-182e-41eb-9ce4-a381171129e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48725e38-2c49-471d-9851-dd99d0433d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adf42ed-8763-4df9-82a6-8693a7485aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad39280d-fd62-40ad-bb4e-99fc71c2508d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32855e80-49ea-4d2b-8017-982187100200",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f06fd56-ba8a-4665-a594-571da177419a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd535166-b750-4175-9cc4-221ba3ac3157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a8408a-c14b-40aa-9a7a-e4487f65db39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0ecfbca8-1752-4e51-8de0-1cb61a95addf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de06114b-880f-4157-b7c8-0810ca311eaf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ca7661-8307-4a58-a09f-0ae07da4351e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e763b78c-4078-47e1-90f4-27039c4e35c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bb3cad-1da5-46cb-84cb-3f6466905874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "749b3999-fa91-4592-b479-27bc17ce6ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fd9bd7-3111-4d65-9ffd-27ecfc92ed22",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2b4ce9-61de-4eb6-bb88-16ef738d9bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9d934f-f06c-4af8-a204-d3152552e9b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f26ab1-c724-4aaa-bf77-f58087a8404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "29cd11c5-0f30-4c25-8cb5-b185a9c1182d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60432a5-3426-4502-9b6d-e8a66cb7163e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0a2e43-af62-4bae-b41a-850168f6b1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c2bc98-4661-4d7f-801e-bbb2fbe70291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171c5a32-8068-40bb-9514-cd73d9181141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "404c3934-064f-4039-97d5-cb7ae47a2816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7dbbe3-5903-4024-b505-d681d59c3569",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ec6369-2f49-433f-bbf0-6618892356c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a01e3d-3f46-40b9-93f9-2e0617251237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cb3d83-328d-4714-8b15-b5d14b44a5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d80abd-5fe3-4f8b-8e2c-dc0a9b029784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a582520-568f-4506-8b5e-af88e3130f90",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256112bc-d594-48dc-94e8-27ac6703af0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cc1a02-b34c-499d-80b0-a2961f039b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c82537-0ee6-4f5d-907e-3d36cde3c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b908a0ef-303b-4cc3-8406-89b4f738a9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8178640b-f0a0-4c5c-b2f7-a62005aec8de",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7010665d-ac6f-4a09-9bea-c527072feb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28011bfb-b36a-4baf-ac37-82a9e616bfd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c8a907-5d4f-41fc-a873-adec21a5b111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c9bc8a-b21f-4954-84ba-36bc683fe486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3c179c-bbff-4b47-8bd9-f328d9603d82",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af627d83-b700-4ff3-9101-90b27323b933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32440bf3-a1e6-495d-baca-c36f52c6a341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1853007-6386-4c92-be6b-08542f1e3e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd72c98-3019-454e-a748-966e2f6b02c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb501308-559c-42c2-9549-acf7a95a21bf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d857fa7d-9634-4589-b80c-0369655be6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676e2fe5-4b1c-41e3-9641-9bc8cc84b083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f88db44-3018-47ad-9f8a-ebb7151ae5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c16c34-3307-4735-ba86-f0e6ce3a2ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d480886-a2ec-4391-862d-418b3549477f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd77142-eeaa-42fb-b4e0-df1889d330cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20051e59-3823-48cc-abdc-28d37ce56cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd8c1b1-a89f-49c4-a1f8-d54eaa2fcbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7157189-203b-441f-9135-a3b39981a129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f22872f-0ef7-4052-a9fe-137386732368",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0465dfd-30b8-4dd5-8c0b-be7e1bb5e6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894874d3-ebd1-418c-b137-ada5f634ca1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58108697-a619-4f00-8f68-f9018363e9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeab2def-7161-4804-bdd6-b5e4797ea035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f03739-711e-4ed1-8c1e-7b9159b815ff",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291b957e-6727-4481-882d-436041436f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add56357-430c-49f8-af80-c94b87b1541b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd2bf47-c4d9-47aa-a39c-d1c427d01199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afc6336f-07fb-4c76-9280-6e41297cc196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e427e1b-b793-4a15-841f-71b474325d51",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a1cea0-5f3f-4b45-b21a-13bfdd3353a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa54e1b-a75f-4f43-b1fb-fbc29ba1d7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c8db09-2f0a-47c7-a465-e2384075fdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2311ebd9-c546-474a-a12d-86e0829501ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dacd91c-ccaa-4a8d-b9cf-c915cb87579a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f76a429-529d-4be8-a529-056ee1b53457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156da0cb-50a8-415e-b2c1-d0332c141a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4189820c-fa6e-410b-97e6-d3d7c8a26e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "591876f4-2c29-4354-ad23-0cf04b826eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca746b83-1265-4865-ba97-380988ee16fe",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3514bbe1-5fbe-4189-be5e-61fa0865a6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b27dff5-94ea-4fa7-9b76-18bee089a900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec14f6fa-c9a8-4589-ab62-e27d0bf4a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "98f0779b-63cc-4538-94e2-5989dbf07852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efa649c-b6fc-4ae2-9b26-57bf5e4f0afb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5638fef0-455e-48c0-a97b-70e93e86c34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e991320-61b0-4eb6-b62b-04f1a2a3b700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b093b25-bfd8-4eb9-bb64-b95718e99514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5c20ac-8e4b-4b9d-9151-815fcee4c177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5deaa2d-c703-4073-ae55-06f4874e786f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86d8384-3ea6-4a72-b92d-8ad91d365d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a023126-e953-498f-9d5d-2490922681ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c929cdcf-4e86-4dba-8d0e-96fd8912e696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c1e037-f0e1-4c04-9eb6-cdf2be214d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf906e4-bd53-4a3d-9848-563920532d70",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e091623d-df43-4b1f-afc7-91d6953085e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceeac7dd-e72c-4726-82a7-1dc9b6fb93ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433ab302-cd24-4d8a-8b8c-b281715f002a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "117da5cd-a0f8-455e-92a1-2af3209316fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3760140d-8a1e-423b-ac75-c102173c9119",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f42822-7495-4740-af6a-a16df888e0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe463312-0327-4307-9815-b4770253a805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6de47b-a148-4ae2-831e-323842813396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aefda2d0-8620-42f2-a8e7-2dd2b56e8107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315d42ce-12b6-414c-bdf7-972b138186c9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ef70b2-78a4-49b7-9773-f70524f7c5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd625be-3427-401e-a053-394caf97a3cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae580bd0-db34-4a6f-92ee-c5fe7a255901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8472e4bc-5b92-4d88-a3bb-cd1b8a5daedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87434f8-b531-407a-8760-33971e2f8fc1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8eb5346-979b-427c-9019-e1320d8222b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6305e59d-8b0f-4514-8c58-5a069de10560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcb9d9e-7075-4281-b2cb-f1c0e684ac46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcaeb184-d15e-4603-80bd-bf8130e47a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bab5634-be81-4c9e-acaa-49a3207ce4f2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb203b5-d871-4a98-8ea2-8452b3e71355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1bd0ac1-5ea8-4161-955d-988f0850acbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26c3715-dc13-4d3c-a5d4-d7a352297e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff916f42-4d8c-4a58-b570-5b825b53d623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34aee1a3-93f1-4769-98e3-c5d548e80544",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d744bb-66ad-4251-af4a-f4d104247529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103c83d1-46db-49ec-b65c-2449f3fa04a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c009fae7-d463-454a-ae0b-94832802dd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cacd2cf-0feb-4830-a9e8-5e3e39ff4045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04f21f8-d960-473f-ab2e-cf3660fc4277",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f477f7ce-3e34-4279-af79-bf0f84532b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d4a77dc-7c11-4339-b068-0710c8b2718c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32f450e-b2ed-4121-bebe-6212ba46a619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c7db03-ed7a-436d-93ef-0f5e4b04a725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a639e9cd-1859-4c86-b651-ad60b086c392",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c92951-5781-4d1a-b67a-c072d9f6a88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d860686-ca19-4022-93f8-0b4fe86fa79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fd3f2d-634b-4f30-8de8-797b768c8633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "980a4308-2382-4d04-8225-d88528194331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a3638d-0aa7-4b0c-8907-be2b273df687",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bddb5b3-d5ee-45f0-ae38-0ff68e76ff3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d5fa10-6ea8-4c2f-93c0-aae841e5ce1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3d96d1-7e15-479a-91f2-4b7d60807148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6d4517-ca44-4343-bb98-329182ddb0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd22e8e7-e01a-48f6-a6b6-2728392429d0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a0338f-05ab-4398-8675-016c341126ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3ac0da-d85d-441d-9f7a-91d6c80f16bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b102230f-c22f-401d-bae5-5e3d03a5f9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d36d8b80-3362-404c-9bb1-606331dbbd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a6fddf-0d19-4d86-a95c-6acd3293aa01",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e551f61c-9dd1-440c-9d11-152a16554b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b54c68-d188-473d-9070-b83183abecac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf41852-b787-4a02-9810-059021d34e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d1d0b8-83ba-4941-b997-d67038042a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9462f8b0-219e-4bb0-bfec-c6d42ce49b10",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c223ade-f842-4f68-bc91-23a77fb693a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20eb0ac-a2c8-40c9-b079-7cef2273f61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4adbc6f-f422-4e6e-9a53-d2378977dc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e19b9ba7-054b-40e1-9926-9a26c0fb9f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcd75a3-8f13-4804-8a8c-2463597894db",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b61ccfe-33c0-41b5-a63b-4c58f0570827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4e0544-cc96-4e89-8b35-4bcde58fd5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe819cc0-4e2b-469d-833b-da8be9702769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e03e73-d4a2-480a-ba38-8a09723d6ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b89a17-4c0c-4a82-952a-807e8a40c10f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa22593-510d-4d46-b15c-a1dd4eac8d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d19927-7470-4641-acde-f9261d30591f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03185889-1c7e-4589-8f83-6de3823768b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fdbb71-a9e8-4319-b1f5-879cf567eff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9d1f51-748e-4507-ba49-79df2f0fbe33",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9fa377-7d59-4143-85df-fadfa40ed3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e866bc9-5ca7-41cb-978e-a364d27c8c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b12c8e-8603-4d66-aee0-1686b9e2c69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "414bc94f-4c3b-4b9c-a8b4-34d3d1dc2a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625a6586-03fc-4caa-a9aa-fbd2446b189c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dbb350f-077c-43f5-8cac-b42ba9080eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce3eb185-2fdb-45b8-9f4a-e50dbaffe7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623556ee-2ad8-4674-9e64-1808af1cdb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af42efaf-fa96-46db-a6fb-5b9a531f2724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f64722e-0ad7-473f-87f4-40279f17b8f6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13193517-c588-4f49-a691-433df3bbb500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe496b4-73bd-4551-ba92-c623f3417da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3590d2-86ab-4dd6-90da-78379bf16d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a62b1dd-2b78-41ea-93cb-483b90d6d078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c247875b-bcdb-4069-b1a7-fdbad0a68186",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c6ae4a-1ab8-4776-ab93-bd2041bfe370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60890a89-4e4e-48e3-96b5-2a5675b2daf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4563b20-8ff9-433b-82c2-b082aa0efa47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "014ef5fe-cb4c-4a89-a8d1-9934e83b4eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f71c841-d431-49ff-afe7-b4e477cab507",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e49ebc1-72bc-48be-a730-6bcfe27b6626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0b640c-9af6-4498-ac2b-37eda404c973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6fb8aa-163a-4ca2-8fbe-936a1f18e72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18421960-4582-4a17-bfa2-65da303334f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c20698-a0ce-4419-ba70-8007978e3582",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaa2b12-697b-4765-a131-771475bdeb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c0db3f-f4f8-4bb8-a290-cad91e600b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f221afa-f57c-4683-a5d9-b3bd088fd211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bc70ec4-5063-41c9-9132-270266eebfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764b44d6-626c-4d84-bfc4-3fc8ea66d2a1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46468fb-e367-4f6b-b2e2-18880dbc94e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a518bf0-cf36-4af7-9b21-820e09104d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f34add-2502-4a65-b753-8e811ca88356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f4e73b-11e5-416a-8336-8d6d26c96469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1707a45-a218-410e-84a5-f9fee512cd2e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c712830-c5d3-42f9-bc56-dd0d9f56ead6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5674472a-f5d5-4ce8-8cd1-e6e256919a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caaf1690-df9c-4247-bf15-42a677caf478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a77c5541-b6e1-4d97-8ad8-a7a1c47664ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea2124d-d2e6-4f1c-b344-4e83d2dd7e16",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35305ae4-6d11-47ed-8714-55aa76a3bd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6542305-bddc-4d72-8fd2-610b65a5bfb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8576d7bf-bf31-4348-ad28-62771b1e8a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5f89df-acc3-4c9c-8a9b-8b1fbd569ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6a5050-13bf-497f-99da-0a6527deb0e1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ae5a3b-af70-40d5-b98e-5e17be289758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d804f5ec-0c7a-4965-97b3-aefe7a1015a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec2b650-3d44-4758-8eec-26135ff04a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44fce90c-5690-4d54-aabd-3c25c992c6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2be6fd-978d-4ddf-9bb8-3feec08ed297",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ce60ed-b700-4ce9-bf6c-66b24feaf8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee37ad9b-655d-486e-bd0f-2832b8c53f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d075a5-b90a-4e71-a66e-46de5a75f88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4782e468-6350-439e-82de-5f40abdb5f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e09ac1-85d7-4729-b1d4-af970d635a2e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e541c6-195c-4d4e-919a-4bc512db1976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5091543a-e66b-4bfc-af6f-98c524a41a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f59535-3656-448a-95c5-43ee36ae4ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56fac8d6-e9ab-404b-ab7e-e3e5031fa2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00112264-d079-46e2-a573-e42fd49d76f1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad31647-0ac8-459a-a600-8a642ad67a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc45c57-4c54-42a8-b1bb-70503d88501a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2b4f99-b8d9-4b21-bb32-9c2b8bd3b61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d42e5cd4-f78b-4ed2-b17d-8bd95f7ede26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed08af08-ded1-4315-8ea5-157fb441bdc1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412e680e-6993-4b6e-874e-c0c40baccf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe394c02-cfc6-4f06-8135-772b29772b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2f5ee1-9966-44d9-b7be-9a86d86de986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f92e682-2a72-4753-ab41-fad25d2e9ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a3c9db-1622-492f-a0a5-5c8d9bc2877b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1bdc78-71b4-44b2-8e0e-5def0486b7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d8abef-6d63-46e4-b73f-5f93d5bd2fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd59895-f928-48a0-81ea-9fc6e56088cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4369b3b8-8741-487c-98a6-afe444b75b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770797d5-b8e5-4ed6-9c87-f3021ba6faf1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25eb5aa-fbeb-4698-ada9-dc45ac6cb1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e68cf1-ec78-4f3b-8a2b-7b780d77737a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73b3a79-abe8-4de0-95a8-4e7a2cef4767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "86d9c353-a513-4c6d-907f-e18d832ac0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7e6f1f-1f29-44ee-8876-61ac72b5fac2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a11ad31-7bff-4361-a02e-781bcc450ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6545b85-a2ef-4026-9eb6-42330d88ee6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050b1383-2256-483d-b8a0-9c966c3306d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "12e3fb8a-f480-4b91-8daa-f4e258c7de30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b39cba-07a7-4a18-ada5-a2b7207dae60",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d8173f-184d-43fc-bd56-822f0753c606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8d9cb7-eb1d-4083-a785-6d30f0605946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37fdc216-f9f2-4442-a19c-c284c3604cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c715394-635d-4f76-9108-31e241df91f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167bce3a-1d5b-4e80-ad90-4f4d69d5889d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0383f00e-59db-4373-b265-0cec281e7466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612e3604-a169-49bc-8e7a-8e1ee1d1ef68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36edd96-07cb-4918-aa90-c1de030fd287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d10665-2b8f-41c9-8aa6-e37b8984a1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa38a83-043c-406d-9a1f-b93cd38234ea",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccd7a43-bea5-4b52-bdb6-70f7281e9be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e7319306-db5a-4311-b179-e5b9ec7fde63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1af005-52d1-44ba-84f2-66e53528c684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "72573344-605d-431b-a357-1e2fdfbe9d37"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31aa5395-73ab-4c24-9f8c-a6c3e4bbb168",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0c38370-8975-4743-9ff3-8d9ce5cad760",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ea5fde-be4d-4827-8192-79c22970fb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebc633a6-0e92-47fb-84dc-1bd8f32d6226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a7facc-e2ea-4b13-9405-cbf03913ff13",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4257cbb-7e74-44b3-88a0-da5b4808703a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe83cad8-0d0d-4e78-9d0e-0ba315a6e6fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe70ab71-01ca-428f-bf58-9e61ecbef770"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ecd948b6-58cd-4bdd-a489-0e17ff400e33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82e3f400-efbf-4713-8687-029c5b6713db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9cae89d-efd0-4470-bb78-ca9d96097c70",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37d3c808-dfd5-4db1-b5f0-58864e2c5005"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3e6487fc-165a-4a7c-a1b5-450ad88f7bc1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c3368d3-cf7e-49c4-a32a-030d57502642"
                }
              }
            ]
          },
          {
            "id": "58fcba42-eea6-4ab2-9012-fe52bd3f8670",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab6cb242-bd79-48f1-8c3b-94e1c20993fa",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1df93f4-6b4d-4be9-920d-2874bfa4faa5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb04d33e-641a-428a-a1e2-606e36f97191"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1446a1c9-18ae-4c25-9217-fe8907081eeb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ca6e0263-3415-415d-b554-f8a6b1fa75db"
                    }
                  }
                ]
              },
              {
                "id": "4aef6a35-5975-4a31-8e68-d3cae7438583",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64558caf-c837-4eda-9451-07759ed2ec07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d2436d5-3d0d-4161-8e22-cf11844100c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bf8379e-9dd6-4ed1-9600-60afd8422280",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ad7be311-69d4-48c3-8090-680e09795edd"
                    }
                  }
                ]
              },
              {
                "id": "5b2e8a54-6d60-4c62-a3bb-93b1f2f10f08",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9409817d-6fb2-4097-a255-4f9f2622d9ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f8d6beb-08d8-4bae-9f45-66f8f2af7bfa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ac5b8e2-4522-4b1c-9c97-82c7c2be776a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "541590af-495d-4812-ba5d-15683b1f2abc"
                    }
                  }
                ]
              },
              {
                "id": "a2e24f82-d5dd-4c49-8b17-9198ab4ec6db",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a67cb49-a4fd-4247-a903-89d925ba53d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2beb6b96-7b49-4285-ac7a-1d7debf5a095"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4ca05be-90f0-4e9e-aba1-df4b256709bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6deb4600-26c5-4b32-8209-a3e5d5713ba0"
                    }
                  }
                ]
              },
              {
                "id": "b434ac41-5400-4b44-9b53-9cd4591eb69e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d27319b1-2b75-4f18-b669-c695a2e9ce1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bfe1607e-767e-40dc-9b55-bfbe4f5a96b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bbcecef-ab7a-449c-98b3-783ce79a705f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f7d30fb0-963b-4acf-96ca-dc44620ad464"
                    }
                  }
                ]
              },
              {
                "id": "c1eceac6-9bf1-4aad-8b61-05f97831e51d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7d30a6f-ecc6-4bd9-a990-2977e688d263",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "10002f08-a942-4901-8ac5-fc3cc230fd9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4c272ce-8554-4a3f-b68e-b8232c265c8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "154d49d7-7f66-43ae-b6c3-d27910388792"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3cb0bb75-3b63-4cd1-9e19-bc93daf725be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d3deb729-94a3-421b-88a2-fecf73146f26"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00156d54-2c3c-4f3d-b05c-a62b18a88742",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ccdd8aa-d6d0-4cee-b7a4-f2b73e1e21b6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45263bbd-1321-4f6a-8719-22d54b68cf86",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3584213e-ebd6-461a-81c2-85c58f949015"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e13e4532-4154-46c5-b49c-a0ff3ec6a197",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8234e1f-4d89-4e25-8b4f-558024c3ca45"
            }
          }
        ]
      },
      {
        "id": "997a90e7-a57a-4459-a4f3-121184f84e5a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7173f178-d7bf-4838-8434-7d28a059462d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1ff08a1-47b1-4b64-b68b-fb601f920196",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1a5afd42-1a0e-4273-ba80-994975b78f3b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0627b80c-cd0f-4cee-9b9f-ce105036c8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2c04d7-56cb-4f2d-8dcf-3af45c6c06a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c061975-6a23-4e6c-bacb-bc8e53cd4530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "26aad28e-c45d-4935-a20b-6d68739e02da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b788d92c-2b68-4f91-9a87-208f2bab35c1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5c7666-fd79-42da-9eba-78a33620af91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5de111a-db38-465a-bd9d-7bf74bc4fe93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89515fb4-e297-4d28-837f-13c03143eca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ea35ecf-06a1-4f8a-9dfc-599dcbd4a43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecebb30e-1599-41e3-b356-32903d8b392a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be49db16-7528-468d-8389-9c77b775a696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a85c3a7-a4d8-4b03-941e-80b083ce2f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96684352-1452-41d6-95c9-40290412e583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a64e4366-21c7-4984-a473-32af5805f128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad58cbf-28d7-49c6-b3d1-024f0865aecd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe264807-7f9a-43bd-be11-431da0dcf137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478be6cb-3468-48ce-a0ee-2d6c724d1035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f3977b-00f1-4d81-b44c-3760cf13a81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d3fe20-5f20-4469-83e4-389506ea76b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721ac740-9857-4c2b-8ea0-dd596228bbc1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbe3fa2-7289-4bce-bbec-6094106ba675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b684a8e2-dcb3-40b6-88c2-22d9d3da0a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196b95e9-78fd-4cb1-ad5c-3548bda577b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d750ca04-4056-4d94-938e-3012cd88648b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881a45ed-e158-4309-b32b-a69eed0f3437",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e228f4-74aa-4494-a9a4-d7b7d0376bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740280b3-d9cb-4b2b-8a20-9e6a385d87e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd873ce-40fd-4c06-b42a-163375ec5015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5658e197-5ac2-4b55-b073-2a0b7da016bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eeef73d-312a-48ca-8614-a2ac59d69888",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a021288-02de-40ef-93a9-cc68c0a77e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf6483e-47aa-484d-bd18-1a7b86f2c8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d6cb4e-b659-4149-ae50-3aa198c9d241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e93465-4525-49be-9436-6997232ce9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76866dfb-11f1-4ffd-82bf-18853d21025f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8b17dd-3145-4aaf-9c3d-699bc05549b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e49d4da-b6b5-42fc-bd66-9a7a63ba2234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f6ba99-41ae-4674-835d-4f932b5e2a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa30c35-ea9a-4628-8786-8a9ecdca79c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c536e12-1bc5-40ce-80a1-2aaa37db749d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7023d4f2-2a29-4a23-b3cb-8d0017050f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bdb9e2-27af-42e2-a896-795be8a5f4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2504b9-f92f-4ba4-805a-45e267d8c1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e9a437-0bf2-4abf-b389-2e9c7ba67145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa434387-8e30-4279-bd21-fc056a7aaeda",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f669ef-2cf9-41ee-bef4-631ebf225ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c359b3cb-b80d-4137-bd24-358b785768fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eafa132-9ad7-4618-b964-09c068e34796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a936eb42-7093-4260-bf74-4df7a22568a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e6fc74-1c63-4039-bf94-04ca5119629b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707353e6-0f58-44eb-a0b0-e0f570c10621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a2de40-3a80-4f42-b529-b0dcfe7b620e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08415d60-0668-4294-bf06-f7acdc66b4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "beba29cb-17d8-4794-9cb2-80e7ace63164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0532d6f5-7ca2-4a03-a017-4d4afadd49cd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cf9de8-af2d-4500-b0dd-0d146bd519bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895eebbc-e801-4f5e-9510-3877c9a4be6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e18e47-3286-40c0-84e5-1c7e97b54fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57bb7702-a599-4538-ac3b-212e128d1191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68921fa2-d85d-4f82-ba9a-0f90d77f365c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e17937-4813-4da3-a648-ace831bbdae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c0ce8d-b0b5-467c-a7ab-99e61c5b815c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a080e4f-458c-4a4a-9906-82c389692cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d70bd4-4f57-4eab-a82f-246761b3b66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d52955a-cb0a-40df-811b-b5fd23fcb3b3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470cbd1e-d208-49c1-942d-9a2c96dec53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ba20eb-6c94-4bde-88c3-78a276b8dfe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffb40f7-3603-417b-b2d9-5f4b9026a662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8575f497-54bb-4ffa-9ffc-61d7158a24bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf1161f-c3d9-4be7-9913-cd6ab324e188",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1650840-db2e-4a40-b30e-93e59fa6e3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1998df7f-2a05-4e78-b653-c282473f2f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df2edf5-2f7e-4768-8ad7-1541b19200bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "483f7398-5820-408d-86d0-afac440a73a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf40905-6099-4d00-9ac9-747cb955eb6c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097cbcbd-ba4c-4961-8cf1-b23a029a5ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b698e1-a593-40db-bcf4-ce058f1d50b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2881ec9-a84f-4055-abbe-0443fecebf4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a9f1c2-d974-44b3-84ee-78937b12f950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1dff1f-a35d-408c-a4af-a00dfa545d82",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f02089a-4977-4da1-beab-8d20d46963d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc29b0c-3c3e-4a93-83b5-95e68d730207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d3a837-3536-4b4b-8cd2-25ad5a183a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f930f7c-79c9-437a-8d27-ba6a599e655b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bb37cb-7fac-4af2-a756-b2041d3577d9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b2beb7-4e53-48c8-94ec-32d2fc02aded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35a8675-41a7-442e-af7b-352108170eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9199518c-4cae-4394-86a0-514493eab6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d8791b-3571-40fe-8385-a0fa303be403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1985e29-6cf0-4c7f-b6c3-8ccb70213048",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca5648b-7b03-4ea1-a1e3-83bf2d68ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e02203-4aa8-4a7e-9dbb-e60a711fc550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcbdb87-4650-4a9e-b070-2887f60940a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a498d7-73be-4324-a325-14c04e3a0654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd2a8f4-17b4-4f9a-ad75-4ab7c96e187e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2030073f-86d3-4f5a-81dd-9cd4a78c9648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d78bfa6-4989-4715-b34f-9efe6c69e302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c275b3b5-dcb0-4a9c-960a-5d32e61db499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f17a6719-b024-486d-8544-3aa88912de6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f20206-8161-4c50-ae3e-18d2921bcff4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521217f4-405b-4ddb-b177-3e727e5b4c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2c467a-9e32-4eb4-9940-847de0f0b2cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014308ab-d864-4136-8688-84e94fecd515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70bcaebb-83d3-4a4d-981c-7e3482cf1e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bbc2e3-0692-47d8-9326-cc67917afdde",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69339108-146b-4a1f-bd10-652bf695a4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e217ca-ca90-4a77-a087-cf95afa0fc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c2bdbf-48c8-4e6e-9e54-882b8d06599c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d8c1d73-ccd7-460c-a70c-12dc09bfc675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93834219-7a64-46a5-9e67-e29402a39a6d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa53a6b-d4fc-4166-9ffb-f972079c007d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969c21e3-cda2-4e8b-aba7-98b658a80a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab64a88-1541-4759-8dad-9daf63d6c968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2caeac-29e7-4037-a171-0a844fd43725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880d2047-865d-4022-a828-6a4ac3c357c1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a098a0b9-153c-4442-877c-dd48f19694e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62442058-be5b-44f1-8134-6c1134b4ffcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efe28d0-8d00-4500-b197-ae114d6668b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f73d8f7b-ab6c-442b-b9b9-dd6383fb4885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e33b4f-0989-4583-9dcd-c4d8c9bc2b90",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1910c3e-6735-409e-b8f6-9a76e321552b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119afacb-51f6-455e-8a5b-c0c7adcfdf7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728519f3-73a7-44d9-b226-9d2ff24303a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d193800-6a72-488f-b2f7-3b4f0bbfc6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57133521-3175-436f-abd1-0c0cb01fbee9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a45884-9d6f-43a1-aa61-33b3d92ce663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8533b39-503a-4be1-9554-c36c70097f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e8b48e-aae8-40b5-9575-770e00b1f5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a621985d-2eea-4105-8f1c-c6c49ece9c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77be2dc3-1729-418a-a274-a21764828167",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e24f38a-a2e3-4bb5-bead-04126f1291ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b355d81-48dd-4e90-a5a4-a2fb982abf96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd693747-0df3-42f4-a005-5fb0ca0ec92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b46830b-1882-44fa-9a71-dedb663cce36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3c8e39-bcd9-467a-ad15-6069e4b56239",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c459ae6d-3a46-48db-946e-4b459ab27a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53f31f3-1250-4b72-bda9-1523084fa849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1cd712-8060-4d46-a4b6-27f85d813a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b946fb0-df56-4e16-8e1e-c447c0f1bfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cde2e4f-6bca-45b0-a380-a308dc7b574f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c2d6f3-00f0-4a91-8734-7d1509a1762a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1149697d-8045-4ef5-b5d9-bbd983d6d4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4118c727-dc0a-4a36-a22a-cf5e6c9de8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9441321b-e301-470b-872b-6a1bc4be16c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed20afbb-b67a-45da-8376-b5d6c91500d3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd76e0f-401a-4906-ac02-47d435f98665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dfab42-6945-472f-a4db-f2cf33e13a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe3717d-e4db-4636-8605-5b547eec0463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c64308-9751-42a1-a745-6d7ee46bd599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe138734-72d8-4166-8f1a-e36d35a36175",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cab1739-a208-4e05-a09a-4163f59823e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01fb181-9ca8-4857-9920-ad975e3f8077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e3ee73-5966-49c6-a449-942111b1181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5aced3-1d93-48dc-a67e-86bafef28586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dd3f68-ee95-4d00-b082-7ca2910543a3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77197e96-1c2a-40b0-bbbd-689591d64445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa286c1b-e32f-4ecb-98a2-3ade2fede5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ff67d2-344f-44ea-a5ac-284f697fb085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c9ae46-a8e0-4032-b796-5dc79eb0898e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "458ce19f-9d43-406b-aa96-1fd2731c7298",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4141daa8-0bd2-46a8-9889-f37f1089d729",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e703f3-a159-48f9-bc4c-0082979547d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "43257178-4836-42f0-9b7b-9b1f860b9499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8813a19f-5ccb-4cf9-9882-e6c049bce80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f40b7789-6027-4c6b-8b73-8a6c7c3e5b1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4419e636-ae0d-4c7c-8f8c-3076f9187992",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f680b6a9-6784-4474-b19f-19a2051ec6b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d64350f8-11d8-4098-a918-091bf25f4ba3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bc763dc-7718-430b-b1fc-fc322a057bee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "332d43a3-97ff-4adb-b4df-281e4e0b9a45",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c7e0ef39-8df6-491c-9ec1-70ab98b9b6a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "194148cb-d6cb-4fde-bde1-9ab4aaf48bdb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f131b28-7e76-4a52-a8d6-45e9ba8e089e"
            }
          }
        ]
      },
      {
        "id": "c3b06338-969e-4005-8270-e852628a5e20",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "001d25d7-16e5-4b41-b5d3-e4b124c76c34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21cd709e-4a9f-41f0-b5d6-6d40ebb5d76a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6009ea8a-db49-4c78-9abc-65127385f62d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5834b62f-5ed6-43a1-8cf1-f17503ef7423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19eda9a9-3f4d-4742-bca2-3c99d267ce77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5de6044-134b-4c9a-b3fd-fddabfaaaecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "63ea4a80-e5bf-47db-8337-9e48e31914c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182a6478-dda5-4618-b82d-99c14ac1804d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd104c67-df50-4738-bdbe-011f8370afb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61365f7-4e38-4b65-b2cf-034c07b0c267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15423194-4abd-4a4c-9b35-1ff9d723d5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f007fedb-881a-4a54-9c0c-55149e0a8aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1248637-5954-44d9-8878-bd61436735ab",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149919bc-a89f-4fdb-9981-d3da4a2be5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc12cf45-4440-40ad-9dc9-484dcafde8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38c9d22-312c-4932-a880-a25fb2a215a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec71421-cae3-453d-b0bc-f6ef375eed5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942b0a56-e304-4db0-9c49-a1dbb6a5e8db",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7670df-23a6-42cb-a17d-c90ebbd25f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1766960-1e06-4e72-80af-fdb607151c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4560c5c6-9f42-4069-87db-8b751ca64fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37c095e2-e14e-4950-8674-83cbf7686463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7a80f8-0f5d-456b-a637-d3211300b2ea",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0453241-7955-4c85-b34f-d736a38ed193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7d4dcb-4e6f-4a08-b569-7b0a606868fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334c968b-356a-4175-a891-f0f6b6fddbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe00d7b2-0a01-448a-af98-5176e956dc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b6b4e2-49f4-44fb-bda0-6ca2f3f8a553",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6356fcef-ea37-489b-9178-bac31aac1632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30814d5-8612-454f-b230-e5258e9f6d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61be7c04-3781-45d4-9f97-527fc36e4428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2525841-2271-4f8b-96fe-6874dc726bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5222cfb-eb58-4210-bf7c-123de4f0371b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803de8d8-b562-4b55-af77-218834d61584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9757f50a-e5e2-454e-84d2-aefb055d0500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5977fb-2050-407c-a1e0-263549abd43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72d0dee-1302-4044-a723-1894e7685eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074542c3-0188-4c59-a9df-7dc9f2cdfde1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250f7d3e-c3f6-4c9c-95ff-59005ce03273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb273eb2-8686-4b62-8874-8643a7e29a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a01d6d8-5d9e-4dd2-99e2-844b92cc68cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee51697b-4d47-407c-94fe-de93e966ea42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b914389e-b376-4c3c-ad0a-9a73a3b92911",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a89f8f-9b9b-4f83-9279-b05907087163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5da4d7-789f-42fc-888e-89acdd0a0e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad78a2c-bfc7-4cd5-83d6-83d067d3d875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "833d961c-0715-4c3a-aed9-21bc93650c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42467d62-71ec-417b-be0f-77933c08c779",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f180021-1678-4656-948e-636c9b86ae39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464fffe3-67f5-484d-bc32-98e4085d5e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872c78e3-afae-4286-a527-48aba46389e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6566d573-54c6-4743-b1a3-1efa09a06251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe51996-a086-4eb3-ad17-9ba980a05063",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8791073-65e1-4f02-9a7d-27443ddd8099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d7b10c-a87e-4b7f-ae6b-e42280be75c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42fdb9a-6759-480e-919c-19e1c4c07270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4f155ce8-ee29-4666-9b14-fca569b765db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f5ae73-ea23-4ff2-9f1c-a741074681fd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ca8e20-369b-4ba4-a1bf-a12831677eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8344c9-06b6-4b2e-a77f-884308d4775c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2abc0fb-2421-4990-9dfc-afd569255bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "550dc7a5-bf36-44d4-945d-39ca256bf7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd870521-506b-4802-ad80-a9320a9b771d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea8251a-e747-4e81-b258-44ee35554c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f2016e-b7ec-4093-8be4-3f3e9599bda8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ca4845-db19-4bdd-8012-06a3923b904b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1140e2-797d-4e3b-88f8-1e82e0671b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6271c0f-d99b-40a1-9a5d-e5b13c2cc4de",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ae5e2b-072d-48b1-887d-7ff3a81a5927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287118f8-d37a-4e75-b396-6a0195077b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f37903-486a-4278-8f6e-9b9834b95f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f0f6b5-d734-41fa-a2a2-92d25812da1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7686b5d8-2330-4142-8039-a3eb83683643",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e208140-e194-4eae-b0a6-5401b2d818c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb06eb4-0257-4a47-9017-335bb1bcc366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1bfc89-a6a1-4a03-9573-8e70e3e5ca21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "76210127-7750-467b-99d3-12bfb6be7607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaed8104-4d7b-44b4-bbdb-b3a85d3e85e1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9ef367-90ac-48b6-b543-afb9c7c96a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cab22c-13e0-4a1d-953d-55c9da307ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d5768f-284d-4182-ab94-e4243fca9797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6770a490-4633-4be7-8c31-f14ff4de134e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f46b26-944c-460f-b862-a5edf54e59e2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86467a6b-9606-4f46-8056-462def54ca89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291602fc-f18c-4fe4-a355-b7d0c5d57ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd55e0f-b9f1-4cad-a92b-1fbf79b30cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c930059-eb44-4443-9ddc-a184af0e876c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0302d65-a217-4023-9ff9-325f49bb380d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a305d1-1b1f-44f1-8a43-f99816194ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51280abf-66d4-419c-9fa9-b6225bc83666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79902215-dad9-4dd0-b323-5be475f8979d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc139ff6-d704-497e-ad42-d9911f19d356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73291b7-77ce-4c26-b278-cbaeffa36905",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60c229b-24ef-4e41-a48b-b7a7642c5f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badb913c-2dc0-4bd4-a7c7-ff73f599d431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee6648c-abe3-4c48-938c-f3a7963db378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "081a61c4-b286-4007-b182-d3741d38a6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa8d402-5606-4645-8308-4057ba737860",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706259ef-76d6-4515-8341-1bff4b1d9490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1377f3d-5942-4591-9d8c-903405f99f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2b315b-9ef1-4765-8393-ff272739de6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e10ffee1-2acb-4898-b63d-4bab0cc161fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb0ac79-dbaa-494a-9b0a-ef18a9c02bee",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d8a616-8493-45a7-ae6d-a937b3c43b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23307aa-cfcf-4b97-9f0b-97b378a069bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637c948f-3235-4f6b-b4ce-a6def371c2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "067c0db7-c01d-4eb8-8792-9379adcf2f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b61894-fe00-409c-a01b-7f96d079d03c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1735eac5-779d-4fd7-b85a-d63bf9de33df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da8e2a8-402c-4dee-8998-f0ca5a633a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a427fdb-6869-44d7-9ff8-a8507a784d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8433ad-5ce2-435f-b859-cb8e5518ce37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a438f4d-4590-4f45-ad50-53ae2e09cf26",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667908ab-c626-4cc0-a9fc-6925fb14fe91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50201d6-b056-425f-b81c-37d929525c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bb339d-fec5-4177-93d6-88a7c0ca59cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "313ad0d9-d5a5-45d3-adbd-f4f84ec9be40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcccfaa-2682-4897-b86b-bb0f0b4f70bd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3880df6c-beff-432a-b7e7-a77764684445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8a47e9-2bf3-475f-9f58-8b7c562d9a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11632a5e-53e5-44ab-b6a1-9ad01b06237a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "726f7a26-8264-4bab-811a-b90b6a678080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa31096a-af52-454f-bbdb-4a796461ca3d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c6a8ba-448c-4472-9c48-56507460f492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d365e7-c6e6-4b13-83e6-c6e9e89e5396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8002980c-7cb4-433e-8cf5-b8f5b5a29b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41340438-7799-42e4-9809-7632aabedec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe313eff-65f9-4da5-bff6-58c4bc24be85",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fae12d-bd7d-4392-be06-60a50a42cd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c071db8-606d-4377-9fbb-c17640fe852d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2901e6db-fe36-47b5-b69e-ff33e0ebe964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df4655d0-a8e3-40ee-9ebf-117df4d92fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a95688-7f78-46f5-a14f-c5be8f6f7afb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58099cef-ce0a-40c4-a125-04e2d22623c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9e4bcf-bf6f-405a-a59a-9389813d11d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6192145-39e6-4c5c-97d4-0a3a3da826e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04d4b212-2554-447c-83b9-bc8e77e9dd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39724422-292c-4127-a648-0103afbebb7d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fca3041-0aa4-44f9-bbc1-246ab10e3a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c88e5ab-468f-4e5a-8ffb-a8e8a9ffc8a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a60561-3ec4-48d4-a87b-54e2a6bc8a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d51544-90c4-4848-ad7c-e568ae668be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d192b39-36d0-4798-ae55-7605775078d6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d4d945-0967-4cef-8912-b32830b8c2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2279e076-aef8-4a69-9842-488b65a1573f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c427f78-b568-44c4-af62-affa29feddde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf15a60e-5d98-4b24-9157-ae7eb050e9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15b63cd-3ac1-464b-9670-de349633d68d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0838d29-3de2-4cb0-99ba-8a43397b232f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1ba7bd-098b-4ce7-8ac6-d029dff0a766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f585f29-f0e6-48d8-8a4c-f40402206b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f31ef0-b44a-45cb-b335-a878761c7aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cffaf1-129b-4acb-9cd8-e135bcdff333",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e0aa5f-da30-42a6-a738-6b8c43cbcc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1706229-2074-42ed-83cc-0c3d5750d272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd5d051-2a02-413f-a690-2cfcbd5db4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "356708e7-3d64-4e79-9520-138d560e2156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5098bc-feff-4512-ad6e-e4e8f3852385",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4baf82f4-bc3f-42d4-9a13-73db1758aad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d272006-dc33-4051-a654-350ce0083377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcca20d0-eb96-47f6-8601-d2ffca5b5326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad5056b-b4b7-4394-a311-b8d43c80a77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9300a5a-5b8b-446e-9009-f491e1f97e8b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66beeeb5-2950-4fa6-959f-5cd79f3c6765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff47125d-b395-4b40-9fc3-e4d300e60ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2cc654-6022-4f10-b244-43e3f5464074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f234815-c07b-40eb-b60d-e8af1e22e8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94091c7a-6728-4134-8d49-79c1590b8fe2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e65c64-f404-470e-9123-f18169c1d8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee996ae-94ba-4132-ada8-204611782929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd08737-572e-432b-a845-7a41f6ec0ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "615394a1-28cd-480e-bef3-61f2e878d7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293080f4-8bf4-4782-8864-6d7a0903b245",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9a48e4-083c-4ddd-8103-a341eee00fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d78c6a-3c5f-4a06-b73c-730773cd2e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c69b3d1-2a7d-4898-8075-36ffa99e0599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8acfeff8-3314-49ea-8780-a187dda65885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41158d79-9a86-4ef8-a4de-dafaaeec96e4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5d5bb1-d42a-4c13-8a9b-bd1da8c6fd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa3a1d11-2a00-4dd5-bd25-87895ad4dcb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385475e4-4c7d-4c74-98df-289e1dcc2c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c16bfc9e-7933-4005-bd3e-e9e858ed2420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca8b072-7b45-41e6-bd4a-a0f0ef97ef4c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324e8e11-fc8f-4ad9-9676-9aac9c8bf4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153df092-33a1-4064-91bf-4be99b45f3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a7e72f-3d9d-4dd1-b8db-c1716f818bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12140ee2-6ee1-4912-901e-f700ebc9ee0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "78a4cf9f-f3ba-4e6d-b60c-ed543fcfc938",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd9f1d3e-3fb5-46aa-8613-3925156c5d24",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c79b503-6a43-4646-b589-af36582bda57",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "aeaaa749-c136-463b-a09f-f0b05cdd5448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a4c1f3-4795-417e-a111-e999ae203488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2180442-ff62-4437-8c74-ddabee36a56d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "982fb658-618d-42c7-9571-4fd5fa8be9f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b266d83a-ccd6-483c-be34-19915cf13fdf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ec8008a-5c4e-4723-8b98-d31fcb90917f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "785743ab-48d4-4fbc-aa8c-16163754b98b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bdb7eb3-032d-4eaa-a1ea-947f432a2754",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c2c461c8-e772-4d6f-a888-ee30612af905"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65749274-1db1-4b28-be76-bb6427e3dca9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ade301e-1804-4097-a695-0d9550a003b8"
            }
          }
        ]
      },
      {
        "id": "e504a256-a155-4cb0-9346-44b6a2610428",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4b130ca2-7e03-47c0-88c7-441e524b8c6c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4602b8f9-6b86-48d8-ae6a-8359409a1c66",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "237c8894-5f7f-46ab-8b71-98d3a1b89cf3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754533a0-e1e3-4514-83b4-62633a78fe93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc0778a-1539-492f-87e6-f3d3518ea246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6920f8f0-b65a-4e86-890b-b67cbaad5c84",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae808ea3-299d-4eb5-b353-a59e88505792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b88ee33-6432-4d8c-8be7-519306e41bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca089775-6eec-494b-9857-b80b010063f4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69871291-83e3-4984-a51c-ca42e655982e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311522b3-54f5-46d4-9b35-7fe3fb5746bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a07940b-fda0-4db3-88a5-f9a98e0d090f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2308b633-7fa7-4a13-a13c-3411f7b1479d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65ce27c-1663-47c0-bcfd-176a8c84d3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec96b31-c2e1-43ed-b8cb-367a8e2c736e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467c2b18-baf9-4b11-a99e-48326aa4a86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5583e1-00c2-4774-867a-efc65ac105da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711b17a6-1621-4df5-8ee0-76348a5c623a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0a36a5-4af6-4ec2-a229-9226de08e57c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630b1268-5d26-40d6-a69f-64dafe7c7f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6e05b9-416a-4afd-9752-02aba8ccefe9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c038a48-2bbb-48ca-a4a1-9f4147a72531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0932fffa-1df4-44cb-b4b7-9f92359bbe83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1a8099-a0bf-4108-b828-f3da60af1eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000d909c-a7a9-483a-afee-978901ba71ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70405274-1c3d-40e3-837a-d4646668de74",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724e5fcd-5a61-468b-8725-b5e7a1b2b931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7358866a-623b-4b5a-a61f-1437938ab08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6dca4a-8191-4a7c-9115-a2cc491bde90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c6724b-5508-4d24-9bda-5f10939496c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592a7d42-1a51-428c-9dcd-24da29ea0698",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60501bab-8e2f-40a3-b0ba-22d7d46f9af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa7adc57-a7fb-46ac-8ac8-cb3489403c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd857f98-4771-409f-aef9-25011c8bd38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6795d62e-178d-486a-ba5e-028e1ee5327f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255616d6-1a35-4c13-8b84-1a6614e7850f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7cd667-71b6-4be6-862d-69b71b2da861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85a1e1d5-66bf-4005-a242-b77fbd3b2bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae50d21-3bc5-4ee8-af47-6917cf3a7340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8913eaf8-3f76-43aa-9ac0-44ae561ae856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b698a185-0968-4b36-add3-2f090057edb4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d912ac3-a2ee-4fed-8d59-6004c371393b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044d1bd5-e790-4267-bc11-88816de9e186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251382ef-1862-4b7a-b5b7-c7e86d1d3772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81aea141-8135-46f9-bcac-c4cd00b98e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53de5c27-5c6a-4a86-ba32-d484e887b4c0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde3d449-5617-4573-a316-fcc131dae67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb30d0d1-5c44-4a85-aaff-5eb2cad1d1f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccd6f60-f79b-4d48-ad7d-6a1b2e94c2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78aeafe1-3523-4495-b0d2-9661aaaf84af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce1bf06-2a47-4302-8dd9-32c3351b751b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff3ef24-4683-451b-b297-1938fc701bbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b945c532-7bf4-43ae-911c-bad06ff7d7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47999bbf-97a3-4232-b41a-27214cea2530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7b3c5d-3c89-410d-92f5-85cbaf45a486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e527a2d6-adc8-4e12-9214-60f7e58508e0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3faed50-6476-4e8a-bdfd-86777f5be286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6921b18b-8d87-4da7-a23f-9808cff57940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683f4f6a-b7df-4d69-a29f-c7ab0d55024b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b887c2fd-679a-4a83-95bc-12ec1d6638c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d889fa48-6656-4ee4-a439-87325331253c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb122733-f9b7-4166-86cd-f2a8aee4de05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "939cc5fc-6bd1-4bf1-be47-470114babf31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3705d242-0428-4862-b996-d2ea0f6583bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551975db-03b0-4580-8282-ec5362915a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e2bfa0-3976-4cc9-8c1c-2a1b51bc5879",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d359ad66-bcfe-4a60-bab0-96c53d8b2867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09c8d599-fea8-4281-91ed-ba58c51b7fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda6124a-e92b-420a-a6dd-bb702f31aeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ae726e-bf2c-4dec-aeb5-dbfaebffb67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ce70ad-65b9-4ab2-8b21-c91af83698cb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08a8d59-b27d-4993-990e-ff8ef55dd4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f3a588-cac4-454b-b2b5-9fcead728c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b176ffc-c7af-44ac-a804-0ae38d09bce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0acc6a00-9eaa-4bb1-8e2d-d36b25eb861e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d763ddf-f780-4f43-96c0-5d91e9033301",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c42340-a815-4857-921e-2e8b5b3a0bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb81ab5-7024-4d2e-acd1-afa349da0bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf63cba-b869-43c9-912d-7d9f45cb4400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b9ccd5-fea9-4d6d-8fc6-9d0418e26a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cc42f2-393e-42d5-a0d2-cf3830d0399e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc0a2b9-c2d5-431e-9f38-18545563d5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4546b6-d241-4bd4-8702-249a0604a94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a1e29f-1c31-4431-b0ff-67a13880f2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64af6b97-5654-46d3-9e70-105fa259a836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01507f80-900d-4321-86bd-50b35433f6c6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ca970f-aefd-44ae-810a-838624f4b64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae5fc94-069e-4789-99ee-853b5a9bab33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e69853-d7f0-436d-9652-093ab9642c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e99b8c4-135d-4818-838b-e262d2ba13f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83347bf0-0437-43c6-ae85-33de4918d333",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3922e9fc-d050-4230-b06d-2f53f6a15012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8172bad7-4467-4e58-939c-7aa12ccafa20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc6a29b-348c-4350-a04d-6187a7b03bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88dc9709-b698-4a00-a7e3-93dd35a27fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4b09bb-1263-419f-bb75-f45127b9d0bd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafae1a0-2930-41cd-90ce-ab31d36cb11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7adb0703-293f-485d-815f-e8d7771b4e1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6028efe7-533d-4cdd-b7b7-fdffbba2784b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97fa58f-bdb2-42e2-a305-07374dbc4352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a71de88-e9ea-4333-b5ab-6649280ea5a9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94acabf-71ab-4fc9-820e-612d76f05f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114148b3-55c2-4032-8a79-469f3d086768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a423141d-cdf8-4698-834a-b6d26260b453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed479e4-0c10-41b9-a4a1-780e6105cbab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bc7ffc-eda5-4d7b-a3c8-2a8b2b26dd75",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3b39f3-6241-41e2-ac15-1fc30c501bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56c79193-ffd3-4f74-9b0f-b9774113992b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f40e08-a79f-4079-a25f-cc54b280e4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a896d3-175d-4aee-9370-9ae00290250b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12087e8a-e72b-4030-a2f8-e90afcb1a273",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2717873f-8fa9-4333-bc39-073722079f88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21f4f772-24aa-46c3-a55a-c8598ee4deca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b11d29a6-0e39-4ce2-99e9-0938b7948148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b211e7a2-93a5-47a4-93ef-62f451773bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66d997f-65b0-426a-84a4-aba80e0e128d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bae49c-1581-4c57-aeb8-9d48ed3faf28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37550af5-7337-4747-8031-ae4a2c161245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9844efc-0695-4e74-bbb4-8abca53e54e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffd50ff-4192-4737-8a03-4ea98457a1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079317bf-6dad-46a5-b284-515ac04a81b0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d74c0f9-fc6a-4eb0-b18b-da0d3317de39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7970ae8a-de81-407b-9ae7-39d345a8d62d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5f9a97-5505-4260-bd9d-5c80138b677f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a058ded2-d5bb-4b10-8efb-bff03cbb2b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c800ebb7-ae04-4602-85e0-00123d77ed2d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620e0558-6c69-45f1-bffb-b6f25312d087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2abeece-4128-4ba8-a06c-46860943d88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "201450f2-7919-4daf-aa7e-4167d13b3def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850dbecd-935c-4778-b948-c1739675c907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349feb45-9d5d-4362-a881-9076a3421ac7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bb6d6c-ae76-4280-b621-6fe3a7b63d50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b1b0ce-654a-4309-a097-71a098fd08d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6b9983-0fde-4008-83b9-819a0b58cb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8a2672-fcaa-4eaf-bd50-2ea21510e7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e37d54d-bc27-4ee8-ad69-2ebc7f98af63",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d27459c-7358-4f20-9a8d-32968fd7dd00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3d23156-6551-4c92-9d08-21e9c3411c42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32a7357-badd-4290-84b3-92971ea294d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0cf16b-5251-4abd-bf37-b7bf4858aeef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28ab8a6-8215-45aa-ad3c-346b3a96ecee",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75859a1d-3f6b-4069-bb12-7f115725011c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b394ca04-c1a5-40ae-83f2-4882929ceb6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517fb258-38b9-49ab-af1c-7b6e90803f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4359889-735a-4be2-98e5-dc54886828db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3294543-0981-4848-a81d-81b079a30b25",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ec23b5-513e-4572-8e99-8df3aa89acab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f01a393-8e6a-4548-9ed1-6639b4d8a783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f9f010-2378-4f9a-bce7-09fb3e6cd809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767f08e9-1e0d-45f5-adbd-722fdaf2411d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b03afc-ac7f-4c2a-a525-57d6eccbbf41",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9539a6-230f-4349-a4cd-9e43175df49f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19dedc64-cadf-48e0-83ad-944102808fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a29e566-dea4-445e-85aa-15ad4a4d983d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618212b9-3ae9-4ca6-91de-8dd30ed790f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8dde6f-0100-418d-9902-ebba7588888f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa2f9ca-7251-4d76-8f6d-134cbd362230",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abcf3a32-fca7-49ec-b3f8-cfac4bd4c744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14caa24-dcda-4255-8b74-a01102b40081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239de8c6-528a-49b7-9427-54af7ee52755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e14194-224f-4548-a547-9af0907d13f2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47587e43-4e7c-457c-b581-d38ddd2425ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4d53e3-263a-4ad3-a3c9-7837396a143b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aacdf8f9-6788-4884-a2c2-52fba7663958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6a2a8b-2deb-4a35-bccf-1ecd742b9ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565fde22-9a6a-46cc-8f88-0a2626985545",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11ba631-b60e-4806-a1d4-150a57ea0943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076acb86-fd35-4906-96d0-02fedf51a08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db52b69-0f21-4137-bc41-09b5d10b7ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a57cc59-bedd-4acd-87fb-1f2493636c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bf0f68-8b8a-47c8-b236-eaedb9c167b1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec87f1b-14bd-477c-a6c3-1609007aff7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd646f4-2466-4939-b006-17d83cb91690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396f5926-ac1d-4035-886d-47109e92f27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0102baa7-6b11-48a5-a6d6-b630b7cd31d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d0f24a-dc9d-443d-b0a9-903c15504a88",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb75cb73-6d20-4b4d-a15e-6d890c1452dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045c45b4-c9c7-4ab3-92e5-01112b0d18ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f568c56-6d5d-4348-a5b2-5af24b7d1143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ddfc99-e06a-4ce9-932d-3632e2a26a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2c335a-b835-4264-a9c5-f0d0fbb83f24",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce517082-ee49-45c5-a384-664e1f9d40c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9002907d-34d2-4000-bf1b-ee476c4672f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bceb4061-2fdf-4928-b77e-c8b8b1be3483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6264a8-bcab-4ecc-98ff-869992779aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fe4728-7ee9-416c-a8ab-cf503aad90bd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd6fae5-6c65-46c4-9950-7f3d97e03694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe643cd-77be-4d64-b010-80a09204534e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a6737b-c08e-457a-8dbc-34420b7c4c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36672b7b-c294-484a-b276-bf9764396fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcf4da5-e373-4c2a-bedc-ef37bb2aca75",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3d5a2c-c0fd-43ee-8b17-7689e284a029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc05e3d6-f180-429c-915e-419fe0538761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff559f5d-eef8-4487-8f6f-e1fc8f5af323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4cdb52-4a06-48d5-87f2-77af3b89ba4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8743e404-b7f8-4265-9616-56cb6e6af3a3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a44a8d0-fecf-42a8-802e-6066957cad87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4ae6d6-9894-4ebf-a438-23715b60e41c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c255402-2d1d-40d8-a615-913aea830a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a46964-aa64-4b3c-a52c-a2d4f72384a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9513eec1-e00c-42dd-94b6-874c3c4b52a5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102b8bf2-b13a-474b-9dea-bf9fd10b120e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3019d138-64e4-49c7-9f2b-fa859bf4ac2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6f7fa0-7fa0-4e46-8e44-a658591714a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a805c17-6e5d-4db8-900e-3f9b31ceee3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c14e187-b1cc-4943-a96a-df6c09ff9288",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2abaa0-1a92-4233-b890-2f83d7852f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494d36d3-10bc-41c6-aae6-1307bf16edd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b9a390-7919-4a14-b778-ed2f30f66ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749f1da4-65d2-47e4-9abe-728204d47985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358cd743-065c-44fd-827d-0f0946967d0b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cc3fa9-78f4-45fe-a47a-e28201c852f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51022110-d257-4b07-aaf3-30cff0cc5a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849b5d74-a9c3-4bb1-bcdc-9a27402bc596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379f78d2-9ebc-4522-87b9-0777928e9092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868663f5-b08f-4ac4-908a-aa74b507681b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee18cc4-0c42-45bd-aea4-43ff9f7326f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8989bd-7403-4e34-85e8-61ee7b037d01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206f983c-7b14-4d90-9e81-4b68e763f5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25255e3e-7de6-494a-9354-08d4e6de291c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0a4da6-a074-455f-9973-0e103a6377ec",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc31e554-9609-411f-9b42-bb5b4f917bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44fc9676-c496-4a99-82db-240321704909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0045b20-f6b9-4f37-8510-f09e99ffbc87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f6b2b9e-6b82-4b2d-ac4c-cb8f2a27598c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e376a1e-cf8a-46de-9c96-20b972a7a744",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e208298-5196-4d37-ba09-d6a2a3b7f9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8930e2-2f9f-4d66-b410-717b159aff5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36aa3b9b-6ba7-4c84-b814-63183e197cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3237492-06b1-441e-994c-7a2cfa9352de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7004c0ff-e0e8-43d7-bb18-9d1cb0af8280",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e451cdb8-490c-4d97-9f35-f5eccbaea5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0568be-9621-44ad-9195-71ddecf3fe65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b37d6e2-b4b2-4e74-a3c9-089176004520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3423e8-6535-4d90-8a40-94a3023bf46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a4e0d4-40a2-4712-8d07-e7f1341f7677",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ff0e2f-3643-497a-b39b-949ed5266c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d92cc73-8aea-4ef3-9f5d-bbf90777214b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0a60ff-f77d-47cd-b33b-bd75bb8ec264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec887db7-3dd8-4368-a534-b6765695a345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be71b0f9-80fb-4a30-a561-8e6a42b3f10d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f37b6c-9295-4c82-a82b-80be25572349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2849bb-5d6c-4906-ba11-e3ce3dd3ec84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "708710e8-732b-4937-b5eb-58e0326b63e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1e7cc6-cf82-42a6-96a3-3ab8bb7a4e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3808e632-b3cd-4a49-b55a-04377dbcb8ca",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc8a974-dbad-4a98-8525-45fcab2657d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b5824c-e3f8-4e71-8574-1c65b20eab96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c9f80e-f3db-4ce6-876c-d82b02336541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287042a8-9a6b-415c-be2f-c3c4a5ad5f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0198b0c8-0279-4440-a79c-20644efb72cb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461805c2-edbe-42a0-93a2-e6cf9c41811b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc64d1e9-1e53-44c3-b065-6f4a4797ad3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c958f1-75cd-4371-a4a4-c101378fa1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be134d3-5b82-40c7-a751-fa85add0e8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d7c7d3-ee74-4c2f-b087-2a1dd340d761",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7a9818-12dc-483e-96df-ec50332f8d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9297d7e9-de59-487b-ac3f-baeb96db092a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae6aa82-1caa-4a13-989d-44d403d9a709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7701bd9d-8a5a-412b-ae15-0e1c9f194c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5484f8-32bb-42ba-a99e-4d8510c19c11",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc30174-2da9-4bf9-a8e8-71e0b9202483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858c3a94-645f-4c3c-8dd3-270444fa51be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18f6663-8745-438e-8a7c-b2e54073c040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e05427-4223-4936-ade5-8bc7cbd5d79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9013a9c0-0fdd-4ada-9afb-2690c37d7811",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcfea75-6a4e-4bce-b819-0ccfd8fa2a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c36776-5369-4106-ba0d-98f846c23e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6e5342-2e0d-492f-a585-c6970ef95cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b28ff3-4732-4dd6-a1a2-5e058487d709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8f95c7-cfae-405d-814e-a26b64a076ec",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f2498f-2919-4f83-aa6d-7043852400d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a04469-cf4c-4f5f-b364-e862e88f5ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8f4c8c-667c-4760-beb5-ce3522386470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6b78f3-0d54-4e39-aa7b-e9eb6a2e0ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4bd6ae-3282-40af-ab94-26e15986ef96",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d336fa3-acc1-4985-bc7a-2a436b90d23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b579dc19-505a-4966-b8b5-d4e6d27b7b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b710257-a7b4-4875-8837-065a9715e94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63518a6-d5e1-4169-adc6-1b8e6cbde9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43200cff-85a0-45c5-984c-5bcf3dee1a43",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64de4683-0fc3-480a-98e1-806811a73df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f63bd26-58fc-46aa-a679-abca446fe4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfd8eac-0741-41fb-a3ad-79330411b9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919d8822-8a74-4e93-9e2f-19aa5af9d717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cfed7d-4ce4-43e1-bdf0-d3f0985d5def",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99e9900-5eb0-4f88-af47-e33e163827f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52026be0-4fb8-4650-803b-5295d696a468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ab3646-473d-4715-ad64-457393b2aae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5422e111-0602-463c-aedb-b632030bc5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d06eab2-f94e-4adb-bd10-3a7be4676658",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac353d6-afbf-4fdf-95b8-bac748703af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c578c8ab-a887-42bb-b0ff-a10faff1d932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c102496-4bc3-4172-ac79-1bf007a769b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb68460-7254-4d78-a10a-7c645a59d65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64e313a-f10b-414b-b220-2d06f5ec5403",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc70bc8-7663-4f56-bf9a-98073f0916c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae95ba6-42d5-4a04-b264-77f50fad94c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff81a479-f244-46b2-9924-6f58c55bee1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c74fa26-5ef4-4f9a-99c1-873e361d8c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad09df6-2b67-447d-9fe4-c8ea6959088e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df62ebf0-cf29-4f4e-8d66-3fb6cd8500c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3eb509-8309-408e-8030-b62b7a4f3ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55941fa-a3ff-423a-9d8a-e03b03c6d34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81bd3b6-8b5a-4964-9b5b-243b86d36b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15ba3a8-940e-4235-a9ef-e4b25bd4c584",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579cf1a6-349e-42a8-97a2-e2398333f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e473d547-817c-4125-b123-58a9209439cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77c31bd-6cb0-4937-83bf-12b5b3181f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1270d4-73b9-494c-af3e-6130488f5605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894fa072-3c21-4218-bda2-78111fc460ef",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d05e6e3-ba75-438d-bd70-3aaa5fdf7704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e768a7a1-85c5-4dfd-b1af-aeac918c7b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1c08d8-e045-4fba-9d14-4f7733f8b091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6caef9-45c3-49c0-a24c-a1bdc4d685f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7efe352-49ed-4648-b206-4df2bdc6ea36",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cf21b2-cd64-4f27-941f-b59b822525ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6be575d4-937b-4fb0-a70d-983207dcddd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf8110a-bf94-4809-b70d-36f5eaa9324c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e40844a-037d-4f90-9152-30bbc9685ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe711239-ab49-494d-a557-796ed70ddf1c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a8e386-8cb4-4c42-be24-91c1319fefa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45ba86c6-d891-41f9-b532-45975a5cff5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2205ab-045e-4669-ad69-b50d1689887e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b62acb-ed0f-4db6-9794-97bac1b2ed02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a6d533-3975-4f08-867f-fbb0a110c54c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7502acfe-843d-4cbc-a082-c1030e86587a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4658fba8-4cac-4fa3-8797-35ae3665b99f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce6efd2-da5a-454d-b148-b9fe3c2ec76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5ea1aa-6858-4707-8c9e-fb6959f63060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784a5b70-0745-45a8-9055-d41bdddf2f0e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7c9615-9801-4f88-9d65-66c3443207b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18582e85-0ca7-4cbc-9d30-f9976c1c6e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0abe0b-55b5-430a-972c-000c026c9f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eed7e87-cb42-4a15-99a6-9b27e28b812d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45942744-dec6-4cb3-82f0-501ee39204bc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa33caf6-4566-4ab3-a4ca-b8af7eb780f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e625d750-4239-49bb-99e3-d8046c5c9d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d542557c-6207-4791-9996-45ba9342a45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f04f74-cf1f-41ac-ba19-6e6ac2a8f4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc53423-49fb-4e3c-a028-e71f90b79ba6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35485ab5-c984-4588-93d1-f9c5227d2f4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f96c05b-22f8-4f93-94bf-638e1e9020e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b28dfb1-352c-44af-ba1d-08b9cc1dcbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea481e80-8443-4fe2-aaeb-5f426f48d8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396c941d-a76c-4380-baac-f65c1c4347a9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd4929d-b029-4719-b10d-80eea20968f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08f3e7b6-c496-4d60-b562-3f1f80b2105c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9668889c-0a57-43d4-8bd7-1b2238ac3acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfa4d8e-5af5-47ea-8495-bbbeb4741ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a923d5e5-1905-4856-85ec-082cb0024c45",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3463a544-1a93-4a2e-aa79-bf49000f02b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7ae5656-b0ef-4bd5-8ced-290eb4ea34e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e3e4b5-dc00-4da7-9839-d882c3664a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d190f6-1192-4613-ba0a-97259c6c72b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3127a789-22d2-4a1e-8845-d99364520400",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5f44d9-e007-4355-a6dd-59b4e06a2fff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd3e362-7583-4765-ab22-c2a5f81dcbb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a583b8e5-9854-4932-a0bf-d26bff430bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c1927b-68f9-4ee8-877f-ba4eaa3b16eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7405b30-2164-4e93-8728-79a1fd8e5572",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfa762a-5c6f-4b68-b9c9-34c5c92491c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36257f9f-ede4-4c60-9f6c-32c330994cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb24843-b5b1-4ee2-82a2-cb5d11c95a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22088cca-8a8c-448f-8929-9289f28c1e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5264404-7604-46d0-92da-02ed72d2ed33",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9821d6-e5d5-4132-be7a-09359986f196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a5b20e4-d766-432d-882b-a31af774f10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca68f35-ca71-4f50-926d-03096d217112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea54233b-d93d-40af-9879-8887818088e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "094bb836-cee2-4ba2-acbe-ca5b9c27d77a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423a8e8c-9d7d-4b00-abe2-1837952c3847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab2c21f-67f8-4ec1-bfce-27d7142ec4c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1d8957-aa7d-4e7d-9c02-24e991236e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898c0431-a111-4232-b76f-0fa4d32c709c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13658057-b1c8-450f-ae45-6d822681f71e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319aed7f-fa20-461f-af59-afcaee94ed10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b641832-3efb-42eb-bc53-d0373652a095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8f62d9-48a6-47c8-9179-c39e76a94e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda2ffe6-185e-4f08-9f6c-41377cd0f63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912d8a71-1be2-4c68-911b-eb1f42bbfc41",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fd67e4-b2f0-40f9-85ab-5df0c8d953a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa11344-2f45-49fb-bcce-3e1fa5697277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bec8d0f-8db2-498b-a88c-484ecc3b1d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0c3f0e-0e2b-49fb-b14c-1d9651a64911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad081ebe-bd56-454e-bbb5-5cc1f8599293",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e63677f-e334-408d-86c1-e04fffec2055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "962e8670-76cc-4b9e-85d4-087a8671e38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b39a034-ca6c-4b32-98d6-a89eaa89cfbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9357824b-133f-453d-9b52-f635fce70b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b4d950-7eeb-4e32-9aed-b49440637e77",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a154f86-7155-48d3-8599-9deb2775b477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0f134e-517a-47ae-919a-f6e152ac5f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc415ec-db2e-4a83-8393-cf95f5cb46ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8ca893-427c-48b7-ab46-4f1c939e4b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca4eab8-1434-42c1-87ba-bb0c63b1398b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ca9913-840c-4a2e-9abc-6ed2b3466e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6c08da3-ac56-44a1-82c1-697e2b6de1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5230992e-6844-4cbb-a3fc-8c2448354acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab20284-ed7a-4805-8d74-684441c680b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c744c0f9-9735-4e05-9aa2-2e5ada8bd890",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6109da67-2e9e-4d0b-a9e2-a5850a25737a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a01d4db-bcba-4d03-afc4-b69638045a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7495f11b-2e1b-422e-8e30-b143174bec35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd83af4b-d08d-4841-9ed4-692414417693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107870f1-d6c4-47ac-aa0f-cfd533fc39e3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67424d1a-03f3-4429-b4f3-8f984cb44b03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a4f7862-ee3a-48a4-a3f5-15cab315920b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534f96e3-6459-4c76-a6e0-e322e688a21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305b6102-aa3d-4b28-8c63-4b7110d3fcd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb2972c-9f59-48ad-b5f8-cec7c5d1f36a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d21637-7edd-4b4b-9c55-cefca278013b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e501baf3-c645-4983-a47a-0c7ee0bb0e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2bc0bd-8950-4a9a-ae0f-140f469b1931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8231699b-bf54-40f1-aab7-c1883a08a67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4572cee3-4890-4e76-874a-7d0acf78c6d1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ec2b4e-6c5a-4107-8ca9-d5602f6d493d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14362dce-edf4-4839-8ab9-dd91c090aeea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e53bc3-bd73-47bd-b0c2-0d4fe20e6a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e86d3b1-39cd-4335-aad3-23326d800c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe39b5ac-cf58-47db-8f13-462587070bff",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9994333-5ea8-4e28-9cd2-cbc588f2912f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ebf166b-f365-4bd4-9e09-88070644999d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd88341-c708-493b-a2bf-389691677697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3748b8-10b7-435b-834c-40eac531bf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ebeb4b-0f25-4958-9d60-6bde3f558cd9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af36bbff-7e75-4900-9f5d-0c03c0f1fe13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1e79597-2004-4b9a-985b-438c3973462c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49eb0b2-2c4c-4ca4-8c40-0d36d414274a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69dbd91-27a3-442e-b65a-d142c51f239a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b3ecb9-724d-44b5-a117-01e9ba20aa30",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436c2814-c945-4a79-abb7-bbcb62135126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8b061f6-b3c5-4dae-91c1-44c62f3bf9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b8d149-d6b0-4d7d-ae56-c9cfdf63004a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24bdb03-3f80-45c3-94de-e6dd99a40ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27a3b44-8a37-4c22-bbb9-8555f39061be",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01aad3e-5e73-441a-b83f-9ab6c00fef75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab95a9b-6ba4-4ce5-a38f-9bc437fb81c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc78f37-f6d5-4053-8921-ac5548bebd3b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd955079-55ce-4b24-8439-f6177281bb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53027d7-1c32-4dc9-8db3-f2e67b6c8e02",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cceb2d8-42d8-4755-b856-2f0ecd31d9e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e4cc48-0ecf-4738-a636-076277406227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc1f8bf-1dcd-4716-b376-bc143a60733a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c77f13-8537-4949-90ff-fcdcec1df838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d66f32b-8320-4403-9e14-82436a137a6a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fbb4d3-e8ac-4964-80e1-12caaffe7f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d0f29c-b731-4abe-9756-ac05c5ac9c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce42a93-a2e3-446c-83d0-d17aff19e35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f67347-4e6b-4e5b-a351-001bc8f139f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a1719e-683f-4bcc-8992-da76af9f6843",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1506fc0f-9cec-479a-b75f-50e912c41276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f4136bf-f448-45ac-81f9-0f414eab4039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47c6392-8913-4afd-bd1b-4ba50cfa602a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c107f37-77b3-441d-9ae3-d7f432763159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0475602-52f2-4d75-9fe1-e574274942af",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682d5ba4-564b-4806-98e5-c11c978b24f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b10e26d7-e844-404e-95d0-91cb44a68710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abeb517b-b80a-4796-881a-9919001944c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34839a6-685a-44c9-903f-0d0e2782168a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba0fd35-4027-4fbc-a7c4-9cff6e9e65f6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3126bfb8-c4ce-4375-a549-2c64c5716fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c46b260-89a7-439e-8f82-378558579388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e00d28-3e0e-48d5-947d-de6d06164d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f9aa0f-e260-41bc-a531-3b8a10ab1083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5487c3-923a-483f-8089-a9c5e2843409",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cad31f-09e7-40b3-9111-9ff2950150e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023fbefa-2466-4df8-be17-0bffc504a46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d88c476-dcea-4f6a-8495-6eca1223b968",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceecfd3d-af71-45e5-82f8-2701d0d7eeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddf99df-6202-47bc-b24a-10b99af5dcc8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a473fa5a-2ecd-4b22-94e9-ff9f88742428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f790787b-a95f-436a-995f-0f45cbe4e1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05531b97-97d5-4a3f-855f-5f591c12ab7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54fc8d7-6b74-4e01-baa7-cc4fd7b852ec"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b22744e-2768-4146-a3d3-6852aea64a3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "566d7cdd-7dae-4328-990b-25f5a00f7901"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e31f5740-fa89-4b31-90bd-f9587678e71a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bd517f2-eb55-4701-b867-6856f91cc1ab"
                    }
                  }
                ]
              },
              {
                "id": "3271a92a-9e9c-4525-bba7-cd6460c82f19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa8448b5-f91f-4288-b908-5bd273b773ef",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1b847d-43f7-4e75-ba39-370e4c07ce85",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d28ec8a3-6c07-437a-b8dc-f4dac2d5aa1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43622e72-fa61-47db-8e69-ab7dff73d12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c7a81a2-9115-4a68-bd9f-e1ae5b125789"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "615617a9-5801-4338-9943-d25c590d9a00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef2d6cec-3893-44f2-87a5-93f7164d0056"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46802778-19de-48ec-9f62-9a9e0d7f0345",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34fd76f5-debb-4f5c-9df0-86493df43a55"
                    }
                  }
                ]
              },
              {
                "id": "d988caac-24a6-45a4-9c56-b2fe12b6337e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6d1aa96a-3dba-4c4e-b266-e802a4e2e4f5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39de2e49-df5d-41cc-b457-f6ca2ff45aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a3dc38a3-1807-4b43-8dac-0e070b2bd970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bc41c3-ce37-4374-8ffc-9745958bd249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af791ec0-c2f7-4696-a224-06a424bc4952"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0879e3f8-53ed-4432-9e81-45c0f3592f16",
            "name": "Positive Testing",
            "item": [
              {
                "id": "78fb83c1-0adc-42d3-adb6-e7a2b61695f2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce4c32eb-7791-4dae-b7b1-f34ab78d3522",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "11437076-5ccd-4fc5-8cd3-6c741c1cd5a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07c0c7ee-5ea7-41f4-96c0-9e0b2072da70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "257005d7-96ca-4fbe-a656-1e3296501007"
                    }
                  }
                ]
              },
              {
                "id": "22f62b61-6211-4300-bc8f-954c3e54d859",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d5a64f5-f4c4-4453-953b-708f64d83715",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "522308d3-d713-4d24-aa97-cb58d6c18043"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2863d8c-b4e8-40f8-b164-fa6d0bdb12ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86737716-fe4b-4f7d-90f2-fc790897d3aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db582c1b-4e30-49c5-85da-d5ab67c6364e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e9220aeb-50b3-4945-ba13-2346eef9ea17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc685a44-f7ce-4018-afde-9e74f57cfd3c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38d9e9fc-9215-44fa-b8e3-2e0f4b092596"
            }
          }
        ]
      },
      {
        "id": "c88f577d-1a69-49f1-9b8d-7b7f67881138",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8e38176d-e26b-4180-96ea-9373233ada5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef60d01a-4ba5-48a2-8eb2-f03e48736d1c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f05bf54-6ff8-4691-af57-c9f6dfa57497",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228d854e-dad4-48f7-acae-80bb0ec339c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5681048e-c387-4167-9c11-47fa44deb17a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5937843-7c89-4d6e-871d-b065aaa40d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09be00f3-ee7a-402f-8d1e-ac609a26a354"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "706a14e7-e730-4266-9ee3-ab851ada2d45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "987b1ebb-f129-45d0-8882-c9b13dc5deb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28868779-a3ca-441a-9df8-64cf146ca85e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7df6176d-1bc4-4354-97d8-3ac7da5808df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a36e248a-6a55-422d-8885-f04afa951fcb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9867397d-1233-4938-84f1-53f5ff442de7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20e0f4b9-b97e-4049-bf86-c06f853e1b97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42a08271-6967-40f8-a320-36f8aebac630"
            }
          }
        ]
      },
      {
        "id": "ecc819a0-076c-4c69-b054-e634fa505fb6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0ce20fcc-f572-493f-a14e-1c938e6c2fb4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc7cba74-fa29-48cc-ae34-027cca43929e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e191d825-d5f6-4a2e-965f-47e84b7ff23f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ab398a-7941-4898-8ed4-e31af6d5862f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db767990-4406-43cc-bab4-464327584799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f7a03b-1175-4cd6-99af-6fd837c69c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28fbdd00-3120-40f9-9194-98a66c0ce82b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e2c40d9-d4df-4af7-93c0-62ff0dedce98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f01e8c08-409f-4cac-b6e1-6664361ff824"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8927bbfd-4151-4086-9450-4e4e1872e123",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bde55dd-e215-451e-a56e-25e466212b7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05a04842-9c11-4463-8215-9240a646e1ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9a2d6ae6-4bc0-416c-a7f7-d963c339780d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3371bf7f-3c9f-4269-b1e8-3408f858ed85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "636270de-476a-41b8-a6df-68c4d73c75ff"
            }
          }
        ]
      },
      {
        "id": "ff682598-9bca-48ad-bc17-2ff714b03f30",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6a140acb-375e-4a81-8441-dc21c2473ad2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b9592c6-2acf-46b1-80b2-05e43a821aa7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e3c74155-b081-436f-924d-024171eb3f81",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa3fcd1-1aea-4a9c-981d-a95fcccbe162",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15291669-1323-4f72-9035-742ca471ae62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a9ae83-073d-40f7-9fe0-1ba0d42c54e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81452573-454b-4bd1-8319-3f60a292bf51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5410e681-8656-4cad-a457-4418d5f11b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59321d6b-4dae-4a7a-99f8-6fc7b6dc38c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dee1b889-16a0-41c0-b023-4311ae2f7792",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "743160b2-264f-4169-a0e6-a2cd37b639a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43e4f03f-9306-4994-8e9b-f1db60a32982",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5c7edf91-952c-458c-a38e-f8d47f364317"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33a0c673-e30d-4a9b-82d0-308475a3477f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d02cfabe-e6c6-49c1-a953-3bdd795971fa"
            }
          }
        ]
      },
      {
        "id": "2d358ee1-af5c-4965-8300-da9c2a6b74b9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "543a6d95-b30c-4d05-99c9-05c371a5d447",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b214e25-9d5b-40bd-ac35-5275e1c3f169",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d3388351-60e6-4cda-b043-2deffcc8682a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "986ce621-4481-40f9-9843-201c5269e443",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bdc5cb4-8d5b-4082-a33c-577bf6b062c7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 141.55281690140842,
      "responseMin": 8,
      "responseMax": 2261,
      "responseSd": 232.22057423428038,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692491617188,
      "completed": 1692491671016
    },
    "executions": [
      {
        "id": "3af49469-ec50-4559-aa35-68047eac7f99",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2392f1e6-7557-405c-ab2f-29abea455746",
          "httpRequestId": "be197f9b-31e9-4d7f-bce4-3ebcef439b9b"
        },
        "item": {
          "id": "3af49469-ec50-4559-aa35-68047eac7f99",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "aaf9bbde-6512-4f3f-acf7-7e038fbacc9d",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "0b831c21-6576-419b-ba36-ce39eace7b2d",
        "cursor": {
          "ref": "82aad19d-c0f0-42e5-944f-bdff2cf6ae87",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cf281744-d57a-4075-a317-1f87e3da632b"
        },
        "item": {
          "id": "0b831c21-6576-419b-ba36-ce39eace7b2d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0ffadb08-139e-44c1-881e-eec4b802d8d5",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "a2ad2277-daa3-4cb0-a837-2a20a2624e9d",
        "cursor": {
          "ref": "fef38f0c-ecdd-4cc4-958b-53f792bc4153",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1580bb28-6778-4c2a-b437-2be4df162f30"
        },
        "item": {
          "id": "a2ad2277-daa3-4cb0-a837-2a20a2624e9d",
          "name": "did_json"
        },
        "response": {
          "id": "b2db4db0-ac64-4364-917a-cfa234c3e452",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9427b4-5886-4941-a5cc-a630f314488d",
        "cursor": {
          "ref": "d03e7107-652e-4314-86dd-d6640ae467d9",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d6b279e-3436-4bc7-9a9a-a49d02974a01"
        },
        "item": {
          "id": "1f9427b4-5886-4941-a5cc-a630f314488d",
          "name": "did:invalid"
        },
        "response": {
          "id": "44d4fd8f-9ef8-41da-8b75-6c40d7c641f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9427b4-5886-4941-a5cc-a630f314488d",
        "cursor": {
          "ref": "d03e7107-652e-4314-86dd-d6640ae467d9",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d6b279e-3436-4bc7-9a9a-a49d02974a01"
        },
        "item": {
          "id": "1f9427b4-5886-4941-a5cc-a630f314488d",
          "name": "did:invalid"
        },
        "response": {
          "id": "44d4fd8f-9ef8-41da-8b75-6c40d7c641f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c88f602-174c-40b6-8702-9570dc826e2f",
        "cursor": {
          "ref": "7fdcf449-db9b-4d13-9690-715c17b037ed",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "71e249f2-e10d-49e2-8100-ed6c8797bd1c"
        },
        "item": {
          "id": "5c88f602-174c-40b6-8702-9570dc826e2f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e7b6e168-2f0b-4234-922e-f20aea62181b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 150,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64938d10-5705-4215-840c-ce990d9d8e7d",
        "cursor": {
          "ref": "4045826f-2d25-4164-88e9-244e06389638",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7bb71e72-dd1f-49e8-9864-81acd6aeb215"
        },
        "item": {
          "id": "64938d10-5705-4215-840c-ce990d9d8e7d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5314d253-9a64-4d4d-a996-1aa34c6e4ecc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a74f5c-e857-49f4-8283-aef7b44efa17",
        "cursor": {
          "ref": "9b0ea94d-33d9-43f5-9c96-a877c7cc3bb0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "13843079-fe3f-40d5-9845-cb4c5d6e26b9"
        },
        "item": {
          "id": "61a74f5c-e857-49f4-8283-aef7b44efa17",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3e6f8ea8-b75a-4f07-a0a3-08a18e3f40cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34709d6d-ef33-4768-9742-967d90049240",
        "cursor": {
          "ref": "dd2a9ddc-7bec-4bc4-a274-3e9da3f792c5",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bdfc6d92-e0d6-4539-908a-ea4372a9c0bf"
        },
        "item": {
          "id": "34709d6d-ef33-4768-9742-967d90049240",
          "name": "identifiers"
        },
        "response": {
          "id": "a3d6466c-1a31-479d-896b-afc8423f2559",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425682aa-98eb-4d78-9c5d-24779d492e4f",
        "cursor": {
          "ref": "fc3e6bc5-eedc-4a6c-b092-d44ab1373138",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "42939be8-8d67-4080-8b16-f2135cf7a8dc"
        },
        "item": {
          "id": "425682aa-98eb-4d78-9c5d-24779d492e4f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "500a14d5-0a00-44c0-a560-e1bc9e281920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791378fe-6cd6-4364-b80e-a32e261eaed7",
        "cursor": {
          "ref": "0c9bdb34-0369-463b-95d4-7932ea139bf3",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b4a534c8-a97c-48a3-bf0c-aa8f6cd4f1cd"
        },
        "item": {
          "id": "791378fe-6cd6-4364-b80e-a32e261eaed7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "193ce180-2ff3-4c42-bc3f-6cdae5067c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abab1e1a-4b1f-4f2c-a9ab-23d0434cab50",
        "cursor": {
          "ref": "ff34a5f3-ddfb-45c5-a0c3-0030e9ea3e38",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "09ff3e8a-7358-4e39-8383-b2f888d4d1a0"
        },
        "item": {
          "id": "abab1e1a-4b1f-4f2c-a9ab-23d0434cab50",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a7e8ca47-8211-43fb-ad39-2697d4af7df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6c7616-0099-4d91-8ac7-5d40b3b5a093",
        "cursor": {
          "ref": "e221527c-1370-4fb4-aa58-92cc34e326c9",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dcb366f6-242d-469f-b7e4-78ba33ca7d71"
        },
        "item": {
          "id": "0a6c7616-0099-4d91-8ac7-5d40b3b5a093",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c3e03fe9-0369-4eff-b72d-13fab97b7926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac75ca4d-3e27-411f-8915-229392f253ca",
        "cursor": {
          "ref": "e74fea22-91d4-44c3-a193-864371c76910",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3e1ed96f-4816-4978-991b-7ee60145d69d"
        },
        "item": {
          "id": "ac75ca4d-3e27-411f-8915-229392f253ca",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "512434d9-ca73-4a9f-8e21-17ba5f9b6afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9274bea-f6cc-43c5-99f1-b953de5a2082",
        "cursor": {
          "ref": "413920f5-adf7-4809-85a1-df842916e1bc",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6f28bc98-6440-4fa7-bd74-f5cb1ff07228"
        },
        "item": {
          "id": "b9274bea-f6cc-43c5-99f1-b953de5a2082",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "98dd27f3-7341-4010-996a-dcadcdcd93b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5587a0-dd78-40cc-885d-00bc22b50ec3",
        "cursor": {
          "ref": "abfd2791-3aa1-44fa-9727-c23b4ab41890",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5a87a0bf-555e-42bc-823f-7c4ad47aabbf"
        },
        "item": {
          "id": "cc5587a0-dd78-40cc-885d-00bc22b50ec3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b8a0c2c1-44c0-419e-bfee-d4bf3dd42570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7201d05-67ff-4cd5-8a87-74ecc3f291f5",
        "cursor": {
          "ref": "d8227840-1a46-42ee-828b-e186d5699fe9",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0aa30ba1-dff9-4f82-a543-1509f58fd162"
        },
        "item": {
          "id": "f7201d05-67ff-4cd5-8a87-74ecc3f291f5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "548406ca-64d1-47f0-a3e8-c28fd9976df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2770a611-83c9-4b39-a7a9-095728702a5f",
        "cursor": {
          "ref": "b587f7af-abd1-46a7-b518-73e91d92224e",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "185e0e4c-383e-41c5-9a09-ed79da9bbee1"
        },
        "item": {
          "id": "2770a611-83c9-4b39-a7a9-095728702a5f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d37ad58c-e73b-47ba-ab36-1e858c883735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1c839c-ef23-429a-9053-73a2ad43c7b0",
        "cursor": {
          "ref": "8f65447e-253c-4fa1-bd17-98cbf7ebdb55",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4dfa54be-fbd8-4c93-9c8a-183853f0ff9e"
        },
        "item": {
          "id": "fa1c839c-ef23-429a-9053-73a2ad43c7b0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b9332735-5473-4a7e-84a7-1771c52c7619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115b13c9-96fb-46cb-80d7-c911cb403694",
        "cursor": {
          "ref": "0a20aff6-0949-43a1-af0a-5802aa70b61d",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "78c668d4-f80c-474a-8186-59de9d88b1c1"
        },
        "item": {
          "id": "115b13c9-96fb-46cb-80d7-c911cb403694",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "dd83b71d-dbcc-4e15-9c73-9045e04bdb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d0b481-24c8-43c3-9401-6628229bc47a",
        "cursor": {
          "ref": "48fb8ceb-6454-4c4b-b171-378cd2549c1f",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "baa666de-c2c8-416e-a7f7-404834b043da"
        },
        "item": {
          "id": "08d0b481-24c8-43c3-9401-6628229bc47a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "565445c8-306f-4740-936b-adc4dd79eecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1af3247-8873-4049-85d3-7c75a69391ae",
        "cursor": {
          "ref": "8089e68b-faf3-452f-b258-edd458b165ff",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "103791ff-d5cd-4ec4-9395-9680ae19f157"
        },
        "item": {
          "id": "e1af3247-8873-4049-85d3-7c75a69391ae",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "939d62e5-6895-48b3-88e1-47012e0f979a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d18883a-d185-4d18-b1d5-cdcc0e353f38",
        "cursor": {
          "ref": "ff98b4c3-745e-43f7-b9a9-07fa8f6095d6",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2864060e-f7af-43e5-bd05-011874c1ecf8"
        },
        "item": {
          "id": "3d18883a-d185-4d18-b1d5-cdcc0e353f38",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a58423fb-44ce-4443-bedf-c85171ae265c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c8fcee-c591-4a77-9750-61e9b3369f1b",
        "cursor": {
          "ref": "d000352b-f78a-4d9e-85e8-34ede1f486d4",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b02890a6-ee83-41d8-98ee-66f0c849885b"
        },
        "item": {
          "id": "12c8fcee-c591-4a77-9750-61e9b3369f1b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "87b0fa2a-a188-4db8-8b1d-2f1cb54e683f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036d2e67-b57c-42aa-b5a9-a79692688eb2",
        "cursor": {
          "ref": "64e4dd37-47cb-44d7-a68b-474d7da11740",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0821c961-516d-4006-9ef8-e5d98d125cf1"
        },
        "item": {
          "id": "036d2e67-b57c-42aa-b5a9-a79692688eb2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "08258ab9-95dd-4a4d-b34f-956488255c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83da9be5-bbc6-421c-bc02-47ec81b399a7",
        "cursor": {
          "ref": "6fee400b-2348-45b1-b851-b8c8299edc3e",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "78481b8f-b759-41a5-87cb-281ac80da04d"
        },
        "item": {
          "id": "83da9be5-bbc6-421c-bc02-47ec81b399a7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "91528944-afc3-4078-bc59-efe7e5857879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10b0694-74ec-4c5e-9471-948cc344bcc3",
        "cursor": {
          "ref": "bf5a405c-2dee-4567-b10b-5cfd3672c82b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "eec15914-8fef-4544-8ed1-7027bfc0a507"
        },
        "item": {
          "id": "a10b0694-74ec-4c5e-9471-948cc344bcc3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6d7272bc-0f9b-4930-a5f0-27706a689ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f823b73-7935-4522-8e83-ff5db5360170",
        "cursor": {
          "ref": "dc98bb4f-54cf-44c1-96df-1d4145890644",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ba6c815f-3739-496b-99d1-2dce3878a492"
        },
        "item": {
          "id": "8f823b73-7935-4522-8e83-ff5db5360170",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "21d54770-8ffc-4612-b064-ad25d8f75e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5794dcbe-91a4-4cf9-a67c-72cd4296ff93",
        "cursor": {
          "ref": "b8096555-cd39-4461-9a5b-aa13a313990a",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9010d813-b1d8-4e81-a48d-8edf1ef520b6"
        },
        "item": {
          "id": "5794dcbe-91a4-4cf9-a67c-72cd4296ff93",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "03812d60-a24d-4050-a5b2-5a673e7d17b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b42e1a1-4ff8-4359-b960-73399d09ff42",
        "cursor": {
          "ref": "bde43cbf-b8dd-4723-bbc3-bb5c79a29a44",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "20581433-ff7b-4cbc-9d18-612a0844aca4"
        },
        "item": {
          "id": "3b42e1a1-4ff8-4359-b960-73399d09ff42",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9f5ced5c-ed38-4359-9735-287a18391276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf4b252-7406-4157-8ebc-8a0e8393acd7",
        "cursor": {
          "ref": "4994b87c-77ff-420c-8188-bd1bcc451086",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "623eac86-7b5a-4dbd-bbb8-dff08d51b684"
        },
        "item": {
          "id": "acf4b252-7406-4157-8ebc-8a0e8393acd7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f3b0605f-d8b2-4732-beda-fa06f8a2378b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b2bb2a-1d18-42f5-8965-56592a3fd159",
        "cursor": {
          "ref": "abc51042-d0d8-4d79-bfa4-54875367920a",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cc831b64-308b-4884-bd06-ec48a19aa6e4"
        },
        "item": {
          "id": "c6b2bb2a-1d18-42f5-8965-56592a3fd159",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "656e1d8e-2805-4cb0-8285-9ff14d3a9737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e51091a-8596-4280-8912-a6dadce00387",
        "cursor": {
          "ref": "50460ed1-3343-4870-9802-b6b55bcb82a7",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bc8a26f6-ad0b-40f2-a685-cf818d441a84"
        },
        "item": {
          "id": "1e51091a-8596-4280-8912-a6dadce00387",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "aebbe86b-0f6e-4624-b636-4e9d7de4fddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd023e9-456e-4c7b-9e3b-2f0103db466f",
        "cursor": {
          "ref": "e7e5d414-9a7a-436e-bdec-adc67e33e4e1",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4502d1c2-5f45-4559-bf25-f28381dd800e"
        },
        "item": {
          "id": "9bd023e9-456e-4c7b-9e3b-2f0103db466f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7323eca4-36d7-42af-959e-9879eab4ecc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f484274-9521-454e-9538-7e9be4b0d9fa",
        "cursor": {
          "ref": "6907b841-a582-4f87-a514-5fcb884c100f",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d541befc-0179-485f-9944-615d264dd7a8"
        },
        "item": {
          "id": "4f484274-9521-454e-9538-7e9be4b0d9fa",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f6dcc0d3-2004-4d4a-ae8f-d245ca6207ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7af549e-48ca-4e1d-b413-fd6c58df18b0",
        "cursor": {
          "ref": "4cbdefdf-9bfe-43b8-b28f-e29a671a6a6d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f73d145b-920c-4572-b251-e2607825c058"
        },
        "item": {
          "id": "b7af549e-48ca-4e1d-b413-fd6c58df18b0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "70ab3371-99d7-446f-8762-559fd1306297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0050a0-bcd2-492a-84f6-0ac34bc1a7f0",
        "cursor": {
          "ref": "9868fcea-0949-47e2-89c7-349699da0fa0",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "300b3446-c7c7-4013-90ca-61ccdab9ee3b"
        },
        "item": {
          "id": "7e0050a0-bcd2-492a-84f6-0ac34bc1a7f0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6fc8e8db-4206-401f-b499-b61beb72c59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e186a5-a051-4794-a63e-53a31e916630",
        "cursor": {
          "ref": "b9b0e559-e32f-468e-94a0-1a61d0c2f4f7",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9e13c75d-d2f7-4fa4-bd91-d1044df6d92d"
        },
        "item": {
          "id": "79e186a5-a051-4794-a63e-53a31e916630",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "56539ede-1cab-4b79-9c20-a822ce7009b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4094fbfe-e6e0-4bda-9e29-ca39bbc6a74d",
        "cursor": {
          "ref": "1bd3cfff-fc5c-4025-b3cf-332c1503aa15",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5d9ce20f-b262-4e7f-8fb2-7b862c58708a"
        },
        "item": {
          "id": "4094fbfe-e6e0-4bda-9e29-ca39bbc6a74d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d64765f3-e3b9-4d27-a521-c7e9de25990f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c277df4b-e813-4c8c-98d9-47813cfa40d2",
        "cursor": {
          "ref": "291bea2b-c2e3-4123-995b-bf64adf534dc",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "49acd627-7ee5-4957-a872-6ff19e6e3c36"
        },
        "item": {
          "id": "c277df4b-e813-4c8c-98d9-47813cfa40d2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "91c0c57b-62ab-42d7-b399-5a651f076896",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4d5a0d83-7134-4a40-9eff-ec5682a66caa",
        "cursor": {
          "ref": "e85653a2-fbe2-4a2e-afc5-ff6f3cecad45",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2a231623-5e13-4009-8d2f-2ecb8a0544b9"
        },
        "item": {
          "id": "4d5a0d83-7134-4a40-9eff-ec5682a66caa",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4b4884cc-bc7a-4fa9-95a8-7f6c6b5cb0f4",
          "status": "Created",
          "code": 201,
          "responseTime": 2261,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "319fc709-67f6-4820-a6fe-8254112cacce",
        "cursor": {
          "ref": "818204db-886d-43d7-aeb1-8f0f3db35487",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d97340e7-e11e-494d-b152-765a7bef63b3"
        },
        "item": {
          "id": "319fc709-67f6-4820-a6fe-8254112cacce",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f51588f8-ee1a-46e3-b70a-2e6e8c452d36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d0e9c296-dbc7-4b6a-8cf4-f974bc404f7f",
        "cursor": {
          "ref": "d12f998f-cdf6-42a2-88ee-9b119a41452f",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4b3199e3-f43e-454f-8e33-5ae8363ebb1e"
        },
        "item": {
          "id": "d0e9c296-dbc7-4b6a-8cf4-f974bc404f7f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "79627366-8952-4077-bbd3-22d9b72e0ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f695dda-7a63-4511-9406-cb18f1744fa0",
        "cursor": {
          "ref": "bdcadea0-c239-419a-9af6-d80bffc5376f",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0e993923-7698-46cf-bfbe-0f497659018f"
        },
        "item": {
          "id": "2f695dda-7a63-4511-9406-cb18f1744fa0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9befc9f1-af5b-4ec5-b4ed-a0c1eae5b87e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e5045cfe-a691-4acf-9b10-f32f1ec051d0",
        "cursor": {
          "ref": "5eaa2fd4-40cc-4c7c-a504-985d544de081",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2c7f5edb-fd42-43b2-a467-17ca8cebaee3"
        },
        "item": {
          "id": "e5045cfe-a691-4acf-9b10-f32f1ec051d0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4ed2553c-9d4c-4516-9008-149cf96b206a",
          "status": "Created",
          "code": 201,
          "responseTime": 1543,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "48c0243a-0847-48fa-b701-ee6570e8565d",
        "cursor": {
          "ref": "88fea697-b77e-497c-a83f-0f86ff888a9b",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1a88b57a-4b18-4044-8259-eb014bfb261a"
        },
        "item": {
          "id": "48c0243a-0847-48fa-b701-ee6570e8565d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c950437c-828a-43e1-a14b-94d9dd63581f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "38a2eaf0-8375-48bb-93a4-429d2619680c",
        "cursor": {
          "ref": "11fa7fb5-2fd4-4024-87d1-cbaf89321676",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7caf6be7-b8f4-45ac-89f2-94e1464ee1e4"
        },
        "item": {
          "id": "38a2eaf0-8375-48bb-93a4-429d2619680c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "30c65b96-655d-47db-b133-549b429e533a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 805,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5ccb2288-9378-42cd-abc9-39e2a8c9a4a8",
        "cursor": {
          "ref": "39e5c7b2-8b13-4ba2-9412-a4a138f64491",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fe98f535-6e9a-4f11-88bc-f9f79ed1e328"
        },
        "item": {
          "id": "5ccb2288-9378-42cd-abc9-39e2a8c9a4a8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bab94134-8dce-42b3-95ef-9f1a497a2107",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "958e39d2-5f99-4ce0-b9d5-d8b726d0b409",
        "cursor": {
          "ref": "29d6edc9-cecc-49cf-86f4-15018baa4913",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3e798943-dda7-4952-b00d-3f94c6c6af1e"
        },
        "item": {
          "id": "958e39d2-5f99-4ce0-b9d5-d8b726d0b409",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cd38877e-03ae-4519-8c42-fdcc6223d5bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a8337c5e-e128-4ff9-90c7-b7dd57f2895f",
        "cursor": {
          "ref": "fd1ff11c-227a-474a-80ac-15ae10bc0cfe",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "75a062a4-0556-4bd2-995a-3672e69b8fe0"
        },
        "item": {
          "id": "a8337c5e-e128-4ff9-90c7-b7dd57f2895f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7abf405e-9988-4c7f-aa87-96beb6d478ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "32855e80-49ea-4d2b-8017-982187100200",
        "cursor": {
          "ref": "dd05e627-dcfe-4b25-9f24-c724dca2d92f",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a8c7a2f1-94a7-46ae-af34-134ddec440df"
        },
        "item": {
          "id": "32855e80-49ea-4d2b-8017-982187100200",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "28291d67-7a43-415f-aedb-b0a8699252a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "de06114b-880f-4157-b7c8-0810ca311eaf",
        "cursor": {
          "ref": "7a1c1a51-816a-431a-9a01-9929fc21dca1",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "96fe4628-42a8-4613-8c40-50943fa203bc"
        },
        "item": {
          "id": "de06114b-880f-4157-b7c8-0810ca311eaf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2d61dc8e-6194-4d39-bb76-36874a7121c7",
          "status": "Created",
          "code": 201,
          "responseTime": 991,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f3fd9bd7-3111-4d65-9ffd-27ecfc92ed22",
        "cursor": {
          "ref": "90d55104-6ad7-428a-aba0-0ee66c8cec8d",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "999f01c5-9355-4cfd-a251-0120e71147bf"
        },
        "item": {
          "id": "f3fd9bd7-3111-4d65-9ffd-27ecfc92ed22",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e708eeb0-7e59-4633-9c04-bee3fa3139a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60432a5-3426-4502-9b6d-e8a66cb7163e",
        "cursor": {
          "ref": "e436f76e-f838-45ae-a920-38e4a5becf2a",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f46ba0fa-491b-4ee0-8b23-738141bb8854"
        },
        "item": {
          "id": "a60432a5-3426-4502-9b6d-e8a66cb7163e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c7af266-03d9-4db5-96b3-ec30b572b408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7dbbe3-5903-4024-b505-d681d59c3569",
        "cursor": {
          "ref": "ef7d2b17-4481-4dbb-8857-be475b11e6ae",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "59e7a6f7-e847-46dc-9930-e726aaf30d18"
        },
        "item": {
          "id": "5e7dbbe3-5903-4024-b505-d681d59c3569",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d7a063a8-16be-4cb8-b533-b3ff7a6d518c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a582520-568f-4506-8b5e-af88e3130f90",
        "cursor": {
          "ref": "ab6ebd72-0238-4bf5-a30a-e4cced6e71b3",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8d22d998-ba54-4737-b1c2-81b06b1c9ef0"
        },
        "item": {
          "id": "1a582520-568f-4506-8b5e-af88e3130f90",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5798d404-f360-4d54-8760-df8cca539ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8178640b-f0a0-4c5c-b2f7-a62005aec8de",
        "cursor": {
          "ref": "d455b186-9b0f-48f6-aeda-4163b44cbc1b",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c685a491-e967-406e-a9d6-47572ecbdd7a"
        },
        "item": {
          "id": "8178640b-f0a0-4c5c-b2f7-a62005aec8de",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a4b9eb11-071e-4d17-9a2c-469c6bf84130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3c179c-bbff-4b47-8bd9-f328d9603d82",
        "cursor": {
          "ref": "1a1e02ee-eb24-4367-902f-a53567719ada",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "54592c8b-9eac-4b74-ba81-d218528b4fab"
        },
        "item": {
          "id": "ed3c179c-bbff-4b47-8bd9-f328d9603d82",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1d060faf-8e3a-47a6-9b31-483c4940bf01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb501308-559c-42c2-9549-acf7a95a21bf",
        "cursor": {
          "ref": "a6f36e74-2d98-459c-8065-b38812e27262",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3ec5521e-62c5-4290-a0ac-6ebdba3f324f"
        },
        "item": {
          "id": "fb501308-559c-42c2-9549-acf7a95a21bf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1cdc9510-c510-4915-8617-f8ffdd9e8893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d480886-a2ec-4391-862d-418b3549477f",
        "cursor": {
          "ref": "d297f0d3-6372-407d-9d92-1ae95221cfc1",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2d4c6947-b2ed-4187-86c5-c02ad138fc52"
        },
        "item": {
          "id": "2d480886-a2ec-4391-862d-418b3549477f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e2d367ba-fb93-4cb9-a008-9ce08ac24dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f22872f-0ef7-4052-a9fe-137386732368",
        "cursor": {
          "ref": "eabe61b3-3831-4b2e-ad11-c938be9c8666",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "50d21a24-b3b7-4bae-b270-06541d90c20e"
        },
        "item": {
          "id": "7f22872f-0ef7-4052-a9fe-137386732368",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a3e664ac-7d44-4176-a366-9f5d5850f8c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f03739-711e-4ed1-8c1e-7b9159b815ff",
        "cursor": {
          "ref": "c99c629a-5547-49d7-af0a-ee9419eccd89",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e73023f6-5625-4343-961d-8e4713f609c2"
        },
        "item": {
          "id": "b9f03739-711e-4ed1-8c1e-7b9159b815ff",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "157217ec-70c8-405c-8dc7-292a70758a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e427e1b-b793-4a15-841f-71b474325d51",
        "cursor": {
          "ref": "93506b07-8883-4168-b133-783a1b6b28a5",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f791cbb7-a255-43af-98d4-b0e9e06dbc13"
        },
        "item": {
          "id": "8e427e1b-b793-4a15-841f-71b474325d51",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "143dac14-21bd-4101-b6da-829caae19359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dacd91c-ccaa-4a8d-b9cf-c915cb87579a",
        "cursor": {
          "ref": "6ac25ef5-7f90-42df-9b58-a6d7ca2ac9e6",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "40717b51-5e9a-4a00-bca5-937dd01e82dd"
        },
        "item": {
          "id": "9dacd91c-ccaa-4a8d-b9cf-c915cb87579a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "01f416cf-e41c-45dc-9d91-5e2b4e9db5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca746b83-1265-4865-ba97-380988ee16fe",
        "cursor": {
          "ref": "b343672a-1fda-47ad-a26a-e81672a1359d",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "05623ad6-6b6f-4fb4-8a0b-d0c5d56e8259"
        },
        "item": {
          "id": "ca746b83-1265-4865-ba97-380988ee16fe",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5ceb9a48-007b-4901-856f-fa21763ec299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efa649c-b6fc-4ae2-9b26-57bf5e4f0afb",
        "cursor": {
          "ref": "9f9976a7-bbd9-449f-999a-dedb1154a8f6",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "72b99e19-13fe-4825-94e0-42e17275712a"
        },
        "item": {
          "id": "4efa649c-b6fc-4ae2-9b26-57bf5e4f0afb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f9ff1849-0ee0-4886-8296-e54e569977fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 699,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a5deaa2d-c703-4073-ae55-06f4874e786f",
        "cursor": {
          "ref": "44e88c3f-efc4-4c69-bc2b-e4061f39fdee",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "306cd010-a565-45ac-8f6d-02016436aad7"
        },
        "item": {
          "id": "a5deaa2d-c703-4073-ae55-06f4874e786f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8e425a6f-6b35-4d1d-8d3a-ee0aecd3bfd0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 811,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2bf906e4-bd53-4a3d-9848-563920532d70",
        "cursor": {
          "ref": "cd7e9cc5-f4cd-4f57-97e4-9be094a1849b",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f1edc27-b682-4993-aa8c-db1dfd3a22ca"
        },
        "item": {
          "id": "2bf906e4-bd53-4a3d-9848-563920532d70",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "067acc91-7f66-467c-abb1-fa7ff5ffd4be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3760140d-8a1e-423b-ac75-c102173c9119",
        "cursor": {
          "ref": "68f682e7-7fbe-4594-8902-d5baccf3df83",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3f71865c-d1ad-4e29-a17b-d93b9749dc30"
        },
        "item": {
          "id": "3760140d-8a1e-423b-ac75-c102173c9119",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1da3319f-d24b-4887-9aca-e3732f0cfca6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 753,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "315d42ce-12b6-414c-bdf7-972b138186c9",
        "cursor": {
          "ref": "d4fe8d81-531f-4f31-819f-a7509cf51933",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "957addd1-d331-44b1-be19-78c67c4a0be1"
        },
        "item": {
          "id": "315d42ce-12b6-414c-bdf7-972b138186c9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "02529b21-a21a-419d-ae49-34a61c7b0228",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a87434f8-b531-407a-8760-33971e2f8fc1",
        "cursor": {
          "ref": "bc3d31ff-dabc-4b44-b8be-95b9f71b924b",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "56038f2a-fc40-4c5d-8246-23f32f76ccec"
        },
        "item": {
          "id": "a87434f8-b531-407a-8760-33971e2f8fc1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "85e57850-95a9-44af-afc1-00e322d2ac13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bab5634-be81-4c9e-acaa-49a3207ce4f2",
        "cursor": {
          "ref": "240d20ae-14be-4ca6-8f62-bccd7479f34e",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "165772f1-98e3-48e3-a3e8-b1742bf6f01c"
        },
        "item": {
          "id": "4bab5634-be81-4c9e-acaa-49a3207ce4f2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "75e40762-ade6-4b80-9c56-4205e19acf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34aee1a3-93f1-4769-98e3-c5d548e80544",
        "cursor": {
          "ref": "79f0a320-89cf-4e33-b3e0-89a9e8569a33",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3e30a46a-5982-4428-96ba-4b3eb785e2e7"
        },
        "item": {
          "id": "34aee1a3-93f1-4769-98e3-c5d548e80544",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e9d14a6b-433d-4ef7-812d-7562d6debdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04f21f8-d960-473f-ab2e-cf3660fc4277",
        "cursor": {
          "ref": "071695fd-6174-4b5f-9fa0-02fbc83e686a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "52bce083-8f2f-44a5-9d0a-6a2909026503"
        },
        "item": {
          "id": "b04f21f8-d960-473f-ab2e-cf3660fc4277",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "53fcc40f-b437-4533-b8ae-c1b6673f8785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a639e9cd-1859-4c86-b651-ad60b086c392",
        "cursor": {
          "ref": "8a71d337-b062-459e-806b-5f3f82c5a070",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "87e89e68-fb17-4aa9-9912-9e583130b355"
        },
        "item": {
          "id": "a639e9cd-1859-4c86-b651-ad60b086c392",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "658d3c01-a1a6-4705-a418-6d89550bb7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a3638d-0aa7-4b0c-8907-be2b273df687",
        "cursor": {
          "ref": "e66190bb-72e0-4f14-92c3-1364f3b94cf1",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "88e627d9-d843-46a4-b842-26acd53b26ac"
        },
        "item": {
          "id": "66a3638d-0aa7-4b0c-8907-be2b273df687",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0677e89a-f6f4-4cf8-b5cc-4334fc28a6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd22e8e7-e01a-48f6-a6b6-2728392429d0",
        "cursor": {
          "ref": "cbc9fbdc-6821-436a-b71a-4cfb0383938c",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b2ae99e0-0f95-42d0-a327-13997f169f52"
        },
        "item": {
          "id": "dd22e8e7-e01a-48f6-a6b6-2728392429d0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "527c1053-4b40-4247-b3bb-bd68f58a6cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a6fddf-0d19-4d86-a95c-6acd3293aa01",
        "cursor": {
          "ref": "a8af8891-b575-4e48-b340-21809d753b0d",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fa2d0e5d-5783-42ae-bb36-c310ab547a50"
        },
        "item": {
          "id": "e2a6fddf-0d19-4d86-a95c-6acd3293aa01",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4ce94884-f05d-463b-98b1-fed061e309b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9462f8b0-219e-4bb0-bfec-c6d42ce49b10",
        "cursor": {
          "ref": "22d6b5ce-fa15-4267-ad54-091b07cde7e4",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ef656dfb-8dfe-4ceb-bdf6-c21ed50d97ef"
        },
        "item": {
          "id": "9462f8b0-219e-4bb0-bfec-c6d42ce49b10",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a0915f50-a8f6-4ef4-8029-0ce4832fa210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebcd75a3-8f13-4804-8a8c-2463597894db",
        "cursor": {
          "ref": "806b4e41-734b-47ea-938e-02e87a11ca24",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "22775df2-4f05-4160-9013-6fc1b4831c18"
        },
        "item": {
          "id": "ebcd75a3-8f13-4804-8a8c-2463597894db",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9f119c15-f867-4b64-a3c3-b1e8ae105d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b89a17-4c0c-4a82-952a-807e8a40c10f",
        "cursor": {
          "ref": "b844cb19-a741-4d02-8e39-4543fca06d19",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c55eece3-32a9-4ac7-a435-83c0ab5ee6f0"
        },
        "item": {
          "id": "30b89a17-4c0c-4a82-952a-807e8a40c10f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5c6c42e9-dfa6-4cc7-be9d-a3a53c9f61cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9d1f51-748e-4507-ba49-79df2f0fbe33",
        "cursor": {
          "ref": "48811bda-56c5-4fc3-a98c-a79f872d3775",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "04190b05-295a-462a-bc55-014970a00b78"
        },
        "item": {
          "id": "3b9d1f51-748e-4507-ba49-79df2f0fbe33",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f02c6213-9bfd-4839-9914-d16776ccbd67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625a6586-03fc-4caa-a9aa-fbd2446b189c",
        "cursor": {
          "ref": "4cb4d0c0-73c0-4598-86a8-9204a749f1a3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "21645e6b-96fa-42f1-887c-9c41ca1c0855"
        },
        "item": {
          "id": "625a6586-03fc-4caa-a9aa-fbd2446b189c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1c1f5c3a-14ee-45b7-bfb4-8855077250b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f64722e-0ad7-473f-87f4-40279f17b8f6",
        "cursor": {
          "ref": "3f619094-f3c4-4e10-9e79-9d8918bff2e7",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4e7a2cf5-9fee-4a4a-b337-d8175cf7bdd8"
        },
        "item": {
          "id": "7f64722e-0ad7-473f-87f4-40279f17b8f6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "104b5829-0d73-451c-a83b-93994676ea70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c247875b-bcdb-4069-b1a7-fdbad0a68186",
        "cursor": {
          "ref": "72c28f73-ed1d-45d3-9003-bd0962d93c5d",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "769f6e42-c0d4-43df-b10a-f09ce2ecaf33"
        },
        "item": {
          "id": "c247875b-bcdb-4069-b1a7-fdbad0a68186",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ed6a6e18-166d-4ec8-9352-4fadb23bb641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f71c841-d431-49ff-afe7-b4e477cab507",
        "cursor": {
          "ref": "527321b3-5efa-4f64-92ff-5438f6c19416",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "15b9d335-d609-4655-89bc-c7cbce097325"
        },
        "item": {
          "id": "6f71c841-d431-49ff-afe7-b4e477cab507",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d94452f9-6a58-42d7-b3ca-57c553732238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c20698-a0ce-4419-ba70-8007978e3582",
        "cursor": {
          "ref": "c60c2777-7bf9-4d34-96f8-955b850f983c",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7f22cbd4-8302-4cab-ad7e-6607b0467374"
        },
        "item": {
          "id": "a7c20698-a0ce-4419-ba70-8007978e3582",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f3952c14-18e3-422e-951a-88225c5609a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764b44d6-626c-4d84-bfc4-3fc8ea66d2a1",
        "cursor": {
          "ref": "ea035757-41c1-4e9b-8653-cc37eef81f37",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ee65a72f-ca9a-405b-9d21-49d72ab11f10"
        },
        "item": {
          "id": "764b44d6-626c-4d84-bfc4-3fc8ea66d2a1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b5de1d6d-b5c0-408a-b078-c4029f9091b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1707a45-a218-410e-84a5-f9fee512cd2e",
        "cursor": {
          "ref": "54491102-c8f7-459d-a976-cf7e5f922fba",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5436d643-4d69-4137-bc57-24dfac76f41f"
        },
        "item": {
          "id": "f1707a45-a218-410e-84a5-f9fee512cd2e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b0a7fd51-0b70-4ff0-a735-abe3ea0963b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea2124d-d2e6-4f1c-b344-4e83d2dd7e16",
        "cursor": {
          "ref": "34336feb-73e8-4b08-b167-f7784188f4ce",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d4ebc0d4-341a-415d-accd-b88ae061653b"
        },
        "item": {
          "id": "7ea2124d-d2e6-4f1c-b344-4e83d2dd7e16",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f2d5e8c7-3ebe-4d6e-b1f5-d856486b3e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6a5050-13bf-497f-99da-0a6527deb0e1",
        "cursor": {
          "ref": "f822aea4-e6aa-4634-8de5-beae6bcb2f28",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c8d84da6-9276-4958-b2fa-23aa784cbc96"
        },
        "item": {
          "id": "ac6a5050-13bf-497f-99da-0a6527deb0e1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3122db97-571c-476d-86d0-adc2386d5a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2be6fd-978d-4ddf-9bb8-3feec08ed297",
        "cursor": {
          "ref": "7f376f91-a95b-4fe3-b403-76f4a5ad11d1",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2fad38fc-1be6-423f-94bb-0cd647fda7a1"
        },
        "item": {
          "id": "8c2be6fd-978d-4ddf-9bb8-3feec08ed297",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3b25f3ec-88e1-4323-ba08-d2935ffdc94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e09ac1-85d7-4729-b1d4-af970d635a2e",
        "cursor": {
          "ref": "b71c4493-e1d8-4e59-b7e0-e96389d2e54f",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "25b228db-d402-4b91-b42d-11e7acd81450"
        },
        "item": {
          "id": "b8e09ac1-85d7-4729-b1d4-af970d635a2e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f20d8a2a-6889-4811-9321-4b66dec4e79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00112264-d079-46e2-a573-e42fd49d76f1",
        "cursor": {
          "ref": "2659b5cb-d390-40e4-928d-3f5984951180",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "55cd237e-878b-4d02-aec2-85578761693c"
        },
        "item": {
          "id": "00112264-d079-46e2-a573-e42fd49d76f1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "af168974-b90a-4940-abcc-7a9b1934497c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed08af08-ded1-4315-8ea5-157fb441bdc1",
        "cursor": {
          "ref": "4b352946-3f48-4da7-a051-08e2e115c53f",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "267b8ee3-fafb-45bd-a68b-375505fb67bd"
        },
        "item": {
          "id": "ed08af08-ded1-4315-8ea5-157fb441bdc1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "41279db8-5bf1-49a7-bf13-89bef44befcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a3c9db-1622-492f-a0a5-5c8d9bc2877b",
        "cursor": {
          "ref": "42c652ab-c7e8-4124-8c54-03d2d6bb8e9b",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "80ac6cf2-77e3-4eec-95a2-10a85c42f6d4"
        },
        "item": {
          "id": "14a3c9db-1622-492f-a0a5-5c8d9bc2877b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "12f54156-4312-4725-b4f1-4e3327bdc0b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770797d5-b8e5-4ed6-9c87-f3021ba6faf1",
        "cursor": {
          "ref": "1ed6725f-c8f7-4c9a-9be7-d375edad1501",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6f4a41e5-af97-45fa-8df4-6e9f6be8bc14"
        },
        "item": {
          "id": "770797d5-b8e5-4ed6-9c87-f3021ba6faf1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ecb6390f-2cdd-41af-957b-8d4eb66ec129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7e6f1f-1f29-44ee-8876-61ac72b5fac2",
        "cursor": {
          "ref": "153a3020-4fcc-43ff-a4be-cb5716f93805",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c11957ef-de04-4176-baa9-1e289dfa136b"
        },
        "item": {
          "id": "ac7e6f1f-1f29-44ee-8876-61ac72b5fac2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "06d6102a-7f6d-421d-bc8a-2943feb24071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b39cba-07a7-4a18-ada5-a2b7207dae60",
        "cursor": {
          "ref": "1d73664a-d18a-4e2a-b117-83cb853fe2cd",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "152478d6-678d-4c44-be67-a5ba39f0a7da"
        },
        "item": {
          "id": "24b39cba-07a7-4a18-ada5-a2b7207dae60",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "22e9b64b-d793-435c-b064-73073a87d927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167bce3a-1d5b-4e80-ad90-4f4d69d5889d",
        "cursor": {
          "ref": "16224f99-1060-463e-b4e4-67df74b407ab",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2058febe-7990-4c58-92cd-7b54df6208de"
        },
        "item": {
          "id": "167bce3a-1d5b-4e80-ad90-4f4d69d5889d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9c7643c8-5959-4b34-bc1e-7b349a5022f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa38a83-043c-406d-9a1f-b93cd38234ea",
        "cursor": {
          "ref": "1facabe2-0c4e-48b6-8135-65938ec9494a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1c41b267-9632-425a-bd9f-bb3444dce3fc"
        },
        "item": {
          "id": "0aa38a83-043c-406d-9a1f-b93cd38234ea",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "552dd6d1-1079-4b7a-a47e-c758978614f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c38370-8975-4743-9ff3-8d9ce5cad760",
        "cursor": {
          "ref": "d35598e0-e636-4427-b002-42bbb1a28784",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ab7a84a1-6358-4f68-9962-632931d0a162"
        },
        "item": {
          "id": "e0c38370-8975-4743-9ff3-8d9ce5cad760",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "00269017-faf8-4143-86ce-f6b6a927faa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6cb242-bd79-48f1-8c3b-94e1c20993fa",
        "cursor": {
          "ref": "2b057989-4b25-4766-89fc-170402dce2e0",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c347f2a7-7b0e-422e-8c25-4ae3804d2793"
        },
        "item": {
          "id": "ab6cb242-bd79-48f1-8c3b-94e1c20993fa",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ad257064-d491-43f8-8977-65c057aa6754",
          "status": "Created",
          "code": 201,
          "responseTime": 1603,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aef6a35-5975-4a31-8e68-d3cae7438583",
        "cursor": {
          "ref": "a3987864-4883-4fee-8fd8-45b7c0a8b7f0",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6e557c07-23ac-4b1f-aeaa-3399939d7392"
        },
        "item": {
          "id": "4aef6a35-5975-4a31-8e68-d3cae7438583",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6d1ce56e-aa5d-41eb-9822-6c53dfe971e9",
          "status": "Created",
          "code": 201,
          "responseTime": 990,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2e8a54-6d60-4c62-a3bb-93b1f2f10f08",
        "cursor": {
          "ref": "eb4878c4-45d2-4d53-9165-df3cb274676a",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1a5ba8ec-3317-4871-9ccb-a856521f6a45"
        },
        "item": {
          "id": "5b2e8a54-6d60-4c62-a3bb-93b1f2f10f08",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e488128c-d142-4de4-90d5-b08021829219",
          "status": "Created",
          "code": 201,
          "responseTime": 999,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e24f82-d5dd-4c49-8b17-9198ab4ec6db",
        "cursor": {
          "ref": "b04ca289-0ea6-411b-8d2f-1db9ca2d6ae2",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2e2c96d8-451b-4b1c-a51a-f5c399363f22"
        },
        "item": {
          "id": "a2e24f82-d5dd-4c49-8b17-9198ab4ec6db",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f75dcb25-1793-4aa6-beb1-f9f57f7b0b81",
          "status": "Created",
          "code": 201,
          "responseTime": 1020,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b434ac41-5400-4b44-9b53-9cd4591eb69e",
        "cursor": {
          "ref": "c39ef0bc-be1e-4198-94f7-fb62567a498f",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5d4934cc-464c-4b66-8420-37961697e3d9"
        },
        "item": {
          "id": "b434ac41-5400-4b44-9b53-9cd4591eb69e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "792c8e90-bbad-4c3c-a5ca-c6bef4815fe8",
          "status": "Created",
          "code": 201,
          "responseTime": 1004,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1eceac6-9bf1-4aad-8b61-05f97831e51d",
        "cursor": {
          "ref": "f69ac949-6517-4798-823e-235f3daa4652",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "325f258d-702a-4f8b-ad23-62092c030124"
        },
        "item": {
          "id": "c1eceac6-9bf1-4aad-8b61-05f97831e51d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1639e494-c908-4b4c-af1b-36f7f3386fd1",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5afd42-1a0e-4273-ba80-994975b78f3b",
        "cursor": {
          "ref": "f4a93809-d9ff-4da7-b20e-07519ad20c2a",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6de6bfd5-2c85-4f66-aea5-d7428acbb353"
        },
        "item": {
          "id": "1a5afd42-1a0e-4273-ba80-994975b78f3b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "30eca336-363e-45c2-bd85-3d881192fb02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b788d92c-2b68-4f91-9a87-208f2bab35c1",
        "cursor": {
          "ref": "227e29fc-9710-409a-b01f-52112d2fffa6",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7347e607-b438-4c2c-96c6-437a368c4ca5"
        },
        "item": {
          "id": "b788d92c-2b68-4f91-9a87-208f2bab35c1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e4d715c8-62a0-4f97-bf55-6ec0469ff0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecebb30e-1599-41e3-b356-32903d8b392a",
        "cursor": {
          "ref": "32b12eb8-c991-4a51-ace9-fc9697dc7c62",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d071d015-08db-48ef-ab66-942074fd2ee1"
        },
        "item": {
          "id": "ecebb30e-1599-41e3-b356-32903d8b392a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8737a47a-7dcd-4e7f-93a1-9f67f59e0393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad58cbf-28d7-49c6-b3d1-024f0865aecd",
        "cursor": {
          "ref": "88d4507c-fa5e-4fab-bc8c-c1388c2791bf",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e09c304a-d370-47ae-a98f-7bae935b9432"
        },
        "item": {
          "id": "cad58cbf-28d7-49c6-b3d1-024f0865aecd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3fec63e1-f80a-480c-8198-d40954ca980f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721ac740-9857-4c2b-8ea0-dd596228bbc1",
        "cursor": {
          "ref": "a897e733-f2ef-48bc-841c-75b0df334b7a",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "138e2444-308e-4a4f-b899-0604128f9cf1"
        },
        "item": {
          "id": "721ac740-9857-4c2b-8ea0-dd596228bbc1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4ac52d9e-2727-4b21-8fe6-7c8621b3027d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881a45ed-e158-4309-b32b-a69eed0f3437",
        "cursor": {
          "ref": "11c6f6b2-5da5-4c26-a56f-60a373b6114d",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6cb61840-9c08-4bc8-97f9-b1ce9ab82f27"
        },
        "item": {
          "id": "881a45ed-e158-4309-b32b-a69eed0f3437",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d4e586ec-ab17-4a83-b2d8-bacdd9442163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eeef73d-312a-48ca-8614-a2ac59d69888",
        "cursor": {
          "ref": "cf041490-8aee-4f87-95f2-32d01861cfff",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "090c0f11-1b37-46d4-8a8f-62160645e8ec"
        },
        "item": {
          "id": "3eeef73d-312a-48ca-8614-a2ac59d69888",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "797007b4-6a66-42a1-bc29-a4f1808d5b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76866dfb-11f1-4ffd-82bf-18853d21025f",
        "cursor": {
          "ref": "8758cca2-2237-4162-8357-0bed1ef28a8b",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d55266de-bf8f-4b37-93ba-a448fd431ee1"
        },
        "item": {
          "id": "76866dfb-11f1-4ffd-82bf-18853d21025f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "41d4ab0e-4771-406e-8aa4-9d95e9656579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c536e12-1bc5-40ce-80a1-2aaa37db749d",
        "cursor": {
          "ref": "92d4b9ff-dbc5-4bd2-b905-98e8a765c19f",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "501688d4-9947-4fe3-8e84-c70b5ecb6708"
        },
        "item": {
          "id": "9c536e12-1bc5-40ce-80a1-2aaa37db749d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "df7d49e8-95d2-4280-a6ef-50b751c569d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa434387-8e30-4279-bd21-fc056a7aaeda",
        "cursor": {
          "ref": "a09250ef-1ecc-4fc5-8e48-5365ee99af02",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ed772761-72e6-4ed7-ba92-7d4a6c04ec5f"
        },
        "item": {
          "id": "fa434387-8e30-4279-bd21-fc056a7aaeda",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "38a918d1-f1a6-421e-ae0b-5e1296ef15a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e6fc74-1c63-4039-bf94-04ca5119629b",
        "cursor": {
          "ref": "ae11c120-541a-4b9c-a050-3c861571791a",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b6f8cc6c-483f-470e-a851-96372257f78d"
        },
        "item": {
          "id": "20e6fc74-1c63-4039-bf94-04ca5119629b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "54d494c8-7c4b-4b71-9fb5-e8cf7a3f96e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0532d6f5-7ca2-4a03-a017-4d4afadd49cd",
        "cursor": {
          "ref": "3378f811-bf8f-4c5b-9444-678a65475a87",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "035fe7c9-ca3b-4431-9d0a-f442229f7aa2"
        },
        "item": {
          "id": "0532d6f5-7ca2-4a03-a017-4d4afadd49cd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "748645bf-90f5-4e71-9765-2533f0acdc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68921fa2-d85d-4f82-ba9a-0f90d77f365c",
        "cursor": {
          "ref": "ae5864c0-59a8-4621-8a1a-113c780decf9",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "573c0561-2a97-42c3-83da-116db7cca24d"
        },
        "item": {
          "id": "68921fa2-d85d-4f82-ba9a-0f90d77f365c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6b54c16c-7661-41ad-90fb-fd25a2e5f74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d52955a-cb0a-40df-811b-b5fd23fcb3b3",
        "cursor": {
          "ref": "24c38359-a0dd-4446-9c56-d3f77232f873",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "97000832-b7e7-46d6-85cd-5db1b4567de9"
        },
        "item": {
          "id": "2d52955a-cb0a-40df-811b-b5fd23fcb3b3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0749d3ed-f9a5-40dc-bc86-8b421e865b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf1161f-c3d9-4be7-9913-cd6ab324e188",
        "cursor": {
          "ref": "e7ac8264-1e9f-4ce6-83e0-c43e5cff5c43",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9c1644df-681f-4786-bf5f-dc0edad1e5c0"
        },
        "item": {
          "id": "4cf1161f-c3d9-4be7-9913-cd6ab324e188",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3ce63d1b-4e66-46f9-89e1-5be419a69a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf40905-6099-4d00-9ac9-747cb955eb6c",
        "cursor": {
          "ref": "af6b1df4-9586-413f-897c-436dfddbf853",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ea1380b6-740d-4db3-a19a-d1e158d81a50"
        },
        "item": {
          "id": "bcf40905-6099-4d00-9ac9-747cb955eb6c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "01f0470a-1200-431a-b427-c127913798da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1dff1f-a35d-408c-a4af-a00dfa545d82",
        "cursor": {
          "ref": "b1633052-0a56-439c-b086-5ad3988f2205",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d3ba4920-210d-4524-98ab-2631d89f0aaf"
        },
        "item": {
          "id": "cb1dff1f-a35d-408c-a4af-a00dfa545d82",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6a691eaa-d572-410b-a979-ea0f5719468c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bb37cb-7fac-4af2-a756-b2041d3577d9",
        "cursor": {
          "ref": "d86ae069-321d-446e-97e3-5f7a79a4eda9",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3326b843-640b-47d1-ad80-e0450603e419"
        },
        "item": {
          "id": "e8bb37cb-7fac-4af2-a756-b2041d3577d9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d6a3bd08-72db-429c-b239-e1c47ad61691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1985e29-6cf0-4c7f-b6c3-8ccb70213048",
        "cursor": {
          "ref": "80558ecc-bd6e-4acf-871b-906f417b02b4",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "77c9fe9c-616c-40ff-8e47-e81675fea601"
        },
        "item": {
          "id": "e1985e29-6cf0-4c7f-b6c3-8ccb70213048",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "751e1150-356f-46b8-a591-b6906195ec0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd2a8f4-17b4-4f9a-ad75-4ab7c96e187e",
        "cursor": {
          "ref": "b1fe026d-a6f6-49fa-8996-d51c5dcbc259",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "61d1c6de-ddac-4973-85d8-19d3622b2767"
        },
        "item": {
          "id": "3dd2a8f4-17b4-4f9a-ad75-4ab7c96e187e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "285a449b-9d73-4c1e-b556-d0f3b8cb22db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f20206-8161-4c50-ae3e-18d2921bcff4",
        "cursor": {
          "ref": "3a3c88ac-3611-4c2c-8eb4-d2559c9d3223",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "46c86a4e-ba4d-4827-9ed6-56140de9fd36"
        },
        "item": {
          "id": "80f20206-8161-4c50-ae3e-18d2921bcff4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6fd67b4a-2f13-4bb2-b52d-70fff624c81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bbc2e3-0692-47d8-9326-cc67917afdde",
        "cursor": {
          "ref": "47b90b34-d4c1-463f-a8d2-398e1afb9e24",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d03dbb74-f71e-4339-bd82-21420d884468"
        },
        "item": {
          "id": "80bbc2e3-0692-47d8-9326-cc67917afdde",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0ea37b0d-29fb-4a17-a2dc-227084d9a139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93834219-7a64-46a5-9e67-e29402a39a6d",
        "cursor": {
          "ref": "9bc3ac5d-b9fa-4bb9-9f7c-1d2044e5edb1",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d4b51910-40bc-4642-90bb-2f0cf89d582c"
        },
        "item": {
          "id": "93834219-7a64-46a5-9e67-e29402a39a6d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "431e7298-cd78-475f-b52e-beee9180eb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880d2047-865d-4022-a828-6a4ac3c357c1",
        "cursor": {
          "ref": "63f74149-73fb-4f37-962b-f81cb0e8a347",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f4157b93-606f-4ae5-8063-a86e5ff1ffdd"
        },
        "item": {
          "id": "880d2047-865d-4022-a828-6a4ac3c357c1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ab7d5af0-610c-4b4a-a63c-08ce456d70c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e33b4f-0989-4583-9dcd-c4d8c9bc2b90",
        "cursor": {
          "ref": "82d0542b-b628-4936-b2b1-15f54c637bde",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8ac5af8b-1317-40e8-b529-0e69362872ec"
        },
        "item": {
          "id": "c6e33b4f-0989-4583-9dcd-c4d8c9bc2b90",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5d14b351-bb99-4d2b-ba8e-9d4f5f93562b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57133521-3175-436f-abd1-0c0cb01fbee9",
        "cursor": {
          "ref": "57141917-844f-4373-a058-f1efb58106d9",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "18692274-8b8e-46ca-92ac-db9ef9fdcd24"
        },
        "item": {
          "id": "57133521-3175-436f-abd1-0c0cb01fbee9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ec4e965a-b9d1-4f24-bf11-7801340fe83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77be2dc3-1729-418a-a274-a21764828167",
        "cursor": {
          "ref": "420854d2-c908-4cc4-8e0c-93222f05eb34",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f1abd368-583f-497e-b3db-7c067301e41f"
        },
        "item": {
          "id": "77be2dc3-1729-418a-a274-a21764828167",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "59e5953e-250e-426c-b284-cf854516839a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3c8e39-bcd9-467a-ad15-6069e4b56239",
        "cursor": {
          "ref": "732aacdd-cf21-48ca-9b2a-8490b3f319ee",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0d345be1-e7ac-40ab-9801-80132c475d17"
        },
        "item": {
          "id": "dc3c8e39-bcd9-467a-ad15-6069e4b56239",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4ec808d1-3bdb-49e5-a3ab-0c19a9da8fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cde2e4f-6bca-45b0-a380-a308dc7b574f",
        "cursor": {
          "ref": "7e62fcf9-09ee-4ec6-a065-e87d10a2bd3f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a71ec29a-3ade-4b5e-b52a-a5905394d7e1"
        },
        "item": {
          "id": "9cde2e4f-6bca-45b0-a380-a308dc7b574f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "de7d8b83-f1bb-419f-a61a-b168b57547ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed20afbb-b67a-45da-8376-b5d6c91500d3",
        "cursor": {
          "ref": "7b6944a5-b2cb-4875-9fdd-0299beb82257",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "acb81c1e-cac0-468e-b145-b6e5640ada9a"
        },
        "item": {
          "id": "ed20afbb-b67a-45da-8376-b5d6c91500d3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "325f72ad-61c9-422c-b89f-c3cc47e7305e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe138734-72d8-4166-8f1a-e36d35a36175",
        "cursor": {
          "ref": "40f30eab-b2c3-48cb-aaa1-485667fcaeb4",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7831b40f-7de4-4563-8f05-ba2b09874cd4"
        },
        "item": {
          "id": "fe138734-72d8-4166-8f1a-e36d35a36175",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "476c614f-c3b0-4cdf-8711-faf7dc8478ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27dd3f68-ee95-4d00-b082-7ca2910543a3",
        "cursor": {
          "ref": "979d020b-38f6-4b30-ae2c-d28a81416471",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4eb44518-3f28-430a-9254-a0c8cb9d8649"
        },
        "item": {
          "id": "27dd3f68-ee95-4d00-b082-7ca2910543a3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0b717df2-b38c-4aa5-be07-3d24f2ad77ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4141daa8-0bd2-46a8-9889-f37f1089d729",
        "cursor": {
          "ref": "8fbbf856-f08a-4867-99d3-e9371583069e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c616a308-90cd-4be3-a815-094a9b581e8d"
        },
        "item": {
          "id": "4141daa8-0bd2-46a8-9889-f37f1089d729",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b773bd96-6ba5-4e96-87c7-3575bed1cf2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6009ea8a-db49-4c78-9abc-65127385f62d",
        "cursor": {
          "ref": "6f44f529-e957-4b58-8ba3-dd2f6f46c79d",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "522d8730-d8d4-4456-9571-fe43cbe12935"
        },
        "item": {
          "id": "6009ea8a-db49-4c78-9abc-65127385f62d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "98fed3f6-dda3-4420-af7c-01531e42b6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182a6478-dda5-4618-b82d-99c14ac1804d",
        "cursor": {
          "ref": "f006c5fd-4d8b-4866-879c-5aba6b1b3a91",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "81807ce2-033e-46fd-a1ce-7820f6ddfea7"
        },
        "item": {
          "id": "182a6478-dda5-4618-b82d-99c14ac1804d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "149e0f04-1aaa-4274-807f-112bd1962a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1248637-5954-44d9-8878-bd61436735ab",
        "cursor": {
          "ref": "652c4357-fb35-4a43-b199-aebdfe5b7ebc",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "562a1aef-8bde-45fd-b182-e6fbda572430"
        },
        "item": {
          "id": "c1248637-5954-44d9-8878-bd61436735ab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0a171fd0-b087-4463-a59b-c208daa00b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942b0a56-e304-4db0-9c49-a1dbb6a5e8db",
        "cursor": {
          "ref": "2ac2d4ca-7bc7-4733-8e47-a56a3a54df93",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9d463269-4ecd-4f33-89ab-40ef0c4c7966"
        },
        "item": {
          "id": "942b0a56-e304-4db0-9c49-a1dbb6a5e8db",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8daf9725-052f-418e-b32c-237cb36af9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7a80f8-0f5d-456b-a637-d3211300b2ea",
        "cursor": {
          "ref": "bdceac0d-0f4e-40aa-a578-03770c494bf3",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "52046146-d80a-4358-9f9f-db0f06377d2b"
        },
        "item": {
          "id": "bd7a80f8-0f5d-456b-a637-d3211300b2ea",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d3dec4c8-e9cc-46d0-b36c-71740df3752d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b6b4e2-49f4-44fb-bda0-6ca2f3f8a553",
        "cursor": {
          "ref": "5ae13a74-d19a-42b3-8f50-6ba07071a24c",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f50545ad-f478-4860-901a-888deab32d1e"
        },
        "item": {
          "id": "d3b6b4e2-49f4-44fb-bda0-6ca2f3f8a553",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d06f7816-1ee8-4380-a553-90a38583dca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5222cfb-eb58-4210-bf7c-123de4f0371b",
        "cursor": {
          "ref": "78295cdf-3e05-4f3d-87fe-4572378a59f1",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0327f2ef-c86b-4f5e-9179-c5e7290b070f"
        },
        "item": {
          "id": "f5222cfb-eb58-4210-bf7c-123de4f0371b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cd9031f1-3805-44a0-85f7-199bfc3b8821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074542c3-0188-4c59-a9df-7dc9f2cdfde1",
        "cursor": {
          "ref": "207b710d-2be6-4422-962f-4f279b2feff4",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c5d44b30-93c9-4a3d-a03d-eca586b85dbd"
        },
        "item": {
          "id": "074542c3-0188-4c59-a9df-7dc9f2cdfde1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "77240b93-9f11-4d55-bada-fa5beb6180b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b914389e-b376-4c3c-ad0a-9a73a3b92911",
        "cursor": {
          "ref": "e10c9a31-93ca-45de-b253-44d2fd490033",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ec9bc1e4-f70d-4bf4-a66f-6bbfc436db12"
        },
        "item": {
          "id": "b914389e-b376-4c3c-ad0a-9a73a3b92911",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "09a0bfff-c597-499e-ba77-f6699755b881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42467d62-71ec-417b-be0f-77933c08c779",
        "cursor": {
          "ref": "226461ba-da7a-424e-96e5-7af105bb4bdd",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6461716c-d683-481f-af96-b6e07104c672"
        },
        "item": {
          "id": "42467d62-71ec-417b-be0f-77933c08c779",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3efb34ff-6db5-4e0c-b9cf-38351159dc40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe51996-a086-4eb3-ad17-9ba980a05063",
        "cursor": {
          "ref": "e1e4f481-3d8a-4600-8f31-985280964776",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "25365f10-73a6-4ad8-b620-a0fe59696340"
        },
        "item": {
          "id": "3fe51996-a086-4eb3-ad17-9ba980a05063",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "99381098-a140-419e-b7cc-6504a37c7f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f5ae73-ea23-4ff2-9f1c-a741074681fd",
        "cursor": {
          "ref": "350f8a94-a63f-4e25-a4b9-9dd7085cc790",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "192f4627-dd17-4e82-8beb-2914656fd8a8"
        },
        "item": {
          "id": "a5f5ae73-ea23-4ff2-9f1c-a741074681fd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e13a84bc-0714-4e42-a725-ba229f52f3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd870521-506b-4802-ad80-a9320a9b771d",
        "cursor": {
          "ref": "94527e06-781d-4abe-a7e1-0cc50743e833",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9d0eeb31-9740-48da-83b1-234cf3f6fd0c"
        },
        "item": {
          "id": "bd870521-506b-4802-ad80-a9320a9b771d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ee747993-34bf-4d76-ba26-13ff7a1aa86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6271c0f-d99b-40a1-9a5d-e5b13c2cc4de",
        "cursor": {
          "ref": "1c4dac57-7769-4d36-b84d-d023529407a8",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "118de795-67ed-4c88-b826-1a1456f5090f"
        },
        "item": {
          "id": "e6271c0f-d99b-40a1-9a5d-e5b13c2cc4de",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4772bb61-34b6-4312-a87f-44f577f7ff1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7686b5d8-2330-4142-8039-a3eb83683643",
        "cursor": {
          "ref": "95617174-a9de-44a8-8ce0-71f0a4ceac41",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8284aedd-de73-415e-94e0-7143df0fda94"
        },
        "item": {
          "id": "7686b5d8-2330-4142-8039-a3eb83683643",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "93bdc829-7717-4c7a-85bd-b3fbf01830c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaed8104-4d7b-44b4-bbdb-b3a85d3e85e1",
        "cursor": {
          "ref": "3739b7f2-57cc-42f5-b910-eb96f47b1337",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4b6915f0-dddd-45fe-afa7-140ed233598a"
        },
        "item": {
          "id": "eaed8104-4d7b-44b4-bbdb-b3a85d3e85e1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0df81870-0228-4139-970e-4cde6c51babc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f46b26-944c-460f-b862-a5edf54e59e2",
        "cursor": {
          "ref": "abc456cc-7153-4eec-8f5f-0dbf4650983e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a3cb5fdf-2303-4416-ac2a-7ae8a565d782"
        },
        "item": {
          "id": "d2f46b26-944c-460f-b862-a5edf54e59e2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "916a85ee-e04f-48a5-83bc-bb8b3986b4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0302d65-a217-4023-9ff9-325f49bb380d",
        "cursor": {
          "ref": "4f948756-de3c-457e-ba0c-a320d5d8642f",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fd86fb7b-1c92-4950-8dcd-6fd789a01ae2"
        },
        "item": {
          "id": "b0302d65-a217-4023-9ff9-325f49bb380d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5724452e-7d6e-4499-978e-a9c4d7292ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73291b7-77ce-4c26-b278-cbaeffa36905",
        "cursor": {
          "ref": "94078162-f997-4b8f-91b3-c30dba9a4455",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "da2c4ce7-e375-47e2-ade7-876fac59788b"
        },
        "item": {
          "id": "d73291b7-77ce-4c26-b278-cbaeffa36905",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4ebf1745-a608-4fda-a0f8-39f40d6641cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa8d402-5606-4645-8308-4057ba737860",
        "cursor": {
          "ref": "d1d9452a-747a-471e-9dae-0e79b83fca1b",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "17a6f937-79c2-4613-98f7-1ea498200ce8"
        },
        "item": {
          "id": "6fa8d402-5606-4645-8308-4057ba737860",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "af538478-fc84-4914-bf2b-ccd49dac4706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb0ac79-dbaa-494a-9b0a-ef18a9c02bee",
        "cursor": {
          "ref": "6c677d7e-8b2c-4a7c-8b1a-2927aab5464c",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a1f6aab6-5b05-419e-aebe-dfd16dd9b051"
        },
        "item": {
          "id": "ccb0ac79-dbaa-494a-9b0a-ef18a9c02bee",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fd3eda75-eb4c-4c44-9dfd-66388d88dc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b61894-fe00-409c-a01b-7f96d079d03c",
        "cursor": {
          "ref": "154e1c6c-6d91-4ac3-bd1a-ed6e65cefa72",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ed7ff9fc-b7e7-420e-a4a6-cdac87eab8d9"
        },
        "item": {
          "id": "e6b61894-fe00-409c-a01b-7f96d079d03c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "71234cd2-e3b1-4bf8-a505-5d1e0d0ce1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a438f4d-4590-4f45-ad50-53ae2e09cf26",
        "cursor": {
          "ref": "cdd762a4-e13d-4d59-b411-fc530197f288",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7b315ce6-2abe-4a4c-aa87-156c443c1bf1"
        },
        "item": {
          "id": "6a438f4d-4590-4f45-ad50-53ae2e09cf26",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2ef44862-c6b1-483b-a61b-e77608aa51f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcccfaa-2682-4897-b86b-bb0f0b4f70bd",
        "cursor": {
          "ref": "fd70d902-700b-4390-be7d-1840f76f6cd0",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1c63da0b-d297-4ec8-87e6-29ed4cde4337"
        },
        "item": {
          "id": "4fcccfaa-2682-4897-b86b-bb0f0b4f70bd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5fb37072-05f8-475c-8a1b-6fc0bd741321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa31096a-af52-454f-bbdb-4a796461ca3d",
        "cursor": {
          "ref": "483ce230-1903-45a6-9a44-397cb750d301",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8b5a7970-145b-46e9-8844-5f4a12cfb9b4"
        },
        "item": {
          "id": "aa31096a-af52-454f-bbdb-4a796461ca3d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2549ffa6-2bc1-4bc5-9f7b-8260e123dcc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe313eff-65f9-4da5-bff6-58c4bc24be85",
        "cursor": {
          "ref": "c8ef965d-d891-4035-8794-ec53aea7886d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4e52e167-2ac5-45fd-9892-829be04211ff"
        },
        "item": {
          "id": "fe313eff-65f9-4da5-bff6-58c4bc24be85",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2c85b810-0ea7-4aed-b92e-863e78458552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a95688-7f78-46f5-a14f-c5be8f6f7afb",
        "cursor": {
          "ref": "560b7382-4417-4a0f-90bc-067d30859b15",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dea585df-e093-45d4-ae95-17a9b1c29b37"
        },
        "item": {
          "id": "73a95688-7f78-46f5-a14f-c5be8f6f7afb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6d227f97-1c52-4e22-a5f4-e878be2f36ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39724422-292c-4127-a648-0103afbebb7d",
        "cursor": {
          "ref": "b66e117d-7688-4df7-9bcc-667d1f821ae5",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3258f0e8-f6fa-4b7b-8c65-8dcc82fc3738"
        },
        "item": {
          "id": "39724422-292c-4127-a648-0103afbebb7d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01553450-71ab-4181-8bc1-716fe9dfb08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d192b39-36d0-4798-ae55-7605775078d6",
        "cursor": {
          "ref": "5e2993c8-f61f-4736-8138-45cacc7443a6",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "61324661-c150-4adb-accc-4f0e34bc714b"
        },
        "item": {
          "id": "7d192b39-36d0-4798-ae55-7605775078d6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f32f62e6-6621-4675-a535-c1622b0688a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15b63cd-3ac1-464b-9670-de349633d68d",
        "cursor": {
          "ref": "6f7b4a75-ef36-42eb-acdd-d3493fa504ee",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "39e71792-11e8-4683-ba10-94170a27be31"
        },
        "item": {
          "id": "f15b63cd-3ac1-464b-9670-de349633d68d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "174a7950-f1f5-4f7e-996f-24af6520991e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cffaf1-129b-4acb-9cd8-e135bcdff333",
        "cursor": {
          "ref": "94656f13-f9ac-423c-82bb-76b29b63f8b4",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "342dc91e-d565-4952-a004-faed46e26584"
        },
        "item": {
          "id": "81cffaf1-129b-4acb-9cd8-e135bcdff333",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "56848891-0ef4-44c7-a9c6-55ca73a26595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5098bc-feff-4512-ad6e-e4e8f3852385",
        "cursor": {
          "ref": "9253d4b7-baf1-4573-a217-285a2c51deaa",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5c8eb55a-1a40-4deb-8ea9-aa7a4b81036a"
        },
        "item": {
          "id": "1e5098bc-feff-4512-ad6e-e4e8f3852385",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5836d5f5-9812-4652-bd7a-8c42d78c7cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9300a5a-5b8b-446e-9009-f491e1f97e8b",
        "cursor": {
          "ref": "5b00e4f6-8c5e-42f2-95e1-04f72b35fcd0",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a817ba3b-4608-4366-bb8f-f81b94ab0c08"
        },
        "item": {
          "id": "d9300a5a-5b8b-446e-9009-f491e1f97e8b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f30f1be0-6ddb-45cf-bfc7-48e6ac09fa34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94091c7a-6728-4134-8d49-79c1590b8fe2",
        "cursor": {
          "ref": "c96420ec-6e89-4224-9b5d-8e03b75b4ab5",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "feb01a48-867b-41bf-90e5-6955f305398c"
        },
        "item": {
          "id": "94091c7a-6728-4134-8d49-79c1590b8fe2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "10275109-6f16-4b1e-a2f2-710da57bd88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293080f4-8bf4-4782-8864-6d7a0903b245",
        "cursor": {
          "ref": "fa244d45-b6c9-4e64-8a9f-bf5ebbd24168",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "18be7b33-6a88-41c7-94e3-cf60af0dc484"
        },
        "item": {
          "id": "293080f4-8bf4-4782-8864-6d7a0903b245",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0d014be8-63c1-4d3b-9452-94fd6b04f254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41158d79-9a86-4ef8-a4de-dafaaeec96e4",
        "cursor": {
          "ref": "4866ca3c-ae20-41e2-9218-404efd9d0a1b",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a733af7f-3cf2-49ee-bf20-b746c2f82243"
        },
        "item": {
          "id": "41158d79-9a86-4ef8-a4de-dafaaeec96e4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b66ac8a7-e9a6-4a04-ae9a-05e60a0b1eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca8b072-7b45-41e6-bd4a-a0f0ef97ef4c",
        "cursor": {
          "ref": "324de8c8-a9c0-42df-b09c-ddd7a612bf67",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f925db20-4776-4a20-aa58-b57a1c8949b8"
        },
        "item": {
          "id": "1ca8b072-7b45-41e6-bd4a-a0f0ef97ef4c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "12be142b-35a7-4ad8-b7a9-b55310804c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9f1d3e-3fb5-46aa-8613-3925156c5d24",
        "cursor": {
          "ref": "a957ff25-04b1-42e6-a1d1-c3d114b06946",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "81f34836-80a2-424a-b5d3-a97ba753e4de"
        },
        "item": {
          "id": "dd9f1d3e-3fb5-46aa-8613-3925156c5d24",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8d7a4ffa-3ced-4559-b1ff-6cb4a634c64b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237c8894-5f7f-46ab-8b71-98d3a1b89cf3",
        "cursor": {
          "ref": "96148c20-130e-4aec-b840-321dc7d83bc7",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f12c278a-329a-4b9a-b5b2-e91ecc411add"
        },
        "item": {
          "id": "237c8894-5f7f-46ab-8b71-98d3a1b89cf3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b92d6cae-c679-4e93-bdea-5e8810f1a46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6920f8f0-b65a-4e86-890b-b67cbaad5c84",
        "cursor": {
          "ref": "13ab3472-1a72-484d-ab32-8d1321f63bc1",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d3c64b23-b954-439c-91ae-e87fddf70652"
        },
        "item": {
          "id": "6920f8f0-b65a-4e86-890b-b67cbaad5c84",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9735f188-b988-4642-ab2a-2d53a642ae0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca089775-6eec-494b-9857-b80b010063f4",
        "cursor": {
          "ref": "c1d09ddb-7d4b-4501-a615-85b996853734",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "eca95705-a35a-4357-a055-e5190685e9c2"
        },
        "item": {
          "id": "ca089775-6eec-494b-9857-b80b010063f4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "626329c2-1c94-48aa-ab1f-3c5816726b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a07940b-fda0-4db3-88a5-f9a98e0d090f",
        "cursor": {
          "ref": "af11a8a8-269e-488e-af72-ca2bbd132883",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c4181d9e-2d37-4dec-a596-e4f5ce5397bd"
        },
        "item": {
          "id": "1a07940b-fda0-4db3-88a5-f9a98e0d090f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c5610b5c-1c0d-42a2-9d92-fa0891974246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec96b31-c2e1-43ed-b8cb-367a8e2c736e",
        "cursor": {
          "ref": "959980e0-aef5-4a3d-9b72-1125b2028bf5",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "48540903-03ed-4387-844c-2bc5bbdb14b5"
        },
        "item": {
          "id": "aec96b31-c2e1-43ed-b8cb-367a8e2c736e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d03bf101-9f59-4329-874d-f6e7e92143bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711b17a6-1621-4df5-8ee0-76348a5c623a",
        "cursor": {
          "ref": "323d741a-079c-48a8-b516-58e0b5908496",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8403986b-772b-4d4b-ada4-e01b2a80820a"
        },
        "item": {
          "id": "711b17a6-1621-4df5-8ee0-76348a5c623a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c2c11fad-9b95-43d4-a5db-344271ef0f00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "5e6e05b9-416a-4afd-9752-02aba8ccefe9",
        "cursor": {
          "ref": "b7cb39f3-74be-41d1-a111-79bd433a1018",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c5c9d949-980e-4050-b24a-a7560b4386ae"
        },
        "item": {
          "id": "5e6e05b9-416a-4afd-9752-02aba8ccefe9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e1f7ce7f-8a12-491e-8b6a-7ef0d37935f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70405274-1c3d-40e3-837a-d4646668de74",
        "cursor": {
          "ref": "afbb1739-6833-48d2-930a-0dcde5002adb",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "27ae09f5-fe02-4d98-882f-c25c6f8954e3"
        },
        "item": {
          "id": "70405274-1c3d-40e3-837a-d4646668de74",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4aa27419-0254-4bf1-8e38-c2cacd4ed222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592a7d42-1a51-428c-9dcd-24da29ea0698",
        "cursor": {
          "ref": "c659e248-66cb-4a3f-a215-e5b89ec38094",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3b14065f-c7a4-4c02-a300-89e95673a810"
        },
        "item": {
          "id": "592a7d42-1a51-428c-9dcd-24da29ea0698",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7e9e27d1-b5a6-478e-b37b-ffde3aef88b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255616d6-1a35-4c13-8b84-1a6614e7850f",
        "cursor": {
          "ref": "4f7ea0a8-c059-4564-aa07-431d8ebebe0a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "72aacbc4-5096-4f44-8306-56f4e6fc59d2"
        },
        "item": {
          "id": "255616d6-1a35-4c13-8b84-1a6614e7850f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a2fb4f8f-0a50-4975-9668-19e3f938a46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b698a185-0968-4b36-add3-2f090057edb4",
        "cursor": {
          "ref": "4367bc66-b31e-4aef-8685-e56da3712fa7",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aaec6743-b272-4572-9ead-eea032597234"
        },
        "item": {
          "id": "b698a185-0968-4b36-add3-2f090057edb4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3e260ba6-34b8-4fb1-a236-519fad9c4839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53de5c27-5c6a-4a86-ba32-d484e887b4c0",
        "cursor": {
          "ref": "7838bd31-c06f-42d3-88fe-e70e039ef8dc",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "acde7eea-7afe-440a-a745-9014eaf991a0"
        },
        "item": {
          "id": "53de5c27-5c6a-4a86-ba32-d484e887b4c0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fa1b257d-2d75-4bf7-a2be-90676df2581d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce1bf06-2a47-4302-8dd9-32c3351b751b",
        "cursor": {
          "ref": "8e746295-62a2-4519-b459-dabb446866f0",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a3b5a43b-8008-4309-830d-7a4e600824b0"
        },
        "item": {
          "id": "2ce1bf06-2a47-4302-8dd9-32c3351b751b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fcbc5308-ff25-4fcb-924d-141a14d05ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e527a2d6-adc8-4e12-9214-60f7e58508e0",
        "cursor": {
          "ref": "945e8170-dbe2-420c-80e3-3684148cc290",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b1cdd420-83b8-4fb3-83d4-ee01acd12a9b"
        },
        "item": {
          "id": "e527a2d6-adc8-4e12-9214-60f7e58508e0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cdfb6a76-825f-4d79-8d46-4aa9d9afd6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d889fa48-6656-4ee4-a439-87325331253c",
        "cursor": {
          "ref": "243b9161-c92a-4701-975d-7cd839d5106f",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8ca2055f-1c9c-4079-95d0-6b374bda465c"
        },
        "item": {
          "id": "d889fa48-6656-4ee4-a439-87325331253c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eb8dceae-c0d2-4d9c-9d2e-2cc57f70346f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e2bfa0-3976-4cc9-8c1c-2a1b51bc5879",
        "cursor": {
          "ref": "502b4a70-3eb1-4d14-89b3-2787d444f29b",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5c8cc441-d4b6-4336-bd88-d0fdd92c0f86"
        },
        "item": {
          "id": "e9e2bfa0-3976-4cc9-8c1c-2a1b51bc5879",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a89b9af7-accc-4d99-a6c6-5fcc9630bce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ce70ad-65b9-4ab2-8b21-c91af83698cb",
        "cursor": {
          "ref": "72a34efb-7453-4a60-972b-b0acf7166869",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ef7d7485-bd5b-478e-be85-dab8b7938a0f"
        },
        "item": {
          "id": "37ce70ad-65b9-4ab2-8b21-c91af83698cb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1fe6c136-d8ba-4c6b-b2e3-fcd5802590aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d763ddf-f780-4f43-96c0-5d91e9033301",
        "cursor": {
          "ref": "6110c9e0-88d6-4e93-aa27-5dfa94bf9848",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "82ae2140-ec54-424e-beb6-62006a80fd63"
        },
        "item": {
          "id": "9d763ddf-f780-4f43-96c0-5d91e9033301",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a0efc093-333d-461c-8797-9dc83385fe08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cc42f2-393e-42d5-a0d2-cf3830d0399e",
        "cursor": {
          "ref": "34c3c2b8-33ff-4a47-93c9-4b70cb5ad21f",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5e77ba86-3122-4f1d-afe7-6f981bb3dc6a"
        },
        "item": {
          "id": "b2cc42f2-393e-42d5-a0d2-cf3830d0399e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2d59435e-a73f-47da-96b7-c1eee28cf555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01507f80-900d-4321-86bd-50b35433f6c6",
        "cursor": {
          "ref": "affa4f04-0c78-4a85-9639-267e84a321de",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d09da4d8-da33-47a9-9f52-e39eddbec4cd"
        },
        "item": {
          "id": "01507f80-900d-4321-86bd-50b35433f6c6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "870bb6e8-efa9-464d-bdf9-5b5d09504a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83347bf0-0437-43c6-ae85-33de4918d333",
        "cursor": {
          "ref": "60f93f96-782b-437c-afdc-df902e267d7e",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ab8dac2e-a854-43a8-9a97-8c77c9e5a696"
        },
        "item": {
          "id": "83347bf0-0437-43c6-ae85-33de4918d333",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "de035458-8471-4146-9a14-4edcb7a30e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4b09bb-1263-419f-bb75-f45127b9d0bd",
        "cursor": {
          "ref": "b3248174-5986-40cb-bcd5-a6ceae825330",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "451aac28-b7c9-450f-9b01-6bc365401af2"
        },
        "item": {
          "id": "9e4b09bb-1263-419f-bb75-f45127b9d0bd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3b5e74ae-00bf-4e44-bcef-ffa6daafac7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a71de88-e9ea-4333-b5ab-6649280ea5a9",
        "cursor": {
          "ref": "cb6f19ce-834d-44ea-b6de-cf520313e7d9",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5ad8d902-f4aa-4fcd-bff1-d1add8bc9bad"
        },
        "item": {
          "id": "6a71de88-e9ea-4333-b5ab-6649280ea5a9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "71599ba9-54e3-4745-8d39-a932897ca474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bc7ffc-eda5-4d7b-a3c8-2a8b2b26dd75",
        "cursor": {
          "ref": "8fb7dce6-f994-403c-aed9-9ed0172aca0c",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "692c9aed-50ea-450b-b22c-7ba9efcab9ed"
        },
        "item": {
          "id": "84bc7ffc-eda5-4d7b-a3c8-2a8b2b26dd75",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a56d8202-391b-4a4d-91e5-cc8e5585231f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12087e8a-e72b-4030-a2f8-e90afcb1a273",
        "cursor": {
          "ref": "5a5ec0ae-4bd9-4e46-8e4a-a8574bbf48a0",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5f6afcb4-9526-4b13-b025-ca9026e64267"
        },
        "item": {
          "id": "12087e8a-e72b-4030-a2f8-e90afcb1a273",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "284757d2-c864-4eb1-91dc-e69127752232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66d997f-65b0-426a-84a4-aba80e0e128d",
        "cursor": {
          "ref": "687bf4fd-0d08-42cc-85f0-90d7503118a3",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1b536567-9b45-4417-ad4a-ce8a2212c811"
        },
        "item": {
          "id": "d66d997f-65b0-426a-84a4-aba80e0e128d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cf164f06-a0fe-4b6c-a7ba-bf941a4e48bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079317bf-6dad-46a5-b284-515ac04a81b0",
        "cursor": {
          "ref": "eca69444-c35d-4724-9a3f-103cf54fc23d",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "409ad887-5d4d-4c0d-857b-d54eef639989"
        },
        "item": {
          "id": "079317bf-6dad-46a5-b284-515ac04a81b0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b67d48cb-a720-4cdc-aacd-3b6eaee3b8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c800ebb7-ae04-4602-85e0-00123d77ed2d",
        "cursor": {
          "ref": "b9df3227-32e2-4980-9e32-4f93d2deb463",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "55eab85f-6d52-4301-8c1c-7fd345f70867"
        },
        "item": {
          "id": "c800ebb7-ae04-4602-85e0-00123d77ed2d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6ab917fe-95f9-417f-8865-a9d60ac6c04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349feb45-9d5d-4362-a881-9076a3421ac7",
        "cursor": {
          "ref": "221f973f-3bc9-4b3e-9c0a-769ef93fbb4b",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "db42adc4-468c-4075-8871-274974631040"
        },
        "item": {
          "id": "349feb45-9d5d-4362-a881-9076a3421ac7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1a7e4b4b-36b4-4d5f-a73f-42f2fa171666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e37d54d-bc27-4ee8-ad69-2ebc7f98af63",
        "cursor": {
          "ref": "778aa547-3d19-4cd9-9cb7-710d471fee0c",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "46b9b6df-c925-45f3-8244-16f8d4bb62dd"
        },
        "item": {
          "id": "8e37d54d-bc27-4ee8-ad69-2ebc7f98af63",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c89f1db3-7a48-4fbe-a66a-3f4a6c0ee5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28ab8a6-8215-45aa-ad3c-346b3a96ecee",
        "cursor": {
          "ref": "37138987-bd28-41bf-adeb-8371ec90c022",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "17132c75-eeeb-4ea1-8522-e42bc942bf8a"
        },
        "item": {
          "id": "c28ab8a6-8215-45aa-ad3c-346b3a96ecee",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9b67e8de-f06c-44bf-bd04-c92d27dad449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3294543-0981-4848-a81d-81b079a30b25",
        "cursor": {
          "ref": "6c785f70-49a3-4a11-94e7-c93dae4c54a4",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0c23a003-26b0-4d69-bb01-2699d36a2986"
        },
        "item": {
          "id": "a3294543-0981-4848-a81d-81b079a30b25",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "29c21871-7a5d-4b5f-b5cb-438cbfd47a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b03afc-ac7f-4c2a-a525-57d6eccbbf41",
        "cursor": {
          "ref": "88b2c98f-c3b9-45d7-8ee6-e4fd46fe0c40",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8259583e-62b8-4c14-ac4c-324217623eda"
        },
        "item": {
          "id": "46b03afc-ac7f-4c2a-a525-57d6eccbbf41",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "84d17baf-be49-4a14-b03f-2f0a5e3cb6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8dde6f-0100-418d-9902-ebba7588888f",
        "cursor": {
          "ref": "c4405e6e-1e0b-47f6-b305-67a483ea2ff6",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2da08553-02f5-4379-9511-849e256e7896"
        },
        "item": {
          "id": "be8dde6f-0100-418d-9902-ebba7588888f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "96ab4c3f-4f34-4591-9988-4af301b3da45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e14194-224f-4548-a547-9af0907d13f2",
        "cursor": {
          "ref": "f5e3ed2e-943d-435a-945e-6f5f30b44f94",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "60a81388-7efa-4f19-a2ed-ab1d1a3ba35f"
        },
        "item": {
          "id": "d9e14194-224f-4548-a547-9af0907d13f2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d30d6550-5dfd-4303-8600-304c272873a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565fde22-9a6a-46cc-8f88-0a2626985545",
        "cursor": {
          "ref": "3038e5dd-79ee-4959-8a27-e9db92d14e35",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c087988a-538e-4807-9e91-c74c74bc896e"
        },
        "item": {
          "id": "565fde22-9a6a-46cc-8f88-0a2626985545",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fcb9681f-e171-415d-8746-44de3fae4108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bf0f68-8b8a-47c8-b236-eaedb9c167b1",
        "cursor": {
          "ref": "5b605b64-8e6b-49e8-acdf-c02fa8828bf5",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2822e2f1-022d-403a-b3ba-eb7a14fcab0a"
        },
        "item": {
          "id": "d4bf0f68-8b8a-47c8-b236-eaedb9c167b1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f145d196-0cdb-4a97-99a0-a973492b00eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d0f24a-dc9d-443d-b0a9-903c15504a88",
        "cursor": {
          "ref": "edf368f7-4c4c-447d-8fa5-b0dddf1a6830",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ad410e7c-aa7a-4032-a10e-e6a6eabd7545"
        },
        "item": {
          "id": "74d0f24a-dc9d-443d-b0a9-903c15504a88",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "746498dd-5397-4b8b-b34e-7b34bfd0ce9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2c335a-b835-4264-a9c5-f0d0fbb83f24",
        "cursor": {
          "ref": "45b9475f-9468-4691-8e58-553d0c04e094",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "39d6c112-6562-489e-968c-82bb31df9517"
        },
        "item": {
          "id": "8c2c335a-b835-4264-a9c5-f0d0fbb83f24",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "689d1278-1935-4f35-8813-74eb716edf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fe4728-7ee9-416c-a8ab-cf503aad90bd",
        "cursor": {
          "ref": "ce7d59c6-e1a1-4774-b4e4-912da83b3609",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1d1cc5ee-da29-452c-b1c9-c98ddf4688e0"
        },
        "item": {
          "id": "94fe4728-7ee9-416c-a8ab-cf503aad90bd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a0e787cc-83bb-46e2-8eb2-a28effaa307e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcf4da5-e373-4c2a-bedc-ef37bb2aca75",
        "cursor": {
          "ref": "b6db94f6-266e-47f4-83ba-c38df48ecb7b",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "42d0a867-be5f-4655-9565-f816b9dce634"
        },
        "item": {
          "id": "bdcf4da5-e373-4c2a-bedc-ef37bb2aca75",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f4c2ab28-89e3-49e4-a957-fcd8f492e272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8743e404-b7f8-4265-9616-56cb6e6af3a3",
        "cursor": {
          "ref": "8ee89784-3d28-4801-850a-44d83e8083a2",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3b935cc4-58fa-4f83-b500-71855bf86c4c"
        },
        "item": {
          "id": "8743e404-b7f8-4265-9616-56cb6e6af3a3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "336a6b91-4e62-4be2-9050-7efaf37f209a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9513eec1-e00c-42dd-94b6-874c3c4b52a5",
        "cursor": {
          "ref": "12058d53-7368-40ef-b328-10e348621365",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6e1f53a7-eb56-49ff-8b14-c5e9271d6847"
        },
        "item": {
          "id": "9513eec1-e00c-42dd-94b6-874c3c4b52a5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5b7fdbb6-cdc3-4a43-ba8f-41ca58b2e8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c14e187-b1cc-4943-a96a-df6c09ff9288",
        "cursor": {
          "ref": "c4b7148b-1a5d-45a9-9602-e0047f16a951",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5120d9eb-1356-4457-a1a1-f1229c492fc1"
        },
        "item": {
          "id": "2c14e187-b1cc-4943-a96a-df6c09ff9288",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "77d92569-0821-4489-9b04-80e82e8fc27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358cd743-065c-44fd-827d-0f0946967d0b",
        "cursor": {
          "ref": "df596cc3-e351-4bd8-a92e-c4f5555a9ecf",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cf6939da-5856-4717-a0ef-85b3015dc46b"
        },
        "item": {
          "id": "358cd743-065c-44fd-827d-0f0946967d0b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c2e15ae6-6476-41f6-aff6-991a2393c65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868663f5-b08f-4ac4-908a-aa74b507681b",
        "cursor": {
          "ref": "cfeeecd1-8d94-4667-9a0e-e0fcdea18680",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b10922a0-90d0-4c8c-8b07-85b33dd6c702"
        },
        "item": {
          "id": "868663f5-b08f-4ac4-908a-aa74b507681b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "47caf1a8-b9c7-4f61-8313-5af693a9256f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0a4da6-a074-455f-9973-0e103a6377ec",
        "cursor": {
          "ref": "685a1196-15f5-419b-aee7-39365a0baaee",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b57a6ded-fbf6-4cd6-865d-670e86ef94c6"
        },
        "item": {
          "id": "7d0a4da6-a074-455f-9973-0e103a6377ec",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0792bfca-4ac3-488f-ad70-8df1a9420036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e376a1e-cf8a-46de-9c96-20b972a7a744",
        "cursor": {
          "ref": "b8be010d-72e7-48f6-aaea-89b1d0482dcb",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c94ff188-ba0a-44de-bfd6-28372a0349ba"
        },
        "item": {
          "id": "5e376a1e-cf8a-46de-9c96-20b972a7a744",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1074e324-3bb7-4d18-ae56-8c6a381c258c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7004c0ff-e0e8-43d7-bb18-9d1cb0af8280",
        "cursor": {
          "ref": "3e3d145c-23e2-4baa-b072-1891d356dcf5",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4f3271a2-a73f-43a7-b50d-c87903ffeaf9"
        },
        "item": {
          "id": "7004c0ff-e0e8-43d7-bb18-9d1cb0af8280",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a10e6819-09a5-4b32-9dfb-b9ed544b6619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a4e0d4-40a2-4712-8d07-e7f1341f7677",
        "cursor": {
          "ref": "ffe04a1b-4fad-4ed0-85b2-4ae45a091522",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2ac7971e-3a44-4914-aee2-720b65710a0a"
        },
        "item": {
          "id": "d0a4e0d4-40a2-4712-8d07-e7f1341f7677",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a9838a3c-25fb-48ba-a8af-bd67222de1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be71b0f9-80fb-4a30-a561-8e6a42b3f10d",
        "cursor": {
          "ref": "6fea76e5-a02b-459a-a479-604641bd9164",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "df6e4634-e9de-45fd-93a3-92416f07106d"
        },
        "item": {
          "id": "be71b0f9-80fb-4a30-a561-8e6a42b3f10d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "abec95b3-45eb-486c-948c-8e28f9e2dc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3808e632-b3cd-4a49-b55a-04377dbcb8ca",
        "cursor": {
          "ref": "490264d0-c660-495d-ba8b-96a91732874c",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e759f067-b068-4191-a442-1b269fd01238"
        },
        "item": {
          "id": "3808e632-b3cd-4a49-b55a-04377dbcb8ca",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f64d1c0d-0d38-46dd-b561-e2a2868a4ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0198b0c8-0279-4440-a79c-20644efb72cb",
        "cursor": {
          "ref": "5d4aa808-504b-433d-a6a4-aa93750c9ba6",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "eae0384d-6121-43fc-8d56-9f9b4a47342c"
        },
        "item": {
          "id": "0198b0c8-0279-4440-a79c-20644efb72cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e729067b-2d81-41bf-aad3-10de8d018b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d7c7d3-ee74-4c2f-b087-2a1dd340d761",
        "cursor": {
          "ref": "40b11131-94d5-449f-9aa3-1618fb8c4b44",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "501ed43d-2420-46ec-87b6-8bccc718b0c4"
        },
        "item": {
          "id": "b5d7c7d3-ee74-4c2f-b087-2a1dd340d761",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "07ce7472-c60d-4666-8647-0fcbdff6f86a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5484f8-32bb-42ba-a99e-4d8510c19c11",
        "cursor": {
          "ref": "0fd48a83-03db-4e6f-8e47-148a13934c11",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4e5cbb66-ef00-4d0b-94a3-2c85cddab6de"
        },
        "item": {
          "id": "0d5484f8-32bb-42ba-a99e-4d8510c19c11",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8d2a7f2c-6989-4889-80af-428b08a6af9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9013a9c0-0fdd-4ada-9afb-2690c37d7811",
        "cursor": {
          "ref": "502f1eeb-4bf8-45e0-8715-c909610e7e7a",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dc194bb7-e906-4244-8569-0e65996f2370"
        },
        "item": {
          "id": "9013a9c0-0fdd-4ada-9afb-2690c37d7811",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9245d954-f252-4822-ab07-26eb13b7bfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8f95c7-cfae-405d-814e-a26b64a076ec",
        "cursor": {
          "ref": "ae0ccf26-f807-4cf0-a275-9efe976b05c2",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3c04716b-1a25-4b53-a585-fff9bf55646f"
        },
        "item": {
          "id": "3d8f95c7-cfae-405d-814e-a26b64a076ec",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "91354718-44e2-4087-a8c8-dfffdf881f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4bd6ae-3282-40af-ab94-26e15986ef96",
        "cursor": {
          "ref": "d9f05b55-ccd6-4a3d-a0b9-1723a9246ae0",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "461f5b84-7aec-4934-bcfc-acd195b57ef4"
        },
        "item": {
          "id": "8a4bd6ae-3282-40af-ab94-26e15986ef96",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ad917bab-ffde-45e7-af6a-efc7279b5ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43200cff-85a0-45c5-984c-5bcf3dee1a43",
        "cursor": {
          "ref": "0948ce3c-8bc7-49a9-a56e-a25f013d5d46",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9a5f583c-0fbc-48cb-a630-fdc8374f303e"
        },
        "item": {
          "id": "43200cff-85a0-45c5-984c-5bcf3dee1a43",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "389954d0-07cf-435c-b55b-652fb0ab57c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cfed7d-4ce4-43e1-bdf0-d3f0985d5def",
        "cursor": {
          "ref": "2bf0a3e3-d63a-4f9a-99c5-dadbb82316a4",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bc17752e-1c0d-4d51-abd5-c3389d9bef07"
        },
        "item": {
          "id": "04cfed7d-4ce4-43e1-bdf0-d3f0985d5def",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3c05ae1a-8b98-4c52-991e-200744af9655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d06eab2-f94e-4adb-bd10-3a7be4676658",
        "cursor": {
          "ref": "a6babb5f-3b13-4533-a727-46022de7a356",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e2077380-0946-4085-92df-92bf187c60bd"
        },
        "item": {
          "id": "7d06eab2-f94e-4adb-bd10-3a7be4676658",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "42b71301-3323-4df6-96b3-caccbcce5aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64e313a-f10b-414b-b220-2d06f5ec5403",
        "cursor": {
          "ref": "35e9acfd-d038-4d81-98ff-a4a9b0830151",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "451ea229-c599-47d7-b233-b7ff847f24a4"
        },
        "item": {
          "id": "d64e313a-f10b-414b-b220-2d06f5ec5403",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1305bdcc-d6c2-4520-b080-d4c117eefe08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad09df6-2b67-447d-9fe4-c8ea6959088e",
        "cursor": {
          "ref": "a17b34b1-b5c6-4d6f-8b57-c363d78e848e",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9686183c-cba1-4c2c-9e69-20782dae1af3"
        },
        "item": {
          "id": "9ad09df6-2b67-447d-9fe4-c8ea6959088e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "59ab8b7a-9c17-435b-989d-f357a5449f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15ba3a8-940e-4235-a9ef-e4b25bd4c584",
        "cursor": {
          "ref": "383e2fe1-0a93-4a77-88a6-14d2558d3f2d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5e0d974f-9d9e-4f1c-9d21-f079a7db0ef4"
        },
        "item": {
          "id": "a15ba3a8-940e-4235-a9ef-e4b25bd4c584",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "18ddbc86-cf5f-43c0-9661-c4d2a976c958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894fa072-3c21-4218-bda2-78111fc460ef",
        "cursor": {
          "ref": "6a264bda-9e47-42eb-83f7-6773947eee92",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ba909b0a-8eb1-498d-8121-3dfb87602cf1"
        },
        "item": {
          "id": "894fa072-3c21-4218-bda2-78111fc460ef",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5314d79a-1ba8-49c1-9a63-f026b07565b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7efe352-49ed-4648-b206-4df2bdc6ea36",
        "cursor": {
          "ref": "78916d1e-6423-4bff-b70a-9a49b957ac73",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "edcc4907-1828-450b-80c2-dd6162d0c145"
        },
        "item": {
          "id": "f7efe352-49ed-4648-b206-4df2bdc6ea36",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c53aa578-77b9-41dd-a39f-1f6bea47896d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe711239-ab49-494d-a557-796ed70ddf1c",
        "cursor": {
          "ref": "926d7a4d-2e79-49b8-ae8e-99c257188197",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d003a8a7-c03f-4a1d-a90d-6c769475b364"
        },
        "item": {
          "id": "fe711239-ab49-494d-a557-796ed70ddf1c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8e9fb4f1-a323-4294-88c0-5f23c3adbbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a6d533-3975-4f08-867f-fbb0a110c54c",
        "cursor": {
          "ref": "0cda40dd-8e49-4737-a67d-b2bfcea593fc",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "690a5e18-de0b-4ed3-a03e-d1deff6c04ab"
        },
        "item": {
          "id": "80a6d533-3975-4f08-867f-fbb0a110c54c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "45f94265-94db-4037-bb7f-1775a00c3d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784a5b70-0745-45a8-9055-d41bdddf2f0e",
        "cursor": {
          "ref": "bb8de106-5ae4-4842-b204-0d594aa086ec",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6c456bc4-f92b-4820-bd0e-fcb27eb92645"
        },
        "item": {
          "id": "784a5b70-0745-45a8-9055-d41bdddf2f0e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "efefc620-61c8-45e6-b701-f8d147efa474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45942744-dec6-4cb3-82f0-501ee39204bc",
        "cursor": {
          "ref": "308254dc-8b89-4891-98b7-9a5132874cfa",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b32371c2-6095-4b1d-a299-679ecd819650"
        },
        "item": {
          "id": "45942744-dec6-4cb3-82f0-501ee39204bc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b328c8f4-d11e-4f42-96b1-7e217eee60e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc53423-49fb-4e3c-a028-e71f90b79ba6",
        "cursor": {
          "ref": "41ed982f-2a66-46f2-b460-71738607af51",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "906973eb-aa59-4030-9c1a-e2e79cd0a096"
        },
        "item": {
          "id": "ebc53423-49fb-4e3c-a028-e71f90b79ba6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e3ca5171-86a5-45f7-bdf4-a7fb8da825d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396c941d-a76c-4380-baac-f65c1c4347a9",
        "cursor": {
          "ref": "2f7d518a-59a2-4186-9f90-7861422fffca",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "875f9e3e-8c47-45ce-8f25-b5aad8967174"
        },
        "item": {
          "id": "396c941d-a76c-4380-baac-f65c1c4347a9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c9a1523f-a995-4ba6-89d8-ba00632d894c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a923d5e5-1905-4856-85ec-082cb0024c45",
        "cursor": {
          "ref": "0d1bdf41-7d00-4117-96f7-0cf4d62bd90c",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b23de284-012a-41ec-b5b9-aa6e8faf9fa0"
        },
        "item": {
          "id": "a923d5e5-1905-4856-85ec-082cb0024c45",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "da92f46c-4f90-40b6-8df7-8c778414e509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3127a789-22d2-4a1e-8845-d99364520400",
        "cursor": {
          "ref": "b336e04c-a06f-46ad-b124-9eceb53e98d5",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "97473458-32b0-451d-bf25-4a9ffc1c6da6"
        },
        "item": {
          "id": "3127a789-22d2-4a1e-8845-d99364520400",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e41a9f11-5144-4708-ab41-e32498be315a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7405b30-2164-4e93-8728-79a1fd8e5572",
        "cursor": {
          "ref": "690b49a0-c8c7-41d8-86d2-1ccfef40216a",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6a659212-7cdd-466f-b135-d6a683e36244"
        },
        "item": {
          "id": "e7405b30-2164-4e93-8728-79a1fd8e5572",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "872fcfb4-ac68-4675-89ff-f1db3b91c934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5264404-7604-46d0-92da-02ed72d2ed33",
        "cursor": {
          "ref": "71d317ed-6a04-4462-b5bd-83b252cfe097",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "35a9553b-5c45-42af-8687-849dc276bbc3"
        },
        "item": {
          "id": "e5264404-7604-46d0-92da-02ed72d2ed33",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b0fde2f9-b9f8-4cba-81e8-22bc566fefba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "094bb836-cee2-4ba2-acbe-ca5b9c27d77a",
        "cursor": {
          "ref": "e4754fb9-16c5-45b8-818b-9977c63bc14f",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b4d3fc40-d2cb-4099-a5aa-da16f46213b6"
        },
        "item": {
          "id": "094bb836-cee2-4ba2-acbe-ca5b9c27d77a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "229639df-39c8-4724-97c0-5412e3cb430a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13658057-b1c8-450f-ae45-6d822681f71e",
        "cursor": {
          "ref": "97a98524-5c08-4220-9ed6-1fbe072d45cb",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "371b7cc9-92d3-44a5-9d5b-5d8b94c3f806"
        },
        "item": {
          "id": "13658057-b1c8-450f-ae45-6d822681f71e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "aee4f01e-5383-4171-b126-2a83b9ec4d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912d8a71-1be2-4c68-911b-eb1f42bbfc41",
        "cursor": {
          "ref": "0521872e-def3-43e0-9c8c-eb75f492d256",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a1f06caa-7a60-4262-890b-679250891188"
        },
        "item": {
          "id": "912d8a71-1be2-4c68-911b-eb1f42bbfc41",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "182adc75-0ab3-4ab4-8976-e825ca706ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad081ebe-bd56-454e-bbb5-5cc1f8599293",
        "cursor": {
          "ref": "ad45e6e7-e8f2-4299-a59b-732444b6ee65",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c68ddfce-a2d8-4e71-9036-1d0f080db453"
        },
        "item": {
          "id": "ad081ebe-bd56-454e-bbb5-5cc1f8599293",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cbcfd05a-fd91-4da4-9b02-4b0dca921979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b4d950-7eeb-4e32-9aed-b49440637e77",
        "cursor": {
          "ref": "6b5c55f7-bba8-4de5-b77f-958ff391af6c",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ed477beb-b405-4b7a-be1e-6e2ad301da31"
        },
        "item": {
          "id": "16b4d950-7eeb-4e32-9aed-b49440637e77",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e20a5cfa-f3f9-429c-94ec-b09e681e01be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca4eab8-1434-42c1-87ba-bb0c63b1398b",
        "cursor": {
          "ref": "336f0563-6ead-4aa9-8f46-fed7262998a0",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "84e9f873-38b2-4535-b47d-ed00aae69162"
        },
        "item": {
          "id": "fca4eab8-1434-42c1-87ba-bb0c63b1398b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2780da13-fc89-48dd-805a-3bc2bebc6802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c744c0f9-9735-4e05-9aa2-2e5ada8bd890",
        "cursor": {
          "ref": "3b9c126c-b596-4990-9130-9eed31ba4517",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1ba87d68-a671-49c2-ba0e-164a4f6d4771"
        },
        "item": {
          "id": "c744c0f9-9735-4e05-9aa2-2e5ada8bd890",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "93002fb8-140b-4afa-ba8f-32e196f90ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107870f1-d6c4-47ac-aa0f-cfd533fc39e3",
        "cursor": {
          "ref": "947ca37d-de62-4a7c-93db-46cb113788e0",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8bb58ace-c835-45d7-afca-4955fafacf24"
        },
        "item": {
          "id": "107870f1-d6c4-47ac-aa0f-cfd533fc39e3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "05ce93d4-1f5f-44ce-95b8-268518b33787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb2972c-9f59-48ad-b5f8-cec7c5d1f36a",
        "cursor": {
          "ref": "3e705349-e0c2-46f7-80fd-b99ec8045d72",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "81f3ea77-f42c-4efe-921b-b6e1fe914cac"
        },
        "item": {
          "id": "6bb2972c-9f59-48ad-b5f8-cec7c5d1f36a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "442bd60a-fff3-4c23-91f9-a003acdb8547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4572cee3-4890-4e76-874a-7d0acf78c6d1",
        "cursor": {
          "ref": "8414ae81-c016-4d39-a196-af0230e488b7",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "edc9b7c9-6847-4a70-b85f-6ca5e9310231"
        },
        "item": {
          "id": "4572cee3-4890-4e76-874a-7d0acf78c6d1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e41cf7fa-143b-4f49-a773-a8d675a09b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe39b5ac-cf58-47db-8f13-462587070bff",
        "cursor": {
          "ref": "6188f5ba-4fbd-4c23-813b-43a763b90c9e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bc334d48-dc3c-48ed-8a3f-a9fc3bb87045"
        },
        "item": {
          "id": "fe39b5ac-cf58-47db-8f13-462587070bff",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee3904a9-c9b5-44c2-b8da-bb3bc26bbae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ebeb4b-0f25-4958-9d60-6bde3f558cd9",
        "cursor": {
          "ref": "6bc4cb70-2237-4378-a9d0-99ac1f7e6902",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d68aeaa9-287e-4684-8f23-493ca6de9fb8"
        },
        "item": {
          "id": "c1ebeb4b-0f25-4958-9d60-6bde3f558cd9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fef8f34f-70d9-4855-8ca8-9d0e25d885c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b3ecb9-724d-44b5-a117-01e9ba20aa30",
        "cursor": {
          "ref": "ef599f66-ef99-4090-84df-76128fd34d78",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ffe484d3-45b7-4ef1-bf30-d9120d7e4cff"
        },
        "item": {
          "id": "d3b3ecb9-724d-44b5-a117-01e9ba20aa30",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f32c8d20-11de-4816-96e9-0ca6ce65e443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27a3b44-8a37-4c22-bbb9-8555f39061be",
        "cursor": {
          "ref": "9bf50b08-875c-4d1c-819c-8ab36e4157a3",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0caf0396-565b-4eb2-bc56-fd1c73b0555b"
        },
        "item": {
          "id": "b27a3b44-8a37-4c22-bbb9-8555f39061be",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "872b3e7a-a0af-498b-91fb-0619617b3e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53027d7-1c32-4dc9-8db3-f2e67b6c8e02",
        "cursor": {
          "ref": "abf9fcc3-039e-4879-8893-0f423d1f164c",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4d1cf6ff-6e74-4b2b-b483-77229fd8a1e6"
        },
        "item": {
          "id": "f53027d7-1c32-4dc9-8db3-f2e67b6c8e02",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b2c45853-eaaf-483b-9ea4-62f498b1ca22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d66f32b-8320-4403-9e14-82436a137a6a",
        "cursor": {
          "ref": "614b5e03-0935-45a5-8497-484a4c347264",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e85d8a65-5343-47f4-9210-c5eed06ca047"
        },
        "item": {
          "id": "3d66f32b-8320-4403-9e14-82436a137a6a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1d179ab0-577b-41e7-b0d6-3120c78cc678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a1719e-683f-4bcc-8992-da76af9f6843",
        "cursor": {
          "ref": "02af7d2f-17c7-4b9b-a610-456ab0bab59c",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "21fa235b-9452-4b59-b511-389e36d4defb"
        },
        "item": {
          "id": "91a1719e-683f-4bcc-8992-da76af9f6843",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8da33b9b-c317-494e-87b4-3afea0afb08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0475602-52f2-4d75-9fe1-e574274942af",
        "cursor": {
          "ref": "fadeadbc-eefa-4901-8b9d-2d6bd2149bc8",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a7ed26bb-e42b-4c7a-a905-3aa140e483dd"
        },
        "item": {
          "id": "e0475602-52f2-4d75-9fe1-e574274942af",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4d40d3b1-b26e-492d-894f-0b4006d90e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba0fd35-4027-4fbc-a7c4-9cff6e9e65f6",
        "cursor": {
          "ref": "560fb5fc-c6b5-4267-baca-ec62fed35d50",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7b760de0-08b3-48e5-9a44-ed989f14cf82"
        },
        "item": {
          "id": "8ba0fd35-4027-4fbc-a7c4-9cff6e9e65f6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9a61d802-e6b7-4aa6-a978-90d981815718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5487c3-923a-483f-8089-a9c5e2843409",
        "cursor": {
          "ref": "5cc2c264-3658-4253-8b3f-7784c3715541",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f2651bec-e273-4a97-8d79-e50f7a065405"
        },
        "item": {
          "id": "6f5487c3-923a-483f-8089-a9c5e2843409",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "37bd89db-0bb3-4e3a-8b33-fc15ce72bbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddf99df-6202-47bc-b24a-10b99af5dcc8",
        "cursor": {
          "ref": "86f46701-0d78-4e8d-afec-53cec790114b",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "7f518a8d-5f9a-4770-801f-154f064c3417"
        },
        "item": {
          "id": "bddf99df-6202-47bc-b24a-10b99af5dcc8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e822048-d2ee-4f4e-9ff1-d807f6e0ce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8448b5-f91f-4288-b908-5bd273b773ef",
        "cursor": {
          "ref": "c540b9cb-9768-43ab-8bce-82f1ac1231ff",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9a27630d-750d-4eac-8321-48025f4ef3c6"
        },
        "item": {
          "id": "aa8448b5-f91f-4288-b908-5bd273b773ef",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "abaf9e78-fc43-4abf-aae9-15dfec3ebe09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1aa96a-3dba-4c4e-b266-e802a4e2e4f5",
        "cursor": {
          "ref": "0eb0f235-4fd7-4bd4-99b9-f0c355dbb835",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6d64757b-09eb-43c7-a0cf-19dafc095fc2"
        },
        "item": {
          "id": "6d1aa96a-3dba-4c4e-b266-e802a4e2e4f5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "582bb81a-e2bb-4c88-9608-24b49abec36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "78fb83c1-0adc-42d3-adb6-e7a2b61695f2",
        "cursor": {
          "ref": "208f873f-4519-420d-a426-b63730c8fb46",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "00aa2449-589c-4c8d-9644-0fb0fec4f3fd"
        },
        "item": {
          "id": "78fb83c1-0adc-42d3-adb6-e7a2b61695f2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d49381e5-b80f-4600-89d5-ef71bcb05158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "22f62b61-6211-4300-bc8f-954c3e54d859",
        "cursor": {
          "ref": "791a5459-46ae-43f8-b3be-c64f53e2eecf",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7e11bbce-60b0-4fe3-911f-7fab258e9076"
        },
        "item": {
          "id": "22f62b61-6211-4300-bc8f-954c3e54d859",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "91e53e20-0a19-4ed8-bd9b-a011aaed50e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2f05bf54-6ff8-4691-af57-c9f6dfa57497",
        "cursor": {
          "ref": "87969589-c099-4b9b-85ce-8a06dc37a72e",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "561dcdcc-43bb-457f-88df-0113520212a9"
        },
        "item": {
          "id": "2f05bf54-6ff8-4691-af57-c9f6dfa57497",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5aee92e3-4d95-41c9-a812-85a15d3ad42d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f05bf54-6ff8-4691-af57-c9f6dfa57497",
        "cursor": {
          "ref": "87969589-c099-4b9b-85ce-8a06dc37a72e",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "561dcdcc-43bb-457f-88df-0113520212a9"
        },
        "item": {
          "id": "2f05bf54-6ff8-4691-af57-c9f6dfa57497",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5aee92e3-4d95-41c9-a812-85a15d3ad42d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e191d825-d5f6-4a2e-965f-47e84b7ff23f",
        "cursor": {
          "ref": "1f6270a0-d262-4180-aae1-9a1b59381b7c",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "94693466-84dc-4b62-a134-1986ee541881"
        },
        "item": {
          "id": "e191d825-d5f6-4a2e-965f-47e84b7ff23f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "81b4959a-d68c-4c31-bc5b-2dce98d7d8c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c74155-b081-436f-924d-024171eb3f81",
        "cursor": {
          "ref": "d646a79c-5125-470b-8dc6-e0dcbc81f31e",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3b85930a-ca9e-40d5-93f9-d3cfe1bfd400"
        },
        "item": {
          "id": "e3c74155-b081-436f-924d-024171eb3f81",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "db91fddc-d7b9-4ca5-8884-fd9410ca568d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}