{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "37cad4f2-f46c-401b-b128-5fbdc3746073",
        "name": "Clear Cache",
        "item": [
          {
            "id": "80b5d268-2bc3-4ea2-8b54-6dfacb7668c1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ddaaf6dc-dcce-4b9b-a273-f78c8ee2314b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d51c804f-a3d9-45f6-a092-ac4623b5f117"
                }
              }
            ]
          },
          {
            "id": "1e8a0618-9965-4f0e-98d8-086cf318e664",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2faa1019-7125-4ada-80a6-9e4989564507",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "965fbd76-83df-486d-8db7-6fc954cce61f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "98fb31e3-027a-482e-8dab-0b8ec5b3c55d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f975a1a4-1068-448c-930c-3ec8285185be",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49587167-65c7-493d-9d23-3b70eade17b6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64851733-5539-4e7e-8556-afcf59a07a6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1092750-c96b-4a71-98a2-deecb3480c80"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a918b4f-182a-4c80-8732-c1531d686f1b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6fc0cb01-feeb-49b9-9036-21d9df3ca3dc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4b4057b-531f-4ba1-a56f-ca35048f4379",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c081b81b-7822-40ab-a8cc-2618a1b07de0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46c0f5d0-5d62-431a-8e59-826227dab4ef",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "58090478-4b33-4a25-b3a5-80f29826001f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a499c700-c44f-497a-b15e-2343fbdeaf96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71ae9ccc-3629-4f83-8a47-1f430cbe9287"
            }
          }
        ]
      },
      {
        "id": "d6c7199b-d450-4477-8990-07cdb97a660c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9d6985c8-8e35-4bac-8760-be9aaa030c04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "82883203-9579-4600-95c2-8767fe6d196b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ee8c188-3e9a-4242-b767-a4e340be47fe",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c48cbea-dfb5-4316-a4b5-03d1963d6e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62d1b13e-f338-49c6-b71d-b12b6d1f6b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09c3a85-27e7-4d7f-975f-2710ee7c7404",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e9eaf7-9911-462d-a4ad-ee64a26e1178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c492ee40-82bc-49bc-8e0e-ec349f60f93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bff388e-9b73-460f-868b-c6c2cbc647e7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cd131b-ed83-4e0d-8f90-caeb29c6faab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf393adf-dd60-4eee-a889-230a37e940d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5e00453a-cd52-44e3-9b06-43eaa4192fd3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fec150b3-a9b8-490a-880b-b7f6eac99a07",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ff6095-6dc1-4f85-8ad7-ac5ea0c5839d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "541b0573-4f10-415c-aa76-1c3a44e12f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8e401e-ba46-4685-967f-6681ce477c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789cf449-6aa1-4f7b-a69b-29d54229cce4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "27f4e834-4ea9-4a6a-86bf-d7dfb1e73fe5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6daf30d-27a2-4a57-a81a-22f051e07d3c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39a5c6e8-b26e-4e27-a26e-bd6f3548e89d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "18f59cb9-bbde-4574-9f11-ee1a989529f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d31801a6-aae8-47a2-acde-df6e51c2840f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "bc5789a6-a099-40f8-a78d-0f7463d2f772"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04d86bac-74da-4fe1-943a-c5754b81614a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09f2820f-cf53-4694-b04a-aa380ed1305e"
            }
          }
        ]
      },
      {
        "id": "b413a71f-7915-4f39-a728-bc948d02c599",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "905ee458-db96-4534-9a1c-055933765ced",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3162ba5d-077b-40a7-af5a-32e150700d2a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3d3af619-9db8-4e48-9484-de3afcc3ce33",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6ae54d-1ad1-4c2c-bbb3-94dcd95f2d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a55f865-28b8-4c24-af18-81501de6e7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938ade86-0e12-4502-a39c-57a84014d38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcfaa056-0a51-41fb-b694-120fa660cfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fbd9d3-639c-42fe-b1d3-cbd3de4685e2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b54cdf-6f26-4a1f-a3b5-550acaba4b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe6206f-2144-447f-bac5-bf356869a7e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17290d17-3d7e-469a-bb69-f7cef4e46ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66194c32-8298-447d-9eb7-a6a6889c3ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00487a53-3901-4549-9d29-5f7c1d367c79",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0072f1a-e13f-44f8-8ec9-269b48e10eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bce0a74-7d85-4684-8484-c9928d73f807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd501d3-6add-4cd8-91eb-be66c8d2f4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c0c3c20-fe2c-454d-a2a6-2740d1d8ed2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f77ef0-1057-4f44-a001-9fdce1962e90",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e8d981-5076-4e33-aeef-f7044126e6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbecad9c-15e1-4006-bd84-7f1fe39e0a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2b849d-17e9-44ab-9d99-606eb3f76b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8386ea47-00d5-4894-b891-967b0caaafd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3073d836-ab83-45b0-9b5a-f1c58f91f601",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95d7752-36fe-480e-8beb-664dba5b3be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca36b51-b35f-40e5-ab68-d8540c35de10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57cedb4-9a80-4a95-938a-99715508fc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67bbf3a8-6b93-498d-b5ec-8e8e64d42d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b74f5c5-5c30-42d8-bc3e-545ebc25b9b4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae83db1-e9eb-4936-ad05-9f43cb7421c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96a32dd-e3ae-4f14-b068-0d759f8e3c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0075dfaa-28ff-471a-a88a-9af515b0e2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8580e360-e0bc-4289-972e-1e65e05d8e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558bc6bf-55df-4de6-a831-1e22f18449d3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d380d0-2648-43ee-9fa7-b6672af0fb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb5a326-0449-4d9b-ac87-50e7956c03d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1e29aa-4ced-4b5f-b735-fe829e4f665e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "156aedf4-6ae5-4abb-9024-cc2008819c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ac35eb-26f4-4988-8bf9-163abde14558",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f009119-d22e-4508-8561-7517fc88defa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be10df7e-089f-4d8d-b5e4-fec56d904bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c84496-74de-4531-b8e4-edd2e6c16fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87783eb7-bc37-4210-a8df-efa6a77d02ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1431e9af-4f31-4f69-b1af-763812707155",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2621f08-5b48-4e76-bc5b-a2770454ae2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ff6b59-ac77-4fb1-b866-3d36a2679c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48e0b4a-5b1b-4139-8349-975a6217c321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81a61fb3-4293-4522-adb4-d1837ed99919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6d6a2b-d115-428a-886d-dac5d0a02f07",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3844521-b688-4a0c-9ee1-b0eac6c3a1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9047b665-70be-4721-8fe6-26293b6295ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe29733-18e9-4ec7-b960-0f4b36e783f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2f31c7d-a101-4cb3-bfde-730b8fe7a61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffbfaee-99e3-41ce-8f6e-da66a1423a70",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dc0a02-7c0d-4b0a-9090-b5803e42937e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853218f5-0d4f-4e7c-a310-8aa131efd9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700b88d8-632b-4ca2-8577-d8d56dd84ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8b5fb4c-a669-43aa-a6cc-f41672b1b6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dbce64-c2ac-41c4-83b9-2115bd621436",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7126933-3e4d-49dc-98b0-d37b03ee6661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198f16d9-b6d3-47fc-aa6a-05c2b0b0f4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df216dd-f232-42df-98c9-cb99e74c2939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf64fc26-6178-462a-960f-aae17611838f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1982b769-07d9-42bf-8a06-d5b05845f51a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f2c50f-86ea-4dae-8755-ee47140a463e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acd40a7-299c-4d4b-b073-e67c11117388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74facecd-62da-46e3-b179-daf5e2e6358b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d2804fa-c3f4-448a-9d65-f9ff6dde1e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510187d4-f2b2-4c73-b950-1dddccb3ac10",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4fe097c-67d3-4bd1-bfe8-0fd67e41f61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2a44dc-b591-4f8f-9735-0bc087fd8b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79477c05-0931-481d-b462-7fa0f3e51a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec3aa4de-1063-441a-9d39-453bda871700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d008fc-0d9c-49f8-8e76-78f10bca6a7f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a6af70-b36f-4be5-9b0a-d03ecc2038b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db443a4-7715-4ff8-9d80-4ca50de0c175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f29ed29-1bcc-4e61-8543-ef56ca4f2e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e5f6e2e-5d3a-46b7-a71b-2e1dccb78065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7ca20f-9e03-4a2d-a888-6fb65c4e94e7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78831ad-2971-4e40-bf1a-4352276253f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d04fe3a-77c8-4aca-bd51-8de9e64e5425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fd2e6f-4ccc-4d26-8e14-0efc7b70b630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1e854e4-5536-4da2-8550-c70d59557afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31de6835-5959-4793-b342-532107070f53",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cf005e-489a-4271-a89e-d60eb670bc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555b502f-cfa9-4f02-8e8b-25770672aece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea43999b-9c37-4704-9fe7-2ed32cc713f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a4f20a0-6277-476d-9b03-742c52b5d2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935d9f60-8825-4d76-ac42-81ddc0d11b02",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52916517-f522-44ec-a308-197a48e13aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1f6104-f889-4581-898d-79e83776538f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adda10c0-e3da-44b9-9982-48713a08a800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "33acec5e-5244-4233-9ab5-c5eddcefa4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7650e9-14f5-4ae6-98a7-e8d42154d2da",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e4ccaa-ed70-4e57-af0d-e32935a7103c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc04df2-c3a7-4070-ae25-116cda1383a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0473a734-dcb8-46fb-9fdb-6b8535a39978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38bf4c4b-8c5a-475a-a253-41976d686547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26640a8b-57fb-4de8-a7d3-2c988eea3c41",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b8a3ac-60da-479f-b235-8d676ad68787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b7104a-a66f-470e-99cc-c9cbaf603b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09513513-be92-4ef7-b631-20e7c3e2e0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "085c8904-db7c-493e-b45a-cc801ddc9cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deaabb81-c28e-4228-a99b-462511a1c2f2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebbf0b2-e862-4f5c-9444-04241ca2e878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51fd06b2-b58d-4919-9a5e-14d280784eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088c98cd-5433-42a1-a0ee-afe6b9522057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4831795b-e352-4c80-9a57-2d5079b2922c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e2254b-6083-48e8-b579-1e8f230cac5d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f847cf7f-2b7c-4ffd-8530-0e09d8ef47e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108dbb82-b945-41ee-8f8f-9a6ba00d2a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c3c5b4-defe-4ac4-8aa5-8b20e4f523f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d064787-4e8b-4037-bc54-7135f27f5828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807a4d41-eb71-4dff-a6ff-3c0d8ebe4e37",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fa9aba-4eee-404e-a0e8-836c198b0af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef148207-42a7-4e97-b516-8c6a17c604cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a7f449-5d96-450a-92c6-a1a0bb46f3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9b6cf4-c5ef-4191-b157-821648fed908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab43427-c278-4011-a345-b6a76b61d474",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1154715-374f-4155-9425-add8a5f26184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701e8cdc-4e2c-48a5-b0b0-e800e1c6885f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd9b911-98e1-44d1-b70f-99df114e2368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c23746-dd0c-461d-b6fe-0ed40ab36466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b777ec-b244-42dd-b943-1d348731673b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0064ae6c-3b90-43cc-ace8-6584439a0769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3396274-fef4-4e09-8116-3fd933236430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f19f78c-7c36-4456-8445-a938b82d07c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "08765759-1249-4bde-8162-a601f396e4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23667db6-411d-4910-b69a-a51de58ed752",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ce0fdc-b6c7-4100-b85e-ab2526c5e0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86adf32-5394-42b3-890e-c03352284ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3deecbd-fdae-4334-8441-42eabc9430c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4371c98b-fb1f-4947-8c90-724288511fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed972fa-3c34-42fb-8036-3ec8fab0644f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5136f2-46a5-43fe-ad13-5e7ad76ab9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2adc5e-6502-47e0-81fe-96c44b7a4c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6324e0b5-9d96-4b18-a015-8489a3098347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31ed7bfc-a449-4cdb-86ae-da4f5a4853ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747badb8-46fe-4730-a34b-8306e04a083d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "078f72dd-8d21-4761-8f02-11e04e8240c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa19731-b672-46e0-9ba3-2c71fd3f4c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8012d877-6d3b-4c68-a98f-2fd35adbcae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe5666b-fb5b-4eb9-b065-012e964da81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63751ea1-0874-4c4a-956d-42db0a95ef5d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb31f95-7147-4262-9ff6-c3f9aa20b188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9699f7-4eb5-4a96-84b0-a6aab5ec42e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c82c60-fd78-4a95-9f58-e143728f27a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed71f9c-4439-48ff-9960-2a5b544983f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93dc11e-ab65-4992-b999-10a1a1677b15",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa38003-dca8-45c1-a7a7-9d276bae1399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23f20ca-4777-461b-b3c8-91bf04535b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20621e7c-2f99-47c2-a90e-593638d5d6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e302cfa2-cb55-4860-a93e-fcd39de8fc60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ef46f4-9b84-40af-a6ea-b1eb1f97e4d3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b82467-2e8b-44ba-a19c-4c76202789bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce8d287-703b-4b3f-b670-980e22f0c941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0190fe-57d0-432f-9949-94e412e20d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6761f814-0723-4d13-88bf-88ac7e41f35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f60df86-83c0-4c7c-a00b-b3c61d27bc3f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1470441-8fb1-4972-89e7-68e76c31d7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d39ff1-9434-4c44-9181-1c1986caebd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e967fb4f-1e46-4ab6-ad8c-b1a89d3a8dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99dd2ad6-dd87-4feb-b86e-caba5ddffaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11466d8-732d-45fc-a5ae-07e80a6991a2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69475377-4c5b-4a57-abcc-9761f0072475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7882f37-d115-4e9f-8a02-ee055aade16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47e04d4-8556-4226-b669-82e5c489fd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0635711c-56f9-4d33-a8dd-7dea741a466d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8fae4b-3e50-4095-9e2b-c71b852c2464",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8611ac7-1226-4439-99f2-746370f52e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfe2d0e-4b28-40f2-aaf1-94e3272c8350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6ef56b-7bd4-4f83-8b06-7864a77c50cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b294a4d9-ec77-48c5-ab03-ca6d7a13c7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b30489-8d6f-409d-ac33-ecaa3ca64648",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0524a9be-1f9f-4754-ac68-acd1b90b26e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b62dce2-ddcd-49f7-af66-db28e6062123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da77ad32-f9d4-4816-8f0c-6eca30fa6380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "81d219d5-37d3-42ca-a248-cdb1cc170d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5b9531-3e2d-490a-a9ab-5761b0294a06",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57dbffec-945b-4fce-b855-7c8a9e8a00b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6c7d19e-5a70-4c42-a8af-bf869854c69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124c835d-f0d0-4f65-a7aa-a63dbc4f5c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3456b3-95ba-442c-a237-289b9e31bcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635a5f5f-55c8-4356-98c1-77b36f0d184d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623345bb-7c80-45be-b9f1-e324f7086cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369958a6-d88d-452a-83c5-5b3a217e0c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b1d19e-2859-4458-bd4c-6c537aeb9712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe1bf89-9125-467b-8c9a-787aaf258d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36fc3b4-3e0a-4595-ba75-43f7dee39e34",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4723db-be09-4266-978f-6f807a686954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceb6038f-c8ad-4a8b-b6ee-f6d7b7414acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2df901-ddcb-4909-8ccd-fd5d8594608f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "72d760b7-3a81-40d4-889d-5ec8d52f9af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddb5154-9f20-4d66-ac7e-4415b7ff992c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfa5de0-3e67-4fa9-9cfb-ecb49bca67ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9711d875-0d3f-49dc-bc4e-14c160b09a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53949ba9-6907-4795-b885-e5aaae30bc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "84b1d441-827d-4bc7-b62e-f4142f4ba377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d555e305-dd30-4e8c-95fb-df3aacb8941f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5d61e1-0452-434d-a4f9-bf8bc26f3c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca0f676-dec7-4d49-bc59-56ced1ba8b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab094bcf-f9b4-464f-b2ea-f67219dc576d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "21ae7384-1541-4d38-bf53-e3933f0ec5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9199a6d-54fc-497e-bf3a-1f10a46df5ba",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788aba65-0b28-499c-a9f3-d5aec2b0204a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e58ca72-7600-4fcf-8114-786fa7f4ecd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31753257-fe2d-4ac5-a912-8c1447ea1ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d15d921-0ebc-4bea-a53b-31ddc8b0f1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea9e36e-6bfb-4d71-8aae-a488dd14e424",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ac2918-129d-4b8f-ad69-4f0b73b09f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7144a91b-7ce5-4be0-98ce-b58d129ca656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a3b0d8-5786-4024-a70d-b6e9e5e511a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "967315b6-44a5-4daf-b1a2-6afc5b7907d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073cf042-7028-42e5-9191-134a3d6c956a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841e09fb-6b4c-4218-bfa5-269e4fd39d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8735f74-05b9-424a-9acb-a1ad3b27e3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09e5811-067d-4ae6-aa8b-389b57502666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbf0874-da78-4ebc-b9ab-05cb0f0589ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d62b4e-ab73-4f23-9368-128b1f75309c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c830a135-d619-400a-bfda-4772ba6db2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7ff00d-a145-45fc-ba8a-23a79655c5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c75c422-b9d5-4ce8-b4bf-a8da7c100a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "967ba3e1-ed33-40da-905f-2daf39eb364a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846ef194-e556-412e-b061-db3b4d454b73",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5b6704-9358-415e-91c5-6f7338dbf062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a20d2d-0aac-41a5-8b6b-f4b052cb4ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec24861-18d5-47a1-bc73-1085015d50e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbdbe9e6-72d1-4d86-906f-b48b639319db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8806f0b6-22aa-446d-9ae8-5d4f8aa6faca",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8934c632-495e-4e8d-ae7e-bcdd73ef627b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868ef42f-3762-46d0-8209-16e505c55008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e706a4cf-dad9-4d98-9c20-30551580fbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "522e3e84-a623-4952-83ec-d797d56f5058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a43e63-65d9-4bf3-8bc6-8c9033e2d2ba",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e14478d-085c-4bce-b0ee-f663ae9e5e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea65e63-0eb3-4c13-b059-c481bf7bd32b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4df569-91c9-408f-a1b4-3a962fb676a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8679a6-fd3f-4991-b1fb-5e5725ab1afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582ebc1e-64a6-49cb-943b-8b8f5147bc4e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7c00aa-1366-4945-ad6f-dde7df3494cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3bffe6c-fce7-40bc-93b5-d4b539112805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b10a68-6f5b-42db-b302-b32a24965d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de2cd6c5-5bc2-4a1a-b44c-e9a778d16ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d4d77c-e518-432a-9e47-4b72e388fbe2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1edf8b-15cf-41f9-9c43-5bc234ce97d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777afb09-5f11-4b29-b86c-176c346e7bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6a73c0-3a9e-486f-9dc6-4dc594882341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dfdccc7-af97-4b69-b72b-d4a98f7289e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dd764a-792e-4999-9c2c-dbade11f599c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0d20f8-884e-4631-a371-c9e9f59d0a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c260abd-d9f9-46d5-8228-4141104df004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2de183-4b5f-458d-94dd-5fc7378711de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0e4889-a197-495f-a5ad-7b158529d2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0ad380-6050-4e33-befc-c2f50a92eab3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cb98ae-8638-4290-a689-b5c4e6bf6d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ab7905-c6a1-48fe-832e-f41ba9c668d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afeec53b-2350-4927-be51-adf84f101564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9baf3d19-cd64-4039-a3e5-aa334f76c386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44751be-e70d-4baf-8007-5c3830868225",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9954def2-bf22-4504-8402-c4517f21d414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555bafe9-602b-4169-bb93-3fbe64b6d2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474015bd-76a3-446c-8ec8-7b424f841a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa8f1c9-5405-4a98-be6a-a37f5f907a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542efe10-98c4-4309-af75-1bcb2c94a54b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0def1525-ef98-49a7-a007-c683dbd489c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228c6514-1d39-4749-b66f-2369ee25d7c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b8cae9-2563-4096-8f04-d21460b3664e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e696d60-ff97-4049-b36e-92af9be405fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf77524-a713-4718-b9fb-a058950c951b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba452b93-c12f-40da-a9f0-57a2104d80d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2d37cd-c52b-490a-b3b3-6c465661118b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d8dc53-e4c3-4339-b2e8-0bb0d33e5f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3cf5631-e91e-43ae-b5b6-4986df238792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47f90be-100f-4671-8c38-b31d0fc3795c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad526dd0-3ac4-41ef-b7fe-1225556082fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e19c06-b760-4d09-98aa-7e73c4ad319c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caebe589-c672-4a54-a3d5-cc3ac6d9f75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8185ddc5-14fd-4485-a9cb-56d80df47af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2bdec4-3143-40bf-a1c4-9444ece0884e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671efe46-24b6-4e01-8b89-bee36194a428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0558e192-d4e2-49c3-993c-76d2ca6666c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc4586d-7900-4f72-b76e-367cca5e63fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2a707b-fd23-40c5-94b8-488f5d681067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf7752d-4e3f-4f13-ab14-e9ed2c179784",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307a2e6a-fe06-44db-af62-71bf1d4f364f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbc455d-3151-4571-a5c4-2625f1a668e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfcac8d-51aa-48e4-8bb1-c020fa5bd61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b762589-ad47-4f2c-8351-454272b4b83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d542a8af-b1a8-4014-a9d1-c982fcc93881",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3e66c0-aab7-4b5c-8159-3895d6e88549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3309491-a000-4b07-821b-6eeddca84860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5779b9-8579-488c-92c2-4b3540c0792e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "be4151e1-527f-4a85-9906-5f93799d4d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7872bc-949f-4084-89f9-83fd610df753",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6df5451-a7e7-481d-bdfa-761a14b3c435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f36f5e-c579-4548-a734-754bd4037eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448615a1-97b2-43aa-a268-b5bfdd471025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a42234-ba12-4d5a-8c87-459f3cc5bef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1961fe-bfa4-48cc-9b64-b4cae3d39ad5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d93dbc2-cb41-4c88-8c8d-77bad1a349f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f502afc-dace-4a3b-b424-24465053c696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a62792a-60e1-48c6-95d4-36cc5cd3c5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "172d6afd-094f-49f4-b086-ff3e698eac4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3d2fe8-1e7a-424a-9761-0b4aefeccee2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f79ce66-b14c-4a9d-b94d-fdee46a802c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399413f8-5316-436e-974f-1d07c862d10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7e68ee-0a83-4ad7-9311-58f316df3c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd3ab22-119f-4d6f-9e75-28fb0ed0001e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d799342b-6f3d-4933-b392-950d8d349e3b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199b4dca-12b7-46fc-86a5-14e9c3c8f7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ade91b-9218-457d-83de-711debd67a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba121272-3a4f-47f5-8a25-790e7297f15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1860ec-821f-465b-be9d-70d56732b270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc7fa46-6632-4aea-9f8f-9eae6d2f0beb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5d2002-d00d-4266-a687-4cc92976bc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "648b92e3-4946-48b4-9317-958bf46e96bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73da0a0f-9728-4cce-b692-099b4b24874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e5f6ae-856f-4510-aee3-98b089d4ef1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5baefe40-0e08-4a97-af60-258f7bb43314",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a42fc8-587d-4c1a-9c86-5428a910cdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0d6476-4dfd-432d-a702-593cfef4aeec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c4e6f1-aaf1-4fdf-b64f-8624a98b7651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "685bbcc1-0a3c-43e0-9c20-8ea39b251ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f47f16-a2de-4f96-8101-5f7b2fd730f2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d982949f-d9ec-4372-9319-8c8d2b77c99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc65b36-8d54-4fa8-8061-f34c9d552eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ad0ac3-a6e0-42f9-8316-6b8f94f2a134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "617a691f-a966-4e98-b2db-8987e47a78d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583b4d67-778f-4846-a5df-cdf156907315",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a975d83a-ac28-46ab-aaa4-cd00d161401f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64061de0-7f4c-41d0-a988-d73d7d6fb701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0a5be9-4295-4c6b-8546-cd02d1a7edc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb5394d-8c39-480e-a1b6-e99afe5b5fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d54d919-d587-486b-ac0e-f698b722346a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf83c2da-0ebe-4627-9304-42707e05896a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a200192b-159c-4a9b-90f3-92ecb42cf8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aeba504-e8a5-4856-9033-27f521337136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "916dea1b-efad-42ef-9754-7cee29316fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b91aa33-313f-4661-8616-ae488de59d77",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9330628c-578f-4178-b2d3-d9f5d66ec4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93bd480-f399-4fcc-a857-74f2a2118a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb6000b-e3fc-47d5-9425-e6e0a9338cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9695f55d-b465-4a27-a207-4781b44f11e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed98dbf-1672-481f-ad1e-791b7d361f2d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1113af3-1fe9-4832-a471-6fed7775ff7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9447ba65-e446-4666-b804-d263e428a028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332d09a7-b585-49c6-b132-a12a04602874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2230d37-bb93-476c-975c-4e8d224f2f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192e20c9-afb1-4633-9902-8e40731a9a7f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5a7fac-59f8-48a5-bb63-72f607055b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781e5eb4-59ee-4360-9c18-8bd2914bcaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e3fae2-1de3-4b1e-9db6-9df8979ae3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4085adb2-033e-42d9-aefd-0acbc1574019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e9de4c-1221-442b-8989-926b58038af0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ef2482-7fc0-454e-bcc6-32057684f194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876b3cf2-7c48-4bcc-aaa8-68b3d1c11243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeaa796e-7e4d-474a-87dc-5abaf58ac0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5052760f-5b39-480d-81a5-916f47676be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5115f51f-4900-4b43-99b4-09db623a19ee",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3890b078-42f0-4617-ab02-cbd7cde7c32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c1cdee-27e0-4495-874a-fe7251a53d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718d41e4-bf8c-48ff-a1db-9c8ea86d595a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88fa21a9-4a43-4655-8aca-4aed057be97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d187f749-c101-4116-8929-603441546eb9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0ef6a4-406c-49d4-89fd-84f87e72e1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c09d19f-b202-4ead-8c81-360d308b77d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095ab227-5307-4d53-b22c-6e67836fc96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb06cb9-061e-4cb7-9565-8f9e4e1789a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dc0bf0-6081-4d90-91c4-bd4c71fcf8f3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6a6e90-e046-4c49-8ba4-3493d51f27e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4699b38e-6231-4cb5-8e12-4b98cc0ebb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c836192-6b96-4131-8c51-82acfab51569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06ef1f12-1a3b-47d8-a603-9f82ef6fcfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596d03ee-e306-48e4-976c-c5e8ed64abe0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05decdd9-e668-4a57-abd1-90c8e86ec44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6433b7b6-3959-49b7-8f91-7bb2b54dd6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae53e15b-be03-4e92-bd7c-8e4afb773621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "042ff189-414e-4eac-8ceb-605b1cdb896b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54253912-53ba-41fa-96a1-d21cc3d8f698",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055b212d-3e52-4036-ad5f-be649a8cc4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f387896-bc9f-4120-8856-987f6b8070e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583d484c-7706-428f-a61c-7736d3d5dfda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6f8db8-26f9-4f40-82f1-04665fc218fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd75ddc-1fb8-431e-b5e9-2761576c9b45",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e7fe5f-5cc9-4177-ae0e-905fe1ae322e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9d6a98-42ae-4404-bb4a-a240c2bc1335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53246cc5-ab3a-46ff-bfbd-df48b1f19ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "777befd2-a0cc-48a3-9513-4e8d0842e66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1308162d-08af-4465-8d8f-4ad21f7dba7e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de246da-8043-4ac7-be8b-dae59bd8c45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f193b3-9e07-460d-b76b-fbe1aae50366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39833a7b-9671-494f-bd09-3a7aeaffe329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0720dff-41df-4a62-ad46-9fda2757bb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd236a6-b067-4963-8b57-577ed9cc949e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75a0db2-97a4-49cd-b70d-58d71cb03610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1caf10-6753-4869-aacd-7920ec8e28a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530d263f-c269-4384-9d64-a5981a8d62bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "af795858-d3ae-46b0-8561-206ea9a38d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b89add1-afc5-466d-bc97-262bd0bfcd50",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71de083-d897-457b-af7c-87acc04f81f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cba800-13d3-451d-8da3-0a1ccf700ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1f112e-a1af-4e27-8ca5-d7254e5e9a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f07384db-0c27-4b61-abbb-a7832dc4a4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea349e5a-3777-4375-bf2c-4a84314cbde7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da73b3d-6da9-49d6-bf9c-f12e23b11f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da87c3d-c6c1-4baf-82f2-a24c7bc08404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0946b979-28ea-449f-be05-d134b5a0757e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7efebae9-ac7b-4a92-b5b6-e2e38d08e9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c72cb3-bd6f-426f-a2a6-3314178f088c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a334b5fa-48a0-45c3-a647-e46484bc81d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072ce2ed-1dc5-4586-af50-2ff4500004fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee6b8b0-2c1b-451a-9065-df2498e1ef21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ad55fa-ce77-4470-a2ee-e16d3b6edf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958ae364-4d79-4492-8c0c-1e3318a63815",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ec3ea2-4ab0-4edd-9f85-f9bb37fee741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e42681e2-b851-45fc-9f43-7ce23e43f240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4c41d6-ccb4-4e9e-90d8-5a2c6000017c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b84c76a-45d2-48c7-82f2-6874086e9a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea52fb54-0b0b-492d-b5a8-a11d0c926ace",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb73717-e002-49f7-b36b-350640b1af2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103e3b4b-43c1-41c0-a445-7ced73c82484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705012bc-d727-41fb-86e6-eead08430bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e88ad8dd-f6fc-461b-8ce7-f6b3077f995d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bb45e2-066e-4e66-8d3c-85ddc760047c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bab4111-af94-4cef-9f33-afb3b73f6b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af888ab-af66-441e-b881-67bca3cbe343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e1c20b-abaf-470f-aefc-351dd6fd2ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "427147a8-f51d-44eb-b4b1-1a366088bf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91984291-e844-4709-8cee-0d97097dca12",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0063fd5e-63fc-4aa0-9ceb-407de9e99f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c68dc5-99a2-428c-80dd-057526d06436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea794eda-6133-450a-9a18-9e3eaccd2e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3b1344-d3ee-4107-8e89-2e19c6e5a22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc725f0d-ed5f-40bb-8102-2f5c9cafc407",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fc2fcf-c2bb-47ca-a72e-91faaa78884b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b00fc7b-d76c-45f4-9494-1ecada3152b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f396ab7c-9d64-4b91-9835-d302165afb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b88a5ab-ae03-47d2-90f9-59d1cc839d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f6f8e2-3eb7-413f-9e46-675e1073dc28",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9bb05b-fe5d-4414-9656-927cd5a6e014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0de10c-9c2b-415f-88c9-46cf64e32a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798fe40b-8cf2-410c-a174-19f27a7c0169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0884f29c-78f3-4fa8-a84c-7995bdae676b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f00b125-ddff-4533-b9ea-00594bbbf519",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7cd775-9483-4536-954e-342a90c3dd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d615d5-6d9c-48ac-a8f1-574f12d78b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cdbb8b-329a-4e3f-a64b-757775c02852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d47f5c27-2a52-42f2-96cf-4ea95abb6db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246b53e6-1097-4805-b4f0-38da92d1e0cc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c899c4b7-2b90-41e6-8698-9b6c3a06d83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f5750a-ceb9-489a-9f05-32c8844fac6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250d6622-c076-43a3-bda8-09cd29550b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "476af90f-7bfc-41d1-a9aa-494a890de3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b6c8c1-ec21-44aa-85e4-01a084484ffc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fc2112-7aef-46a0-a871-6d549b8e688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7934716-5ac1-4cc0-ac30-3aee6066330e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39901c28-2406-4124-823e-d8dc647ab794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "017d1cd0-9caf-430d-87a6-d63c9477cc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed6a13e-098e-42b5-a374-9840e83b82d5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5e0520-b579-4e46-9437-c5ad7e9828cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "068f653e-1518-479d-8cf4-54faeb57a09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931f9d7a-d8db-4da9-9a81-0dea24070d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51defd26-40df-4571-9538-1b8287acfcac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0010f282-ddc4-4b76-ab89-c060bf953dac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "969f0ae9-62e1-4ce5-963b-b0c3da412cdd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9469752-4a04-4bd9-a6f4-ce6b6f308caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a53ca87-17d3-4c4f-9d31-2cd0607c3a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fba042-4179-4684-927a-3dea81e36d1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f994a910-420e-4b76-9ccf-e6a9baca3a3a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c3cfba9-b47e-49d3-973a-d5a47cb88ab8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe51a33b-5662-4ed8-af7d-6996152ad87e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8927730c-fa39-4092-8c7e-0a05e8af66b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7156faad-2013-451e-8131-dc29fc8eb9de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18dea63a-875c-4645-abb3-98a81eb76ecd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba61ad53-9f01-4550-9582-fbf921cd35e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5cfa4d7a-66f5-4875-aeb6-baf773acd49e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3fd9699-d9de-4579-88a3-109e429947d4"
                }
              }
            ]
          },
          {
            "id": "8d89dc9a-07ba-45f1-8d70-7c6152118990",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a52e694b-328f-4af7-967c-0ab55ab9a82c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca174596-addd-43ba-ba72-92e132ed3abd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5e2d33e-a7c8-428f-88ee-9851e4886529"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48e51958-539f-4975-9079-5c0cde0e74da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2da53f20-8b79-4761-8c1d-bef8bf42a0eb"
                    }
                  }
                ]
              },
              {
                "id": "bcac421b-46ad-484d-8105-1aa49038bf58",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56b52169-a60e-4200-ae45-0a93f08e76d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39718345-4d94-480d-9a40-b014640cade0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fdb95871-e19d-48bc-8a29-b85ddf807845",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cb2c59b3-bc22-4e44-8fbc-cbd91071ff44"
                    }
                  }
                ]
              },
              {
                "id": "43e3a77f-92db-4175-87c2-797bf27b847c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07acb90c-0a64-4808-b14d-60161cc03a56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9c662fe-c039-493c-93c2-94e2286ef6a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2d22494-0789-43e4-9b72-c4cd5057fcc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ed7fe2cd-c056-49c8-987c-371a8fa85b77"
                    }
                  }
                ]
              },
              {
                "id": "f8275a6f-2654-4f2c-b068-809c6ffd7a0b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dbdf313-12f8-4f9d-824b-1a951c80b937",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74830e96-69e9-4e2b-a19b-4da1afd0947b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89b66e5f-4b29-40d4-a639-ca2ed06daf41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "87fffd77-9fe5-479b-88c5-a925438145a6"
                    }
                  }
                ]
              },
              {
                "id": "f377b8bc-c21c-4e6f-8e8b-24f415c61985",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0227b810-aaf0-4ec4-b47b-a27a737f7f6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4247e62-8bb0-4d9a-bf9b-778a04a67781"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b98c8235-0d8b-4e3a-8c04-d6f5ee024f13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "06832bd8-d9b9-4fba-81eb-520be1c9be2c"
                    }
                  }
                ]
              },
              {
                "id": "21e69bbc-5d87-4edb-b8ea-e5db4dfdc62d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1b21238-6c4d-42f1-b7fd-35dc2755daf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a72a1fe-3e0a-4e2b-b760-71bc910b6652"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "179acdb6-1195-4e73-b9fb-fe8c90713363",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d1b1084-74da-4c80-ae96-6ab9bb0847de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac6bdb02-b910-4d4b-b11a-d6278bd83294",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac084b7d-6f20-4e3d-89be-1a40df96c723"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "79405f99-4722-4b1e-9435-95021c49ed18",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a94b8ce9-6ed3-4f2f-9e5c-665b2ed8c867"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb0659dc-af6e-4db5-aeac-6bb0dbcbfbcf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "39af17de-ef32-4ee7-9fc6-ae680bcd7fc8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9384d046-3836-491c-aa61-d3d456210024",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c902542b-973f-41d4-8efc-7000d8413cc5"
            }
          }
        ]
      },
      {
        "id": "50be5182-d9bb-4e28-b059-842cf19fac90",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "33d5e36c-d0ef-4476-b6d0-771ef3bfaf54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40d82a55-0165-49ec-9546-efa9064317e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "980f919b-3917-4c64-9bb2-7bb982890967",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482bb04b-0e0b-4916-8676-1f2cdb7f4bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1623e3cb-1fde-43fe-a0e3-f5e934a96b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afb248a-f286-48fc-9fe4-2c5bdbb3b841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b1c0da-94de-4d90-adbf-a4fd0c9985c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae2f97d-6a13-4be9-bafc-72854f7a9106",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a9f7d6-344e-4eb4-aaf5-9d199fe711a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1141bf1-53e7-4af6-b441-93726e5c7936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3088fdb5-4274-498b-a19a-bd93e458cbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac91bf0-f12d-4530-afc0-110341c3fe61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f317918-e85f-4a6e-b60a-76cd8b244d58",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bc0a8d-30fe-4974-8f13-d415d7e26587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4884aa62-e492-4da2-97fb-da1a83326bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62b85af-d3e9-447f-9a3e-97fc687e42f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5d5aac-02db-4591-a970-ed76490b00da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b0b22d-0f98-4668-8937-eec76905e278",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b148aea3-f268-45f9-92a1-54704750ecb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b64636d-35d1-42fc-87fc-547777f9f77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df01cfe7-488e-4a90-8cc1-2dd3e7da9203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c0b9ec-c058-4a8f-a5e7-e34441529041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9faa56-80df-4337-bacf-1f3948df0508",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f30e724-2225-4dce-b3aa-ba8b3fba71e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c2bc1d-ec5a-4a18-a437-c4208102a3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc370881-11ea-44d9-911b-d1068dbb286b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c96ce1ac-9f26-416d-93bc-1ce3de6e0f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c9172f-b3be-44bf-a6a0-8c6fbbb33f74",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68047964-03ef-413e-88e2-aa6a64268de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f9b5af-8091-4a73-a885-821b38b010a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbc522d-29a2-4c04-af36-0a943f37ad5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ca8ca7-03f9-4fd0-b978-9556340baf4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9c0465-4b90-474a-8553-0d3b226e414e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9700f6ee-2a46-4d99-8694-4f0ea877ea85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea9fd16-f913-4077-9580-d52ae48aef98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46444486-6f42-4a12-b427-c9ad580b21fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "86a602e5-ae01-4b9e-9e39-995a92591a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5993c7-4270-4dbe-9a0c-e7442f8adaaf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aae2395-4f87-4c3a-a445-953b517aab01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9712e656-6345-4cc6-85c9-2eaee0282b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aacb36b-d91f-40b3-b283-24a34790e091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33195ae2-ef79-48b3-a486-a5cf52bcd76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec79dfc-04a5-4c89-80d3-1183e2bbeec4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7af12b-99d9-484c-b77c-cbe2aa42d288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7229899d-26d4-4927-8775-2e03a9e6da1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7025b1-bd5f-4506-8f3c-3bce17b1fb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a96ee9-4e7d-468f-8177-c67620127cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d14d36-21e7-449b-ae0a-e0c8613fc1ef",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d59e277-c13e-4f85-8a8c-a875e6fa3e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107376ed-4f45-4950-88a6-b00c1abe0f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e507dafd-850e-4a34-9ac6-ec598855457b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3cc129d-76f5-4611-bac1-07741dff690f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f74762-5968-4b67-a41b-171daad06865",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ab7873-cd3a-481d-bf42-98f2b7dbde5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ae3c08-61da-4f4b-a33f-80a83063ca3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a93769a-1669-4f12-b169-e011d37db663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4098ca-ced1-41da-9e32-6a0149d703c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffde4e2-529e-40e4-ab60-a82dcc549435",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9147db4-c2a3-460e-a44c-96b19cd8f379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1560e27-6dc5-4bc0-820f-3b869e482a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29918415-a407-4bcf-b927-8085bdbffbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da5eb52e-d794-4d76-9ca3-acd0cc825957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b772de-0b04-4dc8-b393-c4860b04f80a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31337980-b4cd-4148-a84e-b63b9465a374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc85e333-888f-4190-9237-004ef7b2a78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63b1947-170b-483f-ac69-8c2b6d832ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed3792d-c260-495f-ad66-5d27f744769f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ced90bc-6082-4d4f-a031-f65839af9b03",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad97bb35-b883-46f7-b90c-c2cea6035f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbfed989-8bbd-4c0b-8d6e-9365791e0407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b844e0-77a4-4967-99da-854502528523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c17bcac3-5285-45c0-ab94-c7972ccbff23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967dd211-6ba8-4878-ab33-bff078996309",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85d31a6-442a-401f-8cc6-d713fff7a3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5824ac5-b12c-47eb-bf98-39ff660c7092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e3fca6-e88a-476a-808a-8501da684c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "529d9aeb-0c05-4890-b788-c7fb45fb1a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fc2b8e-21f0-486e-b02f-dbf207bf90ad",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0459a8f-f1b6-4665-b085-d6462f0417aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad4f2ed-ff8c-4ea4-9c1e-831413896199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7989f4a0-8e81-4026-a92b-f095b679b632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "263b9506-4ca0-4176-9794-c70a4f6d22bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2655cf8-1dd3-48be-8238-72e7da17758b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb130d-eb4b-4a3b-9570-2c28d65e284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d8eeca-de49-4d3a-aaac-e1f0fc722c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594d041f-ec7a-494a-8231-6c42a96c440f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d70edd91-1609-46b4-a365-bcff0151c774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a954f9-ed35-4c09-b573-dd3a3c0bac1d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c1d8d0-e9a8-4293-8a80-e7e20ba9ff46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a32ddbf-1585-41e3-83d8-4680cf7dd5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fabaa57-3727-4397-a46b-ede85af11b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b846ba1-4178-4685-8862-1f8dbd4fe068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd801063-1f5a-41e1-ab8f-7cb99f88af6a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bceaa9-8cde-4182-b506-4cc98b55f5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e37a12-e92d-46b4-9805-ab313826eb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89359217-73d2-432b-994a-5acbbc823f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d10a627-c42c-44b0-825a-0cf925185341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a811e4b0-6360-4cf0-9b57-242133543c51",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a823a02-f69d-4382-9524-359ed8356a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c44757-a7b5-4601-bcd5-b9256ae4f58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9917e8-3bdf-4b93-a781-db5fec50bfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5339524d-43ba-433e-b81d-95f0d15c975a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4104ca-2c02-4380-92e4-de487b3b991b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad6b192-d584-474c-943f-84c8048c8a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59141ec3-09a8-4831-978b-ef58efb7eb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adec5f00-9dc5-4aaf-b33f-67bdf6809a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f6f1a6-af7a-44f6-9a3f-53dc10456497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0c3f32-ca6b-4f03-bf29-730059daf90c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40d8869-75cd-4254-bb6b-cf4851e48ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d9ba0c-03ba-471a-973b-1fb451813d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c7863b-bae4-4a39-bbeb-85d44d24c524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e55e5d5-a3a7-4068-a97e-19a254dd5d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2a4074-3ee9-4caa-bbc7-c9e5528ad107",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba77d23-ea5f-4af8-a78c-f8eaf9c36e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b3e67f-222a-4015-a15d-69ca4d4cd9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd398161-1801-4c2a-83ad-785dcf2e5171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06f4e53c-f72f-45b4-ac66-0a10befd1a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d9d694-aa06-4fda-b30d-bb2603269efa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869f2fe8-1d5d-4295-a841-45c53ebe6230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c2f1e3-e92b-47d2-b39b-2862056135ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd89bc4e-82dd-4c92-a243-c69f616dfa8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7763c2d8-53eb-4ab0-b80b-18a6c62ff901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130b9321-58d3-4cf3-aafe-dc80885be874",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14679509-dbbe-442d-9eff-f935b4445632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a5bd46-d0ef-45b2-8d73-2ef01761d25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966f2d06-0103-4935-aaca-afb4fc045668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8222aacb-d492-4e0e-9553-82a2bc03187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d065e59c-d682-4436-afe1-180edd17b223",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a759cbd7-adf6-46fc-bbab-c151d629b143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6cf4a6-a20c-40ac-9b0d-c541f27ac0cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d4ce4a-2084-4ed7-a41d-7b8acd66299a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac411cc-705a-49fb-bb8a-95494eeadba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1108b19e-338e-4a3d-9fbb-01035b24e2fa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1443a2fb-d5bf-4c08-9ae5-22a4ba507c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c15174-6de5-482e-b81d-e2b233f6eaf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392840ba-d487-4215-9720-e52b01e50ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ede6f4f-032b-4c67-99c1-2abc26a830c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af5891d-e900-4486-a0b4-d2ec01fbdbcf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3a0a5a-3ebb-4ede-8061-1f4f9389af08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36dc1566-81d1-4813-bf6c-f6a91691365d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dff981f-2b7a-46cf-a5ef-40ea6b073f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c24f8d-8db6-45ae-936a-6c640606e928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa8e62e-5a5d-42c1-be32-91037723bb13",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab00dd18-ec04-4f64-a8ec-da651e0702dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fd0fa1d-e5fd-4e2f-9a10-ae8a19ba75f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ec296f-72a2-4737-aac1-7d98f009b3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bda97fe-37ca-4d4f-8ca6-a80cdccd88cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8a8442-d200-49e5-8799-033c88be4767",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6580b7f9-5f60-4199-bfa8-28b075b1fe5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfb7fee-fd48-4051-821d-a1492252deaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea50df9-0ec2-4978-b684-aa6cf6035942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19688af0-e183-4c3e-a2fd-8749bb87cbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fcb852-58b7-4142-949b-ea797a8b041f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566d88ae-338e-4308-b092-1671ac960ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c730262e-9fec-44ee-bc15-b5a591a41216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa7a8c2-227f-4c00-a551-1fda3b8d3f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5918923-5e73-42f4-b704-51e6c002b0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbf219b-52bd-48da-af3e-e1d0d8cc73d6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdf1f0f-94b7-4bb1-b670-c850312dff1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe2a027-5156-4032-8ae9-46fe759bc5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86281f02-a412-4e88-89d7-b5732b5957b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3bf58e-7b7b-4b7e-9f73-07b73a298ec2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "059004a4-d57a-4f48-b25b-8a728a532d02",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d85562e1-c66e-4bd1-9089-30aa6da47b33",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8857157-0a06-42c0-9b7a-8f88faae6040",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c0abc70e-b528-492e-918b-41ea9d7fe528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb9690a-62bd-4d99-9d9e-7e4e267198e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c688054b-1d65-4a2d-bf47-a156ae9416db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60322e0a-e41f-4b00-9c29-5005f5dc8972",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7230dd9e-47d9-491e-99b0-9ed422382f75"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae80dd3d-7232-4ec1-89d9-7fda4a01b8a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc78698b-8afa-44a9-b3a6-d2ba3f61bc83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62068fc6-c62c-46d3-bed1-6a9ea0b753ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "31427c7e-3a90-4638-be67-3955879400ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dece228-9166-48ce-8e04-879f8a651147",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25cfbe22-ab20-4f57-9276-fc16c014a861"
            }
          }
        ]
      },
      {
        "id": "93b0342f-20a9-47c6-82ba-9ce5708eb75b",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5830dc69-da66-4173-8cc8-7fb2d5ae3486",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da8e395d-904e-4ed7-acdc-78c279c5e5cb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ed499623-6278-4d2e-82a1-9b974326f5a5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9118dfb8-53dd-4573-b8e5-31a292f83e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8b2ee6-aca4-43ff-801e-bf0a5f7483f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36a4aed-47d3-4d39-a8b8-e25585f6cae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "30f7782c-8915-4f51-993f-85802f46d3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987a9df2-4ad9-4544-95e4-058c4014ffd0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e6bdb9-e225-4e7c-9689-5e4b5468e307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f3196f-6d37-41bf-ad75-b6dcd94b5e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c713dab8-bfac-4ec7-a59c-04b974369efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20145da4-ad1c-4e53-a789-0ceb17d6fecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fc278e-443e-4341-a0c8-0af6aaf216c0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abd968a-d361-42af-904d-54ae054ede9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d9a14e-1218-45dc-b2a3-98c92a36512c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52859474-cc9d-418c-8b82-dc2470e2227e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dceb12c0-3f3c-4726-b469-0a5c33876942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c90fcb-77c2-402c-8196-6d9e5f48296b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96e2c47-0107-449c-a890-d86d0ad1325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6adaa4bf-9a39-4d34-8ed4-58d97ad7833e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b83eeae-6235-4378-8866-6d28910fdb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77263ab8-9af0-44d4-968a-97f8ceaeca8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ec437a-b922-4fe2-92d0-a76885e38759",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f9c285-0ad8-42db-9bd6-348499c11473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482ffd25-a016-4ff3-ad60-f02020355921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0d3a73-c95a-4f18-8013-fe26cb5b0419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76e4c338-e1b1-4f2d-8914-38cf85aced25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3d5e32-c878-4186-a57c-5be244cbe96c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba0fa98-de44-4344-a2e2-2adf81cc1a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed109ec4-df21-4219-b514-9e8a226d7bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39126903-fe38-43bd-912d-6f28454b97f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a2e712-418c-4c23-95a5-f0ecf69bbd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8030db9-1bd7-4a6c-aa7d-c704e1a45894",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b814cba-19bd-471e-9428-084d4517d956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fed97d-4941-4b79-b84e-d32d9cafcb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7945074d-081c-48cf-9ee0-76e3366e8503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2fc7a2-5e60-488c-9a9b-ddf796c560bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af541f30-9451-44fc-85e3-a2215d4cc9e9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3dc023-aab7-4761-9f2a-5731eda1d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4b57ed-1308-483f-890d-09a830ef8b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc7cb28-145c-4175-9a22-c69120e6c630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77e67ac3-b814-4ec3-9728-ec75f53c2ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6082eb70-956a-4f53-858e-8d86bcefa6dc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c872c47c-a08b-4c4c-889b-d571f8bf6eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc27025-2c1e-426b-aeb1-e1f5abff19c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e81586-64fc-432f-bbde-caf5309b7d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1d5c56-8911-4243-965a-51ea06c34d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4560ec-07a4-4acc-9d7c-bbe5864ecd66",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72c52c2-01f6-40f5-b577-4d145dcde3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbf0ca8-ddd6-4dc6-a386-8319173e9bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05d3618-faf5-4df1-a1a8-d96fdce6ec03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87739b6d-00e3-4497-96d3-eb169207a8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6948645-fd05-458e-bb8f-3b68698fd0bd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be457c6-112f-4545-85c9-5dae5b7d65fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652bbba2-e5ee-4fe9-8189-9e3bda1d99b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67abf980-d225-4c2a-bbb2-5ed627ce0d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f62f8b7f-c230-43d8-8e60-acced7f997b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725e3e37-6833-4a6b-bf1e-596e722cc94b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c96bd2-4e17-4d5a-9309-b9c22bcf3154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaba345c-3d49-439a-a283-fbc0f8b9f665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4377e929-a84f-4cf9-a757-93f6f77ec4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ede13d89-ee70-4762-afa3-4b895e5cfa22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abdee60-ee65-417d-ae4e-cd40290db47a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac6a4e1-4fe2-4283-8158-de31e945faf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1045501-d1cb-4c5e-bd2e-9bdf1419f2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e30e95-b0ff-4ee5-ac99-66ea3feb32e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e91a66-0713-4ac7-8f35-181a4a463ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4066da-1633-4309-8004-fb480116b590",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937ff071-d8e7-42e5-94f6-9d50ac3a714b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1ed083-82f8-43d5-b86b-dd4acaa6a547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f47acd6-e6b9-4d73-b2ef-903e8b8083df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f82778-603b-47cf-87f1-61c26ca4204c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b269c6b7-ab50-48cd-a1b3-a861d5e3a370",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627ea2eb-82c7-4c65-b2d5-74bafaebaf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748a1edb-243b-4fa4-b7a5-314e4c44c754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7198b46d-61ad-43ac-996a-6f8c10c2ecec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93b2426-b5b9-409c-9010-caec92538e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64776385-bbf0-4b1a-ac61-0523d5dcd954",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71196e94-7706-4cab-a5b8-9dca7037411b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1588e8-0434-4d62-83e1-1fbeaaaf613b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6afe6f3-462d-4e26-b378-9713d30ff104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "89e79ad5-6c4c-48d7-b52e-f504f170bba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836e012f-e8b9-4ac0-95e5-79fffeaa093b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce9c6f7-9206-45c9-b098-33942a96b64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0077b438-821c-4f80-bc0c-5ca7e34b748c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4bbd7b-4e56-407f-931f-f189f459aaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7afc5eae-35ce-4ad0-aa16-7c080081d839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a053b8-d803-4408-9a46-b4a57fb8c52c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7395b72-9a70-4d53-a67b-1e0b7933faca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8741383c-d43c-4944-8f43-0c40547e8fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8eef077-3ad4-4928-a468-7ee8aa175932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b69d9f5f-0e3a-412c-9c0e-38ee4fb1e9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5f1a45-3084-4a03-9c0e-3a1e6fcece3c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5a02af-e0b2-4f39-a032-becbc1f26548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6daa3c9-3f35-45ce-baa3-e87d639f5dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad41c9a4-486b-4353-940d-4ce52a7bcf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11dd44ed-a779-4567-ac2a-27791138bdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881aff19-c875-403a-9ae8-e00d21883d32",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bf79fb-cf7e-42e9-8ee4-3bf25f280ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f510d2bb-56e9-4561-b889-46b206cc4d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a7a99f-4d3a-472d-af62-7a6929fd25cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b681dba-76e9-4468-83f9-34d1efcb6f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb77035-3704-4f7a-a497-97e37d2a9552",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d51f99a-bb77-4875-8ac2-1d8bf16706cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6feda572-a4e9-46b4-85d8-913fb7fbc9c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88a6544-b244-4868-bcfa-edb5bfe9b84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fad263fe-8b45-430e-91a7-d92f4ab9896b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065e92df-a791-4645-9840-7df227f5c857",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d154d73c-3587-44e2-8878-42e99841308f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77fab127-bd34-42c1-b0bc-9f765b54de84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e4d276-b6f7-4b05-bdc2-f9cd4e3a46d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c215414-2d71-4fa9-b45a-6f73d4524b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0429f5d9-fcc5-4347-9ead-64845cc6f27e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d09d1a-a96e-4ccf-bf5a-aadcec48ca99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17175168-16c8-4d03-979c-53ce90e6fee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd35092-8e34-488b-9015-70879882b9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8982f1e-435d-4c3f-82ad-b54efcd20e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315b2830-d625-405e-b791-99fa7ea5a537",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21de3f6-227a-4dc3-b0da-a775eca014b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cead8bd7-ca6a-4e02-95cd-94a2a400b436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f667419-4e97-492f-9080-0f8f7995d4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9350b116-678b-4f13-bc3a-c295403373f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b4f765-af39-477c-9484-3f8d3ac43307",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa18f94-e74a-46dc-950e-690fcfb1aed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f161ff8f-1b60-4fa5-817a-7c57e80ef7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96fe354-756a-49c6-9f37-5f78ca60d051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a58f472c-859b-4605-8820-eb341c1ff60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4daade29-8512-4cc2-9d6b-42b2cfadcf0c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900769a5-a6bb-44a6-8170-1db98456d121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9883ad-8acb-4814-ab3f-bf2a3c93614e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523145a5-6afd-4d00-bfcc-c634f0122045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "405e0bad-c097-49a9-aade-9f9a6f932545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4793172e-f857-4a8a-a8c2-058a0073a99e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076bac30-6b75-4f2f-9f98-8154fe1efce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d076b8c-2ec3-493f-9f4f-52eb2f63a772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbba642d-d103-44fd-87a8-667c5ebb8a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63a34e68-df65-4fa6-ae49-8a0816a52207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b527027-0c7f-4aad-8b60-fb82c34e2d3c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0a69c9-9763-44d8-a5e7-dfcdae5a2801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c13c86-fe6e-4084-a0b2-71d7b5546331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4d0c55-7fc9-448f-978a-801803f87556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "582cc69d-a06d-48dd-b152-3813d2f0ea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9779a8fa-5097-441f-beea-0839a45baf97",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6759363-6924-4021-b495-cd56a169c364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e54cf15-3c6c-48cf-96ef-b6863a6ad9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02e2432-9fb9-43ea-912f-378e295e9d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c876b3-65e0-4257-937e-66211c6ac2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbcb784-78bb-4f21-bf53-03601059339d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19297e6-d24a-4816-986c-7390b1e8c404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14478f0-7569-403f-992b-63dec86bee50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a311eb3d-ff02-4b2e-8858-8bbc6da33a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ce85cc-30db-404f-b653-0e13a8762bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac12460-d3f5-4f3c-bcd4-95a614065b22",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fc2f8d-c416-4aba-8a2e-8a4e207589b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6281d79f-826f-4f3d-b0b1-c4052458c4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebe6822-fcaa-462c-96c2-a7e1c9d4d7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e56f9347-a97e-485b-8063-6633b42e12cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdbe8be-9c9e-486d-b7a8-13fb8716969c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a39a2de-b1db-48fe-a5b6-95f908ac8442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e347e73-51f6-4dfb-a80d-1f521b834130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d7db9f-884e-453a-a6e0-c24a17d890c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb082db-a5d6-486c-a4c7-f525a8b7b10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8493f244-9c9a-4b05-8086-5a5a9e95547a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7881fea7-da66-4f60-b539-54889ff8de93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8103db7-7459-49f5-821d-f8e867dc7396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55980beb-cd46-464e-8d62-f23e152154ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0008ef-193a-4938-8d8f-972d19e7fb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5453965b-b41c-46d0-b606-60caff14285a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f38b41-b420-49e2-8788-0023bef35cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d13ea5-dee4-450e-8fab-519aadff6042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d7af6c-d9e7-4ab7-a9e5-b3eacf3dddea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4caeb84-c8b0-4133-9905-a5018c918118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b027bd72-2911-452d-b212-de372aec74ce",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96ef5c5-6e23-4410-ab91-bd08a165d65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc360f5e-d877-4b7e-a38a-4ba3cebbc4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d8f470-b24c-405b-bffc-bb82281ee745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e603db1f-e093-440e-9adb-53cf4ac95faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bfcd37-8949-4b4a-96c1-0d44402cabf0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f81f008-ae36-41e8-b90b-0f3ff868746b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0ca6e1-fd2b-451e-881f-0c5c129efe0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e756a9f2-5b79-4207-b0fe-be2efeae33bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4333b5ad-6ed0-42ee-8717-66f55b12fb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078ce87f-ce2f-4b1d-8171-476591fa950a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2a3e0d-5260-476b-95c8-c7b60a2a5a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c170eae0-8889-4f06-bb94-94acf2eb9895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091e3c8e-cfcc-4e2a-94ae-a83396f6d5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ec6b6c-d678-4a34-b33e-998ef7a40ece"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6c5525d0-c464-4d2b-8194-1ae5c7b2b222",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5601386-5eea-47a1-99a9-3b9583f9de8d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e14db81-b94a-4aa1-af7d-3e996c51ff64",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b041ac39-9fec-4607-a3e2-3036fd8578d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bababae-49df-40e8-a95a-4ca579b10afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26457659-a5da-424e-a4e1-e2235dea781a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee693c84-e3dc-4c73-8bfe-28b7d336f6a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd444ae8-f068-448e-a6b7-20b4423591fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60d840fa-e55e-41c4-8513-b2c0fd93b8a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0c129f9-cadd-4a62-a4c6-cbda5f326a75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48dd8f2b-fd79-481a-b51f-d31490d744c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "50f42beb-c464-4e3f-878d-fc3205302525"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95153880-1f63-4e32-8fa3-05c92ddda91b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9509d3b7-7632-41a2-8083-1beca595a918"
            }
          }
        ]
      },
      {
        "id": "d1cbe105-ac05-4881-a10f-e63735a31d25",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "80262439-3b2d-4c7a-b777-b511a8faffcd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cac12559-4f58-4f45-b58d-ce115622b89b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "920023fb-37a6-4de5-a6d7-189d2c7d9905",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc41dc9d-919a-443c-90c3-21be63379cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd65ed9-5425-4955-950c-e1c50960650f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99902997-e106-4ff0-8fbb-a088de80c1b6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0b0617-286d-4aa2-8024-8d41b9268718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60d7ffb-25ad-49b5-850c-5274c13f0d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dbca73-99c4-4495-9ee3-d0ff832a16dd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9020eef3-45fd-4746-8b1e-340b698836bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185ba9df-a19b-4960-831c-021eb0876180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9261e51-460d-4894-8e85-ad87b442d784",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56eba52f-c3f4-4ffb-abb1-1bcfcd869b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d139a413-1021-4e92-b73c-8eb050bdcc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7959f53b-ba29-41b8-8f1d-576f32652f99",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "481a9015-6790-4211-bbcc-8e39bcf5976e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740aff10-9656-4b77-9404-8ec3c5f7fbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6340fec3-c4dd-422f-b4bd-d9615f23ee81",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b852ac-d0c1-4c66-ab20-8965e30e43f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4721bf-82cc-4997-9d5e-edd073ec7c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcb7310-be0d-45c7-9f68-9b52d5f5dfdc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e41e6f-6b7d-49f9-9cf8-de473d2edaf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f4e74f-80d9-4e53-90f6-e284ad0cfb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0779ad3-0c51-4eb3-9015-f975e580b4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a0af3a-00fb-48da-8848-a9e238e21e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6ceffa-2b68-4e27-b9c3-e457ee32e356",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94063416-4f07-4fad-bc29-febbb8eaa918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a52b99-d8f5-42f7-aa4f-0e13d00053f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39367a41-a367-4aa9-9a97-b4fc95e9cf70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80d59db-e74e-4272-a2bb-428b2cbdf8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50394702-1b3f-4fb9-8a11-0990a37f9c92",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c68ebf-c6cb-4e9f-b747-81ed01d32eaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0314669a-7397-453f-9510-c47c27b4a5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1afa30-8ee3-4134-8c88-eec44fd8e6b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4d1d93-64a3-43e4-8fe8-56a0c0e2d6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34461bcb-5735-4220-bbeb-ccc4aac8d628",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f6da0b-beb3-425a-b661-7174328a28ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28cfc7ba-7afc-406d-b035-0f025daefcce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8a4138-aace-48e3-acd8-098a231e0d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934cd23c-12e6-48c6-9fbf-fc103737dca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b825f54c-887b-4779-9373-bcde606ba6bf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d8a229-65fa-4c37-96d4-8f876893feaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72944064-d91e-4a7c-a612-c6a4d9c6cf0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c0fbce-42d0-4223-a903-70d6b89f7e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3c6caa-e8da-4243-b873-25bb85246557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94566496-f43b-4f3e-9ea2-3ed6ee1f17ef",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385f9771-357e-448a-825b-3ba7dd736e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba402c6-df02-4200-a93d-3007201aec7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51253e0-a0fc-4944-a5fc-096efe00790e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d681bd-f128-4e1e-90ca-38a73715b66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdfc099-46c6-49bc-823f-ccf2988720d1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf6aca7-2c8d-4e71-869d-46fb010c5f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ef49cff-4f9f-474d-8cdf-dd2167bd20c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b8c8c9-d590-4a08-9d01-4ab9a716bedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40920cab-71af-45f1-aaf2-2776cdd1d28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d621dd1-cea2-4089-85cc-5c2f5f9fc2f8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6996c92-9bb0-4652-a232-12f331016c5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b53180e6-d99e-409c-88c6-33ca3e9decb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e447dc3-3336-47f4-841b-e7a8c04b80a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d84a37-7540-436c-a79d-580561225de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be32f6d0-8065-4967-af91-c4e610da677f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e370beaa-4ab8-4c7f-86cc-ad4f8a1da144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2187118-585c-4126-9448-63f03e5dec49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bce2b7-89e3-4eee-906f-ec722c7c9618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7ba319-57a3-4ba5-b140-8a6368d53b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195ff48c-6171-414e-a71c-f2ee7f260bcb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdde7801-f449-4f72-b756-0f7487966af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a33dbf15-39c0-4198-b3ee-445e2519f2a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de4e9d2-ae69-4cb9-8f7e-73e8431ce4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced2ac3d-7f1e-4b0a-8725-5e680962584b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a5e4f1-efdd-4772-9d4f-2a98b7f3fab2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ef42d7-5bc1-45a1-80b2-4b3450a1ad8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f1a31b-bd28-44d0-944d-cd99186c444e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbfd7dc-b034-43bb-827c-4b36586c12a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79c8c2d-0f88-4914-9efd-75fbace3d99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df08b188-89eb-445a-8be3-7ef968e0304b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767a0a10-279f-4f6e-bc34-2504f5541507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f4c210-128f-46b3-958b-477863e19178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5262c72-aa0e-40c3-ba7f-8d81d395e966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954409c5-d88e-4e06-81bc-e7a56711045b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba0968a-bc1b-44ec-b33c-86713717ed6d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5f8bfe-8fd9-402c-9ceb-c88a15b62fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9da791d-e89b-4978-b0fd-55053a6a9a77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b191ab-803c-4928-ba13-692c3921b7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152ed8b4-90e7-4c5b-8f53-4cd782a920ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236c1eff-4e26-4e05-bd9a-0607c96dce6c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f80c60c-4dc1-463e-80d9-0ca33e2aa5e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630c6159-45c1-4ab9-bb7a-c3498b26753c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37e5602-c3de-4361-b728-2b8bd95da8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50212a1-8600-4131-b118-474565705e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93291675-817a-4597-ba22-20be007fe1de",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0856520-6504-4698-a899-b493fa7ba5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06954aae-5a94-4a05-afe9-0ce3bf3ae63e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4111eee3-cb2c-4465-8fcf-5e80b5128c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ae4284-adb7-4513-83df-62078e299d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a023a12f-3993-4009-a890-ee510455634f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9370725d-ff3d-40cc-914b-033fdb23b728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40841e7d-2923-4ed5-b6ff-acc00abc2987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a849b2ec-3d19-4d73-9fba-5ddea279a7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66592330-e976-45ef-8976-bf9c70b1a82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1920fb8f-0e10-442e-8055-06aaeeb0320f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ef022c-a149-4e8b-9819-a6d66239f0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf583982-04bd-4477-b051-8bb27c8255d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d443ffec-1507-4aa1-937b-0f407e5ec28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4c256c-0b46-4fc4-a981-5b838b9e726d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f770a61-a2db-45f5-b82b-c6421ee692a0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed16b7e4-96b8-4e31-8770-600ca1b75741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb87e82e-5dba-4b86-abe5-c3b159300192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa530a49-f0fc-4bdb-b1ef-c44e2c9b0178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af897414-bad6-48af-aadd-cc43060f8c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305d920b-69f7-4b64-853d-56f4a5040bf5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fba03e-f9a0-474b-96df-b08aaf30bfbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0c3c106-9858-4245-97c6-2105ecf10453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c5759e-c81e-441d-a5f4-e6f5b7fcbcb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1fa581-eb79-4cc7-9f6c-08133734e84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7af9dd-e828-4730-975c-e8c02542ae41",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58212a2a-4368-44bc-beee-e056a45f42e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54a1166f-7c2e-459c-80b4-8de548627cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5553ab0b-7cb8-4ec9-90b1-c2aeb816e774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc95868-186c-45f9-912e-8b1eb1f8c050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2aaa6b-9721-40ac-8f6f-26f3ad739fce",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d1329b-8fd7-423c-9117-166cd36d2ff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78924883-9b8d-472b-a862-ed9a94075c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296e85df-e328-4eb0-8d9a-24e57ac95d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b70e91-0835-4678-b50a-925819b4b056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2759a7b2-9bc4-48c6-9883-ce15216b3b63",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b58cbcb-4b2b-48f8-a912-60e5909d7606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b439ded5-c859-4ef4-bb5f-be250cfee2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298de25a-b30e-4b44-87e8-7391247622d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b064056-d127-49e7-b6c3-674e827b3e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1b68ed-285c-4303-8968-dd8d1e8e2b6c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e7a724-cd2e-4b02-bfa0-84fc13943274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf8da0c-78f6-4814-8a18-49dc47d924b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e75f382-bf8f-49fc-ae64-f662213073d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c11075e-cb03-45d9-be45-281d11d2e940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8999952-4235-4c0f-bb8d-e1fa7073202d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9ab83f-87e7-4559-b756-6ad43cc4a1cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b4de8a0-45b5-4a64-a738-62c799b5d2af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c51456e-a600-44b6-afe0-7179c983f106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774cd5ff-9dc2-4180-b6ee-02a1bcacecf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27576db-85ac-4902-b9a3-46102510eb30",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4e0d3a-e495-4bfd-bfc6-d7a0b54e9396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0c85a89-8824-4da1-bfb3-dbab6c142f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b45d2b-279a-477c-b29e-9f422d0c2687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e916049-8d4e-46b2-9f42-e3ad95d5cc1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1268993-1c23-44f9-994d-fe8f04ab5545",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07963563-5096-491a-95b0-bb8d21a99bf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa1b6c0-84e9-484e-9970-b335d19a08b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca558ce-964b-4ac7-aeff-7538c83fba9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66eab474-1a7c-4713-b587-07336bad4c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3a4731-d539-4ab6-b40e-8baec428875a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23103fdd-064b-457e-bb3e-7d0f9fb143de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d50185cd-4a1d-46b0-9d44-b206ebec5f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c8a488-30d9-44f4-b47c-227630ae5b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9824c1b-bc93-42ac-98d1-c9adc186c830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11db08e-1214-4215-ba3e-85730d421e89",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc049ed8-a387-4341-94b4-57c78d838c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11fd27d1-7eec-426d-8a81-238bf8ed8031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ae4dbe-995a-42ac-8d90-103f48274895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729c4c44-9788-4bce-b2e6-33e9b59d1b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a7021a-1dde-4196-acc8-ad0a19709b43",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5381de52-7edb-4beb-bcae-26ce5c907d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e2c9f1-0a83-4f28-b078-6d1fdf15811a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55eac535-4acb-4b14-a553-d823ac18b290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918401de-436d-4944-825b-35b4b5e0f413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea28707-a59d-4087-9c5b-2582b4499cb8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17235ae-e9d0-4419-a373-efa3aece2b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d8ad6f-4c45-4de7-9b74-1b5465ca87ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a432bb6-3a9a-428b-84c9-9adcea6b5382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d26bb08-c8ab-4535-8968-d7fea778edf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb31878b-ca55-4bd7-ad89-edfedf4ac904",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64443d5-3b23-43e4-befd-a52710beafa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b52528-0773-4794-ba8b-5b7181f92acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adfdb6c-9fdf-45b7-9da2-2c7dc0c21829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c22d00-3cb9-4695-9983-80d60eee6483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89b1060-6d25-4665-8ec4-d1461a286016",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c32bd98-9c59-47d6-bd8e-ab92db4332c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6cbefa3-1ecf-476a-a56d-1df665428cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cceb772-ede5-4ad3-acb9-c312b880592f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9462d58-1712-49cd-930d-6f525992b446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37b2e17-cc6f-40ff-97ad-f107dc2cf4d4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb87a9b-956e-426e-ab23-e5384755f942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72933195-257e-43e8-af84-90bc74767518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59869dd-9e9d-4a88-82a9-1cd2153c840e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e319190-4b13-4b02-ad89-a9f31a9afe85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50052944-3877-4809-a84e-3b02be5e88bd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc59855c-3fe8-420f-8d07-d727366ea4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda7beab-8069-4867-895c-124035bfa659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c47dc38-e13a-4c39-93b5-bd1249322de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65cfb31-060f-4726-82b0-b2d2973fb5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a09eed-7950-44b2-aa31-6ee504ea6441",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74da0c3-86a9-4ec9-babc-f6d33c74bf1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e05cdf-885d-4b8e-b044-38a721d8e80a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175bf68c-d063-4484-b8c5-7fbd6e59a201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824137a4-8272-410e-8a60-d62e341b5acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3257d085-21be-4578-aef0-0124ee62c443",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8ea32a-aa44-4e70-bb91-62aa950f44e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ac0e03-d802-4fd0-8dc6-a76c8ce26393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589c9fdf-4fe0-4467-b111-683f8c33eb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a46b1de-1e16-41c5-bee0-8869af54cadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebcd713-fb81-464e-a26a-079449a3bb7b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c98c83-9885-4fa2-b3e5-7be64c162705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10797e4c-757d-4f72-a819-760bec281a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d585ad6a-dff8-4a83-bd4a-86fa4099400e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b930cec-5ab1-44b3-92fb-8375b682aecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3535f2-c422-4059-8c7f-491c74a04903",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0ac66f-e688-40ac-9b29-917daa3cd9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391f0c2c-345d-4e67-a7d4-ff1b244a6dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d48801-c0ad-4b97-b67e-b031f65e7de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0841a22-145d-4e3d-a000-dadb0844f400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2501ea-3605-4936-932e-19d3e78fd70a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552e4e6e-1656-4cc4-a6de-30698d4ec3bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14b3a71-43cd-440d-adf1-4d0d8fcd45a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c93813e-cf48-40c9-a99d-51dec41dd8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00710ebe-9ed6-4775-b27e-419c44973d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbaee024-3b9f-41be-a9f5-ea0fb0c3657c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fedc399-27c5-4e33-bf58-7607f390daab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4386f1-5f26-4ed2-8601-b8be8d860be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf24ee3-8657-422d-8f4a-530652a7f91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1321a95-5770-4a4d-ba41-acfe9ccce1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21af919-c1e6-46de-bd2d-f97ad3059911",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cda426-63ca-4d2d-8d41-1f4ce9543a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c804887e-fd12-44f0-a4fc-2c9387ef7948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f229f17a-bcae-4ab0-aa8c-2abb6118ce37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05170c4f-39cf-4d94-9c4d-d073519a54af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c31c00-281d-44b5-84f2-9a8dc25b8fdb",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d08a366-7bf0-49f7-96df-856c863c158a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55da8db5-931d-4c73-b3f5-9574832258f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc5315c-f563-49ef-9068-553c520ab114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a401351-0dcb-4696-aacb-d1dd16b2d575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44e9db4-a8b9-4f5c-a681-b289adc034e6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a89e44e-bb28-4f3c-a5a6-3bb3e2082fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4bf4bb-b79a-4b26-bc7f-05404b346085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd36a9e-3629-46ab-b9c4-5bb56d67f6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f71eb5-257e-4643-a942-f91cdb8575ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21738b6a-db5c-4618-bdf4-94e9e294c8b5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0228aabc-8341-4aa6-923e-2fb0b3382a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042d0950-b754-4c53-a40b-fa504c9cb8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cf570f-ba99-4633-adc0-c79838b5bf77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c6e9ae-dd40-4b6b-92f2-a6c69ba493de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db00b79-2158-431f-82d4-68cab378f96e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6a821a-8470-4023-9eae-ff031605c757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34e67d6-4042-4c92-8c17-fec51186736d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177c7ec7-b968-47b9-9b04-18a5485aa822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3748a184-ba6d-4ea4-9049-b17271fa12bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3deba52-5a3d-425f-a228-845ea210d0ab",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d31d9d-1113-4960-b987-b91470b88f71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e7238e-999f-456d-bf9a-adfbb28b8195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac66de0-5816-448a-af04-f0e09cbc5c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb6423b-0166-494f-b459-aecaa2040b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dd8e4a-7b99-4156-a61d-9595b32fdd58",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445059a9-63f0-4c17-98ed-3e027a46a73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad604e1b-5ab1-4b01-8054-6113570fdd60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd322f4-125a-499f-b335-f2a000bee426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3279fb0-e596-4787-8b29-f6790cef60af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9f98aa-fe05-469b-a2c5-93222a2789f6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78412491-470f-4068-84da-fcc13ee5be4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858ea196-4b27-4dcb-8a3f-cfac8b9f0ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339f923a-7657-4103-97a2-b3ec347f65b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d2038f-fe83-4cd8-9136-00ba67c51a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34767014-872d-4d33-9935-b7aa7a78ab3b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d1a36c-c548-4a88-870e-8b816ce18bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de873578-f130-4c5c-b57a-e8847d3874ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5567147e-17d4-4c05-befd-7ab3ad7fd749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8709845c-8f08-4553-a202-da377edce307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52affbe2-3f9a-4078-9b0d-139bcdf16e66",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f13347c-ae74-4173-a208-b6943ae6d0b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3c78e8-972e-45ca-bf0a-db8212b6f7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456d1a69-5b9c-47ac-88ec-b769487af994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791a3af8-3fd8-4c2e-8f8c-e0eff37fd2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c4402f-960f-4bb9-ae32-3b1b27524c02",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c102fdd9-129c-4534-aea3-689b79d75ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91d633f-e740-4d38-b2d1-072eb1b89fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315c4fab-22ad-454f-af76-9fdfeecd5a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07291a6-5d42-4630-8fb3-8cd0eef759e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5bb138-30e9-44e2-b6db-ec4c938eb8d0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fbf1bc-2126-41f8-9e45-1e2d358e003d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e98115-87a9-488f-a0e2-8fde13f2f0db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8edb41-bd03-48bc-9b05-460e6f434104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0056cb8c-969d-445d-bdac-413fe7b973bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dab5d6-efd7-4c20-88e4-a2fa1483018f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67436a1c-a55e-4993-b3e9-afabc3cc6063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d87200f5-d386-4eb1-a654-b4f79d2cc26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5497cf3-1904-4f0b-a0c4-5b399cf872b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c8913b-3f85-424b-9fd8-978985ff0c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6154668a-764f-4ed6-8d26-33157bf280a0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2536f78-97e3-459f-8bad-da7ca7c11cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936ff5d1-2338-41ec-aeab-dc587bf39655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb936f39-f484-41d2-b623-43f78a4b03b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47997ef-2694-45a4-b16a-280caf1f1ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76418976-33bb-42d4-a6ad-ea9c0104b01b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90f1d27-0bae-43e5-b190-2b0d8038a476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a666cc7-7563-4731-86e5-6024e6de9a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd668d25-0de2-42a0-9356-d9ba0ed1527f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6b19af-4f02-439d-9db3-cc3e808ead3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c4cc79-ad5c-4311-b09b-fb578a8f5df6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21474d34-2a0c-483c-8f07-989fee565111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd3f0ef-5610-4802-a60f-b15ec65c15dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7d8bf2-5ab5-4583-9d25-e2c19cd11580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ebe4572-7e61-4d7b-83ac-d3b2fbb4e0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f63cfa4-e01d-485d-8bbf-1b358173f4c8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9468a0d-250a-4e6c-83e3-38339b15cfa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df69793b-e064-4132-ae41-69c4ec1769d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86692a01-c869-46ce-9e25-1191355f2029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28756200-a4d1-4452-9b41-d106d20e48a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb8231d-84f5-4714-8dee-4f3f46362114",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bae6c0-ddf5-46a6-823e-b54392c0a09e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8ea172-226e-46a6-92b1-ca25e39df451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce73ab0-f928-4651-8b41-e4ed4499af94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a640f9-8932-4acb-8cdc-e4388beef63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca058a3-ab38-4132-96c6-304c730d168b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cb2029-fd6a-454c-b2a3-10448cff738a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00f08251-5b7a-4127-9e66-3042497328a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be872830-d41e-402a-9769-69ade7b22f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd6a0ce-00c7-4d69-86cb-aaaae316b7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1099e518-570e-4695-b09a-e73c4e187f26",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ef527e-d768-4597-92ad-4d3effc6204a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c3d3cbc-9768-4dcc-b627-e4f5d4c883e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "848c9dd8-9ca4-41c0-93c6-5b7eb6b3a722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10529c3b-076c-4315-9782-7faad344b2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c126d24-24f4-452b-8162-ea02763c9663",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9f5738-78f1-44a8-a5e7-579ff35bfe11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86618743-3885-4b8b-888e-21780328bb49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a027dfe-b7c0-4d91-bcb4-a4b30701ec43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98daacbb-79c7-455b-9bb9-1bb6a9cff577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92e0886-07d2-42bf-8629-8b3f138c7e3d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d711ae6-9e77-4e3c-90e1-b662c37329ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eba192c-49fb-4b7f-838f-12e86805d0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369e4902-cd4d-40fe-beb5-a695d7dc9b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04ccfe6-29d1-4c80-b5fe-c0679f119d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c920f58-8ce3-4031-864f-7fef54025366",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468d5016-6115-4ae7-8602-0c8c6c606766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff07f97b-2c70-4c51-863a-fe0e40632b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dd1020-bef4-453d-b16a-997e2d7288a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7273ca32-6c08-42d5-9fd2-1df373bb335b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffb8a12-ae3c-4624-a548-321f9d47f4b9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdce3d6-1509-4a5e-b184-b631c7ec5a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77eeed6f-7b7a-4e7c-b9fd-f1aca0461543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d490bf1-535e-4c06-8310-22830598f8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee66eec-9121-4da3-9af9-4bf512aa9c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984ed36a-25a8-438a-b6db-fbca6a6e81ff",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f866091-717a-4a65-855f-1396a211e51b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a2ac9f5-7bfb-431a-bfca-9d309d500eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100bcd69-4fac-4772-969d-f6eb9380723f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0b2e07-8c22-44bf-8df7-02497fe70214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a4e119-4c7d-45e0-8d53-0febababff08",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f105e6c-4bae-421b-8e7b-d3cdd92cbf49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20e404d2-cd9a-4e21-99e4-66b20bf8579b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd24e82-a68c-4d28-9674-789008b63c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375db741-f411-4c73-be38-7d0423e5defb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b2a8be-e103-46f5-8d9f-f8f5e5035ebd",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbcf8d2-67bf-497d-837e-8641dbfb8ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30ea624-8ace-412b-8781-2273b7eb9007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d7d1f9-ac98-4b3c-90ce-9cd516eebdb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2da6af-0f65-468c-a4b7-3c78762c498e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f690e6f-b00b-4475-9aa4-5dda86fe1967",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0580189-15af-44ba-8331-45c52946afb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03ed6843-f24c-484a-858e-2073e6618ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f41f873-2c61-4f3f-ab83-657602c70a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba127c7-e59f-4220-b055-2918319c3ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb4ac60-e1b7-439f-b522-e4104758316c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d66e3c-da14-442b-88f4-fc64ecafd510",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea846bcc-b916-42dd-aef6-531aee6cc968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673818e0-bb27-412d-8494-73ef4e49095a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c49cf4-47a7-4e98-a212-821718e643e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ca6e07-f932-466e-b25d-7b313ffc4ba1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed658879-7a48-48dc-9957-454ac1762f78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7606bf4e-d11e-4590-85db-7cf29276341f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7850a82e-5481-4064-8f10-bc1bc0931157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59b6ca3-49ab-4e9e-b000-d53d622c2153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ee5d8b-e9fc-40fb-a1ee-6923292aefa9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2496723d-7269-4b46-8458-a9cfb2b8b7fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84e06fe4-b1da-4e59-9f94-60d60d7d20d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba19bd2b-1bb6-4e60-927e-6008204a786b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73024393-78ee-4afd-b5f4-706f039147d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297e78f0-338d-4ad0-a245-319c2f9e64cc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42a83aa-51d7-4e39-ba0a-3ba31adbd5bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96bf8ac3-372b-4d77-9f5b-c5d716ec0c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122f0cdb-5521-4bff-88dd-8d54fc284622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8bed7f-db8d-4aaf-b2f3-adab05f48cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b170fa1-e929-4f6c-b0e2-40943b6787c4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b02d37-54b2-476d-b460-34d4325f78bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c0610d8-bd38-48c6-b3e4-97ac343d99c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd25c9d-c81c-4c95-8aac-1da6d93170ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96adc685-1c24-4681-a0ad-fd35f7cf9603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbbbc17-9753-427b-afaa-e9e447a06a40",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4efc6da-3582-488c-830b-c01dadcd27ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fba03dd-eb59-41a6-a533-518046596aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a80f9ad-2113-4642-b423-2ff0621d8f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343a9f28-0002-47aa-9dd4-8220b3b865b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434253d7-dea2-4092-b290-e631178a1f38",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e21ba54-cfc6-4928-b64c-c085f657e10d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a17db983-2708-46db-9533-d3677cf86354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f642a5bc-9dd0-484a-a6df-8beeb71798d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40897f7c-9322-432c-83e4-c434795ca55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22248232-b4f3-4ce4-891e-97e1dc74dc32",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ac510a-934c-48ca-a275-e62aa07f0e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29f3d8ef-7c5d-4114-b7b4-6e2229ba31bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ed3bf7-d7dc-4828-996b-fde0d8b97cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05cca84-0169-4dce-a73e-e5c7b05e6e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3da905a-6a35-4ed3-8da7-1c371a970c96",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e907a19e-d3ba-4fb7-b7fe-5f1a68e12357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e123c76-2a53-438d-936d-29c38eb370f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d67309-c66a-46e8-90a3-a231d30fc55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad07d0b-4705-4927-82e2-3e8ee6b20736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9458f17-e865-4f69-9bb6-7b574611abb7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10217c29-e51e-4c96-b1df-5ee46819b5be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37eca235-40ab-4ebc-9ace-34281a1c86a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c07cd9-394e-433e-9cc2-e6b4db5dabce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9075b4-e1c3-45ba-b76c-90c6192c7f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0978fe25-15bf-4eb5-b09b-16a03ba9619f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c65415-0883-4829-ac2c-6f97045b00dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1566deb5-dfc4-41c1-abe7-9c0304e4d4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bc4af0-ff68-4334-9954-d6f61b540673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5410f1b6-8ec3-499a-89be-901531a8c081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa06aaaf-e3c1-4400-8215-bc6a3d2e2840",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7bd0e6-6b93-4c9f-ad16-d0614b275eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c96ca52-7157-4039-aa2a-525b68f2ccf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98d03b9-b9ac-4a3f-8f59-94762fbaaea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da454c6-ca7e-40c5-896a-8f66eb136088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5daf4520-21b5-4990-b25e-17e5bf84276c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34245a92-dd72-4d12-9a9a-8a44b9268c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff4644e-f8bd-445e-ad77-af11a0e5ceac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f7d68b-ada2-4c3f-8ef6-2729aa895dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e6f5966-f220-40ba-ac5c-0aca201cfe97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf844a4-c6c2-4260-98fe-92503a19628e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccf0765-3e59-4678-9aff-072da06811a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3348bd57-7ee4-4ed6-96b6-f39151fe6e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb59488-65a3-4cf3-9f76-0811261f5901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b620525-6785-445a-a6e8-e92bfb853972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e85708-6eff-40a9-9ef1-cc959a519013",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31682b5e-4687-49cc-b9cc-625886e71956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "501b115d-e7c9-4887-a390-d80cae8cb963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b067e7a4-1d6d-4f7d-9b99-4f8c89ca212e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6145c217-dc84-4dbd-87a6-c7b4d7983b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8ad78b-06d1-4b40-b927-e34d8c38daaf",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abc3ea4-5960-4527-b577-fba03039d785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8987e96-fd77-4380-915b-1807608c9820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730daa3b-e870-4652-8b06-798fe6c34c42",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561d9f50-3678-49d1-9c01-8c71a2edd730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173eb576-a4b1-4ab1-8a42-0ed4353fd866",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac393d1a-5eef-4b37-92d1-527d219a5c44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d541ff03-1fa0-433c-ab71-d860adaf83a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bd1695-d36b-4236-b029-9c197b421ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a91a3d-53c2-4bc5-8f38-67945102f601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7e0619-f3d4-4575-9523-c60198dfab98",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf24de4-3b03-4f78-896d-f8645630b677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484b1d5b-d46f-4b97-9f1a-a187159ab993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506f5665-35c1-44ae-8777-416d05a18c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1168c968-04a5-43fb-aaca-55134156154b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6254266-9926-444a-902b-929250ea98e8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9607eb7-9836-430f-84d4-86fb28b97a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "677d770d-79af-4b80-859e-b6057cb3d920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbc77d7-e395-479b-8788-5ab027f2ee3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14b3223-86f1-4491-ad42-5bdc758074c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe50262-b25f-462b-973f-f759e63ef139",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee61dc95-51c9-43bb-a54f-06cf8659ec01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1088d3a-025d-4b82-8815-4bd6f2272cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e803e9df-2e95-4f09-a02e-6ca7642b6dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c9270e-e1be-4d6b-be64-5f57ab5db54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a4036f-7552-4863-9abe-78ca9db22783",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef505af-b576-455f-b309-5720a70f8c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7efeaf73-65b6-4eda-9e13-cb66ca74ea7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab94f3d4-bd66-4765-92f4-af33ad6d6e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4f8f05-21b0-48f3-af27-958fa598753f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a4f48c-8251-4900-9e90-2d8469d30448",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e40eaf-c0db-4551-a811-9b7936416ee6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c0868b6-35d8-490e-aef1-5a40b5fd9c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e03053d-98bb-4392-87e9-18a08545220a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bedf98-4d11-422f-a863-b5b924f8284c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba25988-00bd-485f-b58d-6d82dbf186d6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e84ced-bd3d-4af8-9e79-256f662e9cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d3d9016-f5fe-43a2-b2a8-b73201a3fc5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6138ab18-a8a7-42de-a5a6-b91b2f41ebbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c08f42e-62fe-4905-a8cb-5f2264402827"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd2d251d-3a2c-4fec-87bb-5cb65ccc39b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4682353-f4fd-459e-b39a-777937de1994"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8d80aeb-eb98-4f48-91fd-474080d7ed1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53427f41-11de-4716-9926-84d9a7013acc"
                    }
                  }
                ]
              },
              {
                "id": "02a588a7-db00-4e52-a0b4-45a3770fbe88",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad1ad1e8-8250-48f2-b709-f71d86f656db",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdcd0bcf-5c95-4b41-82da-f35e2651b1b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "294db912-3cca-4b05-92bd-402bafdfb07f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd7dd66-6824-4c80-8abb-e306a8a42337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90bb6cb8-c4ec-45dd-b065-5c6cf260455a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cefda0d-9f7e-4f1e-b1be-f07e6243e54f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe691ca5-d1a8-4449-a33c-e1b22953ec5c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ae1560b-9511-49b3-bba0-73f3bd4c223c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "730ab0dd-aa41-428f-822e-2e4b4c0bacf2"
                    }
                  }
                ]
              },
              {
                "id": "69bf896f-ea65-4bf4-8368-371989be8632",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4ae64bc8-27b0-4b7b-aae1-ad007300477c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfb95d1-0497-4033-8320-c2abd18a9af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "efe88b25-eb77-4899-bf77-8a7d35299507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbe2ade-54f7-41a7-bdf6-882aa4113592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04eeb1d6-8c02-4b16-addb-29c7d7b456c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a15d8487-90a7-44f1-b70a-c387ea26141f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "495a7d54-3dea-4594-8ade-85be40bb39c1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88525b89-364e-4a59-bb88-a6ae8ae42b23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "56606d92-b694-477a-8a29-08586385573d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "740dfdc6-c837-4d3d-9cbc-1d1b6799a268",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b997cd4-2b11-4c80-9891-2e0c853be6be"
                    }
                  }
                ]
              },
              {
                "id": "47e2e9d5-c6a4-440d-9322-6275f6c68d0b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e92f2da9-20cd-4760-bb4b-e92f2c6412b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "492d6206-1c74-4b03-b9ee-35e741d127af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87efc534-ce20-4600-bd58-63b1eb18615b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b79710be-a878-4e0e-901c-66fd97c8a4e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "371a0b3a-0ab5-45ac-b857-792836630981",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0c75de62-6f87-4360-84bc-25c66181837c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4cbaaf0b-1cf0-4361-8a7c-e40cd6b7a8cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "125baff5-7b79-474e-b4f4-3d8d3ae1103f"
            }
          }
        ]
      },
      {
        "id": "dc4813f4-d9ff-4f6d-ae3f-81d2203d4b73",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "370d9b25-09f0-4ec3-85d8-18eed6720dc0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f8825cc-8d5e-4959-a734-981c399f0e22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "453bca2b-ee24-4bbf-b341-9189777d8b7d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27bffad-36fe-4f36-a1e1-976280eed9d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6b80b2aa-a0d7-46b2-bc7c-54cfc1a36e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023274ca-0a7a-4695-9cac-df5529a55f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8f489e6-0f47-4920-b57e-f6b071e0ce40"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dc2b565-6035-4f33-87f8-2eb9adcd68f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6ba0450-1de4-4d30-82ad-dff30638259a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e6ad50e-9131-4b82-a6dc-048ea75f6e61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c83feb1f-46a6-4db3-b7a8-727a5c5a1e18"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8dbbade-b22e-4770-b392-699c2698613b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ba7fc667-1b3c-46d1-a501-dc99dee84e8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e678cf8c-9cd2-47d2-ab2d-8d35c84304a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f608886-d9f4-4c45-a780-482fbbc333bd"
            }
          }
        ]
      },
      {
        "id": "b08d105a-c68f-4f40-ab02-729371937d87",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5223f07d-d028-4a09-8492-c0e32a7e79e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1434becb-0be2-4512-a36a-00ff21ca2540",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "117a4335-4252-402b-bed9-600781a03714",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5333c3a8-f8bc-4ae7-93c7-739bee31f878",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e3e3732-e924-4e89-9e1d-b1616ba2eaeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd922ad8-020d-4abc-ae26-89c0dace77df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15efe02a-6d24-486f-b294-b39a7c36da70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3813904-194c-4e9c-b34a-e6a9fef595e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48ffec82-e5cb-4930-a3eb-0632f22556ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b34392e-7a16-424b-8e20-99fc5e473576",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7138182-67be-4435-945e-282e6495d47b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95061168-4651-44f3-b83a-727bfb074e32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5c669895-2151-477f-9a4d-aa2b25c10639"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2009b48-25a4-436a-93cf-c6cb13ecc061",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ab99863-b4ef-4d42-a2da-a0db168aee5a"
            }
          }
        ]
      },
      {
        "id": "c90718ca-4033-47f8-87f8-b1bb9f23e9fc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9fbff557-e6b1-420a-9573-64fc5f3d7d51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b250dd7-8f8e-4439-a946-bb16c3bc1918",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98bef216-38df-4d1a-b3f9-9025f8fbe91a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d9320b-68de-48ac-b50f-08c9f344b7b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7685abf-b033-44fd-b763-18c8e8e6bf3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff40cee1-2a9b-4995-998f-c9741d32e503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d3f4c7c-5686-4173-811d-17769f685c01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc6ede04-0d68-4c58-961e-14da67326af5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c4a5261-8750-47ed-bca9-ab002800bc5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43dac14c-a4a7-4f21-8935-4dd19ac6bcd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1252444-dbd4-45e2-a24b-6b7595f03241"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e02bee5-e875-42ec-8a92-5702f6c5ad7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aa2386a8-48e8-4af1-a779-6d5f0e169043"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c63031d0-55a2-41d3-8827-2ce3f4602aef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48e8c3bc-ad2c-41e3-9885-b8d54ab56b55"
            }
          }
        ]
      },
      {
        "id": "026a1a8d-ec92-4eca-a9a7-a0d00ff1e2d8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95416580-1a9b-4dd1-a3f2-cccd045c5c16",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9faffc70-91f7-4103-b208-7e534e38b737",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "47acce30-24d3-4d83-b223-3041a4920eb0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be3b97f6-4952-4387-9bea-ea58d7d785e0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dfebe4e-8565-44ef-a71a-ee7c97b68f2f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 121.73239436619713,
      "responseMin": 11,
      "responseMax": 2447,
      "responseSd": 281.3642297728615,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691455082197,
      "completed": 1691455128658
    },
    "executions": [
      {
        "id": "80b5d268-2bc3-4ea2-8b54-6dfacb7668c1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4d04ff3a-f440-4329-9a7f-b6800fb2ce76",
          "httpRequestId": "5696bf56-1c0b-4bdc-8837-097df5a70233"
        },
        "item": {
          "id": "80b5d268-2bc3-4ea2-8b54-6dfacb7668c1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7a15b830-e1d8-4fd6-ab01-8545ec909251",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "1e8a0618-9965-4f0e-98d8-086cf318e664",
        "cursor": {
          "ref": "bfd67d27-1cf3-42f5-aa6d-44d7e0226b6e",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12193a99-d48c-496b-a4a8-7f7878170e52"
        },
        "item": {
          "id": "1e8a0618-9965-4f0e-98d8-086cf318e664",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f7a5bac1-ab79-460d-a32b-cb8cc9e1351c",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "49587167-65c7-493d-9d23-3b70eade17b6",
        "cursor": {
          "ref": "ced2badb-8005-4b21-b166-92274788a38a",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "17823c5c-fbbc-4da8-b7b8-919fb8167611"
        },
        "item": {
          "id": "49587167-65c7-493d-9d23-3b70eade17b6",
          "name": "did_json"
        },
        "response": {
          "id": "11e3440f-c7e5-44bc-96a0-0f410167107d",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee8c188-3e9a-4242-b767-a4e340be47fe",
        "cursor": {
          "ref": "d6c5b891-bf6a-417c-abfb-17d2391a8b4e",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "021d7507-3df9-4062-81c2-252d569e18eb"
        },
        "item": {
          "id": "3ee8c188-3e9a-4242-b767-a4e340be47fe",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a0138b9-df3f-4b23-8cfc-a19fa4e2ec5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee8c188-3e9a-4242-b767-a4e340be47fe",
        "cursor": {
          "ref": "d6c5b891-bf6a-417c-abfb-17d2391a8b4e",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "021d7507-3df9-4062-81c2-252d569e18eb"
        },
        "item": {
          "id": "3ee8c188-3e9a-4242-b767-a4e340be47fe",
          "name": "did:invalid"
        },
        "response": {
          "id": "0a0138b9-df3f-4b23-8cfc-a19fa4e2ec5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09c3a85-27e7-4d7f-975f-2710ee7c7404",
        "cursor": {
          "ref": "9445fd1b-7e13-4dcc-95db-af3058581930",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5fff8cd6-1d5a-443f-8b26-14eea28ff890"
        },
        "item": {
          "id": "d09c3a85-27e7-4d7f-975f-2710ee7c7404",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cfb389e1-e302-4fff-8ead-60e5e4cb77f1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 106,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bff388e-9b73-460f-868b-c6c2cbc647e7",
        "cursor": {
          "ref": "7a14eb4f-0dca-4b13-ab61-349261f16f14",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a1181ae3-54a2-42cf-a95b-944cea2c1b07"
        },
        "item": {
          "id": "6bff388e-9b73-460f-868b-c6c2cbc647e7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6deaa7c4-f541-4739-ae24-bb217e13033f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec150b3-a9b8-490a-880b-b7f6eac99a07",
        "cursor": {
          "ref": "f611361d-0bc9-43bb-9a22-513e36aa021a",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7fe8e1fc-b92b-410a-a7c5-b99b46eb4dd8"
        },
        "item": {
          "id": "fec150b3-a9b8-490a-880b-b7f6eac99a07",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "544d7be6-9d2b-4362-9873-dec159cbd857",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6daf30d-27a2-4a57-a81a-22f051e07d3c",
        "cursor": {
          "ref": "0969e8d8-8e91-449d-98ea-506465aba2ea",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5b702ccd-de8e-4d07-bc75-c6729da2a8e8"
        },
        "item": {
          "id": "f6daf30d-27a2-4a57-a81a-22f051e07d3c",
          "name": "identifiers"
        },
        "response": {
          "id": "48e2ea29-e6de-49cc-88b9-588cc68e9a0c",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3af619-9db8-4e48-9484-de3afcc3ce33",
        "cursor": {
          "ref": "a712cdd2-8ba5-4de9-8516-27be775f295b",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1d48d160-088c-4018-8768-f7e2bef2bb2c"
        },
        "item": {
          "id": "3d3af619-9db8-4e48-9484-de3afcc3ce33",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1353ab93-1ceb-47ed-afd0-1753654201be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fbd9d3-639c-42fe-b1d3-cbd3de4685e2",
        "cursor": {
          "ref": "705ec913-ccdb-48a6-b327-7fb0f941d78c",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "73be765b-a1f1-4ab6-99dc-d095340cf122"
        },
        "item": {
          "id": "03fbd9d3-639c-42fe-b1d3-cbd3de4685e2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7ce18347-d4b2-4b24-bf31-0b2a8fd7e2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00487a53-3901-4549-9d29-5f7c1d367c79",
        "cursor": {
          "ref": "7e91e92e-52a6-451e-91dc-5473b3194109",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c1291146-2ed5-4506-a841-e27c566c9cc6"
        },
        "item": {
          "id": "00487a53-3901-4549-9d29-5f7c1d367c79",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b0452bf5-1f2f-4007-8868-e60e047f50c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f77ef0-1057-4f44-a001-9fdce1962e90",
        "cursor": {
          "ref": "e0c8e2ff-6b64-4fa7-8cc2-249f98f79b0e",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "25f860bc-4934-4d66-8ae3-4a06133d89e3"
        },
        "item": {
          "id": "b8f77ef0-1057-4f44-a001-9fdce1962e90",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b4d7330a-3d01-4571-bc71-98f6379716d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3073d836-ab83-45b0-9b5a-f1c58f91f601",
        "cursor": {
          "ref": "d5d4de7c-f7b8-4554-bbc9-c67fd87c43c1",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "68ee572d-977b-47d8-872e-5d83020b4f4c"
        },
        "item": {
          "id": "3073d836-ab83-45b0-9b5a-f1c58f91f601",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9f791739-18cc-449d-b4c3-2926c7085769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b74f5c5-5c30-42d8-bc3e-545ebc25b9b4",
        "cursor": {
          "ref": "83584ff9-49d4-482f-9f96-bb7ab4915532",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b23ca873-dd8e-49a3-88a0-462b4c25f49f"
        },
        "item": {
          "id": "9b74f5c5-5c30-42d8-bc3e-545ebc25b9b4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6bb971e4-0a20-4787-a74a-3740fa7ffa13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558bc6bf-55df-4de6-a831-1e22f18449d3",
        "cursor": {
          "ref": "f1e8e3b3-df27-4190-934e-ba7aebf4d7c3",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cd22f22c-9308-4024-a018-1f5aef3fd1ab"
        },
        "item": {
          "id": "558bc6bf-55df-4de6-a831-1e22f18449d3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8ef75718-0fb4-4e63-9c03-ac56809ffaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ac35eb-26f4-4988-8bf9-163abde14558",
        "cursor": {
          "ref": "fae81b60-2ab9-4f43-915b-f3b0bf0de773",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0d357b57-d989-4917-950a-7cd8205e322e"
        },
        "item": {
          "id": "46ac35eb-26f4-4988-8bf9-163abde14558",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5b0f4449-fe3b-42f9-9121-23107c661980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1431e9af-4f31-4f69-b1af-763812707155",
        "cursor": {
          "ref": "506a114b-aa31-4b88-bd20-6ec92194141d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2d058fdc-4211-40d9-935c-b39a1b4646cc"
        },
        "item": {
          "id": "1431e9af-4f31-4f69-b1af-763812707155",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "31c97e0d-73fc-49f9-84de-40d69dfe6b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6d6a2b-d115-428a-886d-dac5d0a02f07",
        "cursor": {
          "ref": "5bb0b645-6ef3-43a5-8681-68f27b80d96b",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f73a56bc-3f61-4ae2-9e83-f7b0aa07487e"
        },
        "item": {
          "id": "7b6d6a2b-d115-428a-886d-dac5d0a02f07",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b56e107c-c8e1-4f77-8b6d-cd1a6280c3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffbfaee-99e3-41ce-8f6e-da66a1423a70",
        "cursor": {
          "ref": "265aea66-861b-4b7e-b1a4-64359ea47c2f",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b071020a-94d0-442e-9bc3-0222c859c51e"
        },
        "item": {
          "id": "9ffbfaee-99e3-41ce-8f6e-da66a1423a70",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1f40878a-789f-4776-971e-d1870b303ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dbce64-c2ac-41c4-83b9-2115bd621436",
        "cursor": {
          "ref": "3b08f148-429c-4354-8dee-892cca614f85",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "44fe1865-e9df-4f84-a9be-d26e7f0df2a9"
        },
        "item": {
          "id": "81dbce64-c2ac-41c4-83b9-2115bd621436",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cba893d6-ecc6-403a-8a26-01823cd04a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1982b769-07d9-42bf-8a06-d5b05845f51a",
        "cursor": {
          "ref": "cdf1aace-fdcf-45ee-b213-640c6d42567a",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "79597eb5-83bf-4519-8e2e-31de37ab48a5"
        },
        "item": {
          "id": "1982b769-07d9-42bf-8a06-d5b05845f51a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "61dec10b-a29a-43d4-a4f2-dfbba0dc9fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510187d4-f2b2-4c73-b950-1dddccb3ac10",
        "cursor": {
          "ref": "98e68a22-5821-4e1f-8ce2-4a47ba9fb33b",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "697eb8ad-3162-4599-8dee-58c36a91d502"
        },
        "item": {
          "id": "510187d4-f2b2-4c73-b950-1dddccb3ac10",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0e888fff-b84f-4b51-93bc-17ca680fc4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d008fc-0d9c-49f8-8e76-78f10bca6a7f",
        "cursor": {
          "ref": "2598bd12-3fb7-4d73-aad5-e84e37ffe04a",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "508b6495-80de-4cfb-b00c-7e3c0785868f"
        },
        "item": {
          "id": "c4d008fc-0d9c-49f8-8e76-78f10bca6a7f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d2278517-4e9d-4539-a8cc-2e679e359bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7ca20f-9e03-4a2d-a888-6fb65c4e94e7",
        "cursor": {
          "ref": "f32160a9-ccd8-4e95-b85a-22c556b5c440",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "297ac4ec-a5ac-4f18-bcc6-b986298dfada"
        },
        "item": {
          "id": "6a7ca20f-9e03-4a2d-a888-6fb65c4e94e7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "48da8b40-a922-4769-bf6c-41ef6800687a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31de6835-5959-4793-b342-532107070f53",
        "cursor": {
          "ref": "010d90ed-f511-4140-adb9-562f619d900f",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "20cbf648-5d4c-4404-b6d4-92bef2836431"
        },
        "item": {
          "id": "31de6835-5959-4793-b342-532107070f53",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ce27edce-4702-4085-96b5-85c667565a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935d9f60-8825-4d76-ac42-81ddc0d11b02",
        "cursor": {
          "ref": "4b5f5871-5d8b-4113-91d8-00e0f3dfde65",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8fe28fd5-4b35-4d60-b2c6-be0a9dcce2ab"
        },
        "item": {
          "id": "935d9f60-8825-4d76-ac42-81ddc0d11b02",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "69961554-1761-4260-94ba-1cd396d486f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7650e9-14f5-4ae6-98a7-e8d42154d2da",
        "cursor": {
          "ref": "6eba7646-c582-4ee1-b7cb-503b17095327",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e224a323-d282-40f7-a2cc-314f163d740e"
        },
        "item": {
          "id": "dc7650e9-14f5-4ae6-98a7-e8d42154d2da",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c29e0fde-3da3-4297-8945-9955c8cf64b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26640a8b-57fb-4de8-a7d3-2c988eea3c41",
        "cursor": {
          "ref": "82e9b022-c662-4936-89db-d30c7e97fe00",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f85c92a1-ea39-4dc9-8f1b-a48ca4c215b6"
        },
        "item": {
          "id": "26640a8b-57fb-4de8-a7d3-2c988eea3c41",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "56249c04-0517-4408-84be-c13889782ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deaabb81-c28e-4228-a99b-462511a1c2f2",
        "cursor": {
          "ref": "9764f8aa-10bf-4ab1-b6a2-6953ed313460",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c58c3d2a-91e2-4b41-8a65-33ea9de96324"
        },
        "item": {
          "id": "deaabb81-c28e-4228-a99b-462511a1c2f2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2031bb15-0a19-439e-b104-a846bd65c1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e2254b-6083-48e8-b579-1e8f230cac5d",
        "cursor": {
          "ref": "a271da37-91eb-4379-a73a-013ffd15b80d",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "842da256-7b61-403e-9b17-f8d75953548d"
        },
        "item": {
          "id": "71e2254b-6083-48e8-b579-1e8f230cac5d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "59cd7b31-b304-4db9-a596-001d12d49955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807a4d41-eb71-4dff-a6ff-3c0d8ebe4e37",
        "cursor": {
          "ref": "0930efe8-0e7d-4343-9e77-7ae7441077f8",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9b9e7bbc-b741-4b46-9fb1-c8fd396262f1"
        },
        "item": {
          "id": "807a4d41-eb71-4dff-a6ff-3c0d8ebe4e37",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7f04f2a1-2072-4958-ad56-44ccd749a08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab43427-c278-4011-a345-b6a76b61d474",
        "cursor": {
          "ref": "fafe38d5-b826-45a2-bf6f-0d3d90af29a3",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "60e3674f-0aa9-4db9-9ba1-5ded8c2c1d2e"
        },
        "item": {
          "id": "0ab43427-c278-4011-a345-b6a76b61d474",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e153cfae-da87-40e4-ac76-fd1612399c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b777ec-b244-42dd-b943-1d348731673b",
        "cursor": {
          "ref": "b12693b7-5090-478e-9742-2c6b23b8c0f0",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c7c101eb-7de6-4f3d-929b-799351a3974c"
        },
        "item": {
          "id": "15b777ec-b244-42dd-b943-1d348731673b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2d70ab53-a7e7-4ab4-ad5a-ce397adb089e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23667db6-411d-4910-b69a-a51de58ed752",
        "cursor": {
          "ref": "ede34be5-5f88-4802-9a26-cd30f6fdf681",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "23a15001-ae5c-48e9-8d20-b84cd13bf3c0"
        },
        "item": {
          "id": "23667db6-411d-4910-b69a-a51de58ed752",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1c98bd64-a4ad-4dd8-a49d-dfa362791dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed972fa-3c34-42fb-8036-3ec8fab0644f",
        "cursor": {
          "ref": "6b8d20fe-90f4-4c27-b779-21eda3f61720",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5e0eff04-73f6-4a30-8bee-321892c64ff4"
        },
        "item": {
          "id": "2ed972fa-3c34-42fb-8036-3ec8fab0644f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0135c664-96d6-4abc-900c-a58032fcce98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747badb8-46fe-4730-a34b-8306e04a083d",
        "cursor": {
          "ref": "529cb829-77fa-4c3c-b666-42d931d16b40",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e2637718-f89e-40c9-ac81-ccf2bb151242"
        },
        "item": {
          "id": "747badb8-46fe-4730-a34b-8306e04a083d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d09cad33-da71-4ad1-93d8-74d3f7211229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63751ea1-0874-4c4a-956d-42db0a95ef5d",
        "cursor": {
          "ref": "14459293-d012-45b3-bf48-fc3005ef0096",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a1276965-9555-44ea-990e-e17989e8061a"
        },
        "item": {
          "id": "63751ea1-0874-4c4a-956d-42db0a95ef5d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "062a73a0-9fdb-4464-a763-729209292b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93dc11e-ab65-4992-b999-10a1a1677b15",
        "cursor": {
          "ref": "4c3276fd-7a7f-4894-aba4-8209b9c07cdb",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1e62313c-7294-4159-b3f7-17ef9c803351"
        },
        "item": {
          "id": "a93dc11e-ab65-4992-b999-10a1a1677b15",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "039610ed-a4e2-4949-8837-38d81e63f1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ef46f4-9b84-40af-a6ea-b1eb1f97e4d3",
        "cursor": {
          "ref": "7b2e6d04-f93f-4277-98e0-2abca2f70023",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2e163e85-34d5-4675-8764-8b6a1bb12e1d"
        },
        "item": {
          "id": "51ef46f4-9b84-40af-a6ea-b1eb1f97e4d3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "23b5e446-81a6-4d50-82f9-5390c331afc7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3f60df86-83c0-4c7c-a00b-b3c61d27bc3f",
        "cursor": {
          "ref": "2f37988c-410c-47d1-9798-103f264cb98e",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8fe787a0-0e46-4366-87af-ac250df47fc4"
        },
        "item": {
          "id": "3f60df86-83c0-4c7c-a00b-b3c61d27bc3f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1312637c-ba6a-421b-a8f4-22164136e7f0",
          "status": "Created",
          "code": 201,
          "responseTime": 2447,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b11466d8-732d-45fc-a5ae-07e80a6991a2",
        "cursor": {
          "ref": "a3b18341-d4b4-4973-b90c-ae480d675d70",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1baa0789-4aa3-4a55-aa06-82640a07442d"
        },
        "item": {
          "id": "b11466d8-732d-45fc-a5ae-07e80a6991a2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f82722f4-8cea-4e51-9796-3180a05e51d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ee8fae4b-3e50-4095-9e2b-c71b852c2464",
        "cursor": {
          "ref": "41fde122-b776-499d-b89b-67d39c2b878e",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fe7d24a9-508d-41fb-bc47-3958ed172b73"
        },
        "item": {
          "id": "ee8fae4b-3e50-4095-9e2b-c71b852c2464",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2b6bee0f-d2ae-4d0a-956f-0361900ed384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b30489-8d6f-409d-ac33-ecaa3ca64648",
        "cursor": {
          "ref": "940fa8cb-95a4-45e4-aa3e-98eac91467bb",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8fabc369-d68f-4518-bc58-85e11a9cffff"
        },
        "item": {
          "id": "66b30489-8d6f-409d-ac33-ecaa3ca64648",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0dea3a0a-1190-4fe5-8a87-4f929b3f8199",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "cb5b9531-3e2d-490a-a9ab-5761b0294a06",
        "cursor": {
          "ref": "82c119f9-9334-47f6-8bfc-a7d88cdf15bb",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d7b4405f-3911-459b-9ec9-4570e1b7fe36"
        },
        "item": {
          "id": "cb5b9531-3e2d-490a-a9ab-5761b0294a06",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "48ae2534-21d0-4036-943b-459ce75a4db1",
          "status": "Created",
          "code": 201,
          "responseTime": 943,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "635a5f5f-55c8-4356-98c1-77b36f0d184d",
        "cursor": {
          "ref": "6d9c9151-a634-4cce-b2d4-2ee26f39ada2",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a193af90-2aae-492d-a7c2-185e8961e230"
        },
        "item": {
          "id": "635a5f5f-55c8-4356-98c1-77b36f0d184d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b8101443-e3b4-4f96-85aa-0de7ff692d71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b36fc3b4-3e0a-4595-ba75-43f7dee39e34",
        "cursor": {
          "ref": "c93a9776-3a19-43f3-a9b9-810ad9e53bba",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "74c86a20-9000-4d30-89a2-c28973b477bb"
        },
        "item": {
          "id": "b36fc3b4-3e0a-4595-ba75-43f7dee39e34",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "41031a61-25aa-4896-89ad-829edeead9b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 834,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9ddb5154-9f20-4d66-ac7e-4415b7ff992c",
        "cursor": {
          "ref": "134689e0-58f0-4e09-8f52-a1055c42375a",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2e784814-6868-43d6-b9fc-50c1c5ce5440"
        },
        "item": {
          "id": "9ddb5154-9f20-4d66-ac7e-4415b7ff992c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3076a9f1-0b3d-4191-8c0f-d744a692d462",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d555e305-dd30-4e8c-95fb-df3aacb8941f",
        "cursor": {
          "ref": "ccc8fb90-539f-44da-b0de-8b8cc40bd66f",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "30ea0d1f-ac43-4ebe-b881-4fa67d13e794"
        },
        "item": {
          "id": "d555e305-dd30-4e8c-95fb-df3aacb8941f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "80af3c0b-5aad-4894-84f6-1a5ed4d68b3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f9199a6d-54fc-497e-bf3a-1f10a46df5ba",
        "cursor": {
          "ref": "625d0a8a-12dc-49a0-ba3e-761fc2718a67",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0d0d72ac-97b8-4ae9-bbfe-31e83e51b071"
        },
        "item": {
          "id": "f9199a6d-54fc-497e-bf3a-1f10a46df5ba",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "46f77772-ca83-4a8e-bed4-a3064b48b676",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cea9e36e-6bfb-4d71-8aae-a488dd14e424",
        "cursor": {
          "ref": "808f520f-48dd-4dfe-90ce-48f415247be8",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "dbe236a8-a472-4ee2-8d08-a29f15ab123e"
        },
        "item": {
          "id": "cea9e36e-6bfb-4d71-8aae-a488dd14e424",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dc4608c5-1c73-4a8b-befd-1e95c052a50a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "073cf042-7028-42e5-9191-134a3d6c956a",
        "cursor": {
          "ref": "318d8222-4dce-403e-8583-18762c0af058",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8842193c-1e2f-4374-bf7d-61dc87c467ef"
        },
        "item": {
          "id": "073cf042-7028-42e5-9191-134a3d6c956a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a191e7ae-919b-4b56-b5eb-cafaea1a1d03",
          "status": "Created",
          "code": 201,
          "responseTime": 969,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "07d62b4e-ab73-4f23-9368-128b1f75309c",
        "cursor": {
          "ref": "c6c76434-698d-44f9-acc0-412c007ec293",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3b9772be-559a-4f0e-9a78-b8b72f5a6adc"
        },
        "item": {
          "id": "07d62b4e-ab73-4f23-9368-128b1f75309c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1757994f-9281-440a-9949-db206c5311bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846ef194-e556-412e-b061-db3b4d454b73",
        "cursor": {
          "ref": "c7a65cbb-2bef-414b-96bf-414c267a487e",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d73d025a-7705-476b-8113-47f3232129da"
        },
        "item": {
          "id": "846ef194-e556-412e-b061-db3b4d454b73",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c014ea28-8f33-4b0f-ae66-6a175e70e31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8806f0b6-22aa-446d-9ae8-5d4f8aa6faca",
        "cursor": {
          "ref": "50fbc3bb-389b-4313-b869-79714c7de3b2",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a6a46362-ce66-4c42-b87d-93c766ab5aba"
        },
        "item": {
          "id": "8806f0b6-22aa-446d-9ae8-5d4f8aa6faca",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "df5a3cad-9599-400c-ab14-7a58ca0dd41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a43e63-65d9-4bf3-8bc6-8c9033e2d2ba",
        "cursor": {
          "ref": "d79d1964-e8d5-434e-879f-a7acca7935cb",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "74f4d943-a25b-4e3f-9db4-32bc07ae6561"
        },
        "item": {
          "id": "45a43e63-65d9-4bf3-8bc6-8c9033e2d2ba",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "caa13422-b837-4fad-8d0d-e399a9e2223f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582ebc1e-64a6-49cb-943b-8b8f5147bc4e",
        "cursor": {
          "ref": "08c15a67-7145-4d84-92f0-7ee3506bbd68",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ed24f908-4938-4214-a652-738b48579d43"
        },
        "item": {
          "id": "582ebc1e-64a6-49cb-943b-8b8f5147bc4e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "30c22f87-e764-4de4-beec-076544b8fb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d4d77c-e518-432a-9e47-4b72e388fbe2",
        "cursor": {
          "ref": "4dd3fdde-a585-4fc0-951c-589fa124bab7",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f521267c-276d-4e4f-9716-e1e1cda2885d"
        },
        "item": {
          "id": "85d4d77c-e518-432a-9e47-4b72e388fbe2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "07b771c6-128c-4282-abb6-d610cbfb7243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dd764a-792e-4999-9c2c-dbade11f599c",
        "cursor": {
          "ref": "6db25fcc-1777-4dfc-af73-af3c9e01d019",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e5781326-704e-4ede-9b4d-02f46b430729"
        },
        "item": {
          "id": "31dd764a-792e-4999-9c2c-dbade11f599c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d60fa9f9-4bbe-4205-baf1-968c4710f9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0ad380-6050-4e33-befc-c2f50a92eab3",
        "cursor": {
          "ref": "fc1aa701-2147-4b24-9eae-f7707e9f5a8d",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "efca5c5c-d465-41ac-84f0-eee35e0e7494"
        },
        "item": {
          "id": "7c0ad380-6050-4e33-befc-c2f50a92eab3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8c37869d-6d67-47b4-b3be-25ab06137b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44751be-e70d-4baf-8007-5c3830868225",
        "cursor": {
          "ref": "c2481c45-014f-46e0-8eb3-6bb2c2114f58",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bb859b10-a9a3-48a0-9f22-5defa3aec014"
        },
        "item": {
          "id": "d44751be-e70d-4baf-8007-5c3830868225",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "965ab87d-279c-4892-9523-50290c49220d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542efe10-98c4-4309-af75-1bcb2c94a54b",
        "cursor": {
          "ref": "088a91fa-d248-40ef-b485-7ca7f8d9d537",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b53be1e0-3520-478a-bf86-7256f1476e76"
        },
        "item": {
          "id": "542efe10-98c4-4309-af75-1bcb2c94a54b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a7745485-bb32-437e-96fb-4d7b36295369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf77524-a713-4718-b9fb-a058950c951b",
        "cursor": {
          "ref": "16498d6f-c237-48d2-8613-9f797d7a82b3",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dbbf7e86-66d2-47e0-8647-b61ad21e0d99"
        },
        "item": {
          "id": "ecf77524-a713-4718-b9fb-a058950c951b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7bcace2f-27ea-4d1b-8eb8-3a07aabe0d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47f90be-100f-4671-8c38-b31d0fc3795c",
        "cursor": {
          "ref": "9838f13f-d014-4287-9816-7d050f18e842",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5038190b-b526-4710-ae00-6c7b2ab570d6"
        },
        "item": {
          "id": "b47f90be-100f-4671-8c38-b31d0fc3795c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1cf6a667-0730-4a9c-8dc0-996f3aa73d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2bdec4-3143-40bf-a1c4-9444ece0884e",
        "cursor": {
          "ref": "60474046-65f7-4ed5-9036-411b0ca72426",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4ec93c3e-5a1d-45fa-8abc-082f75294bca"
        },
        "item": {
          "id": "7f2bdec4-3143-40bf-a1c4-9444ece0884e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cced8483-cd33-42a9-b4c6-47b92369591b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf7752d-4e3f-4f13-ab14-e9ed2c179784",
        "cursor": {
          "ref": "4607c6b6-ab7d-4d55-8582-754ed889bfc5",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "56035db9-c102-40cf-aec9-acbce96e9caa"
        },
        "item": {
          "id": "cdf7752d-4e3f-4f13-ab14-e9ed2c179784",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6fa7ba41-b0ad-425a-9d9f-5a0bd752ce91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 787,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d542a8af-b1a8-4014-a9d1-c982fcc93881",
        "cursor": {
          "ref": "da6c08b5-846a-4e64-a48a-cff5002871f4",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "94bd978c-df6c-4e40-b82b-5c30528b8052"
        },
        "item": {
          "id": "d542a8af-b1a8-4014-a9d1-c982fcc93881",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5d1c404e-0d9b-47d9-8297-f3e134d9d276",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 774,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9a7872bc-949f-4084-89f9-83fd610df753",
        "cursor": {
          "ref": "646c4307-c0e7-4937-b306-d55a6669e517",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e8f41581-0a5c-438a-bebb-44f94a062c9d"
        },
        "item": {
          "id": "9a7872bc-949f-4084-89f9-83fd610df753",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e8fe27fc-d30c-4952-90b6-189909e18d0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1a1961fe-bfa4-48cc-9b64-b4cae3d39ad5",
        "cursor": {
          "ref": "25b07784-a2dd-4344-83a1-bd4ec4ace832",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c999296a-a258-4c91-9a26-604d4fb906ac"
        },
        "item": {
          "id": "1a1961fe-bfa4-48cc-9b64-b4cae3d39ad5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a126af57-14af-4b47-8f24-27fd8f57fbc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1283,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ca3d2fe8-1e7a-424a-9761-0b4aefeccee2",
        "cursor": {
          "ref": "7112fb4c-1c47-4763-965f-7d781a3fcea8",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5feb1763-58c3-48d3-b5a3-cbc1d778df6c"
        },
        "item": {
          "id": "ca3d2fe8-1e7a-424a-9761-0b4aefeccee2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cba934cc-ecd3-4d7f-a812-dc2294f28cac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d799342b-6f3d-4933-b392-950d8d349e3b",
        "cursor": {
          "ref": "bfa26970-8ec4-47cc-83d3-8b70ed33078e",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3f0be2a6-dd50-43a8-8901-1820f394f985"
        },
        "item": {
          "id": "d799342b-6f3d-4933-b392-950d8d349e3b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6b563deb-dcd9-41e2-81f5-c2e9e40bdf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc7fa46-6632-4aea-9f8f-9eae6d2f0beb",
        "cursor": {
          "ref": "1979bf02-1ac2-4373-b788-1288b972ba1e",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7ae09df2-83aa-42cf-ba4f-7c5dda1e88b9"
        },
        "item": {
          "id": "0cc7fa46-6632-4aea-9f8f-9eae6d2f0beb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c70fd072-2eea-4d50-8dd5-7b4c4e4938db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baefe40-0e08-4a97-af60-258f7bb43314",
        "cursor": {
          "ref": "e41d486b-10bc-480f-a7cc-24b4bf2be046",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e5595671-c215-46a9-a1eb-fc22ea7fe177"
        },
        "item": {
          "id": "5baefe40-0e08-4a97-af60-258f7bb43314",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "46962ab5-988a-4d72-bb56-43d13905b92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f47f16-a2de-4f96-8101-5f7b2fd730f2",
        "cursor": {
          "ref": "ae3359a7-d789-420c-bc3c-b46b49562c35",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "61093758-9d66-4d84-ae7b-2010c6d35167"
        },
        "item": {
          "id": "47f47f16-a2de-4f96-8101-5f7b2fd730f2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c071a846-ac68-4fdf-a82d-e16112e2d6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583b4d67-778f-4846-a5df-cdf156907315",
        "cursor": {
          "ref": "99a05cff-3a80-4b0c-b032-e6263f1c0ac5",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8b3259c1-2e9a-4c8b-8013-6be7e244c8f8"
        },
        "item": {
          "id": "583b4d67-778f-4846-a5df-cdf156907315",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8ec83e57-28f6-4d46-88e2-d46c6c96fbf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d54d919-d587-486b-ac0e-f698b722346a",
        "cursor": {
          "ref": "93e5c72b-baff-424e-b243-f9e91192e5d6",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e933f220-ba7e-4e87-a997-a29a18e4b1b4"
        },
        "item": {
          "id": "0d54d919-d587-486b-ac0e-f698b722346a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "26f814a1-3400-44fa-b2ec-b33f30787d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b91aa33-313f-4661-8616-ae488de59d77",
        "cursor": {
          "ref": "69e90ef7-60dc-4c2c-b244-29e9862eabfb",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6690d0ef-bec2-46bb-9104-28548694a61b"
        },
        "item": {
          "id": "1b91aa33-313f-4661-8616-ae488de59d77",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9b7c5b4f-2dda-45c8-a813-c8e9b0179538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed98dbf-1672-481f-ad1e-791b7d361f2d",
        "cursor": {
          "ref": "f0cdd9e6-67bf-4bd6-97e5-c2bc59f7ac14",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "65c03bf4-b208-4abb-acdf-758a2b0f5055"
        },
        "item": {
          "id": "3ed98dbf-1672-481f-ad1e-791b7d361f2d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e75edbf7-9245-467b-afaa-09ead80cbe75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192e20c9-afb1-4633-9902-8e40731a9a7f",
        "cursor": {
          "ref": "63e9439a-b3f7-44aa-a069-e2a4b52c407d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "38a3217e-2827-4cc7-b3e8-a18d2ca965b7"
        },
        "item": {
          "id": "192e20c9-afb1-4633-9902-8e40731a9a7f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5d974bf2-38b9-46e5-9cfa-29dd4b534356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e9de4c-1221-442b-8989-926b58038af0",
        "cursor": {
          "ref": "179b562d-65ab-4ce2-8970-03fc5c3bf6fb",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "212d3348-03e7-4d20-8f13-2e20e24c6712"
        },
        "item": {
          "id": "00e9de4c-1221-442b-8989-926b58038af0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "14cd8e36-2bbe-4b60-bf8e-b31da6b57466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5115f51f-4900-4b43-99b4-09db623a19ee",
        "cursor": {
          "ref": "cedc509f-1a52-4608-b427-71563864a43c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "70cdf299-e6f7-4447-afba-68ae489effd0"
        },
        "item": {
          "id": "5115f51f-4900-4b43-99b4-09db623a19ee",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fd31d8d2-49e5-4e1f-bd60-07446fea026b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d187f749-c101-4116-8929-603441546eb9",
        "cursor": {
          "ref": "f55440b1-c768-4dd2-a1b8-0210a9c553d9",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "73707b75-7dc2-4de3-94ee-e54e4e48f14d"
        },
        "item": {
          "id": "d187f749-c101-4116-8929-603441546eb9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c2ed1d13-8caf-43d0-a473-81366887f6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dc0bf0-6081-4d90-91c4-bd4c71fcf8f3",
        "cursor": {
          "ref": "fb7da77a-b2ae-4b5d-af2a-5816f5c5420c",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e6c8b3f3-8763-4abb-8507-98e23206e8d6"
        },
        "item": {
          "id": "a6dc0bf0-6081-4d90-91c4-bd4c71fcf8f3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "eb917a77-9171-4a4d-bb3e-a8f9b17ae677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596d03ee-e306-48e4-976c-c5e8ed64abe0",
        "cursor": {
          "ref": "4d99c600-c0f0-4992-ae35-5e15aa241240",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "10baf032-d5df-42b4-a041-34bcb11f89f9"
        },
        "item": {
          "id": "596d03ee-e306-48e4-976c-c5e8ed64abe0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6569445b-bec1-49bc-9f70-b4d4a0771c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54253912-53ba-41fa-96a1-d21cc3d8f698",
        "cursor": {
          "ref": "461327a7-4cf5-48a6-be83-e1150954e4cd",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9362efab-1fbb-426e-a6c3-92ec041d93ba"
        },
        "item": {
          "id": "54253912-53ba-41fa-96a1-d21cc3d8f698",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b6fc8bec-196e-4be2-86a9-04cd9628b05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd75ddc-1fb8-431e-b5e9-2761576c9b45",
        "cursor": {
          "ref": "426001ee-884e-4a41-977c-8ace0c2a8f37",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9ac97961-ac8a-4f06-8583-166d74f4c52f"
        },
        "item": {
          "id": "bfd75ddc-1fb8-431e-b5e9-2761576c9b45",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d4435491-bbc6-4020-92a4-5fdb66ecc2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1308162d-08af-4465-8d8f-4ad21f7dba7e",
        "cursor": {
          "ref": "37abc426-0fc2-408b-9feb-9d9220baf1b6",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ae5c8e1e-4376-4b66-9a42-ee4aaf3fcd51"
        },
        "item": {
          "id": "1308162d-08af-4465-8d8f-4ad21f7dba7e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "98075bcb-8797-435f-af5e-6b6d16d8b213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd236a6-b067-4963-8b57-577ed9cc949e",
        "cursor": {
          "ref": "f4feb35c-bee0-480b-8458-84c6801f35c5",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3df7d235-b8ff-48d0-9fe5-aeb1b5c259f1"
        },
        "item": {
          "id": "4dd236a6-b067-4963-8b57-577ed9cc949e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d9da39a8-44d9-46a9-ac45-ed38673c3831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b89add1-afc5-466d-bc97-262bd0bfcd50",
        "cursor": {
          "ref": "b737fac8-1fb7-4a7f-900d-6b104676afd4",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "86479e25-304f-4e0b-8b30-62aab69ddc95"
        },
        "item": {
          "id": "6b89add1-afc5-466d-bc97-262bd0bfcd50",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "290eaf50-9262-48a8-817f-f1dd0d36439c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea349e5a-3777-4375-bf2c-4a84314cbde7",
        "cursor": {
          "ref": "316c569a-1100-4f56-ad48-8dd4a3a3a8a6",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "26515093-b8c8-44a0-bdfa-c2fe1462f363"
        },
        "item": {
          "id": "ea349e5a-3777-4375-bf2c-4a84314cbde7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a31d652e-bcdc-43fd-921f-c2b2309fbf04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c72cb3-bd6f-426f-a2a6-3314178f088c",
        "cursor": {
          "ref": "dd43180e-8f8c-4334-8549-f03badb90c59",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e2cc9eb1-cfad-44ea-bf37-31c24e1fc00e"
        },
        "item": {
          "id": "e6c72cb3-bd6f-426f-a2a6-3314178f088c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "38d37cff-fab3-49f0-b1ac-ab44e5880c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958ae364-4d79-4492-8c0c-1e3318a63815",
        "cursor": {
          "ref": "5b67e7f2-db87-4336-af3c-85fc68b32bbb",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c7ce1c96-1a53-4b5f-831e-362a415978b1"
        },
        "item": {
          "id": "958ae364-4d79-4492-8c0c-1e3318a63815",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "78cca7e2-bb36-4f21-80d7-8ef675c10245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea52fb54-0b0b-492d-b5a8-a11d0c926ace",
        "cursor": {
          "ref": "3353af0d-343b-4e20-999e-f167b4d32a5c",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9dd06215-c39d-4ced-9e05-099cf2de4f3a"
        },
        "item": {
          "id": "ea52fb54-0b0b-492d-b5a8-a11d0c926ace",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4c490495-090c-4031-a1cf-63a51f34d0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bb45e2-066e-4e66-8d3c-85ddc760047c",
        "cursor": {
          "ref": "3f24c129-3e14-4611-9397-ece0bb5fb1c5",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7e6e8020-a912-484e-911e-9070b822646a"
        },
        "item": {
          "id": "34bb45e2-066e-4e66-8d3c-85ddc760047c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2d49ee25-ccec-490e-b0df-070e35d85ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91984291-e844-4709-8cee-0d97097dca12",
        "cursor": {
          "ref": "4ad2c362-bc0f-45da-8cec-c2199dad2562",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fb86d6f1-d1a0-4400-9ba7-81b71e9b4411"
        },
        "item": {
          "id": "91984291-e844-4709-8cee-0d97097dca12",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "35fa2b85-7189-4ab0-b25f-01a06b4e3380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc725f0d-ed5f-40bb-8102-2f5c9cafc407",
        "cursor": {
          "ref": "56246aec-cac2-4d2a-9495-f6066e6ff607",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4f849468-cb2c-49ef-a5e8-6ddddced2d04"
        },
        "item": {
          "id": "fc725f0d-ed5f-40bb-8102-2f5c9cafc407",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3686606d-6701-46e4-960f-52f6fc5df9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f6f8e2-3eb7-413f-9e46-675e1073dc28",
        "cursor": {
          "ref": "645ca93b-01ec-4fb5-bddb-cd6916458fd1",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "473f03a3-1a09-4da7-addb-eb5914205bc9"
        },
        "item": {
          "id": "c6f6f8e2-3eb7-413f-9e46-675e1073dc28",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c70aea1b-1da0-46cd-bfc3-c69d4ef46e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f00b125-ddff-4533-b9ea-00594bbbf519",
        "cursor": {
          "ref": "0360bec4-34e0-4aed-9d64-dfb65cd8a902",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "520a5b09-d1f3-439b-b96f-c350f657b631"
        },
        "item": {
          "id": "3f00b125-ddff-4533-b9ea-00594bbbf519",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "07d54d0d-342e-49a9-b32e-221bf389df2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246b53e6-1097-4805-b4f0-38da92d1e0cc",
        "cursor": {
          "ref": "bbc25fae-0b41-491f-8b47-446679439075",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "cdeb869f-2bec-4aaf-ac7a-2f39e3853063"
        },
        "item": {
          "id": "246b53e6-1097-4805-b4f0-38da92d1e0cc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "70f2beb8-5787-4c78-83db-f593bca37148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b6c8c1-ec21-44aa-85e4-01a084484ffc",
        "cursor": {
          "ref": "b4f3e3dd-8aa8-4830-9a27-f2037e97d9d2",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "54639290-e6df-4bb8-89e0-cca3e759708e"
        },
        "item": {
          "id": "b5b6c8c1-ec21-44aa-85e4-01a084484ffc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c089da3f-c5b6-4d17-a9d4-c9a295018697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed6a13e-098e-42b5-a374-9840e83b82d5",
        "cursor": {
          "ref": "6fd6a573-9935-4112-bb0c-b1a1ff0d15cc",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7e6b1d97-79b8-4104-ad8d-95443eb22922"
        },
        "item": {
          "id": "2ed6a13e-098e-42b5-a374-9840e83b82d5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "837627d1-99ce-45be-bc81-518bcd6b7065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969f0ae9-62e1-4ce5-963b-b0c3da412cdd",
        "cursor": {
          "ref": "22f2440e-86b3-427a-83fd-a41d91c49193",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "99a086ef-1ae0-4634-8955-1b456e535357"
        },
        "item": {
          "id": "969f0ae9-62e1-4ce5-963b-b0c3da412cdd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1287f187-0363-4938-a6fa-d34c86756223",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52e694b-328f-4af7-967c-0ab55ab9a82c",
        "cursor": {
          "ref": "12d6f5a5-0d96-472f-9e48-35c15eea5531",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e608c0e7-7999-4065-adef-35223f0b4ca6"
        },
        "item": {
          "id": "a52e694b-328f-4af7-967c-0ab55ab9a82c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "107c44c6-f0e7-4102-804b-e1f79f94efe3",
          "status": "Created",
          "code": 201,
          "responseTime": 1043,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcac421b-46ad-484d-8105-1aa49038bf58",
        "cursor": {
          "ref": "1848ecb8-3931-4b6f-9dd0-e5ce7373f9e9",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dd30a722-2355-40d9-acf1-56d7ca761a3b"
        },
        "item": {
          "id": "bcac421b-46ad-484d-8105-1aa49038bf58",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dd8724dc-83a5-4d94-b09a-901f7260d74a",
          "status": "Created",
          "code": 201,
          "responseTime": 981,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e3a77f-92db-4175-87c2-797bf27b847c",
        "cursor": {
          "ref": "6ff05bb2-b6bf-4e31-80b1-4a58aaf69ad8",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9f7b584e-71e0-451e-a6cd-6e4f64eb9869"
        },
        "item": {
          "id": "43e3a77f-92db-4175-87c2-797bf27b847c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9869b249-7b36-4fbb-9e80-bb6e0b1ec8f7",
          "status": "Created",
          "code": 201,
          "responseTime": 970,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8275a6f-2654-4f2c-b068-809c6ffd7a0b",
        "cursor": {
          "ref": "18b6b249-6059-42aa-a83d-d9f8a10f4278",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ae24ac0b-2720-4f9b-b7c8-51629a8fb755"
        },
        "item": {
          "id": "f8275a6f-2654-4f2c-b068-809c6ffd7a0b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "59aa11cf-6670-49c7-8c25-873bd339483b",
          "status": "Created",
          "code": 201,
          "responseTime": 1004,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f377b8bc-c21c-4e6f-8e8b-24f415c61985",
        "cursor": {
          "ref": "1c002bc3-bfcd-4428-a6f6-f3c137d9a6f7",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7d17b265-12f5-43c5-864e-132584b77b22"
        },
        "item": {
          "id": "f377b8bc-c21c-4e6f-8e8b-24f415c61985",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e84304e0-7b66-4a8a-846f-12419a8e0a03",
          "status": "Created",
          "code": 201,
          "responseTime": 990,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e69bbc-5d87-4edb-b8ea-e5db4dfdc62d",
        "cursor": {
          "ref": "34b032e1-525d-4787-bd08-063727da5001",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c75f83cc-a506-4071-90c2-3c6ecfb02ef9"
        },
        "item": {
          "id": "21e69bbc-5d87-4edb-b8ea-e5db4dfdc62d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "993b2b4e-c4a2-49a0-ac63-680256645dd0",
          "status": "Created",
          "code": 201,
          "responseTime": 1579,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980f919b-3917-4c64-9bb2-7bb982890967",
        "cursor": {
          "ref": "aa7d2d0e-e7b2-4704-bd78-cdf19466c113",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6d8e8af4-a19b-4f0f-a6d4-5b57ec12ebe7"
        },
        "item": {
          "id": "980f919b-3917-4c64-9bb2-7bb982890967",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "40b250c6-4fd4-4b75-b3b0-5bd93a7ea816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae2f97d-6a13-4be9-bafc-72854f7a9106",
        "cursor": {
          "ref": "a735b7d6-5b43-43d6-919b-a02fe2f0ec06",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "87e76f22-1259-4779-881a-3168b9fa6df5"
        },
        "item": {
          "id": "cae2f97d-6a13-4be9-bafc-72854f7a9106",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6866c894-775f-43d7-8afd-916e78e264be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f317918-e85f-4a6e-b60a-76cd8b244d58",
        "cursor": {
          "ref": "115bfaa9-9557-4c3d-afe1-974f18f3726b",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "94190cdb-d5a7-498e-8555-bfdb5bfd7f2e"
        },
        "item": {
          "id": "9f317918-e85f-4a6e-b60a-76cd8b244d58",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a3609783-9a89-4e6d-81d8-03ae59fe1341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b0b22d-0f98-4668-8937-eec76905e278",
        "cursor": {
          "ref": "b8f4eba2-24bf-42c6-a73f-e5e07a3415f7",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2fad229-cb4a-4d6a-af76-b06c2bc89054"
        },
        "item": {
          "id": "e9b0b22d-0f98-4668-8937-eec76905e278",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "16cd772f-42b3-4f1e-a8de-47e5b5170a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9faa56-80df-4337-bacf-1f3948df0508",
        "cursor": {
          "ref": "94661ea0-1ec3-4928-9fc9-361285ce22d4",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "56102517-5c3d-48d9-952b-19a64a9fff19"
        },
        "item": {
          "id": "8f9faa56-80df-4337-bacf-1f3948df0508",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "399b7018-4f5e-4e19-a813-8cfc49911e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c9172f-b3be-44bf-a6a0-8c6fbbb33f74",
        "cursor": {
          "ref": "8efe5c7c-6b1f-4aa0-bd47-be6398031b0d",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "104f4a11-31e5-4ddb-9a0e-c9c354b69e24"
        },
        "item": {
          "id": "04c9172f-b3be-44bf-a6a0-8c6fbbb33f74",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3b6c2d50-7823-4c1e-a0f2-f1dad8031f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9c0465-4b90-474a-8553-0d3b226e414e",
        "cursor": {
          "ref": "d92c1d16-7012-48ab-ac6a-8bffc8b90c62",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2ce9bcb4-fe82-47b0-9100-9e0ddb2bfab8"
        },
        "item": {
          "id": "fc9c0465-4b90-474a-8553-0d3b226e414e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5608295b-0d1e-48bb-aa0c-c0f158865bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5993c7-4270-4dbe-9a0c-e7442f8adaaf",
        "cursor": {
          "ref": "5cb7e124-0921-439b-ab26-349c64fa1523",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "72a18f4a-17b4-4ab4-90ad-fe2aeab186cc"
        },
        "item": {
          "id": "6e5993c7-4270-4dbe-9a0c-e7442f8adaaf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "60f254d4-cec1-46b9-a8e1-ba990f573c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec79dfc-04a5-4c89-80d3-1183e2bbeec4",
        "cursor": {
          "ref": "c6ed3748-2090-425d-af11-185bb574ec9d",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7cfc282a-baea-4654-b0c7-8061e14e12af"
        },
        "item": {
          "id": "5ec79dfc-04a5-4c89-80d3-1183e2bbeec4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "156b0451-d4ac-4168-ab8c-96810bb322e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d14d36-21e7-449b-ae0a-e0c8613fc1ef",
        "cursor": {
          "ref": "90328908-411e-472a-9c66-830dde4ce0fd",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "66b6cb10-adea-48f8-b3d6-1b55a4e53542"
        },
        "item": {
          "id": "56d14d36-21e7-449b-ae0a-e0c8613fc1ef",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d99b850d-a272-4902-9772-e8e6d4ebd02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f74762-5968-4b67-a41b-171daad06865",
        "cursor": {
          "ref": "d10c5566-fd10-4033-92ae-2a3b0f9f909c",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4255e49b-92a4-4482-8146-09e5adf2057c"
        },
        "item": {
          "id": "81f74762-5968-4b67-a41b-171daad06865",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5bcea34a-85b0-4b6a-b53e-f7f20840116a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffde4e2-529e-40e4-ab60-a82dcc549435",
        "cursor": {
          "ref": "e4a33033-7afe-4e4d-9f48-af8c2305e07d",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d6b5fb0f-839d-4cbd-bb50-ac81fa43cc09"
        },
        "item": {
          "id": "6ffde4e2-529e-40e4-ab60-a82dcc549435",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ecff8545-272f-426b-8ced-8b76a671c999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b772de-0b04-4dc8-b393-c4860b04f80a",
        "cursor": {
          "ref": "b018dbfa-2ef6-4251-9f5f-68c5b81461ff",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "118e4b7a-0e3c-4ce7-8d10-c783302b0335"
        },
        "item": {
          "id": "51b772de-0b04-4dc8-b393-c4860b04f80a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "14aa184b-0048-46f6-88b8-0fc31b97aac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ced90bc-6082-4d4f-a031-f65839af9b03",
        "cursor": {
          "ref": "53c8362b-cf43-4dd8-bdaf-e8a5c4276510",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eea230d1-ad56-4693-96fd-a84655d87258"
        },
        "item": {
          "id": "8ced90bc-6082-4d4f-a031-f65839af9b03",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c5365d4f-ae1c-44c1-b2b0-611eed97f5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967dd211-6ba8-4878-ab33-bff078996309",
        "cursor": {
          "ref": "d4c8bb28-5a07-4b36-ab18-0a7c975a25b0",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a5983997-3794-4986-8e3e-5d4042282bb1"
        },
        "item": {
          "id": "967dd211-6ba8-4878-ab33-bff078996309",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "68d66134-77c4-48c7-aaa1-752723422594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fc2b8e-21f0-486e-b02f-dbf207bf90ad",
        "cursor": {
          "ref": "c279bbd5-7111-41fe-859d-54ee6b930526",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "50b31f95-c21d-470e-9c8c-e3b50a72427a"
        },
        "item": {
          "id": "99fc2b8e-21f0-486e-b02f-dbf207bf90ad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1e945119-f4d6-43db-bc6a-638db02176a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2655cf8-1dd3-48be-8238-72e7da17758b",
        "cursor": {
          "ref": "fcd5c616-edc0-48e6-958a-f08bdf49946e",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f000e2c6-4fb1-405c-8460-c95a5690e02d"
        },
        "item": {
          "id": "e2655cf8-1dd3-48be-8238-72e7da17758b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "42242b83-c965-405e-ac9a-bf4d242baeaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a954f9-ed35-4c09-b573-dd3a3c0bac1d",
        "cursor": {
          "ref": "f18ac19d-401d-4dfc-b163-b550a9d72e14",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "39210bb4-e746-482a-b0e4-b431689514d1"
        },
        "item": {
          "id": "f4a954f9-ed35-4c09-b573-dd3a3c0bac1d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "69979293-af2d-4f39-b5db-79b05696324b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd801063-1f5a-41e1-ab8f-7cb99f88af6a",
        "cursor": {
          "ref": "f8d197ce-7e6f-4562-a659-e3f2ff4bcb15",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8290f796-b020-44a2-9c95-215c9663b9f7"
        },
        "item": {
          "id": "dd801063-1f5a-41e1-ab8f-7cb99f88af6a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5e03ff22-5ff1-4886-aa7c-364ee8141955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a811e4b0-6360-4cf0-9b57-242133543c51",
        "cursor": {
          "ref": "89a13772-1c3a-4032-ac47-c0df8ccc5dde",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2d3391fd-6424-4275-a880-863426a1ed26"
        },
        "item": {
          "id": "a811e4b0-6360-4cf0-9b57-242133543c51",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "87e47712-2dfd-487e-be7e-b3b40dfe78c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4104ca-2c02-4380-92e4-de487b3b991b",
        "cursor": {
          "ref": "7a4e0659-6555-4ea5-8739-2587ebb5df0c",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bfa50d9d-f89f-4a95-bc6a-6f372f18f602"
        },
        "item": {
          "id": "de4104ca-2c02-4380-92e4-de487b3b991b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aca94d72-d98f-41be-a6ca-dcc172e358c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0c3f32-ca6b-4f03-bf29-730059daf90c",
        "cursor": {
          "ref": "16564192-fe2a-4bdb-9a61-7b3cf77fc57b",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5727562a-d89a-4ec8-9a51-2f041af6432e"
        },
        "item": {
          "id": "2a0c3f32-ca6b-4f03-bf29-730059daf90c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "30924f82-074a-47ad-a612-30c25b54396b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2a4074-3ee9-4caa-bbc7-c9e5528ad107",
        "cursor": {
          "ref": "7fbeea08-d1d5-485e-b6d5-fd6cf54bfe84",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d5e4f84f-4989-430d-b637-e57f3e1e6b3e"
        },
        "item": {
          "id": "2e2a4074-3ee9-4caa-bbc7-c9e5528ad107",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b6d17363-5708-4943-9aa7-d854241e776a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d9d694-aa06-4fda-b30d-bb2603269efa",
        "cursor": {
          "ref": "0e2d58af-9c96-4848-9c88-136d1909a105",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2f6f8dd6-55df-4b92-b0ad-57c31bc20fb3"
        },
        "item": {
          "id": "56d9d694-aa06-4fda-b30d-bb2603269efa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c938eecb-200e-4f21-869b-1745ffd756f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130b9321-58d3-4cf3-aafe-dc80885be874",
        "cursor": {
          "ref": "f14fafa1-5657-4849-8c4b-e30ebeb88678",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b0186650-7e40-4c65-b077-02958f17710e"
        },
        "item": {
          "id": "130b9321-58d3-4cf3-aafe-dc80885be874",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71952665-3982-4083-a1f8-fe6d1efa093e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d065e59c-d682-4436-afe1-180edd17b223",
        "cursor": {
          "ref": "d6c36287-e31c-495a-844e-f5a22e64dff9",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a6df24a7-a8ed-419d-acbd-914024b9b84f"
        },
        "item": {
          "id": "d065e59c-d682-4436-afe1-180edd17b223",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ffb35c58-41af-45fc-be3f-5ff82a3acaab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1108b19e-338e-4a3d-9fbb-01035b24e2fa",
        "cursor": {
          "ref": "12634d25-f6e1-4d7f-8044-c82d6461b9ba",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2fa77ce1-1481-4e9a-809e-988095f0f573"
        },
        "item": {
          "id": "1108b19e-338e-4a3d-9fbb-01035b24e2fa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "58280e38-fe2b-43e9-8f02-0da6a5984a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af5891d-e900-4486-a0b4-d2ec01fbdbcf",
        "cursor": {
          "ref": "660bcb1e-5884-4724-acba-1bbbe4bcda3a",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0b896a46-140f-40d5-af79-e0e6abaa2299"
        },
        "item": {
          "id": "1af5891d-e900-4486-a0b4-d2ec01fbdbcf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a1a06469-43ae-4851-8264-31d31bf68afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa8e62e-5a5d-42c1-be32-91037723bb13",
        "cursor": {
          "ref": "f76f80ee-dff1-4742-a635-6bb5ec26cd01",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "403e0f75-063c-44f4-9a90-8102ed0faa80"
        },
        "item": {
          "id": "7aa8e62e-5a5d-42c1-be32-91037723bb13",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "32c857f4-3aba-4e33-a289-7675c6843221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8a8442-d200-49e5-8799-033c88be4767",
        "cursor": {
          "ref": "48d0de95-ae5d-4b63-8f89-d26b4ffa9c83",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8cdcbc07-26c9-43b0-ac3a-43275a8087f1"
        },
        "item": {
          "id": "fa8a8442-d200-49e5-8799-033c88be4767",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f097b787-3c62-47ce-9bd9-7392024c6736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fcb852-58b7-4142-949b-ea797a8b041f",
        "cursor": {
          "ref": "24f68409-9761-4570-8804-8dd9d060c328",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "867e37bb-a062-4981-9e16-d047823cfee8"
        },
        "item": {
          "id": "55fcb852-58b7-4142-949b-ea797a8b041f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5cdcb45c-552c-4b4c-8003-240e42e3169e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbf219b-52bd-48da-af3e-e1d0d8cc73d6",
        "cursor": {
          "ref": "040ff35f-66e2-4a70-8432-860c229be13a",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0acc84c2-29e0-4935-9647-316026a1c3ed"
        },
        "item": {
          "id": "4bbf219b-52bd-48da-af3e-e1d0d8cc73d6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d2e0a0b2-8ee0-406f-aa1d-5edf71c17c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85562e1-c66e-4bd1-9089-30aa6da47b33",
        "cursor": {
          "ref": "0ae91e7f-01e9-43a7-b861-8fee61ebab3b",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b4194502-0701-4fe8-b7dd-650e380e60cd"
        },
        "item": {
          "id": "d85562e1-c66e-4bd1-9089-30aa6da47b33",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "effe3e0d-8d79-4656-9e86-45e1f1cb2292",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed499623-6278-4d2e-82a1-9b974326f5a5",
        "cursor": {
          "ref": "22d94b11-074a-466c-993a-74e47cb7f586",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "df9e324e-5d7a-45d8-b80e-a05204403d5f"
        },
        "item": {
          "id": "ed499623-6278-4d2e-82a1-9b974326f5a5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d9cf4e57-16c0-41cb-bb73-edee8908f31d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987a9df2-4ad9-4544-95e4-058c4014ffd0",
        "cursor": {
          "ref": "33526545-3236-4a97-93eb-2c531886c5be",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c7bc8bbb-a51a-487b-8e97-2da9bc08a482"
        },
        "item": {
          "id": "987a9df2-4ad9-4544-95e4-058c4014ffd0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "56d2fce5-05cf-4769-a209-df79d79e7f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fc278e-443e-4341-a0c8-0af6aaf216c0",
        "cursor": {
          "ref": "1dcc4a39-6a14-4244-b31b-0958733cfd30",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a453b51a-7df8-4e06-9e4e-c622d7a247e6"
        },
        "item": {
          "id": "b1fc278e-443e-4341-a0c8-0af6aaf216c0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f3cf76ec-5cdc-4122-9c9e-56e30cf37040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c90fcb-77c2-402c-8196-6d9e5f48296b",
        "cursor": {
          "ref": "a5a1aad3-584f-4e4a-bb47-208faa3f3edc",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2ef6ad61-a109-45f7-9087-6dec826b6369"
        },
        "item": {
          "id": "f6c90fcb-77c2-402c-8196-6d9e5f48296b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9f542731-354b-44b8-8d04-14667c223f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ec437a-b922-4fe2-92d0-a76885e38759",
        "cursor": {
          "ref": "1983dc12-8827-4528-892e-40f8ac15c48a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e828756c-718e-476f-9ba7-3f652d846cb7"
        },
        "item": {
          "id": "79ec437a-b922-4fe2-92d0-a76885e38759",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e6a08038-94eb-42cf-b59b-7dc2313c742b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3d5e32-c878-4186-a57c-5be244cbe96c",
        "cursor": {
          "ref": "eb993418-d21f-46d3-940d-316826016dc2",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "64f4abff-7c38-49d7-8c5a-3f18119fd894"
        },
        "item": {
          "id": "bf3d5e32-c878-4186-a57c-5be244cbe96c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6c4dc83e-fa57-4826-9821-1bde278cbdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8030db9-1bd7-4a6c-aa7d-c704e1a45894",
        "cursor": {
          "ref": "1f340653-d086-4ee1-957e-c68734cf9608",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a0044fbc-8917-41a8-a6a0-4dc275f10a9b"
        },
        "item": {
          "id": "f8030db9-1bd7-4a6c-aa7d-c704e1a45894",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "539ea9f6-92d3-4910-b2f2-875403af11f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af541f30-9451-44fc-85e3-a2215d4cc9e9",
        "cursor": {
          "ref": "1aaab21c-9893-4ab7-a423-b7f8431a2d8d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "83501a52-a5a7-4ef9-8b42-7d9497155e15"
        },
        "item": {
          "id": "af541f30-9451-44fc-85e3-a2215d4cc9e9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "31dbd771-6f44-45b3-9a7b-794688cd1e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6082eb70-956a-4f53-858e-8d86bcefa6dc",
        "cursor": {
          "ref": "4862025f-1d8e-49f9-b7d3-f6e03deb821b",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "fb192e07-96a8-43dc-a284-dcb3619311e9"
        },
        "item": {
          "id": "6082eb70-956a-4f53-858e-8d86bcefa6dc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ca0dae42-6c75-40ba-a734-23adca2359d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4560ec-07a4-4acc-9d7c-bbe5864ecd66",
        "cursor": {
          "ref": "bc2e055a-694e-4ea3-9f38-6ccbbdea5a8a",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "09577eae-2290-4477-a73a-03de3055698a"
        },
        "item": {
          "id": "8e4560ec-07a4-4acc-9d7c-bbe5864ecd66",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "741fbd99-b871-4249-8385-1b7c866d3ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6948645-fd05-458e-bb8f-3b68698fd0bd",
        "cursor": {
          "ref": "4fca87ac-cd7f-44df-ab3b-68f245b20a5c",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4cc9276f-8639-43d4-9695-ce2616abe384"
        },
        "item": {
          "id": "b6948645-fd05-458e-bb8f-3b68698fd0bd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9b1637a5-3092-46c2-89fc-8072d35dca74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725e3e37-6833-4a6b-bf1e-596e722cc94b",
        "cursor": {
          "ref": "fb581e43-1446-4cce-bcb0-352c77b27e82",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e0bd601e-ab54-42d5-99c7-699727c21813"
        },
        "item": {
          "id": "725e3e37-6833-4a6b-bf1e-596e722cc94b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8b31d974-2f05-4bd0-9f56-378b976acd5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3abdee60-ee65-417d-ae4e-cd40290db47a",
        "cursor": {
          "ref": "a33d26c7-860e-467a-841e-f72b748b123b",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "29842490-516a-445f-98ad-16604334e191"
        },
        "item": {
          "id": "3abdee60-ee65-417d-ae4e-cd40290db47a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ba8d416e-b430-4415-b48a-94d8ebff71c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4066da-1633-4309-8004-fb480116b590",
        "cursor": {
          "ref": "ba63cf90-7e23-4db0-be5a-6a38ef3dd7fb",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f92f4503-d7f3-4e46-b0a0-3921da58efdc"
        },
        "item": {
          "id": "ad4066da-1633-4309-8004-fb480116b590",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "afc0c3df-ba5e-4637-9262-01ee1e04f076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b269c6b7-ab50-48cd-a1b3-a861d5e3a370",
        "cursor": {
          "ref": "2262b65a-ae47-4f6e-b34d-a1d2dc4429af",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "055da15e-aa34-42cf-8fb1-f19214a9d7ae"
        },
        "item": {
          "id": "b269c6b7-ab50-48cd-a1b3-a861d5e3a370",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "019a0e0d-08d4-4254-b021-93df168c2515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64776385-bbf0-4b1a-ac61-0523d5dcd954",
        "cursor": {
          "ref": "93f0d0af-1e2a-492c-9dd9-ffec29ff14b2",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5128dfb1-6814-4611-91e5-b33f93812aa6"
        },
        "item": {
          "id": "64776385-bbf0-4b1a-ac61-0523d5dcd954",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "50b4b6f6-a356-410a-9942-d05e3ad0fa99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836e012f-e8b9-4ac0-95e5-79fffeaa093b",
        "cursor": {
          "ref": "c6c31181-a2e2-49a5-bae1-f10c4eb4d2aa",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e1752898-f7dc-4e8b-9793-5aeac12588f6"
        },
        "item": {
          "id": "836e012f-e8b9-4ac0-95e5-79fffeaa093b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e3f4f86b-bdc7-4c05-a094-fca405cff264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a053b8-d803-4408-9a46-b4a57fb8c52c",
        "cursor": {
          "ref": "6f1445db-61ca-431d-8551-e686ae32445c",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "08ed321a-a569-4bee-b781-c8e392fcc65b"
        },
        "item": {
          "id": "60a053b8-d803-4408-9a46-b4a57fb8c52c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3b076429-8967-4c2b-8806-e08c038a0fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5f1a45-3084-4a03-9c0e-3a1e6fcece3c",
        "cursor": {
          "ref": "64965251-3cae-4408-9ffd-a577f1af7340",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "4660c4cc-5535-4945-96d2-6e1fc5f70720"
        },
        "item": {
          "id": "9b5f1a45-3084-4a03-9c0e-3a1e6fcece3c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1d3eef2f-907a-4c65-a589-36040d77dd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881aff19-c875-403a-9ae8-e00d21883d32",
        "cursor": {
          "ref": "1530f2f1-427d-4a12-b0ec-a8cab9a9c4f1",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8f112b2e-dcdc-412d-a127-175152310d1a"
        },
        "item": {
          "id": "881aff19-c875-403a-9ae8-e00d21883d32",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5a8b99ef-1436-475d-b36e-3eebf797fb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb77035-3704-4f7a-a497-97e37d2a9552",
        "cursor": {
          "ref": "aed4df4c-c348-4285-90cd-1f24241c6c9e",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "99ed271d-cf21-4f9e-b7ca-be348d794958"
        },
        "item": {
          "id": "dcb77035-3704-4f7a-a497-97e37d2a9552",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cb05ed24-2395-49f2-99df-8f606f6a5b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065e92df-a791-4645-9840-7df227f5c857",
        "cursor": {
          "ref": "135a3bee-3274-49cb-9957-83b083cb1b93",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d54c1a76-3048-4af9-8519-7fa5d36bc551"
        },
        "item": {
          "id": "065e92df-a791-4645-9840-7df227f5c857",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8e75c920-049b-429d-916f-ee7852328d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0429f5d9-fcc5-4347-9ead-64845cc6f27e",
        "cursor": {
          "ref": "d632fd51-32eb-4233-83d7-1f5f35c1d836",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "19c44a14-1194-444c-a38d-9c8cd39ac60c"
        },
        "item": {
          "id": "0429f5d9-fcc5-4347-9ead-64845cc6f27e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "228edb24-786c-4007-aa93-0b7a84ba038a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315b2830-d625-405e-b791-99fa7ea5a537",
        "cursor": {
          "ref": "81f9e255-f39e-4c39-b163-9536de3b89d6",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "086ce359-0f24-4ec0-b847-01dc777982ee"
        },
        "item": {
          "id": "315b2830-d625-405e-b791-99fa7ea5a537",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6b7785f6-10bb-4df5-98bf-600d7616b261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b4f765-af39-477c-9484-3f8d3ac43307",
        "cursor": {
          "ref": "89f399a1-b0b8-4c37-8c9f-6e8513f38bee",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4eb9a421-a2ce-4aed-b1b8-29b862c088dc"
        },
        "item": {
          "id": "37b4f765-af39-477c-9484-3f8d3ac43307",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c45bd696-531a-4560-a9e3-64d3ce7eff60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4daade29-8512-4cc2-9d6b-42b2cfadcf0c",
        "cursor": {
          "ref": "34ce5f38-6e35-4b06-a145-2bc41c96d36f",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c08d829e-54a2-4b55-8b1e-9b1601d9ab6f"
        },
        "item": {
          "id": "4daade29-8512-4cc2-9d6b-42b2cfadcf0c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "61d7a6b3-a084-443d-b263-6f6c38815b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4793172e-f857-4a8a-a8c2-058a0073a99e",
        "cursor": {
          "ref": "88344314-7982-4fb3-abb8-6d0f853f4d4b",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "33f54c5b-bb53-4486-b46d-af63ddb2523e"
        },
        "item": {
          "id": "4793172e-f857-4a8a-a8c2-058a0073a99e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1b1a0bcc-f815-4756-b044-7e73e2d3138d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b527027-0c7f-4aad-8b60-fb82c34e2d3c",
        "cursor": {
          "ref": "9ea95c7b-a6ad-4199-804a-a02af8344303",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "40865e8d-63d9-4325-9569-c73bb7d31756"
        },
        "item": {
          "id": "0b527027-0c7f-4aad-8b60-fb82c34e2d3c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "48d92ea8-f6a0-493a-b9c3-7e4795f7d681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9779a8fa-5097-441f-beea-0839a45baf97",
        "cursor": {
          "ref": "516efc17-ce9e-476b-83ac-13f985d11e4f",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "724de530-94a8-4120-a30b-1e566ee30ba0"
        },
        "item": {
          "id": "9779a8fa-5097-441f-beea-0839a45baf97",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c22476a2-8238-46b9-b200-048405b58d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbcb784-78bb-4f21-bf53-03601059339d",
        "cursor": {
          "ref": "7db6fa6f-948f-4ec5-bb4d-c5b8b902c1fe",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "51f41865-731c-43a6-90ee-defea33affc0"
        },
        "item": {
          "id": "3cbcb784-78bb-4f21-bf53-03601059339d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7483a36a-98e4-4d68-bf14-235bc3b3c020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac12460-d3f5-4f3c-bcd4-95a614065b22",
        "cursor": {
          "ref": "07280ccb-54c0-4250-8e72-7607be4058a2",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5a8e6142-2129-4810-bd11-86c3a92cf3f1"
        },
        "item": {
          "id": "1ac12460-d3f5-4f3c-bcd4-95a614065b22",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "94a59446-18b1-4c02-9cd9-ad1b42f4f572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdbe8be-9c9e-486d-b7a8-13fb8716969c",
        "cursor": {
          "ref": "a36852c7-46d8-48ca-ae2a-d0b188a77299",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "77be7479-9b42-49d5-ac0a-67d771b8e99f"
        },
        "item": {
          "id": "acdbe8be-9c9e-486d-b7a8-13fb8716969c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "45feaee0-e891-4f29-afa0-abe79add1325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8493f244-9c9a-4b05-8086-5a5a9e95547a",
        "cursor": {
          "ref": "d360c1a2-c79e-4a96-9a2d-da3262c8d429",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a671bfce-8f49-4620-9586-26365bc5c9e5"
        },
        "item": {
          "id": "8493f244-9c9a-4b05-8086-5a5a9e95547a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7d828d7c-8957-456d-8821-f0ec49b42fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5453965b-b41c-46d0-b606-60caff14285a",
        "cursor": {
          "ref": "8f46d5a0-3c2d-45d8-9d22-a75d7cfa6559",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3da0b659-85f5-49c6-83eb-c9c33b3ba1fa"
        },
        "item": {
          "id": "5453965b-b41c-46d0-b606-60caff14285a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "874af57f-e1c4-4701-851a-90a2af0211e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b027bd72-2911-452d-b212-de372aec74ce",
        "cursor": {
          "ref": "40db191d-6299-4668-bea5-568aba5de7ca",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a92dbb90-5830-475e-be37-16a171b963ca"
        },
        "item": {
          "id": "b027bd72-2911-452d-b212-de372aec74ce",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d978f2b6-0b20-448d-957b-8c736aa45053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bfcd37-8949-4b4a-96c1-0d44402cabf0",
        "cursor": {
          "ref": "d10f6197-b589-40f5-97da-bb0ba62758a1",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "505995d1-f8e6-406f-a940-36c22d162065"
        },
        "item": {
          "id": "97bfcd37-8949-4b4a-96c1-0d44402cabf0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e55fe2cf-ff75-49db-b203-d1089b4e82a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078ce87f-ce2f-4b1d-8171-476591fa950a",
        "cursor": {
          "ref": "0bff3779-b7db-4d17-b1b0-013788ac286b",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "14c63cb9-9841-4e4b-b18a-b52b93d180a6"
        },
        "item": {
          "id": "078ce87f-ce2f-4b1d-8171-476591fa950a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6c83db57-21ed-4098-837e-c9902ca8ed5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5601386-5eea-47a1-99a9-3b9583f9de8d",
        "cursor": {
          "ref": "817aec8b-614a-4d9e-94d6-df485b445fb4",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "debab21c-ec41-48c8-bd6c-6e21996ef377"
        },
        "item": {
          "id": "a5601386-5eea-47a1-99a9-3b9583f9de8d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b767da76-7901-48fb-bb58-6af5933af255",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920023fb-37a6-4de5-a6d7-189d2c7d9905",
        "cursor": {
          "ref": "7ba335e1-2f04-41ef-84b2-c384417db04a",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dae9c1ba-94c2-4fb7-9886-9d7def53dfa1"
        },
        "item": {
          "id": "920023fb-37a6-4de5-a6d7-189d2c7d9905",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f3cf2c93-ff82-4171-a4eb-b8741e823e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99902997-e106-4ff0-8fbb-a088de80c1b6",
        "cursor": {
          "ref": "c9aa9ce6-9b40-43eb-88c2-ca962d51887e",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7d245bc6-bcb9-429e-ba3a-a323e5aa191b"
        },
        "item": {
          "id": "99902997-e106-4ff0-8fbb-a088de80c1b6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f578f165-5df9-4c8c-bcc1-6045faa570af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43dbca73-99c4-4495-9ee3-d0ff832a16dd",
        "cursor": {
          "ref": "68da1767-0d1a-41e0-af07-008c5d79741c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e8cc2777-9a60-42c4-8525-10e05c20466a"
        },
        "item": {
          "id": "43dbca73-99c4-4495-9ee3-d0ff832a16dd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c679963d-0d2a-4e8b-8ec7-736a65e9ee7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9261e51-460d-4894-8e85-ad87b442d784",
        "cursor": {
          "ref": "9a50e408-a1b0-412d-986a-8766feaae8eb",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3f410703-d502-4908-919d-bc40eb50aa44"
        },
        "item": {
          "id": "d9261e51-460d-4894-8e85-ad87b442d784",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3af611fd-dc53-4584-8965-b8aec70bec6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7959f53b-ba29-41b8-8f1d-576f32652f99",
        "cursor": {
          "ref": "6f9d48b8-b215-4556-a268-81e462d72ccd",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "eab6834a-c859-48db-87d5-572f1111e2c5"
        },
        "item": {
          "id": "7959f53b-ba29-41b8-8f1d-576f32652f99",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b6baaaeb-1401-46bb-8fea-a2fa299b458a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6340fec3-c4dd-422f-b4bd-d9615f23ee81",
        "cursor": {
          "ref": "0eb09298-305a-4a45-b44a-1a78a63e9673",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e88b5014-8787-4d2d-817a-a9fd579dea8a"
        },
        "item": {
          "id": "6340fec3-c4dd-422f-b4bd-d9615f23ee81",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6e4c2222-f0a8-4424-ba63-9e78b12bf0d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6fcb7310-be0d-45c7-9f68-9b52d5f5dfdc",
        "cursor": {
          "ref": "c3c03907-7172-4fef-b18a-1b33d5681261",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "082af171-0f18-45b2-8013-f23fd3bc7ec4"
        },
        "item": {
          "id": "6fcb7310-be0d-45c7-9f68-9b52d5f5dfdc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3a0ba091-48de-4fd3-b8de-5ce55402a6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6ceffa-2b68-4e27-b9c3-e457ee32e356",
        "cursor": {
          "ref": "5df9626c-55ea-41fa-916d-86d2fde2f1a3",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6f46085c-fc54-4805-90e1-08411da20c5c"
        },
        "item": {
          "id": "0c6ceffa-2b68-4e27-b9c3-e457ee32e356",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9d8d6196-8f4d-491a-9f83-b523cb216a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50394702-1b3f-4fb9-8a11-0990a37f9c92",
        "cursor": {
          "ref": "5a4c3d66-ea39-4543-99dd-68637c1e6852",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "15d63425-b555-4186-812c-155ee6617126"
        },
        "item": {
          "id": "50394702-1b3f-4fb9-8a11-0990a37f9c92",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "74dd2964-1e9a-4b7f-9c4e-5f9f98de0df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34461bcb-5735-4220-bbeb-ccc4aac8d628",
        "cursor": {
          "ref": "97135f92-344c-44a2-8ae4-1366c08c6993",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "71fc6d87-093a-447e-a407-114814b4e681"
        },
        "item": {
          "id": "34461bcb-5735-4220-bbeb-ccc4aac8d628",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "35a29a96-a988-4090-9242-ccdf124951dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b825f54c-887b-4779-9373-bcde606ba6bf",
        "cursor": {
          "ref": "e60c26a3-4d6f-4005-ad57-1cfa0d8df107",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5725da29-1a14-48f3-9457-2b64d7f8d7f2"
        },
        "item": {
          "id": "b825f54c-887b-4779-9373-bcde606ba6bf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7235b9b7-a266-40ad-a798-1804395a8c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94566496-f43b-4f3e-9ea2-3ed6ee1f17ef",
        "cursor": {
          "ref": "b800d868-9ae8-4436-a3f2-1e2c018edaea",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "199f842a-4ec4-49e2-972a-42f94255a42f"
        },
        "item": {
          "id": "94566496-f43b-4f3e-9ea2-3ed6ee1f17ef",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1fc8403a-0f84-48e9-b9fd-9251388309cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdfc099-46c6-49bc-823f-ccf2988720d1",
        "cursor": {
          "ref": "ac9b620d-7198-4ff9-ae42-e5315a3281b9",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9be1899d-da36-4630-b8fd-34755476b69e"
        },
        "item": {
          "id": "afdfc099-46c6-49bc-823f-ccf2988720d1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d3af7f59-7a2d-43a8-aff7-62141359d9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d621dd1-cea2-4089-85cc-5c2f5f9fc2f8",
        "cursor": {
          "ref": "63ba646b-7095-4e5a-a67f-38266f125d4a",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d2e12736-4eaf-45e4-941b-2a339fcf911a"
        },
        "item": {
          "id": "7d621dd1-cea2-4089-85cc-5c2f5f9fc2f8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3602842a-6774-4538-b484-57b92862a597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be32f6d0-8065-4967-af91-c4e610da677f",
        "cursor": {
          "ref": "247cfbb2-3493-4749-80f5-b4d99c262132",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "542b4d43-7ac1-496e-968c-c499f6c9be50"
        },
        "item": {
          "id": "be32f6d0-8065-4967-af91-c4e610da677f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a81926bd-4d09-458e-85e0-b0cfb072eb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195ff48c-6171-414e-a71c-f2ee7f260bcb",
        "cursor": {
          "ref": "d221f9c3-62fa-4e67-b357-f269f7291d55",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cf04f30d-6df4-4be8-83bd-7e769afbb7a8"
        },
        "item": {
          "id": "195ff48c-6171-414e-a71c-f2ee7f260bcb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "acfdd541-a289-4c3f-aa13-b5e328c0cc20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a5e4f1-efdd-4772-9d4f-2a98b7f3fab2",
        "cursor": {
          "ref": "d62a595e-e21d-475e-85ee-a9ef9ea45cfc",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "290af1fd-131f-4e7f-9117-bbe39c3d4039"
        },
        "item": {
          "id": "98a5e4f1-efdd-4772-9d4f-2a98b7f3fab2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a4cafb58-1a3c-49eb-95c7-50e72f7f8430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df08b188-89eb-445a-8be3-7ef968e0304b",
        "cursor": {
          "ref": "1adba61d-829a-48f5-a9e7-8ba3403baaa7",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "714fa9e1-614c-4b46-8738-2f570e950cb5"
        },
        "item": {
          "id": "df08b188-89eb-445a-8be3-7ef968e0304b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c8a3241f-f43d-45d0-a3a6-136289f3f2a2",
          "status": "OK",
          "code": 200,
          "responseTime": 745,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "fba0968a-bc1b-44ec-b33c-86713717ed6d",
        "cursor": {
          "ref": "2cd40275-db44-4d0e-939b-63ef708270f8",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e0ba5ae8-26c4-4c1f-afbe-510975b9d3f3"
        },
        "item": {
          "id": "fba0968a-bc1b-44ec-b33c-86713717ed6d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "dee6398b-2f92-415d-9345-0caa9b61ecca",
          "status": "OK",
          "code": 200,
          "responseTime": 785,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "236c1eff-4e26-4e05-bd9a-0607c96dce6c",
        "cursor": {
          "ref": "a7a55da4-37b9-479d-b0d9-67f118455bad",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ad0c82a9-0e9c-4456-9378-02408f9731f9"
        },
        "item": {
          "id": "236c1eff-4e26-4e05-bd9a-0607c96dce6c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "81cd04a2-a5cc-4f87-8ec3-7be96367ba08",
          "status": "OK",
          "code": 200,
          "responseTime": 780,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "93291675-817a-4597-ba22-20be007fe1de",
        "cursor": {
          "ref": "d295ef30-bbb4-4342-874a-99dc3363c877",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c7aabf99-1fa5-40ae-871e-efd480784902"
        },
        "item": {
          "id": "93291675-817a-4597-ba22-20be007fe1de",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c10aaeff-2e07-420a-9018-add446870fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a023a12f-3993-4009-a890-ee510455634f",
        "cursor": {
          "ref": "cf875aa9-a53b-4057-8bc1-5ee682091734",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9d449c2e-e7fa-43fd-ab8b-be7c7989ad6e"
        },
        "item": {
          "id": "a023a12f-3993-4009-a890-ee510455634f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c3133c6a-0839-4b54-b148-60d47be97fee",
          "status": "OK",
          "code": 200,
          "responseTime": 765,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "1920fb8f-0e10-442e-8055-06aaeeb0320f",
        "cursor": {
          "ref": "0572aa0e-9d1e-4a26-865c-a737b6f84e86",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "46ff9caa-d93f-4d83-a5f1-a023e7fd466f"
        },
        "item": {
          "id": "1920fb8f-0e10-442e-8055-06aaeeb0320f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1f232bc0-998f-4080-a291-0a0855db4413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f770a61-a2db-45f5-b82b-c6421ee692a0",
        "cursor": {
          "ref": "b00c4553-b9bc-40ed-a2dd-d3d6643d6c5b",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d90f4781-8f9a-4f8f-92aa-1e2cc45873a9"
        },
        "item": {
          "id": "6f770a61-a2db-45f5-b82b-c6421ee692a0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e8a229bd-7a89-47ea-b1c5-583b7748da4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305d920b-69f7-4b64-853d-56f4a5040bf5",
        "cursor": {
          "ref": "56c7b058-800f-4cff-8c01-3d3bc29fbb8d",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dc72d5ca-6bb2-47ee-925c-2520895c9ff0"
        },
        "item": {
          "id": "305d920b-69f7-4b64-853d-56f4a5040bf5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ff405e9a-8ce7-4526-992e-278a4e201c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7af9dd-e828-4730-975c-e8c02542ae41",
        "cursor": {
          "ref": "1a0755f1-e608-440f-92bd-7aaedca3101c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bf665db0-82e7-40ca-8730-e3dfc3826599"
        },
        "item": {
          "id": "bc7af9dd-e828-4730-975c-e8c02542ae41",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a28abf37-0870-4fed-83a7-213aa92d4533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2aaa6b-9721-40ac-8f6f-26f3ad739fce",
        "cursor": {
          "ref": "343ea485-84ff-4eb1-9dbc-c4d261c70906",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4620dc20-5173-4070-9696-25e35d48e348"
        },
        "item": {
          "id": "af2aaa6b-9721-40ac-8f6f-26f3ad739fce",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ee6b0cd7-dea8-4f25-bfaf-39151e69ebed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2759a7b2-9bc4-48c6-9883-ce15216b3b63",
        "cursor": {
          "ref": "3e30b26d-264a-46b3-accb-39fca4705d41",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "462152d8-1067-4fb5-94b5-6ec4b2c89eb1"
        },
        "item": {
          "id": "2759a7b2-9bc4-48c6-9883-ce15216b3b63",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a092e992-4a04-47f6-94df-cdf0a9ee408c",
          "status": "OK",
          "code": 200,
          "responseTime": 770,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ce1b68ed-285c-4303-8968-dd8d1e8e2b6c",
        "cursor": {
          "ref": "b03c9ff5-dd1b-4e63-a04c-f3a0e827f3f0",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "14aec463-dd30-4d30-8a96-1ffc3a43cb30"
        },
        "item": {
          "id": "ce1b68ed-285c-4303-8968-dd8d1e8e2b6c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "72114ca1-aacd-4ba5-978f-4805757b712d",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a8999952-4235-4c0f-bb8d-e1fa7073202d",
        "cursor": {
          "ref": "b260d98d-89ea-42f1-8819-df00bba25323",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c6d337c6-20ba-493b-81d7-2a84e23a2fa1"
        },
        "item": {
          "id": "a8999952-4235-4c0f-bb8d-e1fa7073202d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2af11b34-2e08-47f8-b522-99f41facdad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27576db-85ac-4902-b9a3-46102510eb30",
        "cursor": {
          "ref": "feaaa915-cd5e-4bec-b6c6-74946e87d410",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f8ee5d63-b1c3-44be-926b-6ee4f88561d0"
        },
        "item": {
          "id": "d27576db-85ac-4902-b9a3-46102510eb30",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "78e6b3aa-edbb-43fc-9d85-96b70142df85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1268993-1c23-44f9-994d-fe8f04ab5545",
        "cursor": {
          "ref": "b12e4156-ed7d-4e26-9564-d3327a70ad98",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6e2e010e-8c02-44d5-ab5d-81f5db75fdd2"
        },
        "item": {
          "id": "e1268993-1c23-44f9-994d-fe8f04ab5545",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8bf9766a-e848-4c2b-87a4-c3f7fc81b50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3a4731-d539-4ab6-b40e-8baec428875a",
        "cursor": {
          "ref": "a4664850-3b2d-4a69-a3c9-538094c5e576",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "42d2cc52-edf9-48b7-9656-4df41d4927d4"
        },
        "item": {
          "id": "4f3a4731-d539-4ab6-b40e-8baec428875a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9d307b0d-43c2-4716-bd83-1a571e8e6abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11db08e-1214-4215-ba3e-85730d421e89",
        "cursor": {
          "ref": "b66783a3-4a25-4d37-b06e-f8439374e06d",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7932546a-e8c7-4bb0-96a5-043a8bd880aa"
        },
        "item": {
          "id": "a11db08e-1214-4215-ba3e-85730d421e89",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8eeb202f-5e78-4efd-a6dc-32a6af201f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a7021a-1dde-4196-acc8-ad0a19709b43",
        "cursor": {
          "ref": "1c970c9b-7fe5-40d8-aaf4-7cad662dca6d",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "26f36851-be2d-4060-9a90-d6ccc5d28110"
        },
        "item": {
          "id": "38a7021a-1dde-4196-acc8-ad0a19709b43",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c5d223b9-41fb-41dd-89ac-fae964eb8dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea28707-a59d-4087-9c5b-2582b4499cb8",
        "cursor": {
          "ref": "07812454-3434-414c-be28-2f1ba4163845",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "52b1f584-2722-43a0-8640-2d85ac1ba47c"
        },
        "item": {
          "id": "8ea28707-a59d-4087-9c5b-2582b4499cb8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "654ec92e-6cc4-436d-a8dd-b045c81a7018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb31878b-ca55-4bd7-ad89-edfedf4ac904",
        "cursor": {
          "ref": "416f4ba5-d54a-454d-a935-13ee5414fecd",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "507281f5-dcbf-4194-bb09-0ef18194fbd6"
        },
        "item": {
          "id": "cb31878b-ca55-4bd7-ad89-edfedf4ac904",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3ec80c24-7755-4b5c-a7c0-7fe30531748f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89b1060-6d25-4665-8ec4-d1461a286016",
        "cursor": {
          "ref": "d7217763-0a7e-4380-b5ce-e477edb32211",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5d8bea92-0fd6-4729-8b7d-163688076957"
        },
        "item": {
          "id": "b89b1060-6d25-4665-8ec4-d1461a286016",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "04883147-0f1e-4d5c-a633-a1e548628f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37b2e17-cc6f-40ff-97ad-f107dc2cf4d4",
        "cursor": {
          "ref": "78381364-008c-452e-b6cc-8b88ef1b14fd",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "16c8ca0b-9f92-4f78-a8c5-b236704de90f"
        },
        "item": {
          "id": "f37b2e17-cc6f-40ff-97ad-f107dc2cf4d4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6849cf69-5d31-49b2-a638-0b8cd4c71797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50052944-3877-4809-a84e-3b02be5e88bd",
        "cursor": {
          "ref": "15332dd4-5ac0-46ff-8728-4631ee857952",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0c73c706-dcb0-4821-ace2-9070b2b862aa"
        },
        "item": {
          "id": "50052944-3877-4809-a84e-3b02be5e88bd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "caa9eeb4-9fbd-414f-a871-90c8e2588395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a09eed-7950-44b2-aa31-6ee504ea6441",
        "cursor": {
          "ref": "db035861-8232-4e6a-9b25-98d110c1343c",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "61f8a5d6-6d21-4a56-ac6f-0d4a5e1d8875"
        },
        "item": {
          "id": "44a09eed-7950-44b2-aa31-6ee504ea6441",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c5690ba9-28c2-46cd-b7ae-9c440e612ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3257d085-21be-4578-aef0-0124ee62c443",
        "cursor": {
          "ref": "9f4c79f4-c796-4e17-baa5-be7632c15424",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e324341c-9296-4f50-b7ce-7cf6b8120b03"
        },
        "item": {
          "id": "3257d085-21be-4578-aef0-0124ee62c443",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "290574a6-929a-48e9-a16c-c1185756b603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebcd713-fb81-464e-a26a-079449a3bb7b",
        "cursor": {
          "ref": "483317b0-21e7-437a-936c-fb0b49da7654",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9aac1d4c-df27-400f-aca4-acd19ef92817"
        },
        "item": {
          "id": "bebcd713-fb81-464e-a26a-079449a3bb7b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "55716262-1f55-4546-a0e6-2f04ed6238f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3535f2-c422-4059-8c7f-491c74a04903",
        "cursor": {
          "ref": "154fac4b-9537-4ed2-83c9-9b6c88f4b742",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a67b4de1-8fc1-45b9-993e-91375407975f"
        },
        "item": {
          "id": "4e3535f2-c422-4059-8c7f-491c74a04903",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d2a2c22a-d044-436e-b4d6-ed6d00002953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2501ea-3605-4936-932e-19d3e78fd70a",
        "cursor": {
          "ref": "d4b20c61-0b23-45f2-a1b1-d2e47cc640a3",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a0747a74-d568-4561-bcaa-2950809aabf3"
        },
        "item": {
          "id": "ff2501ea-3605-4936-932e-19d3e78fd70a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d96124ff-61c9-4bd0-b0a4-e7b86efb04b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbaee024-3b9f-41be-a9f5-ea0fb0c3657c",
        "cursor": {
          "ref": "fb901cf9-2b8c-424f-b8c5-a538b55bf672",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "539039b5-cb85-46b7-88bb-5b63af8d4240"
        },
        "item": {
          "id": "cbaee024-3b9f-41be-a9f5-ea0fb0c3657c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3b33d642-2bf7-4a8d-99ee-19c4b2d470e0",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f21af919-c1e6-46de-bd2d-f97ad3059911",
        "cursor": {
          "ref": "f31e32d3-d046-4186-99ac-f609f7faf877",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8aef6542-f8db-4b0d-a241-d97c7a0011bb"
        },
        "item": {
          "id": "f21af919-c1e6-46de-bd2d-f97ad3059911",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e40d927a-9b1b-4dd8-aef4-29f66d8f0f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c31c00-281d-44b5-84f2-9a8dc25b8fdb",
        "cursor": {
          "ref": "ebd99bd2-9b2b-403b-ab58-c7606df1d55f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4ef9cc3c-b0b6-4935-b169-a203fd8d4441"
        },
        "item": {
          "id": "52c31c00-281d-44b5-84f2-9a8dc25b8fdb",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8fa174ae-e388-4a0d-acaa-1f0c5bb6e539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44e9db4-a8b9-4f5c-a681-b289adc034e6",
        "cursor": {
          "ref": "b8d50c18-e721-4fc8-875e-07b5b55ee60d",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "89c713c9-15fd-4314-935d-3a9f4be2ec06"
        },
        "item": {
          "id": "c44e9db4-a8b9-4f5c-a681-b289adc034e6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5f48f5a8-e847-486d-bbc9-f3eb656d82ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21738b6a-db5c-4618-bdf4-94e9e294c8b5",
        "cursor": {
          "ref": "f1925a87-8bb5-46ed-b879-abc25f1a39b6",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0b2a1774-615d-49e1-920b-41eb5acb22a5"
        },
        "item": {
          "id": "21738b6a-db5c-4618-bdf4-94e9e294c8b5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d0788801-fda3-4887-9f5f-7a22302031f9",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "3db00b79-2158-431f-82d4-68cab378f96e",
        "cursor": {
          "ref": "6f110762-bc6c-4216-a57c-bcf088c6f0a4",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "89516497-c119-438a-ad22-1dc4b4bbe3f6"
        },
        "item": {
          "id": "3db00b79-2158-431f-82d4-68cab378f96e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6fa929dc-97b8-4db5-913f-3ad76fc6ea5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3deba52-5a3d-425f-a228-845ea210d0ab",
        "cursor": {
          "ref": "3b929884-a008-430e-a328-ab058e25393d",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "493e1025-0e44-4e5c-9237-2bdbf0a75468"
        },
        "item": {
          "id": "c3deba52-5a3d-425f-a228-845ea210d0ab",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "019722b6-dbff-48dd-aad9-a64f6aa42cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35dd8e4a-7b99-4156-a61d-9595b32fdd58",
        "cursor": {
          "ref": "9b0eecbe-5555-459a-844b-ab72b8f2b5bc",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "86985426-1d07-464c-bbbb-f3e2ccb2ee19"
        },
        "item": {
          "id": "35dd8e4a-7b99-4156-a61d-9595b32fdd58",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4a45db06-3e21-4d74-be55-4d9a3cc2a6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9f98aa-fe05-469b-a2c5-93222a2789f6",
        "cursor": {
          "ref": "0eec084a-7865-42a7-b895-cef1c01d1d18",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fbd5dfac-0d71-480e-8dd4-4ecb63cd15b5"
        },
        "item": {
          "id": "db9f98aa-fe05-469b-a2c5-93222a2789f6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4489859e-66db-4c27-ac86-ee5d1adad9f5",
          "status": "OK",
          "code": 200,
          "responseTime": 728,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "34767014-872d-4d33-9935-b7aa7a78ab3b",
        "cursor": {
          "ref": "4a599f95-599a-4515-aabe-bed8f9acb275",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8f491fdb-a32d-4881-b3c3-5c703537c76a"
        },
        "item": {
          "id": "34767014-872d-4d33-9935-b7aa7a78ab3b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "58df6246-d4f0-4fc9-982c-39503bae7ab2",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "52affbe2-3f9a-4078-9b0d-139bcdf16e66",
        "cursor": {
          "ref": "addc81df-5046-4b04-8b0c-6462756ce811",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c3d0b895-0fd1-4a97-8214-aff1008e82bb"
        },
        "item": {
          "id": "52affbe2-3f9a-4078-9b0d-139bcdf16e66",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f6c7277e-24a3-44ea-b8bf-72c4d9ab23ec",
          "status": "OK",
          "code": 200,
          "responseTime": 763,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "93c4402f-960f-4bb9-ae32-3b1b27524c02",
        "cursor": {
          "ref": "7e26b999-c167-411c-a613-37195d51c1bf",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "049c9a59-f8a6-4728-a927-4df20f985dad"
        },
        "item": {
          "id": "93c4402f-960f-4bb9-ae32-3b1b27524c02",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f989d53f-1b7c-4d02-b653-91b3e5401d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5bb138-30e9-44e2-b6db-ec4c938eb8d0",
        "cursor": {
          "ref": "d3578d89-68d8-42cc-a655-322ca9d20e7b",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a63de524-83c5-440c-a25a-b7c35be3978d"
        },
        "item": {
          "id": "9e5bb138-30e9-44e2-b6db-ec4c938eb8d0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b731f699-e72d-4e4f-941c-23accbdbb945",
          "status": "OK",
          "code": 200,
          "responseTime": 777,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "30dab5d6-efd7-4c20-88e4-a2fa1483018f",
        "cursor": {
          "ref": "20a28835-4723-4657-898c-a64cd540010d",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "072dba2e-eead-41f9-86fc-14327052da59"
        },
        "item": {
          "id": "30dab5d6-efd7-4c20-88e4-a2fa1483018f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "63e504dd-c4cd-445f-8d97-570e4fd296c6",
          "status": "OK",
          "code": 200,
          "responseTime": 756,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6154668a-764f-4ed6-8d26-33157bf280a0",
        "cursor": {
          "ref": "1a6e0933-bbf8-4d44-9e01-f08b7de0ffe3",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a3577543-8070-41f5-be29-cead2e752971"
        },
        "item": {
          "id": "6154668a-764f-4ed6-8d26-33157bf280a0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e28b7c71-3a5b-4301-bc9e-1e8c9a445485",
          "status": "OK",
          "code": 200,
          "responseTime": 751,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "76418976-33bb-42d4-a6ad-ea9c0104b01b",
        "cursor": {
          "ref": "dbad0082-79b0-432a-b22c-915afb165344",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e6872ca6-5e7e-4471-b356-1226643867f3"
        },
        "item": {
          "id": "76418976-33bb-42d4-a6ad-ea9c0104b01b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "981e667b-c24e-4793-8017-f1aa5357986a",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "b3c4cc79-ad5c-4311-b09b-fb578a8f5df6",
        "cursor": {
          "ref": "5c0244ca-cccd-4c89-8208-6ca0ca673e55",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f6c9aed7-550c-4d82-b574-405c242ad363"
        },
        "item": {
          "id": "b3c4cc79-ad5c-4311-b09b-fb578a8f5df6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bb7c9cad-7fe4-4b19-bf23-0223082ad2d9",
          "status": "OK",
          "code": 200,
          "responseTime": 975,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8f63cfa4-e01d-485d-8bbf-1b358173f4c8",
        "cursor": {
          "ref": "b4e71313-d876-4319-af62-99bb34eb8393",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "86086076-e226-4836-b757-3afea6e35066"
        },
        "item": {
          "id": "8f63cfa4-e01d-485d-8bbf-1b358173f4c8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d0ee3761-51a7-49df-9455-789455a72075",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ddb8231d-84f5-4714-8dee-4f3f46362114",
        "cursor": {
          "ref": "9e6ec00f-144b-48d3-8e9c-2b103b44d944",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d2c9d6bd-be86-4535-9b72-91b31ac89d86"
        },
        "item": {
          "id": "ddb8231d-84f5-4714-8dee-4f3f46362114",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "28da9498-9577-4edc-af09-083f0dc0a21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca058a3-ab38-4132-96c6-304c730d168b",
        "cursor": {
          "ref": "31d8a3c0-3297-44b2-8257-374da076ce92",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b4f6c100-7e4f-49b2-aca5-cc9c0c40b3e5"
        },
        "item": {
          "id": "fca058a3-ab38-4132-96c6-304c730d168b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "382aa71c-099d-4613-bd59-8b459a13d86d",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "1099e518-570e-4695-b09a-e73c4e187f26",
        "cursor": {
          "ref": "6a374fee-7914-4add-9cac-2c7142b7c53b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "59ccaa5e-4ce7-4f10-95fd-b4d4c8261c00"
        },
        "item": {
          "id": "1099e518-570e-4695-b09a-e73c4e187f26",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "144b4622-d960-4552-b551-98debcb1cc55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c126d24-24f4-452b-8162-ea02763c9663",
        "cursor": {
          "ref": "bdce82b6-5d92-4d84-941a-1613a0a40f4c",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8534ce6a-ed66-4c19-a21a-7790b45d8339"
        },
        "item": {
          "id": "0c126d24-24f4-452b-8162-ea02763c9663",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e36eec9e-2b1c-4416-99ad-d92b534ccdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92e0886-07d2-42bf-8629-8b3f138c7e3d",
        "cursor": {
          "ref": "e772c968-764a-49e0-a182-2df49988895b",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0beabade-0b45-43bb-8bc8-7dfd329496a3"
        },
        "item": {
          "id": "f92e0886-07d2-42bf-8629-8b3f138c7e3d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "36b4b986-a1e0-49b6-98df-460ba0493c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c920f58-8ce3-4031-864f-7fef54025366",
        "cursor": {
          "ref": "0bbab5c8-46d6-458d-baf5-5e991ecf0ce9",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7aeffc10-4dcb-4c92-b2ba-7547f41f5658"
        },
        "item": {
          "id": "8c920f58-8ce3-4031-864f-7fef54025366",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "65832aba-73cd-4b29-a040-56989c27a5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ffb8a12-ae3c-4624-a548-321f9d47f4b9",
        "cursor": {
          "ref": "0d089025-adb0-498d-9d34-838cdd459c4f",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ab9c458f-5264-4e15-b3b2-3f83c360d2b4"
        },
        "item": {
          "id": "1ffb8a12-ae3c-4624-a548-321f9d47f4b9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9714ea81-b629-4612-9089-8b871a866498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984ed36a-25a8-438a-b6db-fbca6a6e81ff",
        "cursor": {
          "ref": "32365a5f-fd46-4845-a5ff-fd371b50ab40",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d9c2d02e-66e6-4267-ac04-7f383ef64094"
        },
        "item": {
          "id": "984ed36a-25a8-438a-b6db-fbca6a6e81ff",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d185d9f2-9d3e-4802-a6f5-1ded629f322c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a4e119-4c7d-45e0-8d53-0febababff08",
        "cursor": {
          "ref": "f205efee-5e9f-4967-8ee8-c8bd9a3badc2",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c4a1aca9-929f-4a2a-8fd9-91ead6cfb90c"
        },
        "item": {
          "id": "a5a4e119-4c7d-45e0-8d53-0febababff08",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4ba1e650-4272-4071-a49f-27655e2ca1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b2a8be-e103-46f5-8d9f-f8f5e5035ebd",
        "cursor": {
          "ref": "70feda5b-11e0-48f7-a4d5-8e45843501bf",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "db73908e-0778-4e27-94ee-9c0ac39ae5e4"
        },
        "item": {
          "id": "e0b2a8be-e103-46f5-8d9f-f8f5e5035ebd",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "143ca8b2-f35f-40c8-ae6b-cc54183923d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f690e6f-b00b-4475-9aa4-5dda86fe1967",
        "cursor": {
          "ref": "1247d52d-fa19-4512-be3f-732d169ce33a",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "782a1e10-ed38-454d-a046-be5ae83e0793"
        },
        "item": {
          "id": "6f690e6f-b00b-4475-9aa4-5dda86fe1967",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cc9e9849-55a0-4bcd-b5c8-2a073996df22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb4ac60-e1b7-439f-b522-e4104758316c",
        "cursor": {
          "ref": "571949fe-6812-4f40-a791-9bd2da1c2b88",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "097e2350-ba71-4a75-beb6-01b0cda0121c"
        },
        "item": {
          "id": "0fb4ac60-e1b7-439f-b522-e4104758316c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c2b82a3d-ae69-420b-848d-5227a3b2a183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ca6e07-f932-466e-b25d-7b313ffc4ba1",
        "cursor": {
          "ref": "8b59d0df-1085-4051-a10d-95ca157b0c68",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "41ac5f47-b583-4293-ad14-c601dfd59ab8"
        },
        "item": {
          "id": "f8ca6e07-f932-466e-b25d-7b313ffc4ba1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4c443b08-2a2c-4f3b-ab54-b0ce112f8a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ee5d8b-e9fc-40fb-a1ee-6923292aefa9",
        "cursor": {
          "ref": "75dcd636-8d88-43b9-839f-82023af19516",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6cab8568-278a-425d-ad14-75993594b287"
        },
        "item": {
          "id": "37ee5d8b-e9fc-40fb-a1ee-6923292aefa9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "89822e2f-ad59-4c47-9866-9edb8f271144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297e78f0-338d-4ad0-a245-319c2f9e64cc",
        "cursor": {
          "ref": "6044c9f6-9ff2-4a7a-94f7-a1d5ea94e7de",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9943472f-aef5-40fb-9bbe-29d002ab4a8d"
        },
        "item": {
          "id": "297e78f0-338d-4ad0-a245-319c2f9e64cc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b170d1d7-53e5-4bdc-be22-ffb5c96a64ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b170fa1-e929-4f6c-b0e2-40943b6787c4",
        "cursor": {
          "ref": "3a30dce0-f7e7-41bd-94b0-1359b6452ca2",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "441513ac-4f1a-49c1-8efe-550db1cd5990"
        },
        "item": {
          "id": "5b170fa1-e929-4f6c-b0e2-40943b6787c4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "31f7541f-4d05-4334-9d88-52f3a448970d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbbbc17-9753-427b-afaa-e9e447a06a40",
        "cursor": {
          "ref": "4041e597-1f3a-41d0-8af0-30bdd989a681",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8bc4b6f9-f8d9-4659-b7d6-acdb159a67a1"
        },
        "item": {
          "id": "bbbbbc17-9753-427b-afaa-e9e447a06a40",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c0b6bb09-a89a-4352-8982-2ca1cb1ec33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434253d7-dea2-4092-b290-e631178a1f38",
        "cursor": {
          "ref": "9125a680-24c1-41b7-98c6-44392b567306",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "21b50cc5-7711-4f82-8ade-f6f9f74c8147"
        },
        "item": {
          "id": "434253d7-dea2-4092-b290-e631178a1f38",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1af5836b-8f8a-4575-bf5e-a82e6dab7d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22248232-b4f3-4ce4-891e-97e1dc74dc32",
        "cursor": {
          "ref": "c40ab48c-b2bd-47ed-b55b-31d56c30a875",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "aa63b2cd-10f7-4f27-b557-62ea37ed1eba"
        },
        "item": {
          "id": "22248232-b4f3-4ce4-891e-97e1dc74dc32",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "58cf37bb-8137-4c8f-9e33-2253b5f9671a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3da905a-6a35-4ed3-8da7-1c371a970c96",
        "cursor": {
          "ref": "b04a0f69-a5be-4f7d-b34f-0fd91025c206",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "27e27a13-0f4a-4fff-a71c-4815da5757a6"
        },
        "item": {
          "id": "d3da905a-6a35-4ed3-8da7-1c371a970c96",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "113b008a-96ea-4845-9d52-98d93b11e94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9458f17-e865-4f69-9bb6-7b574611abb7",
        "cursor": {
          "ref": "5e3cbeab-2e8a-49aa-a35e-9b02380d670d",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6975e7fc-d007-4e76-ace9-77b7e1c5ca49"
        },
        "item": {
          "id": "c9458f17-e865-4f69-9bb6-7b574611abb7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "430b7460-2881-49f1-b0a8-75435bff9a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0978fe25-15bf-4eb5-b09b-16a03ba9619f",
        "cursor": {
          "ref": "f251c3d4-539f-4cb2-85f1-d9b5f32eeda9",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "905b39cf-642c-481b-b164-9c7a51515fec"
        },
        "item": {
          "id": "0978fe25-15bf-4eb5-b09b-16a03ba9619f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a960c867-fb38-4304-ac43-4aaf87243be4",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "fa06aaaf-e3c1-4400-8215-bc6a3d2e2840",
        "cursor": {
          "ref": "5ecef5f6-bd1c-4b5e-a492-d32592abae0f",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3205e135-58cc-4b89-b927-cecb5d5a092a"
        },
        "item": {
          "id": "fa06aaaf-e3c1-4400-8215-bc6a3d2e2840",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "107b418b-9a28-453f-9e02-4419ac1397f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5daf4520-21b5-4990-b25e-17e5bf84276c",
        "cursor": {
          "ref": "ed11b46e-42b2-4db3-b78e-6ab018e0c7ad",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d0fe4103-db55-4dde-9f2d-0088093fb69c"
        },
        "item": {
          "id": "5daf4520-21b5-4990-b25e-17e5bf84276c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "85d0263a-95b8-49f7-8c1f-fd700addecf1",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "5bf844a4-c6c2-4260-98fe-92503a19628e",
        "cursor": {
          "ref": "af14d60d-5b70-4fe7-af35-fd6782e4fba6",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c7829e11-3523-457a-8e26-acc8948debda"
        },
        "item": {
          "id": "5bf844a4-c6c2-4260-98fe-92503a19628e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b4ed1e43-d59c-4a44-9e37-6603a2ce2b6c",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "b5e85708-6eff-40a9-9ef1-cc959a519013",
        "cursor": {
          "ref": "1d0b9dff-4b76-4f0d-aded-bd731012ee82",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5fc11d3e-eee8-458e-b107-e95f62166e54"
        },
        "item": {
          "id": "b5e85708-6eff-40a9-9ef1-cc959a519013",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2f87a0c9-2f97-4174-9d69-bcd274624aa2",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "2c8ad78b-06d1-4b40-b927-e34d8c38daaf",
        "cursor": {
          "ref": "70938ff5-58b6-42cb-9ad9-1dd9ab184ac8",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e36bea6a-b017-4d1f-9896-84741f3ca628"
        },
        "item": {
          "id": "2c8ad78b-06d1-4b40-b927-e34d8c38daaf",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3a97a214-92c3-45c4-a2e7-7d8736c0b710",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "173eb576-a4b1-4ab1-8a42-0ed4353fd866",
        "cursor": {
          "ref": "1448054a-92c0-4de3-8a88-a1ccaa30ac28",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "12c1e512-0010-4fb2-b9a4-7cd3a44b21d2"
        },
        "item": {
          "id": "173eb576-a4b1-4ab1-8a42-0ed4353fd866",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f33503f1-5286-4d3d-af29-92c0e02ba397",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "1f7e0619-f3d4-4575-9523-c60198dfab98",
        "cursor": {
          "ref": "28214bc0-6719-4bd6-a239-94ad22c828ee",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fa949e95-0670-42d3-83ac-bfa61225dd88"
        },
        "item": {
          "id": "1f7e0619-f3d4-4575-9523-c60198dfab98",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "48fd934b-afd1-4dbe-b188-7b24b2bf4e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6254266-9926-444a-902b-929250ea98e8",
        "cursor": {
          "ref": "e66b6989-bf45-4616-92dc-4c3bfedb8f09",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c1e7c2d3-3b18-4abb-9aab-4f74bd24d2b4"
        },
        "item": {
          "id": "b6254266-9926-444a-902b-929250ea98e8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6f43a57f-ddb2-4e02-9286-eebe82cb7cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe50262-b25f-462b-973f-f759e63ef139",
        "cursor": {
          "ref": "a33c4a57-a570-420b-9161-9b72b0269987",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d10515a8-5dfc-4018-98eb-e30cf13e6b94"
        },
        "item": {
          "id": "2fe50262-b25f-462b-973f-f759e63ef139",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "42fcc77a-431a-4323-b5b2-196fe6ca2da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a4036f-7552-4863-9abe-78ca9db22783",
        "cursor": {
          "ref": "4968590f-3af0-48d5-9e52-5c142ee7ca5c",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2a8b672e-3244-49b0-ad03-851805c83e93"
        },
        "item": {
          "id": "51a4036f-7552-4863-9abe-78ca9db22783",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "befb0bcc-dac3-492b-a5ad-a80ced7f1297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a4f48c-8251-4900-9e90-2d8469d30448",
        "cursor": {
          "ref": "c6786abb-d27c-41a1-b236-53f83a9107a6",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a31eb94d-dfa1-481c-ac70-84d9e9c647ad"
        },
        "item": {
          "id": "18a4f48c-8251-4900-9e90-2d8469d30448",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "82bc5bb3-1d91-46aa-91e0-cf1409a0e21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba25988-00bd-485f-b58d-6d82dbf186d6",
        "cursor": {
          "ref": "fc6361e1-9c36-483d-83f8-3c71048e1f12",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "7a914b75-7ed9-4343-9fc1-d74460a5034a"
        },
        "item": {
          "id": "4ba25988-00bd-485f-b58d-6d82dbf186d6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "33f8d9be-ee57-4c3c-93e8-22a63dcf9e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1ad1e8-8250-48f2-b709-f71d86f656db",
        "cursor": {
          "ref": "53076612-82b1-4446-ba1c-b8ca66c85a3f",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e1de913a-02b4-4708-9f2a-a25891c8a2a1"
        },
        "item": {
          "id": "ad1ad1e8-8250-48f2-b709-f71d86f656db",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ba28dbd5-bde4-4c4d-ac81-b68971dc4773",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae64bc8-27b0-4b7b-aae1-ad007300477c",
        "cursor": {
          "ref": "d2d327aa-b729-4bf1-ac85-ae51d5035e70",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "3786f412-143e-478b-9cb0-d16adf061f80"
        },
        "item": {
          "id": "4ae64bc8-27b0-4b7b-aae1-ad007300477c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "674493a0-6477-43b2-ac63-2de442e42923",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "495a7d54-3dea-4594-8ade-85be40bb39c1",
        "cursor": {
          "ref": "15077723-c8d0-4588-a509-0216ebdd19c8",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3a85a1fb-4ff6-4e74-b269-ef5ff43da44a"
        },
        "item": {
          "id": "495a7d54-3dea-4594-8ade-85be40bb39c1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e7224b93-03d3-4a73-8dd7-65736d13e8a8",
          "status": "OK",
          "code": 200,
          "responseTime": 751,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e2e9d5-c6a4-440d-9322-6275f6c68d0b",
        "cursor": {
          "ref": "c2f287c8-e425-467c-bcd3-21c58d146c0e",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "fa638148-8057-4de2-9952-3b63f85a0518"
        },
        "item": {
          "id": "47e2e9d5-c6a4-440d-9322-6275f6c68d0b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5c63757b-3aa3-4ebb-ad29-c6a9c0b4aef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "453bca2b-ee24-4bbf-b341-9189777d8b7d",
        "cursor": {
          "ref": "ce76fbc6-b7e6-49aa-8c0b-b74169abcccb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f250101f-98b1-48e5-a397-2e7e10221c57"
        },
        "item": {
          "id": "453bca2b-ee24-4bbf-b341-9189777d8b7d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3d2826bb-a72b-4d71-b8be-fd248548463f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453bca2b-ee24-4bbf-b341-9189777d8b7d",
        "cursor": {
          "ref": "ce76fbc6-b7e6-49aa-8c0b-b74169abcccb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f250101f-98b1-48e5-a397-2e7e10221c57"
        },
        "item": {
          "id": "453bca2b-ee24-4bbf-b341-9189777d8b7d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3d2826bb-a72b-4d71-b8be-fd248548463f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117a4335-4252-402b-bed9-600781a03714",
        "cursor": {
          "ref": "9763a457-c2a3-4c18-a7c8-10e579e39ef4",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "beea659c-f5c2-4c54-b9a7-88269690cfc9"
        },
        "item": {
          "id": "117a4335-4252-402b-bed9-600781a03714",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7a17533e-acc5-4a16-95eb-3c3c6f520d7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98bef216-38df-4d1a-b3f9-9025f8fbe91a",
        "cursor": {
          "ref": "9c3abf54-3249-4fb3-94b9-ead3dc832a2b",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "c7c31955-fa77-4bb2-8dc7-380fa80315b6"
        },
        "item": {
          "id": "98bef216-38df-4d1a-b3f9-9025f8fbe91a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "10f38706-3b96-41bc-86ad-204e55aa4ad1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}