{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "24782d1d-8715-49eb-9e57-37111d719d7e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "71727570-874d-4db5-8e49-bdfcd30751e5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48dbc054-29c5-4c78-8755-e7359907528d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fdc4a946-b4d4-476e-9f56-a86f3ad6d940"
                }
              }
            ]
          },
          {
            "id": "9ac18a6e-3688-4687-a2c6-1cadc91065eb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5ba7e4d4-d984-458e-8009-82941d8de0c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d4a3e14f-69c4-4b56-a9d6-eb00b00ab517"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0de197d7-75a1-4d2f-9f7f-395bd3852484",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d0e4b5fd-f33a-4a07-9031-489b11c1835f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b34140a8-ab0b-43a3-a5fd-791b062dc912",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41555020-9365-4e32-916c-e85e6173f7fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37ba08f7-659f-49a9-b922-b1764d1b01bc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d50b3af-6830-423b-ae1d-dfa752881249",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "773af8c7-7a9d-4082-a4ca-7e96bd811fc7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "192c095b-62cb-4854-a76f-957f004862c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ba05942-aab0-4517-b2e5-55027e6041b9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "872a4cb5-2051-418c-84f4-3498957c3ed3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d5cd0ff1-ee54-4d6c-aa6d-cdf58b037a60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84431866-4f54-4e7c-a2a6-b2ecccd9a4e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6024a203-c164-4eb0-b649-f988743acd27"
            }
          }
        ]
      },
      {
        "id": "67b8ca4d-912f-4de9-9dfe-937ae73c56f3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "221285cc-0ee4-4357-a994-28019162615f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "029bd369-9b41-4664-be11-02015f1c928e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4cfcef86-eb94-473c-b4ed-3ec55111904d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f13722e-c920-4751-a277-af508b8cca52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c72a9da5-47fd-4f3f-b16f-72ab670382d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08d7d71-b028-4855-b1f4-a905aba35cbb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0d2cbd-5c78-4910-be9f-09bf92f8aba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "544b2d9f-ce7b-401c-92c0-0d5091505896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff50604-9ae0-4e93-9067-991d2cc3d25b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580e8f56-94fa-4a0f-a80a-9be1162314e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9591daf1-8efa-47c7-aced-821600dc654c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "67838a56-e3df-4d2d-87b2-d14343c1513b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aadfb9c6-7d60-485f-878f-a214ec61c130",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dacb263-7154-48e0-b4f5-c8323b650918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd5c5eec-931b-4a2b-afaf-c3f7dc7e74de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0630ea01-fbc6-4164-b435-37d600facb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa408fa-271c-4067-8c90-7b56baa56eb0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2ce33f17-fe8b-45ac-892d-b36a635a2d64",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e8b86723-17ab-43cb-9900-949e4c77a9af",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f40d9171-82f2-4e74-b83e-17e7a5eb32fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "97ddf99d-8fc2-45a9-bfc6-2169478e9aa4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "439aedf0-2b7f-4c10-b1fb-0440cc719a1a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c37ec1b3-55ef-4955-b910-18bc873b6733"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "509cbefb-7dc1-4b99-aa56-ecc4d4ff662c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1897764e-eb17-401b-aaaa-f5fb5ccca473"
            }
          }
        ]
      },
      {
        "id": "d95053cf-d96f-4bf5-b5ec-7958a85ebb40",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2a992376-ddb2-4b7e-bd25-02b2b753579c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f398f90-03bf-4203-ae6d-c1d241c47d19",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1b88d2a6-859b-49a1-8337-ebe0bdf3b69c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdca5c81-4056-4264-90a2-b19f6c89a94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2394c75-e14d-41f3-a3ad-e506b29a3838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae5738f-a32b-44d8-857c-5d7d153ab982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b469926-a900-4779-bd12-e7bac6d19c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a25d00d-758c-49a3-b3d9-b7a3aad76c1a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b11424-8237-4e7d-bdf7-1c31eb7d5b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f8965c8-52f9-4823-b166-313d3911b408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8f618f-c222-46a6-8d80-5b3f81b56167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce7ce68e-baeb-4eb1-9d57-410707e78785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2d95f0-0a2b-4be1-982f-069eac9793ed",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc18499-fdbe-4bd5-868d-4a8965002e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957c8b40-0f82-4408-8715-5825f635f369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75a305b-a3b8-42c9-b125-af1a562c60d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dd0bf90-a531-40a9-ae80-ae59d2c0e95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1771d1c5-f511-4e1d-a938-d6d949a1b066",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bac9a0-03ba-44de-94a9-348b06e58bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3967c2fe-3a6a-4ff5-9573-68f11ffa7583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c5fc42-919b-4819-95ca-32e74149d6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df5e8991-8b11-4b08-8e8e-c681ec4adaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80be4255-b65e-40ae-af08-8a4e4d6bc41b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4045e93-0b84-409e-bda7-90e8c6f74a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e3a03e-0e7b-4305-9644-a52f402cf095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494591fc-9228-4f8c-b580-1e165b0aaa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beb2741f-f2c2-4692-9b6e-851f4fe23bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6168262-4d87-4509-8f18-3b869335d3b0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d835a0-41e1-4758-85c7-61a936c1515b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bf989b-d8a3-40a3-be73-e19ce11c9f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234790b8-a169-4a3d-a6ca-dddc91bb2073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4229438-b931-4135-989d-89b41cd3be4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd53df99-6ce2-4d54-97c9-1c2d8f11a295",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d9a14c-84c5-466a-bb0a-c4e228ecbb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bd4560-3c31-4326-9619-a23e59e31e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9cae56-f764-47fe-8b90-b3e8136869c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9b4d713-1f6f-43e1-adce-0583ab5e60e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a168d84f-1600-4d34-8561-43f75ae96102",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344172d2-f154-431c-81c8-87d66c61626c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54709074-cd4e-4b74-91eb-d8ac2642aa99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243c019c-447f-4173-ab05-8d205e635a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c11ae10a-a8d2-47c4-831b-a30ea9549f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea84a54-5aec-43c1-8a1b-9082e0055b14",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9516ea-a349-4890-add3-b310d563bf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9c9bc7-cb70-42c9-92b0-61714200ebde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daeee33-7c00-4c87-9472-2182a17ca16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8aad871-18aa-456e-8645-af8b187329ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edde494b-b162-4532-b3cc-61ce024f5829",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2cd3c2-5d4f-441f-b9af-94536cd10789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75e74d7-ec59-42c6-b66a-9d1336ed8808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f435f9-85f7-4b5b-a6d7-b6704c4b9d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64e04c54-710d-49e9-895e-4e23c1555961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebfb124-297f-447c-aaaa-ea338f15a278",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdf5c53-fcbc-4ead-838e-bcb38885e5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53458fb-b0a1-4c3a-aca5-423d395d2737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5129e8-9391-4195-89fb-d96962c4eb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6670e4f7-9f2a-40f5-84b3-b60b5df9314b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d3f454-5b80-47b2-9d8a-215e7a5b7f2d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdff2a4-9427-4942-881c-77ded101c2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6caca1-3303-491e-b57a-1a850e7fc319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e8b32f-1a11-4ed1-aa28-b75d88eba316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "def723fb-0f1e-4fc1-9d16-9b38f481ad7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2238569d-55ca-4b3b-a0a7-8ebc29d5d0dc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb2a834-394e-403a-a107-9cb39bca8289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229c3fcc-9729-44b2-bd50-dfcf640f42ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0e7e39-19f3-4908-84f4-649358b54936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62c9216c-5a2f-483c-a330-a85e2e875523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb69b459-b6d3-4d37-b85a-dd547fac739b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426f47b8-25f0-4be2-92ab-4977de0aa20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98403261-1b0c-4f3b-9a2d-4709f01c54ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179015ff-f707-4bbb-bdff-d5bffe48dc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5f2259a-db54-4770-9eda-53398508d5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1864e587-1569-4a20-87ce-7e02615ece90",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0bb5cc-2ab2-42b8-b166-0a66a1d194c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201ca5a6-1325-406d-80c0-80ee1734b933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc155e68-cf64-461e-a338-7ede3a61f1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4f898b2-6f98-4d1f-8689-948f9aeb6e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce7e035-e63a-4b74-8c32-be25f6bb8ed8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc624c7-df4a-4b7f-ba32-132ec371f439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd797f2-d87c-4e0e-8072-623ba233a51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf98b11a-c3eb-4eb3-9b23-b5f2e5db19c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac83554c-54a1-4f6f-ac1d-3c68c9ec33c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bcac4d-df95-4ed2-80eb-a1c11806e933",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb76a081-f52b-44a9-af26-e680df833c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1360ba-66fb-44cf-a287-7ba55cd0241b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99014b23-5ab0-484b-9fc1-005ba6a8a31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b46921d-8b09-4197-9f04-ebbd484cdecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148d4dc0-af52-4a5b-a978-902700a7c115",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb9ff5e-6671-4f5a-b940-0b7d48a8c3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2318d2-1fa0-4b45-b67f-48e8402cbdb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4904857c-5224-4031-a6bf-b712160200a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6684d950-cda0-42f0-8919-d57758e88aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f031ac3-353c-4b75-a327-8ddeaac8f8f8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ae111e-3877-4bca-beba-17f27b14e288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01a198d-ed32-43c5-abf3-9b647e2968df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07c29d5-a7d0-40ed-beb9-9b067d7406fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e481fe-580d-4475-b0e3-8aae3ed7a3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53ff20a-ca84-4ce5-927b-f27be1ccd8e9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b400ad-bbb8-4994-9b66-97221012364c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84de862f-b9e2-4e2f-a0b8-be1a1c78d6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7016336-69d5-4613-b827-b2a823ce746c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af72aa73-8e0e-413b-b06a-ecc583b62e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7762cb35-a944-4832-936e-35b9fafc822d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1852b879-eb6c-4d69-a995-50917131e1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e60a4c4-cbac-4099-ba4a-02af1ef638f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819918fe-2168-4107-879b-cc9987e24d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38b160bc-f24d-439e-9b2b-7dbc1e2ee8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9254f7bd-8985-4c08-b48f-d9c181ee2b3d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122e45f8-8a06-4435-8b20-f6adad6adcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d992643e-cb38-4179-bdca-bcb24066a5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1a815a-27a1-4103-96b9-81275b0b3834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11ecbf93-6a86-41d0-bf42-735ebc054e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200e2caf-3ea0-4394-aeec-34aca6f0e044",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd940fe3-8046-4ca4-8ee9-16d025e04df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf43647-f330-4966-9c43-868b4115ac51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3934fcc7-f005-4698-98cc-d1c6339c1c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9015bd3b-bbe3-4031-8f68-36ffe39ecd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f4d777-ee98-4323-b16f-3c1dd8b59605",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd6968d-811b-4651-b646-4195137a650d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bfddc3-bd2e-48ba-94f5-29ab3377c33c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e68ba3-e4e3-4eb0-86e2-d50c811f08e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dff5c76-4f3e-4acf-a3cd-f1a5815209c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7f603b-7c35-444d-946d-bd2f2e0227a2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a207ff51-a903-45fd-b781-bb7277c80026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252d7e3e-e05d-456b-a5f0-49eba42859f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4684d03d-bbc8-4b29-b954-ea8006b96be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "006df8bf-bedb-48b1-bb64-6c2505d700ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d6f1a3-1583-4cae-be9d-5bd26fd91674",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f956bc-7543-4757-872f-f7c1bbd93b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b796a5-ef70-4bc2-b944-c877a2fc98ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6ebea8-9331-4f7b-a0ca-dee5151df9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e01f9aa2-12ce-4ecd-8452-db01af51cc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a29e1d1-dccd-498e-bab3-456952759481",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e57fb70-59c6-4aac-b81a-461878b74928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a80ba8-c727-4607-81fb-48912da9d780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b5573a-e3ca-41d5-ba27-62a50b4edfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ab97b0-1242-423b-bfa4-d6a83e6b670f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ae5c5a-a1f5-4a9d-9e85-6567da22ef45",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5a925b-9f59-49e3-a930-0c3085d90ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3fa150-41df-423f-8bdf-ca84cd6c2b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e52ecc-ac65-4235-8841-faf2ce39bbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ea2882-999a-4717-8ba3-a8b1f036aa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51e7fde-db18-4791-a6ae-1ff64a457f70",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d75e06e-1ce4-4d41-931e-1e282dcc408f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a28ba6-0246-43e6-ad3b-2052687bfcaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9239437e-9198-4af6-a1ba-272ca0849559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05dbf05e-d071-4c89-a1b2-9d958a150bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcf9db2-c5dd-4a77-9091-16e13c7533cf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d9c1f8-750b-4dbb-b61f-5eba4fd3cb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "259f1f08-a616-47d0-b89e-32e637287998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8820a6ee-f0c7-4877-9362-e0fa505de8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6dff12-795b-4420-ac6f-b87f4d0cb561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b4c3e4-80bd-45ab-8c11-511ce6b05aa7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834a0d83-ac8d-4b87-8e13-acb39efc6b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b69ada9-74a4-4264-81b1-2f0a99ed1ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68114b1b-5558-4230-9133-f51e78755457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c297365-576d-405c-a88b-23424d38378e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c44f499-9329-460a-a655-0a9eef449a79",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afccde59-e90c-4468-b6d7-9dfb2dc826c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7363cc93-d89e-4de3-8d25-3118052b2035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebc39b2-1104-4c34-b31c-e690c05ece4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f182a2-e96a-4172-b6f2-c1d336d47d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b8ce5b-2e98-44b6-82d9-ce4355d4fd43",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606281b7-63fd-4a2e-90a2-c29c8f7d3c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee48401-8436-4165-8ffd-6c00a4ca893b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc38a00c-154a-4459-8472-87f2e626b400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b3b401-c628-481b-ac33-9e8974fe1456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b1fc39-3dc6-4b60-a988-48618670fb6c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0cb618-eab5-40c8-b9d4-1c2f91c906e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f486c57-e82e-4f2a-bc2d-55a42d903570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137caf06-0f6c-436d-9dc2-65f8055d4425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e66c21a-bd27-4c72-a4a7-ae8ac3d0927a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f03929-ac39-4018-a01f-6c4c0e10a1f4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1868b446-061f-4112-9e07-3793bee09d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf51eed-fb38-43cb-95fb-18656033c96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1024e8-f0c2-4c6d-bd97-91c3d39265dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d190fa-bce9-4772-8933-a86e3837222d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d66ec3-4b3b-4512-b914-3bfcb5b4c0f2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9faa9d-5b80-42ef-a8d9-b1e1a264eb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10ffdc09-a581-4aab-a1f3-04c1381b7ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb7c8a6-933f-44a4-900b-dad4f9f49532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a156e3-8f05-4561-8cf4-ac1b85121005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89de94ec-6156-4169-97d3-e7b6f0b97e0a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f4ea08-0c80-4b36-b8e3-52eba41886b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423fa355-2319-4a7e-93da-71ff05a2fa79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a88e37-ff33-4227-a068-301c17259822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "beed7cd0-c413-4266-b033-cb97c17a5eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46d6484-303d-4ac4-b311-280a8be0ef1a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1cb1ac-de21-4bcf-9723-b4e67a8e5df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3ddbc2-0626-4eef-b6f7-827569d9a174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e098060d-024c-4320-8c9c-8369d6d9baf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb939b85-c77d-4243-b711-9fb314277921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aef871c-79c9-493e-9c92-8615753564e7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6605ceac-a71e-4549-9f19-e73c83458c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8718f08-075e-4453-8abb-2d977f3d307c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb0bf2b-a8b9-4582-9caa-f4375f8a5ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "166d7ced-7375-4228-87c0-65ba1ba4b436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a289a22-ccf2-4c8e-82f4-186db2cbd7b3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3e5896-3f79-4455-a907-51fd43f334c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb71686-f47c-4f58-bbe8-96325c905546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9f1444-3020-4c01-9016-4a073b542fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "240312af-3d82-458b-893c-3d2efdb16bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014b6d66-2249-40a0-8104-317ce59653fb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbdbc4d-c3c9-469f-bf60-0bc75df9b1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b4460b-e9f8-405a-9dca-739b0ce6c8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b6967d-128a-4ce6-a9a9-d3010745f5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec003b5f-aed8-46ae-88e1-7b7c581cca04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b395c2f-ecca-436f-90fc-3ca6b359b685",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5538cb-a07d-4a8b-a8dc-0ebe099a081f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247b416a-030a-4bd9-9b68-e3a0415981f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02715343-18c8-468c-9f0e-6ae08dfccd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f67846b8-3b0a-49cc-a4ff-67c1f8a0d4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6062d66b-d0b5-415a-84e2-428e7f2e0f57",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854040c8-9de5-4291-847a-4113ac08c227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e74e995-6529-42a3-8e85-8cadb8fb2d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4feedf2-b5b6-41d3-9da8-3db838decd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd7adde-32e4-4856-9aba-bff2b96b3f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75d15b3-b829-4450-8aa9-5cd781a9023f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61e7954-9ca2-4433-a5df-8f82e96dbff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb15ddf-44c3-483f-b34b-86be80c38bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d209129-c94c-4d00-879f-7703303e5290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee42c959-a086-4414-b923-4155555a6a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264344b0-dfb5-4744-8921-2b8f7a3b2aeb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845b18ab-f3de-45ba-8f31-60d14962ae7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f072476-d131-4baa-979a-0e4d0b1ec604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f516a9a6-1763-422f-9aae-ab960bc3ed03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5015fa0e-a1de-435a-9515-5eefe0ba74d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9772f563-9eab-4632-9b1b-aa651af38149",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f09a6b-5cca-4d1d-8497-ea6b5d048202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8080e9-4e03-468f-94e6-184c7e7be1f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5456728c-c930-4350-aa46-ef708d5ec90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c530c11-8383-4832-a363-297f94ebc043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444c84d7-e06c-49cb-8128-965a5c61e436",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a66574a-580b-4c37-b31b-4d9200dd9269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435948a2-c2e8-497b-acb4-53a00ebe7c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cc0f6a-7c4f-4113-83a2-75f4df0983f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a13baad-a24d-4b10-b9d7-2d414eed92fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0492a748-1a4f-48a3-9144-fe942e7e359d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8444f5b6-49ef-4e31-9236-aca002d38cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca0ae4f-68b5-46a2-b3d5-bc099e684a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3bb399-1a99-4041-877b-4929d30b8128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "509ee60f-f629-4eac-9fd5-aa640114a3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755e0a57-ec2e-4830-a487-30a4c0817856",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89955b1-f9f0-4ceb-928e-ae4f6f8bb469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b911b9-17b5-4f3b-90f8-f1936322c92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a3e892-5f3c-4b07-80b3-105c655361a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb76db1f-93f1-4548-a00c-5a173d29784a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0b8ec6-e619-4daa-8d6d-271bd9f2dbdd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d5fa92-7d19-497d-b46f-1ec268320421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c88b571-bd45-460c-a8f3-5b5ea0d218a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ee7ffe-78a4-4358-b612-56816664ede2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f06d560-75dc-4d70-b0e6-4eeec36a90db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceffd521-572a-41cc-8068-6e5a530ab1ee",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ef3aac-6cd0-44e2-b96b-6f8126bc2d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab68dd7-8080-40ee-8b2b-138e08652098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d159533-5063-4ca2-90c7-3fa35710046b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2bc637-8c3a-414d-8df8-89df3e059a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9761140-d334-46c3-81f3-4d0c27ed7c9c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cba2fb1-02ba-4846-af15-7bfdc9a3890f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96774b41-c385-46ea-be5c-e618f0be0e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2329674e-11f4-403d-8ccb-978adfdea4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c10e412f-2bce-494c-be53-fe29354eccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446e7ec7-a9a3-4b0e-90a5-5a1a3c33305c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670d6a10-6f22-460c-85ad-08224678e6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506826d2-3911-4968-8275-398b043abe99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a088de-b130-4ab2-904d-30d88c145121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61791969-abc0-4ec6-a449-0075e0a94d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114801ab-c76f-4553-9b32-cdeeeede20be",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd116338-8beb-4593-816a-7855503ef2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a2b4d6-3773-4acb-bd56-1786b778f224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2b3853-b638-485b-bbe0-8caefe397632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "911bc3fc-8f42-4d79-a0d5-14487b86d38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d767361b-8f0c-4e54-82f0-6dd4650dbf69",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2075e9c2-5b1f-4c3e-b665-13f7447d941c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0a1104-64cd-4f0a-869d-89397ad99411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c828c5eb-a03b-4851-ad0e-8fd6470608e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7b6d92a-c2d3-4d8f-9d55-64a478dad06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8c9ba7-aa56-4bab-803a-5a821fab4b3e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3e7d4f-7375-40de-a5f7-fe5d20d16f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5258812-7026-4b18-8279-58a917a90c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d735b1a-e097-4661-8a59-f8b25880cb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "677313c0-28c8-41a5-a220-a58fcf9b48e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89789147-fd26-4061-a186-57988d473ef9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16197ffe-0784-44f0-806b-b7353d15d5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78725bea-01e5-480f-a6e0-d9fc4e500d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb961350-b57f-465d-8cc0-a66a11d49604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "306c8471-d1be-4a9e-9a7f-619a483f574d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3489d0-c816-46ad-8755-8dfe46fa8d95",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26763c0d-d7b2-4cf5-9af7-21dea2b44cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041d6ed6-7334-4152-b816-f61e825f5f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cb35be-ae63-42c9-8a37-a7ffed4ad28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "103df440-bc87-42f3-9dfb-f115a25ca7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75f09c1-85c7-439a-a7b2-83e6b34521e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ffcf26-b192-4ff3-8b8f-f4b883aad2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb27be76-027c-4385-8696-2d82faa17a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba77730-1013-42c8-b0b3-1e64810b7738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f501d29-beb6-4475-b2f3-33640a64aabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee04c44-a41c-4d4d-b852-20b4cf20b674",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08723d57-6924-408b-978e-e4ee88c37032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df549536-909a-4592-ac7e-ef347d8022b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7e910a-8d54-4c5a-8257-0a09b042a201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "930eb06f-f05e-4b98-a2d5-34fd6e65b108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a46ea7-8e9d-4607-b6c9-bad7c78d53a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079d1e28-eb97-4693-be42-0e9f9b93ae03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f6f0dfb-49b8-4981-aaa6-1eb30412155f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9053f765-9e56-437b-bf13-eb883f8ce29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdd6594-f762-4200-a82b-3836c3017d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686de068-715d-44f2-b754-b0ed905b1af9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbea1714-f317-4ee3-971c-cc4a2e516b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56053f46-a47b-4452-9b45-8f173e23f155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1242c792-2488-4a84-9f8c-3d504104512c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2ac32a-f7d7-4431-9c20-d2c02c7e74bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1327978-fad6-4c9e-9343-50840c73c30a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3fc788-65ba-42af-aa39-dd974856c16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4554d3fb-f537-4530-aa32-b479d69f2702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4043df5-2525-4b2d-b244-ab40f098b0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "475f12da-f0d6-4423-9f3f-3acb1513e2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107e71e9-a314-4b0b-a94b-b3c95792869c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a71853-c4eb-4df6-bce9-1a72eaadd7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb89246-25de-404c-8dad-4c2f692a1c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08b7f02-8e44-4973-be49-4d662b905c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b806a1fd-6e0d-4753-bd76-99fdcc26d29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bc6d2c-7cae-49cd-b76b-d4bc23ffe52e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5b7c35-2e81-4108-8129-5c1e6d3e8bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7b30f4-8ab3-43fd-be29-8aaee69f4d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c2bad6-df36-4d21-a5f0-c696f395522d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42315991-f126-4aa1-a4a9-30bc794e89a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a5aaf2-099d-43db-b542-483f3ba6b57a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d87bdac-daf9-4177-9a5b-8ef024671085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd27fdd2-e75d-4604-83d4-0789b77a302b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950ed84e-e191-4ab4-b167-e28b482abf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed294482-9507-4a4a-8a9a-42367c39c6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d13058-d32b-46e6-83b9-f7fe83303c67",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf408a1c-afde-4f46-bb9e-30ae12553455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32968ec3-2d21-4528-a00f-2daf7b18d3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2a4f67-549c-4f6a-a5c0-819c44b6f81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f4f3559-96c6-4ffb-8ac9-415c9948cef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b37725-e05d-46e0-954a-eacdabdbbd5f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4c5371-6e57-4082-b4fd-3b71edef8bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2606e536-ad90-454c-b05a-3def9817b46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cded2eb-e87f-498c-9ef8-cbaacb7e75c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "da2e6287-59bc-4541-a218-dd0712176245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae429357-9be7-4ee2-8077-a824b63eb36c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f457ff06-3605-4992-a08d-bfb3f920871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b3ff91-5559-4d68-900e-c44d3c7d838a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135e65cc-97ec-470f-a09c-17baeed10209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0556c522-8a18-4170-982f-2f241e761e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89c1b3c-5fe6-4952-bcb7-50c3ea2e1352",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96045bc-63d8-40fb-8049-3b507072b1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98654320-1464-4a24-9512-3e9e4b712f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb4d03d-da74-47b7-a846-0afa5add7011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e77c79d1-e264-4113-8182-c493e980eabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b9c5a4-33b8-47a9-a1e6-433f079f501b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb657833-0178-4bfe-9d17-3e50c25c6367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9875f7d4-c790-4fb3-80ca-202985064d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468c043c-9fd5-45e6-b323-6282c42efdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c98378-45c3-4e10-a885-dee31a936e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05fc4cd6-5fe4-4bd7-9d56-9f40197252d8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600571c2-92f9-47d1-9289-9ba94640b646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e49520-8ece-4493-92be-1d45611d26ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fde1c1-0de0-4d36-9e86-833e3c11c289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "edcd7129-f3f3-40c2-bc2d-847d7631f485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bacd98-e7c0-44bf-84bc-714a49c7bb96",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd3de55-faf6-4365-8b4e-8f005044c617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72997b13-2efa-4824-a76d-4b895bb4b07b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f7b5c0-9991-4b92-9c94-3da1eb786892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2309e60-dfca-4791-a8a1-e3cb5918bca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecfcb51-90c4-463d-9a52-54fa0e58f90e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c39ff4b-48ce-4437-9785-243b5600ff16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf38a40-c56b-442c-ab3c-2a26091a1f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe086763-024d-4516-8348-72de3a9aea63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb2d23c-1448-4d22-944b-18f643a5bc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3580ed-fb0f-42a0-bde6-946713850493",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7e6d1f-71e7-46db-b6ea-51b32cca57b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df767ac-9985-43f4-9e04-699c564e25dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3a6eba-7509-4d96-90f6-8022926b0f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e80f1d6-f407-4eb3-ac39-06e7d8de7056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c89874-5040-48af-afce-4d0eecd0d923",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92cfa504-586a-4683-9e54-a1b16771c786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb2bfaa-5e8d-4c73-870f-1f3b406fb5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f742a1-8d1f-4d8f-901e-2fb7b65ab019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86f15a11-95a8-4845-abd4-233f53c85bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1799437e-a89a-496e-8d7e-55ebe5d11550",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23eb5f01-0657-436b-87e5-01c33875c5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0c4b44-04ab-4950-aff7-9de1dc1d9520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125a8a5c-82ce-4fc4-a8d6-92ade6d85ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bebcab6-dcab-40f0-b8b8-3ccdd1febd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80022ca-c925-4a82-8cde-fa0ca4a2e3b2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb253ec-5a43-454d-9f77-42ae71a285b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bf4765-c2a4-48d1-bad9-2f7061ff0fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3540bf6-ce27-4747-945f-0e526f415c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2127d17e-5b68-4bdc-ba53-9c401659c7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d7408d-448c-4d02-bdd2-1c769845b8b9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fc29b2-cbc4-4f01-ab3f-18b53b2b2bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca75a0ee-a02a-4e49-b58e-79ebbc479230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef7594e-801b-4c33-b992-ef4c52d5f897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53020523-fdd9-4deb-bc00-de6f49a4679b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1f00ab-3852-4406-8204-ccc5eda99aa0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9007ec69-7b9d-4e93-817e-47edfb158fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b6a967-d3a1-4379-9f42-342f6aa81e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3770d8e-b779-4a58-a95d-e7c0bee43dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29cc417b-edfe-40f8-be24-5ee94baf878a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440145c1-6cba-414a-9148-9ba3ef4282c3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2660fcc4-0366-4221-ba68-ec15b00c8dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa1f8d6a-5c8d-49d5-843a-2d5cabf307d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68722b17-4fad-4176-802e-7a039b06ece8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a14abf2-8b89-488e-af96-7e2b8906c5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fadf56a-fa3f-444e-90b6-3aec01c096f5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fc44bd-f76f-4101-a32b-a0aa1f5282bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abc4ad5-0852-417a-a207-bdedc14cf5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93a1867-c93e-4815-b2d3-ed8b0977d760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e05c9989-027e-4779-9b3a-19d367f6c0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df44d9e-2008-41d5-a8bd-dc4e7e3c9659",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675adf2f-b13b-4b9a-9038-f8d43d597e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8308d8a9-68a8-4cb0-9cd8-c149d15a6322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e87343b-4707-4b41-8b3f-2247a5ed74ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f43df9ad-9a75-4297-86c1-ac45b6ddf5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dff37c1-63cc-477b-82e9-ee5bc42dc481",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9beb4164-f15d-4dd6-9564-4474806e3334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e20f58e-3db0-4e85-b605-b89db45d14d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678bfb35-6792-4084-a485-e289b6c15ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5e1457-349d-4554-8a97-509a8652d689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d693c615-54b7-42d1-a1fe-c10c0d63c781",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17819bc5-cf82-447b-866b-dc4a886ed840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a783aa41-87d5-4bf0-a4da-17cc27cc9d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312737a3-03c5-42dd-970a-9a5f9e8bfb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04acc7a9-65aa-4f81-ab38-3b991b2889fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837dde12-4315-419a-a970-c048a2175063",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6096b5c-a423-400c-903a-8ab819b8e953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c805c3-4be9-4a93-ba00-d9dce4f333ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc537c69-5b5a-4226-a869-454ee7416ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0b6b05-9c9f-46e5-894b-6981bcdaa97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab85997f-3bb7-4606-901f-0377f8d82e9a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5fbfc3-496a-472f-9820-0a4993da15b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c9b9bb6-90f3-44e4-8def-b8d1a430f354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3be322-48b2-4469-8d20-e838dfd041ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4926aec5-1072-4e51-9253-9a0a707888c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480613bf-1e8a-4a9e-b312-c28c95d18d3e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9147e84e-5576-44bb-9483-62c58d1992c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952a12fe-16f9-4205-96f6-7df0c544ccab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ad7d0b-222f-4780-ba30-673f6294c7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f9ec74-51c2-47c7-9684-b3e348318670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a40059-0a1e-443f-9725-33cae365b513",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483b5d22-89cf-44a0-950c-6af2d02eed9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751f2174-3b39-4743-b094-77565295ceca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e666055e-1646-4cb8-8be8-63c60eef2357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7016e47-acc5-4e83-a24d-10fa94784f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7464b1-2c1a-479c-93e4-554a02ec7a2e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7fc306-60f3-4375-9dbf-1a5f793deb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9251fe0-16e5-408f-9474-5a6b518ebf48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5072f266-bfbe-4562-b95a-bd567af7f181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "af7b5b69-c3fb-48b7-90b0-12970db98073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe67cdf-c805-4d92-9cf6-dbd0ab416a4c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c4da2a-4cf0-4b84-a8f3-731320c1ce8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce69992-9a7a-4390-b77f-ade00ce5c87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c69fbf-5dfb-4d85-9ee3-10afc348f7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8848f6dc-16c9-4806-9f9a-155bf5ff6bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc579897-0928-4a43-8aa3-11e79f562599",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06075541-dc92-4b71-b4fe-a722c3e19413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "63c64162-ea36-4800-8154-570f2f6a2441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3688b84-92ad-4124-a1a9-951c311d93bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "92190ab5-72e4-4c91-a7bc-040bd6daaeb5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ad100a3c-d3e2-4f61-a29a-7b14089f6aaa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a44efd83-a800-433c-8d76-1416c68f9e23",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9b9f89-fea6-4d53-9d35-f304dd7f765f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d655978-bbc0-4363-bf72-5a6d379a99c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8a06ad-2106-4f85-bd06-4bd1a307de57",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "427a9f23-fd09-43da-a934-c0e6d2aeb9ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f797b89-5c9a-4445-9a4a-2af46bb7867e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bca94bc9-1ea4-4df5-82b8-15a1ca136255"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2431b156-55b9-4042-9979-b71f50fe3607",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f922c2fb-f44b-470d-ad86-077892db6cd7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8824fc1-2ba0-439f-b0f6-093b34e23bb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa03ae58-053f-446e-82ee-d3c163168b53"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9396925f-672f-4dd8-b039-7eaa6e7bec77",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a0b41cc-e2a0-4c8c-88f1-df740372993d"
                }
              }
            ]
          },
          {
            "id": "eff26772-7b37-482e-9ff8-88e0e6662ac5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f081e237-295c-4e36-ae96-f25ab7473d4b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "62918992-a02c-4367-a0e8-0029338f16d8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38e0b9c-f9cb-403f-9f98-aeb7770d3ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "54c11a52-902c-4663-90f4-1b9307cc8db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03a6607-02ac-40a3-bbe0-5cbbc7b3eb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c49096-ed16-4ef7-beb4-cc027f40e3ef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a545f744-3815-4609-b733-df5e73b18ba7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8f43c09-5834-4bb8-ad6d-7f360f9d92c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c28e1c4f-2131-4b50-9847-16d9b52232b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c0a3565-5749-4ac0-aaa4-080f044985be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "742ad497-c90e-4e23-a401-43037ac09f66"
                    }
                  }
                ]
              },
              {
                "id": "95086be3-1836-4483-8d80-8ddb949c6f58",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2c8aa54-28d2-46a9-9def-7740638a7cf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "710eab37-4572-4f9e-a1a6-eb33c565428c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "509d335a-4f0e-44be-b9e6-c54ca0994871",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1cbfe018-e3da-4f90-a5e0-8443c61894ee"
                    }
                  }
                ]
              },
              {
                "id": "a0e8a2b9-2979-4649-af63-36753a27f1bc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1880b317-b9a2-4678-ab38-767c4a19e03f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f8771c1c-0c4e-4c9d-af72-d2afcbdc36f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5dc700c-23c2-4c9a-a7a1-c417ea7d826c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f7862e87-d9f6-4637-aa00-1e715bd01541"
                    }
                  }
                ]
              },
              {
                "id": "9b8ce54f-51b7-4f60-9470-4b4ab9e990f2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cce18d10-d42f-4cb4-8cba-54570648b5e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86a15751-b31a-4bc7-96ab-e58029ccda91"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d08bad55-d454-4b7f-af69-a27151afb68a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "22705c88-0be4-4378-80b4-b75710f882bd"
                    }
                  }
                ]
              },
              {
                "id": "d44972af-817b-4dc4-a4c1-15f485be653f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44125018-20a2-4e2d-891e-e7c503c3a692",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b9513034-8b9d-4734-8a44-54f560881431"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b77b4d84-c128-4013-a79d-14fcd5cc8535",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e38e4d08-2c50-4097-9990-985fa15e63f6"
                    }
                  }
                ]
              },
              {
                "id": "ca089720-4d88-4ef9-9522-299b4a539ffa",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1730bee5-9452-4a1c-a736-b8907694a575",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a136650b-dfa7-4ba2-ba77-0bc7c78cb88f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f718e26d-41e7-4597-b66c-d7381586e3b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71682be8-ce65-42ae-afa4-343535fe7ba0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "df9372d7-27ae-420a-831d-2c8381958730",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "444ce920-b78d-48c6-bace-ea6fed2d3ebc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20ac12d9-6323-4c4d-ab6d-50f9c6255480",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9782f2e1-4ece-42bd-b69e-9be96c852fbc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef67380a-b382-4b21-8b52-2890b4a1029f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f6256ebb-f4e0-463e-9a08-70adc04b4b8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09868fee-a2b2-4331-861a-8d05013ed5df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "695efb9b-c6ff-4d02-b76b-5c1cd8b986b7"
            }
          }
        ]
      },
      {
        "id": "65557840-e3c6-45b6-a51e-e8f490caab3d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "33b21b84-6d6d-45d3-ba88-01a273afabe4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f19384f-ed5e-4d11-883e-77b2b2c1a197",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bfb0793b-ae9c-4027-872b-50c8e64369d7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d62701-eb2f-4564-971c-e2d1dcf8bd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548cb387-96ce-4565-913e-507e55ab6e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd0248e-c9da-43ed-a6b3-6801173ab8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf2af80-4ac9-4ed1-b2e5-5afd7bd4923c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6361262b-5cd5-4227-a2ed-3eb3d3494b8e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedc32c9-9028-43f4-ba4d-ffc6d6e9e0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471c272e-d45b-41b8-9831-f1a5e3a52f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af3ecd2-d7b6-42d3-a062-1e19441e90e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "da54f59e-dc13-4cf8-b18f-6e9f0b6ca47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b246fab-1851-4186-9da9-dde49bd06535",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723585ac-fa45-4a2b-b636-a92fcb694940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e91e133-83cf-487e-bb02-125a55035f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4917a8f5-cd27-4e6e-86fb-fbdc120e6113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90a358a5-6788-41ed-a48f-208fcca6fe1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5265eee8-5666-49e1-8264-eb9a6cc95587",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd2b4e0-7c42-4e52-87a3-0ce458b7c592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a16d672-2412-4678-8aa1-09386c3cc7e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa741197-9e30-4d0c-810b-046b69dbaffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71cae22b-49b5-4c97-b186-1ea95e26b715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d925e966-7070-481c-a911-e55f1d433894",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e722963-5505-407e-9d4c-648b59b9d47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59422e3-dc8a-4aa2-b9cf-f0b9992851d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1f348f-d7d7-4b7d-a632-7b2165c9c42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "deda9b6d-2e21-463d-b4d5-126b43e66d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8448d8-3914-455d-a6dc-134b20b552f5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a0e0d9-441d-4f0b-9346-9e4b079780ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb43e467-5b0e-48df-bb00-19b90839ffbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d3baa2-4308-4386-888b-847f56d125f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e3b890-ea03-4925-8c20-aab22016a437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02598fc-ae70-4839-aa71-29742b6addc2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff15cab-c595-4eb8-b57d-06aefb427045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c350284-097a-491d-9ce6-73e9a403425d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9df67c4-e490-4674-b55a-0759daaa2cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "32c43955-f237-4845-b7fe-9b969c0bce66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb7ebc7-44a8-4fd7-8558-1eb971774995",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021bb45c-7936-4e70-88f5-454bc20f2eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbaffdb9-0aea-45e9-a9d5-95b71f3adbe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046d525d-ec59-451c-ab46-ddce02d9f275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "101c4a8b-0699-4d94-ba80-6808bbc7e272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c3a6d8-f398-4368-9fd4-1d2c71e470e6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e780a69-4d72-47da-8592-8617b26600d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0649b5-06c1-4574-8319-19ec39db5c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97af02a1-4185-46e3-9488-b50837fb6001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08ac2045-8a2b-4088-a7df-965420ebc209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934f83b6-7c73-4057-b125-5f741b5e8ce1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfc2566-58a8-4cb5-a264-e695021694b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c1c1f2-526d-4557-8e9b-31d79213b135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d47f0e5-4ce9-41ed-8f65-5db558a5e706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "793916ff-9c51-4511-bf3b-7a5ea0e59f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f753d24f-2ddf-45b9-b294-2f8755412219",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f834e4f1-025a-4a7a-9a9a-90c43784d511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f74309e-45cc-43f4-9cf1-9b4788b423b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06ec553-f688-4b8a-9c72-a0dd32112dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c9097142-64e1-4214-b36b-5c7479ef3743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086883e0-b3d3-4c25-a6f2-7cb5dc860d65",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416c49df-7e35-4d05-b674-f806b190fc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60ea5e1-198d-4626-a0c0-c7bd0fcf0e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d848e96d-106a-4862-8471-e9e36dc95e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "238ab69f-8954-44eb-b9ee-a31304e23ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeef27fb-d910-4e71-8b21-15a1f86f9cc2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12e51b4-be49-4aae-83ad-6e8ddc89516c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9f08c9-7508-4f67-8eac-3ef12b522b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b021f362-1bf3-472d-8d4c-80275c2d8ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c182621d-2510-4637-afc3-2b90df7def66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89712d37-de8b-413f-b15d-59c20df5f407",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6854b677-6f14-4f55-a94c-9a14eb50389b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f746cbbb-8631-49ce-b0fc-3113d1c7b669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897be8f2-fbcb-4ec3-a47f-767ccdbae645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf38e207-f30a-4266-ba5e-d2ac9078c3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1bba32-4dcf-406d-9c5b-effc4766ef0b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aafce13-e39c-40a4-826a-37f43c78a56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d524d7ff-a9dc-4631-8e64-836197e3a081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5335b00e-bdec-4e0d-bfb3-db0e1bb4fe76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b506f2b5-c27c-45fe-a453-2323e0f22811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09733009-bf3e-4608-b90e-595f03996bda",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde4dd61-fbf9-41da-bf20-7325711b51f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87527fa-b675-462b-8bda-3b594f210f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2074facb-f58e-4057-aff5-8968b1c70f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aba0a5a-ba6d-4ea9-b132-ef306c6b123a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7de8964-ad78-4708-b261-785e9f3018a2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaa4009-3685-4a0d-80bb-7f709d9687e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414d4f31-40aa-4b5c-8e24-703570bde77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b7978b-0c90-4441-b2fd-e5b86320d3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4420079-ec95-4b87-9ded-abdb838a3df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab306f0-c13e-4f28-a8ab-6627efcd1463",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56527861-f8ab-4549-9a49-c216d5cefaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660ce55c-f622-4889-bae2-fd550b0d1ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60847188-fb4e-4e2a-8bee-0cf5b658b03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef41d2c3-7f98-42d7-ba64-1e99475bce58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3592b60-2bf2-4418-8ae7-35b2623889dd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa540a1e-c9ec-4c0a-a092-603a19622ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db43cb58-4f21-422e-b712-193fc19c18d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62e6000-ff1d-4fa9-baf8-dde9293abaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5d342c-67a8-4c5a-8014-bd2c9aa39528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ebecde-807e-4708-b124-72ebd0a17cb1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0a04fb-3348-40e1-b3cc-078728291f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c965567-6915-4030-a686-dc537e961ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd08cf37-b4a4-4c34-83f7-1f4774ce3b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4c1c18-6bcc-40de-95e2-ba59cc1c18be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9731537-f684-4327-9f6b-0e090024ee6b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b14ebd2-8a6d-47a5-9c4a-c1524cb2299c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e39208-c098-424a-8fbf-1d784f0a384a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cfd51c-6576-47ca-95cb-e876d388e800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "339726af-9cb1-4192-a1e2-e67607e07d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c222385-70a1-4b93-abdf-b9175f5f0346",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f3d75e-71aa-4e9c-8750-022c175bac3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186cf879-244d-466a-886a-072cfe5893cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238ab737-1413-43e9-ab34-1f350752076b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efb2a203-bea9-4954-b96e-5d939f03ff87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5dec51-8e8a-436a-9381-a0a87b132446",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7dd35f-b041-4e4b-a293-6b02ffd13f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1607c8a-c30d-4847-b90a-34b9ccb6df1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28014ff0-84b2-4ad1-a34a-a9d35c7f2116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d97fa42c-4855-4155-a3b6-56e7dfe4ba45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d160df8-917d-40d9-bbbc-d3f63f1a7f41",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97de77bb-9fa8-4810-90b8-43436691ebd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a051af7-2560-4815-9e8d-e5fe04c3e310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd22ff6-96d6-4ca3-80f5-b153a34d6ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a8145a-f8c5-4734-a292-1a9c1e506713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a86e55-57c4-49bf-aa66-802b0bd8e56a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc864944-186f-4304-bb53-c9773b227e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a500202-0444-4e20-90bd-62e09880524e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb883390-c7ef-414e-bd3d-b193931bf610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac508fa-7fff-46e0-9239-7fe0adb3f312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbe0be8-cc3e-4dc4-a356-4a22b9d4803d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7db0201-d0fe-4591-8213-ccb3e35bc5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883a0394-e2bd-4f47-a57d-682a0499f748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe99245-1de3-4095-a2f8-a6820eddb073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b7d299-b66c-4741-a772-da703be1cde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0764ee3f-6905-46c5-a82d-418f180c17a7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7fe0f2-7405-4499-b357-c046171a5418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ad0efa-c34b-44c1-a845-19c9cd3fc466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011862d6-0235-4550-b7a2-18ce4377519f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e01c5ca-9bcd-45b2-8f59-97c0ae3a3b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107a97bc-56a3-4f34-8696-c864cae69e30",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094c1262-d29c-4518-a0fb-e578c33f6e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e20acd7-ab1f-422f-a1af-053eac84964a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fdc2bb-ce05-4221-92de-74f009ef89ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9580c53-dd68-4ca2-885a-cb01db1e0082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0f876f-8efb-4632-832d-58c2ad814a22",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa1be92-8a12-42de-939d-23845b7e6fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e233c5-16fa-41ce-b61e-575727131abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002960a2-c8f8-46ae-8590-a81faf436944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faba81c0-f135-4bef-9277-035d09bb4589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec73f9f-dd56-40cb-82c1-1e9652d46716",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04436f4-e0da-45bf-bf05-6ab541617418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621faec6-402e-4cfb-a093-e05bbd05d186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2349a297-ec41-425a-812e-e31ca0149fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74b1fd73-550d-4a02-b0c1-cb7feff3fa83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4579c9c-ce12-4c79-b9e4-877cc344edb6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d52a8f-f673-47f0-84d0-576af0760b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef53c2a-7214-42c3-b29c-43560dd8562a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c5bcf6-15de-4c96-8960-61fd678b6503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fce5a5a-0f9a-420f-aee5-a70bd3c07635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c970725-a095-48aa-ad3b-5729184a4441",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87efd1e4-8b80-4d36-80a8-b314e942b5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307b901c-1064-468f-b07d-f480ac990421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1d82e3-ba6f-4d47-b5bb-7983237709c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f49f1c25-2140-43b5-858c-a8119931d552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d0bb5a-f924-4789-b658-d4d3056c928b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a9a9e3-97c5-4d77-8dd9-89a29ede2187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4beddd5e-4d54-4d65-9382-4891eade714b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39877df4-7f12-44f5-ab4b-bf2e4a3e957f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0659ae8a-16fb-454e-b836-f5138b53484a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bd6f92-58e5-4810-a7d1-81ae26af0d0d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52366e7-2e39-455f-b20f-e7afd455baeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f981f882-94d9-4d5e-8042-44d190fd5d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b079e160-dad1-4184-8d97-30e8029b787d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc8a976-1141-4970-8bfa-5c4fe0a07d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9a5d5b-f3ff-48bd-b387-4ae20f974e20",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4548553a-3b5e-45ac-8d08-31144093fc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf48d30-5609-483c-9054-7a3d3d6a3aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8858470-0014-4e31-8597-3fcbe418fe19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4889a24d-eac0-48fc-9bb6-98c29ae4613e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908b9bb5-a9b0-417c-a89a-3c004eb47010",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a4cda4-7caa-4e05-823e-24dbb563c64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca3d39f-dd09-4dea-a7ce-05f0cb6589ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f50d55d-812a-4a26-a5e7-d3b234576916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d7b030-8a7e-4354-bed6-34cde40befb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5c14ff-8c3b-4342-a1ad-35efb0ecc1f4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1d9b14-e718-4caf-80ae-f1d9c52f3595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8587269-bdae-4f8e-a241-e894b2831d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1853f370-b862-4c5c-aa0a-e27432af9528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea727fc1-86c4-409f-b536-21714f63ee93"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87044c2e-909a-4c73-8036-d2186722c17c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b1eb353-aa21-4898-8d5f-1383d87f6f37",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f824ac-827a-4bd5-a389-93f8b9f0b0ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "562c7e15-476c-4a8a-a92b-19ddc1a18c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0173c76a-5d29-48d2-bebd-aefa84c7626f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fa71ed6-71a9-4111-a168-b8d74f5b026e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74e21095-85e6-46ee-a3a0-cb7e8c6f8f91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0072030-2284-4ba0-81f5-48aa5ba4b7a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acfdae40-71ce-4afe-b37e-830936e3acf5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2804fba5-a345-466c-8284-adf446873b86"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "395ad440-a994-4514-aff0-f45a05ba955f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e10943b-c0d1-4771-b0b5-cec9a252f647"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c916d2a5-9542-4e28-b8ed-881dfcbb7942",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ab80efa-cf60-415a-8e1a-4bec5406a479"
            }
          }
        ]
      },
      {
        "id": "810b22ab-7c49-4c82-9dec-b56dcc9ea762",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0bd9145a-ab88-4c81-8682-00d53bd63f33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ebcd336a-7a2d-4101-9a15-1f43ff984df1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "576fad53-f204-4ee0-a855-192b0d29c40b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77bb79b-80de-4eae-8187-30726a271379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3be5645-f420-4807-9462-8ac9b139fb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dc979d-a62b-473d-87c2-36afe36eef69",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdeea5c-17df-4756-b265-cdfe689865b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce290618-8366-44b5-8698-8937cc1be9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422d5840-db15-4da9-9d33-13d0d893aa82",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b709f022-06c9-4303-8e26-50d0a7e31581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fa840f-c656-4780-9601-f55258fc1f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481a9d91-3998-44f2-a4b6-0e77bcd16e21",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0216f0-79a9-40d8-a2e7-4f6ddbeb5090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf01787d-9584-4cac-a486-fea9d39d39b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113a09b9-5031-4c34-a702-c895ace98c01",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a748036a-9f05-4d96-ac68-53c66810e29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6885c58-d0fd-4a71-9fa2-390a8f778436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5396c8-93c7-491d-9159-8b6130603545",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4739e8d6-e50d-4d15-be7c-36e75c419c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac3e015-9892-4810-9836-9578dfa75c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3aba35-2160-40cc-a404-4443b16a57c1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08575e3d-faea-44ab-b72e-ec13be1b1d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94eb654-a7e0-4f9c-a01c-b8c157895327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cba5f7d-d467-4a9c-b1bd-8e28c79ee5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364828c0-133f-48d9-bd44-649cdecd92f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccea5f1-1424-415d-97dd-753e906fbd19",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08260e77-9f25-4713-92f9-08ad6b05709b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d458f46-c74a-4eea-bf41-e6e9e6c69f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64de001-b706-404d-9bb9-41019a7fe44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5190a5-9b8c-4c7a-b1c3-2219dbd7ce67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bdb4f8-7150-416a-baa0-e5bc4b5ad660",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7ab51f-3312-4460-a8bb-23c853c00bf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "367f2c09-6833-4291-bc36-18a0332f5449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e515e7b-8a44-48e6-bc32-6c2fe92e75b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a047ef1-0636-4949-b166-6b06b3bba253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffb85af-0a31-48a3-bf05-8178778d8ced",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc082f56-73d3-424a-8d37-56a57330a192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8087fe37-ef73-44b7-ac57-ae191f844bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a92e30-82b2-4294-a064-b1cf85449fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ddb5453-0110-4e45-bb93-8df16f671ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559704d0-e855-4c0c-878a-d7db1266abd3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0276e0-25b4-485f-8e4b-7754d22af061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788a68c0-b459-4705-ad05-419cdcdd0203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe1a6d6-64d4-4941-83c3-122b49d432ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395efdfa-6e4a-4d28-9c2d-483d41bb558e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1d801d-fdda-46ec-9813-b73f49a1be0e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0b5880-6421-4f63-96df-b30da50a89cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0554a3a4-5012-46f0-97b5-18c228b75c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba84d89-6a08-46bc-ad2c-b3ca048d9e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98400ecc-515d-4abf-ac04-0fcac21a3167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c399f9-4c88-4955-a3d0-17061bb518be",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f90e147-1654-4c28-aff5-c6f0763e706a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c912638e-41b6-4322-a91c-881866eec81e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b080366-2649-4a28-bfb7-aafe17324279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58221ba2-3fa1-4225-93b7-d07013e4a2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c190bf1a-33e1-4fb0-a06f-56a3c016d7c6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a50549-a81d-4ff0-86e9-214817f2336d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d19a253b-32ff-40ac-8bb9-7396e2beee41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5190f878-3e90-437e-8f0c-44cdbbfa480f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d85e5a1-cbac-4e1b-baeb-65405684a3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28ba695-5f46-4b25-ac45-449bef0c10a9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69ea2fa-898b-427a-83ab-753b3af53051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de01b738-f411-44b5-9427-b8b2d6c7141c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a486f32b-e3e2-41bc-b182-459e97e8fc6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aecb751d-72ae-4a62-a404-10d32a6e5c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dde3be-a53e-49df-bd77-a5b15777310c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af916cb2-0463-4b70-a5db-677b7479a546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3818569-c1a9-4670-859f-54f426223baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b786336-cf47-474e-b9b8-94bfccaf1b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03d48a9-09c8-44ce-b501-18abb62d811a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e39c756-1822-4f92-9538-94f5733493bb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c712049-9b3e-4b1d-b62e-a3b83c522fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cdec5e4-b4d4-446f-9073-e088a866c3a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182e7f01-316d-473e-94b5-fa52bc2e7e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892cf254-71c8-4988-9219-3aa24fd069df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688135f1-6900-4bd7-8407-2fd0265a8338",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a43ebff-4af1-4a15-91f1-48a2f1b931b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed8c46d8-569a-4914-97ed-f1e68e2cad7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09833cd5-1154-4913-b576-e5fc7372ba83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acdd7f0d-821f-4aa8-baa7-af576ed69f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c16de83-a6bb-4237-b25b-e5d1e36a74d5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e8f107-41fd-4aea-aee3-fa083a42ccbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fdf44ee-8544-43db-bf72-af0c2efa0d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb28263-5d81-499e-98a3-0d39b81d0ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9781bf8-262b-43cc-ac90-5c7956bff311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f2b61e-3c32-453b-a5d7-f094100a8d4d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad8dea3-e060-4b53-a742-78bdc22463bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9df087-d250-4d0c-b377-e1232f352617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11974c54-fe51-4ab6-a3c8-c39e8eb704f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4177b7f1-1345-4f5e-8f21-a5a78c6b52ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e07858-fdf5-4333-8e25-437ae7fe8168",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0b9ca7-5939-489a-a308-97e20147e287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38aa1fd-dab6-4b37-a06f-15821e11506d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2e8450-4acd-400d-b22a-347b23e6f428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94ff32d-aa76-4c88-b7b0-49146018a77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09195208-0f3e-479c-aaaa-cc7e975c25d9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01304898-a8e5-4e91-830b-eed4d27070ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00506ca3-c459-4e92-b649-b01c81820acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d210ee02-b253-46c4-836c-2444b53ceaf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889f8fcc-0dc3-4ec8-8944-3f1c3f17cc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0341246-68ce-4956-93ba-6bd723f81966",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db133e07-744c-49a2-add4-ab182b9e6264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c87151-7ccc-40db-bbbe-0243b0d1abef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5916381a-1f63-4832-88b0-fc733c94a8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a33ff7-fc63-4c1f-9485-ace29d948a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db8d427-99c1-4217-865f-5339777c0cbe",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fbc8c4-ee9d-464a-9e65-bdb79ade03c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f99675-78b9-4eed-8153-c35b51c4a63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea32d59c-9051-4156-b718-a73eac102947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6521bb3-5a92-413b-86d2-f670aedfda1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32532279-3df5-463d-b58b-9b62c2afd667",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9914176f-2e39-49ec-8101-d4ed5f22c77f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b936e389-bc6c-4d71-a9d9-c42b760b44f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac4dd29-df77-4d3e-bcbc-4efa00415bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9129db-0725-44a7-8f14-5eb2b4180131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fb8ee3-7a78-48f2-a17c-0c04ecf7f94e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c8e9e3-65bc-48a0-a1d3-17a4e141ba0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1ee636d-e22e-42f0-a073-9ee5a54d604b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b29e90e-6d2a-457f-8e27-de73a6be899b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd73e46-1a58-45a9-8ebc-4fb21a126020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b54ae23-2a13-436b-bc5d-ca7174dd16c5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac972e1-99fa-4c45-a4ee-51bfdce9edd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d14b4f-ca98-4c34-bb8f-c726283c23c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2138e001-8e99-44a1-a8d9-190be4a9e850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd760acb-ac0b-4411-b049-5fc4e0d4dd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c764f10a-780c-4491-a4ab-0793558f381a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cec840-e39d-4fd9-8595-eba762bd79c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e23081-a097-4434-9235-dd9a02a8c4d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64200724-22ef-4a3e-b325-c817ab504e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46032538-2a4d-4846-a625-871418015898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09171106-b753-4751-bf3d-5ac413e595df",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b682e0d1-a700-4a6e-ab36-dd24dc4bc625",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cc56a08-129e-4ef3-abca-a9c3cb418faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1bfe58-c9c1-4def-afb7-5132132fdd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43196646-0f1e-4a36-a46b-6161362ba222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b76ec6-6d5b-4cae-9fa3-7a901959e364",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcb4b60-7dc3-4d61-bfb0-c0d2fd173f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e98a77c3-5987-4ae6-acea-0fcd08870414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9762cdc-7f1f-4153-926d-5101a413e44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e0f81f-c09d-4112-ae1a-f6152647a2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baa7102-cc6d-4499-8573-18e405b564fc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da8b170d-22e2-4756-ada1-60274c1036c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75f88399-0f4a-42fc-9970-a496cbaa2703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ddc14a-92b1-4761-a60a-f76db47b5bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "057b880d-df20-4cd1-8090-996d7826e8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00844ac1-584b-412a-aa89-cf53ce0f1db1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5917a208-cc3a-4ad1-b888-6e2512a98a1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c669c404-c711-425e-92b5-8a88555fa32e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05de2f18-695b-4442-8a54-4e14a91042be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5320924-977b-4823-8d51-b652dc37c837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805df8f3-0af4-4a51-bae3-e30ae3867d94",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c43fbd-b745-4171-b1c1-a5f868049f43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c53636-fe0c-4ff5-9d51-00cfd004329d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c39fa4-39c5-4e3e-a031-c32273008a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa27f825-8287-49cc-a1a0-a4ed28f958a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1890278-d633-4814-adf8-ceff62023ca1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e57c90-b30c-4c7d-a43c-2c5efa43f35c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd08975c-b8c7-4b83-8c8b-8aeb19076c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e64ce0-c6a5-489e-9b2a-92b3c6f0dcbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4192d12-a97a-4fdc-a394-96796a47a86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77974afa-4cb9-4f79-bb46-bf3a1799eec0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10dac0b5-e400-4f8b-8ffa-753c6daf58fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1413462-7f07-4b53-ab5c-eb96408281ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "382477cf-8015-4887-99b3-257409cca22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c013e7-10a9-4f01-9812-7d7c16351535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1629b3a-0eb7-43cd-b74b-1770962c32f5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30228fae-804b-4dcd-a69a-aab1efa4f751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896da178-f140-45c4-a989-b8cd2d16d7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61a4b69-1fea-4fc4-94e8-866fc1290a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be2d97c-950b-47f2-a4ae-66e3e257edaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90913343-63ad-4d32-88ec-e64e32fbe2ac",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801bc6f6-ec6f-49db-b1a7-0283b9e35af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc385a5-d43e-4dd3-810c-9dbc0d56421a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df11d532-7f84-4910-8fe4-b15bac4f6428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6975d0fe-1a9d-4195-b580-685384bde9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93fed3f-a0f5-4f31-b5e3-ba9cfcb578c8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf35e89-afbc-455c-a575-658cef7d7ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79c6bb8-ab0c-4a54-9e42-2b5179d71997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f811b5-c308-4b0e-8c9c-deed45f9b82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9efd44aa-df7c-4211-a120-749ff15277a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ecc3d0-f771-4ede-84c6-2cd8c6379d24",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d0161c-21ba-472e-956a-d5821b35c808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99eed1e-52a4-4d73-84fc-5df6a74eb0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1568c4d9-49ef-46f2-b8e2-3cc2c448050e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4cd581-85ac-4072-bd7a-c4f1ef8128c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877dccee-adb3-435b-9845-64307551ba19",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf99d1c5-c20e-46ab-9b5c-bfabdebc66c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec94099-c01a-4357-9c44-4096a6caf78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e390f34b-8a6b-45d1-bf69-f91b033c58d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e785f51-9786-438b-8b01-7e5e07e94d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc5f42a-72de-479a-941d-e3b3d8a810c5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5cc428-83a8-4d94-8a24-262291ec719d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ce67a9-91d6-4567-b35b-d41d796bc69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfc301a-1e8b-44be-a62e-2d87d30553bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00794514-76cd-4d98-9616-743112fb278e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9539ea-8e9a-45c2-ae74-b5030459f758",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a315421-44dc-4f12-835c-e60a2889c465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875fdce5-36e7-4d87-986f-a553b0ed9ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8241b5d7-dce9-4fa4-84b9-563992792e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8e8e16-8c21-433d-a2a8-b6a2043bfd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8845db3-4c97-4310-abee-a9e5f097d5c3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8e3212-9ee5-499e-bb99-3dee0cb60891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b6309b-f5db-4f46-be43-76df23e216d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0980b2-fb0d-4233-9c09-15399dd47e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88715a1-fb53-4a2b-b5aa-090763a9f895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3839184-6067-47d4-a611-80886a0345a9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944e50eb-63ba-44d2-8dae-78eee514624f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2d19f6-7813-4154-b774-5f68c6813d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0b454e-abfe-4df2-b795-62874ea3c758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fbfc2b-c42f-48c6-9131-818ba3f417eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866ca681-3d11-46bf-b6bb-75e6f74470ba",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349c6f4-cd58-41a7-bb24-166c50cd66fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff47d6d-dfc3-4634-bbd3-760d0d7ce80f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4694e79c-326f-4d14-bed4-4becbfd68d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c005dc-bd06-4936-b85a-2df88ef8764e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5204ff1f-5982-45be-8481-5389dee33874",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f56a955-04da-4f47-9098-b2245aa069f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c527cd-c4ea-4a1a-a11a-4f8fe31e227c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd54dbd-10c5-44f9-b660-fe9c8d5dcad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5071af5f-41c0-4b67-8d01-38eddfcb556c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c32b242-e18a-4ddd-bf9b-7f88ff9c7efb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0547a710-53da-48c3-b83d-424af587be47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12a2f43-ec23-4661-9e6e-0dd4aaf1a5dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbf7876-4e0f-49a1-9e0b-44a3f0ac79f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7bfb33-c0fa-4be4-ba1e-b6485e1fbe62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4363bb7-8b7c-45ad-850f-c47b04d2c288",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf20216-0b76-4c9b-99a0-b8d91f07633b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d6e285-8cb1-40ad-9179-08c114a36019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbeb080-ef1a-4537-811c-05567bb14bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b97ed61-fcf4-4cea-9580-b82e21664d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de425a7d-4535-48c2-96c7-069a7ce24833",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd305707-2756-4223-bcaf-0707607c6202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c35558-d67b-4223-8ede-20c721538307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a66709f-5001-421c-95c7-b52917aee1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ee0f7c-ac3e-4366-b701-be343eb2e527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda3b1d4-54f2-40f2-b278-563c82c08762",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a100227a-3aab-443f-a54e-ea461122a87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fa60eca-7986-446c-a7ab-f965736ac682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0685e228-88b3-4d09-bbde-1707b66ec655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef9ace5-b168-403b-b73c-d43f072766a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f065ad47-e139-4e72-b33e-08846292fe98",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e914fc67-0d7e-48bb-9e68-caeac8f4a025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13578333-080c-4073-89a6-93235e2438bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75563491-eadc-44a5-b589-c127763ddb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68d8bab-51fd-4d40-9bf0-bb41474860fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144514d9-ffd0-4cc9-9a77-030089dcd230",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3887868-91d3-4210-b362-ff8845da9bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503f86da-1fcd-4485-a7d2-83abc2655093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ec07dd-815c-4a64-8e9d-420768a9b7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef959dc-2ce3-4e5d-9ce7-ea967ae1f753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e982db-f5cb-45b2-9c18-80df0c781085",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f6274b-072a-46ef-871f-0decfdb477d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed96e022-08d4-40cf-8f0f-16bf4e0847db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683a1ef8-d79c-49b8-8d6e-af6a544eacba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550c577a-6d1c-4bbb-85e6-5c557d2a11ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3c4c9f-acb9-48b0-9c1c-3b193311d69c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfdb851-dc9f-4c19-a522-129b229690e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef0f8bc-6c58-4dca-96be-6cde3dcc8f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1c45d5-a7d2-4c26-8e52-bf2cead8b6b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a9f09d-f4ae-4c1a-9039-962f76b705a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0282e4-6f72-4127-b58c-f13e859d1963",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cb171d-e32e-4f2c-8d36-8b98c64c680e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de707b60-9550-4665-b011-22c1df97153b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ca7759-75c2-4e70-b863-25523fc5404c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd9817f-e920-4797-a7f7-567b9888df0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb9217b-29f4-4a51-ba5d-1f84747e7ec6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b2dfc7-dc3d-4d85-8fc9-20832d7d3beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef361f5-65ab-41e6-b80a-06f808c9695c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642772e1-7732-41f2-a029-72c0c0173b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffdf12d-6185-4756-9f8a-09b6bc33ccef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f7804b-46b5-448c-9c43-5d90a079a03e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba1b4b0-7296-45b2-98af-36244aadd10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81c7d36-b79d-4c7a-b481-75bbda250295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82a4290-abc7-4ac6-96b7-196d4b710394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45b1333-49c6-4bd3-959c-287daa8f1c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac962ba5-d0b7-4917-b5d9-1e164cb0833a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906be0a3-200c-4b95-b068-d49f271676b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355e667f-fdbf-4e53-a978-105baf6fb730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec2080c-6dbc-467c-bb58-3477b1d48a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fb494c-d422-461c-9206-c996d9e13758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ae1b9d-b482-4b92-8f90-4fc225dc1e9d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a965c2-ac51-488a-b780-eb131ff5feac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6438c12a-00c0-4383-af17-b7ce44bb4f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c8bdae-18cc-4050-9c46-d37f8541ed69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bb4cae-3aac-49d5-9dc0-ff83a45c3731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2070697c-2719-4a1e-81df-06bfd4412888",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8753576-f9c0-4cb7-8eb8-71252b6d6bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d317e2-7897-4191-8153-47fc68cd5a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fe80d8-4032-423e-b259-a4424f2b0083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03e541c-0c39-4c48-b5b1-c7fbe94ef372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faf25a0-b5fc-4af3-9aa0-631344137aa1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a85b00-8d08-4b41-95e6-2c4b2b8506e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0197061b-bcdb-41e4-8d73-d7e386e08a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b20ea01-9a5b-49bb-b0f3-c6423ffdf689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425fed04-7685-4ac5-85a9-d56ebe92ab5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c4d9bc-1b69-4eea-9357-ba65c5445455",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d3f5ae-7979-4eb4-88b2-34603cfc51c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efce9303-7df1-4eb6-8a16-33d1af0a5909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2d8663-dc08-432b-a952-0bcf6a021f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1685e81d-cbb5-4f2c-961c-f4db573593f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0cb0bd-c245-443f-a837-2c9eb85b674f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8788a670-e14b-40fc-902b-3c66ca49f42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f29e5b-6dd8-4cfc-b2e3-a2d239d4e817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46e79e3-2039-4232-9916-ba0764e3e5d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a360b5-cc0e-4b9b-8f23-16b523777a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f384ce70-d53f-4532-948d-9ac4caf9ab8d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca30b4a-8d18-4798-8119-ca2347301bfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea45da14-39d4-43b8-a952-ca80c67e3f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd7cd88-f025-4410-9e96-3f30d004f8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a03eb4a-643d-4ac4-9145-c8353199d9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d69fb4-0862-4b5c-9480-1b7e72d517bf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a60b67-25a3-4ee0-884a-4399c3042608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e31ee3de-b623-482d-ae38-8023bf913636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730d45cd-2dc4-40f5-a135-0013fe2d2885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f292697f-ef13-4dea-8be3-ff678d7fccf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0270ee2e-b527-4d39-aec1-f2a0ef58132a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173371fd-d249-4862-aa7b-9e05f2f029df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c613517e-e11a-47fc-afca-de504b6033d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ec7288-5841-4b59-9a9d-17a4b73a0b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a44591a-4920-43a9-9aad-d1334fbe2b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded392fe-4b52-4627-9020-a8805282daed",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ce55e2-e687-4278-a19a-bfe8895a2741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9509bbaf-7562-4766-b760-da7a77250eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4248da30-3d39-427f-a6f1-f4ec121c46d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d663abd-3441-47b4-ba31-7581285fa23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05e8165-b792-4ffb-bf9e-70385feebd8b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698cb94e-7cf6-49fb-8365-cf02444cfda5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f70f56e7-9503-486e-97f8-b6192e2ea617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d743742-4855-4221-afae-2d767bcca847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f6b0838-9809-4743-b150-d316c0dc1dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76823c02-3f06-402d-83c0-0ff3b3400d3f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0e1942-213c-42cd-a635-e17522d981ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5efd7c08-355a-4806-ba5a-e083c507792b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25432add-4b99-4760-b8f7-e31bd7a3f696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9b3e53-c32b-4bb5-aca1-f4fdf64c6569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c272292-edad-4d8f-86c7-98a95c58ef00",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3802f2b3-c11f-45ab-b5d3-87261ace38e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672058ec-628f-4c8f-9d01-f1f173de41af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72ca8c5-622c-4846-a0c3-35d097a60924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed17a530-ad36-40fe-b4bb-745357e12a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23da763f-da31-484e-86f9-aff1b0559403",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b703a032-fa40-4601-8b0b-f2813412f250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23b6b00d-2dcc-441f-8523-3039d96b06ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2c074e-2f32-44f6-b94e-b739acf5e9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7079fc1d-aceb-4d28-9871-4fd0b764a9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac08623-8020-420b-ab10-72a06af38229",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf588cb-a49c-4a67-b367-3ce64e593742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003352c3-cdc5-487c-b64e-76bbf284237b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34677b80-36e1-4e70-8959-d5c067ab4fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9e2ffe-d25c-4590-8208-147763a26913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc62df07-7b0f-40a8-9be5-c00abfb3ba5e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c7d2a2-e1fa-41c9-b79c-917314c5d492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1428450e-9d0b-4ba7-b012-298a4f7f6a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4117d96-eca8-4d34-b4b6-ea1d0d053e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f3872f-7848-408a-9254-83fb02c77c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4808db-d891-4623-ad48-2823347b09a1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fbc1c1-ba96-4579-b4ec-d114130793b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ab9ab62-4f08-49dc-a059-59b914f9ac8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e2ad1f-0515-409e-9cb2-87bfb9262f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c472262f-9ee8-45a3-9892-1ca2f25ac40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45aea833-1dc9-491b-bad3-214d92ec9d65",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15123151-e356-434b-b53d-8c326fabdd6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "020da1c1-b51b-44d2-827c-39737fa9f66f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22541305-dd6c-4bd1-b0d4-fbae2d5b1a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd7f9bc-6c74-4097-8bdc-727ea693f74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edec3e47-f59e-4b66-a0a6-06b855402611",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f09ca3-d9ba-4aba-8270-332933c62ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ce7351-7b3b-4a02-94bd-abd5ba18da03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6bc60a-f1cd-4301-bb9d-d18ab3f2ac30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c0cc55-8415-4d3b-ba05-d56971dad611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f7dfb4-d03a-4c7b-b466-7a7b59042805",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8093a0b5-bb7a-4782-a648-d859a661520a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bd20fee-a5a6-4ad7-a3da-5b9b82f54116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cd69ad-2274-42f6-a2be-6d475aa5ffe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c8c7a3-e9f3-4483-95a8-f30f1434764d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfa2ac1-e754-4da9-80d8-2de349a647cd",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67306dc8-2ccb-4461-a2cf-e6056e929f6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff54ee0e-13ec-4968-b034-30c8092a4783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4aff0a-ada2-4e99-9ec6-2bec2f631718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a74638e7-2735-42c2-865c-192a08bef912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf296e0-b6a7-415c-a30d-346c9d2443fe",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78563b90-3df4-4039-99db-4dc61f319f20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae11f7a2-1c98-47f3-912a-acd3498d7f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c03b92-2f0c-44f7-b18d-77e6a1b3546e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f37c17-5f0e-439c-9848-b13c58ea5879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8faabd-3806-4792-bdca-22304647ce0f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b14f70-8c74-4886-bbf0-06a8c7d7da8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ae62220-ce6e-4ae2-b54f-d6755189a210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625487d6-3354-449b-b003-2f122056773c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bc56c7-4094-486e-adae-838c5448008e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6ca20d-089a-41b7-9121-1f6b1e115956",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926b699e-12b0-49a8-8c4e-302cdf611563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "873a814d-fb37-4d5f-97db-50ad434874ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "110b4efd-e1d6-44cf-b901-ed96f95dcc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9cb294-7458-422f-bc3b-efb0ede6d3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c7932f-df96-40a2-9381-1095725735cc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4d172f-4d04-42af-8513-36959a8bb59b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937b44bd-5ee5-42e3-baf1-f6ce5e4c2f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62baa0ab-07cb-40a2-b6c2-2afcedd6c52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b02ab37-f633-4509-8fdf-5d3985331ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aec2af3-7e6f-43a9-8542-d0138526f62c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4511bb0-7eda-479a-915b-75eaaedc627b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "916f49c5-b5d0-499a-af76-e9b5994d5ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb538f0-4542-46fc-baf0-35e3ff1df0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef276b4-d8c4-426c-ae28-b66b23f1e26a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e19cc9f-d619-4d4f-994b-4b843ece03a6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e8982f-ec28-4348-8cce-bfb886324d59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9256d089-7050-4aff-a8e1-a36f0a5b314c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f326d3f0-7019-43d7-a116-7e93fa02b7b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b2deee-f581-4782-8d3b-a9a5c68abc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab92ec9e-d77f-4725-bbe4-86035d5c95a1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41850d3a-42a8-4188-8ba2-56d6e1ffa744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afb2ffc3-4885-4f6c-a70f-7e2cec42b797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecbe453-87b5-4e53-8140-1149dce6097d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebf22dd-1757-4999-80f2-00d720d50c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7355ff-860f-4d0d-825b-fb1b4c437b16",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b2f404-549e-4f65-b2d4-f8e9cc895ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ccc72ac-887a-4485-9162-fd127e1f5fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9561d495-0285-4e85-8b46-92839e795a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b812f2-e5d7-4057-aaa0-760e4d25dad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3164fd73-93f2-4aad-a004-d26366deb26e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13185dd2-6623-481d-8bbd-479b8010020c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e326aed-cf84-40cb-8bab-023de9439833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e42adf4-f6c5-4ea8-b656-984765d1ccab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43eaf13-2607-4dd5-ac61-85d301e16488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186c5e30-626f-4a4f-b3da-4ebc9ce76524",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefcc236-f7e5-4063-9594-b8d386255420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e0dd9a4-02e1-4c35-9926-fd8c1cf7ec07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed2fdcb-c8a8-41a5-b52c-cbae5ef4f55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "483d194d-d6b9-4284-88c8-3a0a9d8ad54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b473d7d2-770b-42bc-a414-a6e09e9cbd81",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca5b21f-479a-4cc6-bd89-ba3875f92a02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdd4f673-fe13-4647-8ef8-5dda5bcc02e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea569868-14a4-4737-8444-29f80a95a91c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57a6874-d5b3-4f8e-9c81-25046632cf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192f62bb-c120-4dab-8696-8dfe11aa6ef4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eeae19e-accf-468b-a43b-ca297e27747e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b46b3cd-eae9-42f1-8f0b-71c65468f38f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd39def-11b0-44a3-ac7c-d88f30bd0b11",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ea5b4c4-16b5-45da-a6ac-14a946b24db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee0ee17-b4db-45c1-863c-3ef514ce2ca7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e475eb3-b04b-4bd4-915d-8e697d696769",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f9d3eb0-f3f7-404c-bc15-a6e8bb10f616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c8236b-9997-440a-bbbd-84b33b7e7c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1199bb-958b-45a6-8419-c72845dc8d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4acca4-d8fd-4d91-84d8-a8f5bbf61086",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27151800-bfbb-4828-99e2-6c065da43060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01a807c-6fea-422f-b322-3eafed76b1f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9244336d-04ed-4ca2-a951-ada796078172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9409c005-cb36-4b06-9d5b-93930413e718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9031ba-313e-46cd-aaf2-020d01ca003a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935bc102-aba6-4784-8d7c-40cc7620f671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae744212-28d5-4793-8cd4-1b2ddabd5ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49dd996-d827-4317-84c5-b51e97fa1a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b0b3aa-b38c-45cd-aa1e-dc4c117d8a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f132cc-8453-4a91-a0c2-d1d10dfb75a4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1adcd1-b92f-41bf-a775-92daca28d8d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df9ee8ca-9de8-431f-9f9b-955cc264125d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba45f73d-1af6-4043-80ca-a3a5d731b445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4986ec93-48cc-4809-9075-6fb3b9e29fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2cec76-9c92-4fd3-865a-f2f17c4428d5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cee18c-b6ea-4186-aba5-53b8d998855a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ada3df-ced8-4c5f-8695-7fae4ed27e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd37aba-1678-4c76-8e1b-19f6998b6c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edde2698-d430-4fef-8daf-92032ea741a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba57347a-ea78-4bed-be97-6f1da9f1bcd1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c9c913-b0b4-4b4a-ba0f-fc0651e9c198",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98087c6c-e837-46cc-bb7f-00b0b45e01cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63c249a-9a20-4f27-ba3f-80c9c4f85dca",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c58a827-331c-4c81-bb92-2953a994cd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc02d27-6d2b-4083-950a-54b02c9a3372",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed2e00e-c870-4567-96f8-22742f46af5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6c51bb9-371e-4927-9068-bbc0c96f160e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f0b4de-444d-436a-97d3-eadffd268827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01c80ae-5ebc-4e2a-9d23-5522084102a3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f110fb42-dc5a-4dc8-b267-90aa953f7a11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec899de4-9456-4f06-ac02-8a8f7963bde4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7fd55d8-be31-416f-8559-d386daa8c99b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5826a8d2-cbbb-4991-ab59-5f3dda36e663"
                    }
                  }
                ]
              },
              {
                "id": "50476529-7a4c-4686-a114-d120b61fe372",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c96b5d22-e375-416c-bda6-b97741537c31",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3015ffa9-f40e-4686-9dd8-023c30300e45",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e1f40575-24b3-46cd-bf8a-253ed7fd1670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8365a901-a970-4aad-824c-fd4454cdcea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0029dac7-520f-4368-a814-92738404c90d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42985dd6-72af-423f-b2a2-87e7ee9ef0f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec84adc3-6034-4cd7-a393-a67523ae8a35"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "73b2b948-41f7-4c20-9d0a-529ab82f4888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "524f150c-1691-409f-bf1b-d511da2f0842"
                    }
                  }
                ]
              },
              {
                "id": "5170c3ff-b9af-47f6-abb2-d5be2f3ddf24",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a0ac7c4e-f97d-4b99-a9ff-125d40cb5647",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a64b5ab-3b9b-4b01-9932-3684f6b20a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "19f2119f-0e16-475c-af2e-5c44a2de38ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a58477-6976-4b22-af2c-5df571f8d464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230fc46e-c8f1-480c-86c3-fa1999e7bbaf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bba685f6-0e10-4226-8b4f-e8012b307f53",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ce004c78-e57d-403d-a05d-55466867dfa6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b492b3ea-7ebd-4315-82dc-8970849ad8a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8024ae38-c056-4a15-841b-9ff890f0ce7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "974a05c2-620a-40d5-9141-f63ef39db2b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fbf165a-8d60-4d20-870a-c6e2bd276513"
                    }
                  }
                ]
              },
              {
                "id": "ed260575-591b-4504-8387-4be0714a964f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a62dbd2-308a-4053-a892-cd4f9d726940",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a6ff7984-e44e-4d7e-9fad-1d3e1f5ff0aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daadcf29-6861-4c3f-824d-7ce4fc9e5c97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "793f8a3b-9f90-4ffe-8ded-1b05f0cb3f89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad8e34b7-bfaa-4965-b409-90c7922132bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2a1d466f-0c50-4faa-8d79-381d736a4d5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "299da827-3eba-4974-837d-78eb6615a6e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b28744e-8f0d-41ff-a530-a4cab70900e7"
            }
          }
        ]
      },
      {
        "id": "c5e41579-3544-4496-8ce3-69a1ceb65db0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dd5813ad-9af9-4a29-a346-60c5edef8642",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc739e0a-ba52-483b-a15b-dbbce07ef32b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82301831-5667-40e6-ac10-a911e44ed181",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5ca59a-0869-44a5-b005-aec9e81e3372",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "05b5c495-e0d9-4121-94e0-746a776c28b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c753ca-d987-437a-bb83-e30f796be497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d467ac35-01d7-4d5f-b82e-fa2097eb7ac4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "644bbfed-641c-4a9a-a470-a6d4e55c8a87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bb5e2c2-468f-4831-9cd5-47848b9af422"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e65c4967-0108-4820-a17f-b79002216551",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dc7f811-7c8e-4241-95fe-cafce2dd4d34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aef3f57d-afa5-4084-b790-282902d7622f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9b347bfd-cfca-4a84-bd04-e8715b3b3b4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6443f3d-6062-4d1d-8f7e-ccd1889e518e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62e4a013-000a-4ecd-807a-3f362da9d6dd"
            }
          }
        ]
      },
      {
        "id": "087c9e56-a4cc-4d5d-9b37-f0c9c3280f18",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dac8b595-a1b6-4868-9286-8a6b552a6943",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a71d1e87-4520-4d63-a8e7-2213de679402",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40fcee34-7538-4789-871d-7ec02acc4c68",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a5b359-6755-4e40-b75d-86d88c6b2f32",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8b2a380-ca91-42d0-942e-930e84187b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de59594-edc7-44da-9e45-4a03b256b71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f13138a3-b3ff-4df9-b3dc-1702a4b573fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "294f6870-95bd-4d36-b329-4920c4cef6cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c979b9a-25bf-4202-8f82-d8e09d37e400"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e72db8a4-8fb5-4535-8dba-31c1bd645556",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad38aaf5-ab49-4b9d-ab1c-72a470abad01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cc18a6a-7634-4337-97b4-53c12b9b12f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05e3688f-0cc5-4845-b930-8956d4e560a9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2b0aa1b-4085-49a3-92d7-8a88ddd1682e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c37e6ea9-dc7e-41ff-a9bc-422114655142"
            }
          }
        ]
      },
      {
        "id": "be4b0f87-1c09-4e9d-972c-4d1957acc449",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "53828259-51f7-4fda-b696-17f233c4f102",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dab0585f-079c-42ba-93d1-13aaca3f2a03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d56c8add-9505-4493-ab0f-ad7a93cfacf0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a09721-f3a5-4cbe-82aa-53eff5c0d8fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "293fae0f-2691-4ae5-8f56-c8a2218f28c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f494b53-08b1-4753-a364-9ced3c886aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ed93651-2e38-4cb9-b0a6-c9d8fcef63c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c9a9037-fef7-4c8a-9b3f-1d7a4b340861",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1530e7aa-bb7f-4661-9875-d4a25fe8d3c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58b73eed-e3ff-4420-a81b-c2389cc12280",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20f3a1ed-0a34-4448-a2bc-0bb8b9b05d25"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee01c67b-921b-459a-93f4-7ec315ad8127",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d4aebde0-61fd-4c29-bacd-af79ab0f88f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40b50b7a-302a-4031-96ef-fa0f9f4dae73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c5bf71a-06c4-40f5-9241-a04e1368db4a"
            }
          }
        ]
      },
      {
        "id": "c49770cb-f17d-4794-b7cd-a64198ba1925",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f94b9106-8f38-4ff2-a539-b461871e35d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dcfcc57-aad1-4384-88f9-e0b9a1c17b39",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9ec03317-ed5e-47d8-b167-8a679501cc6c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8895701c-d485-4b15-9188-6c73ce84f940",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1cae593-8977-4a85-875e-ae16a9348d36",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 117.40476190476181,
      "responseMin": 6,
      "responseMax": 987,
      "responseSd": 89.78763998894604,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1727397926989,
      "completed": 1727397966042
    },
    "executions": [
      {
        "id": "71727570-874d-4db5-8e49-bdfcd30751e5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "69795ae9-62d4-42f1-ba4a-0143376b3543",
          "httpRequestId": "694f266b-7a1e-4546-9e48-dc198036d72a"
        },
        "item": {
          "id": "71727570-874d-4db5-8e49-bdfcd30751e5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1c2f5000-7c0a-4dbf-9e9d-35b17b5a8a6e",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "9ac18a6e-3688-4687-a2c6-1cadc91065eb",
        "cursor": {
          "ref": "9a0b897f-3501-4889-a0b5-c1bb4c2832d5",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fc90da0f-d01a-4987-846b-c6b0333d4d89"
        },
        "item": {
          "id": "9ac18a6e-3688-4687-a2c6-1cadc91065eb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "67838751-9243-44f6-b062-6b5e1afab5ad",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "b34140a8-ab0b-43a3-a5fd-791b062dc912",
        "cursor": {
          "ref": "fdbaa5da-d86d-4bfc-9156-52940a336e46",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "692b55a3-4425-43d7-b662-7e5f44f99ad6"
        },
        "item": {
          "id": "b34140a8-ab0b-43a3-a5fd-791b062dc912",
          "name": "did_json"
        },
        "response": {
          "id": "f7adae6b-5e8d-40e9-9332-008af71aa1c0",
          "status": "OK",
          "code": 200,
          "responseTime": 501,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfcef86-eb94-473c-b4ed-3ec55111904d",
        "cursor": {
          "ref": "08f27dbe-8fda-41ec-8995-877cf1463bfd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0cdcbf54-8ee8-4637-b46b-c65cbecee9ac"
        },
        "item": {
          "id": "4cfcef86-eb94-473c-b4ed-3ec55111904d",
          "name": "did:invalid"
        },
        "response": {
          "id": "8eec2a6f-b1b2-4849-97d2-576c9c9bc3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfcef86-eb94-473c-b4ed-3ec55111904d",
        "cursor": {
          "ref": "08f27dbe-8fda-41ec-8995-877cf1463bfd",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0cdcbf54-8ee8-4637-b46b-c65cbecee9ac"
        },
        "item": {
          "id": "4cfcef86-eb94-473c-b4ed-3ec55111904d",
          "name": "did:invalid"
        },
        "response": {
          "id": "8eec2a6f-b1b2-4849-97d2-576c9c9bc3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08d7d71-b028-4855-b1f4-a905aba35cbb",
        "cursor": {
          "ref": "a1695043-826e-4cf5-a603-7f1ab43c6002",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "387c0895-e8cd-48fd-85aa-22efa8217ede"
        },
        "item": {
          "id": "d08d7d71-b028-4855-b1f4-a905aba35cbb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "30c54441-19aa-4c14-b457-b38561035554",
          "status": "Not Found",
          "code": 404,
          "responseTime": 207,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff50604-9ae0-4e93-9067-991d2cc3d25b",
        "cursor": {
          "ref": "724c9397-8d0f-4877-87ec-c801d7735cce",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9da1a5bf-416d-4389-8cbf-87e64ac40e38"
        },
        "item": {
          "id": "dff50604-9ae0-4e93-9067-991d2cc3d25b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "46f86b33-79e2-4755-b885-dcf3b6a294ef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadfb9c6-7d60-485f-878f-a214ec61c130",
        "cursor": {
          "ref": "1206d49a-80f8-4da9-bcc1-8c23ba63564a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "02e6a309-f3b3-4fbb-86e8-d4da7cee783f"
        },
        "item": {
          "id": "aadfb9c6-7d60-485f-878f-a214ec61c130",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "17871de7-6b57-45da-91d3-46b8936f0685",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b86723-17ab-43cb-9900-949e4c77a9af",
        "cursor": {
          "ref": "1c294840-a80b-4325-99d4-3abb4d3c954a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1a022a38-f461-4870-b50c-12ce9199ae85"
        },
        "item": {
          "id": "e8b86723-17ab-43cb-9900-949e4c77a9af",
          "name": "identifiers"
        },
        "response": {
          "id": "ae6522cc-ccba-44cf-909d-0a56253ac9d5",
          "status": "OK",
          "code": 200,
          "responseTime": 340,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b88d2a6-859b-49a1-8337-ebe0bdf3b69c",
        "cursor": {
          "ref": "ecd21cdd-26eb-4c63-950f-9dcbc6295815",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "edfa1f2d-3169-4619-9537-21f72e184c19"
        },
        "item": {
          "id": "1b88d2a6-859b-49a1-8337-ebe0bdf3b69c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fc57eea3-ceb9-41d5-9e66-f9020a926946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "8a25d00d-758c-49a3-b3d9-b7a3aad76c1a",
        "cursor": {
          "ref": "b5216725-d910-426b-8f19-f2a3e814a844",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7bdd4b97-aca9-4e2f-8f21-743fd2f17f9f"
        },
        "item": {
          "id": "8a25d00d-758c-49a3-b3d9-b7a3aad76c1a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dae29c18-103f-4775-8c04-28a5343e855b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "eb2d95f0-0a2b-4be1-982f-069eac9793ed",
        "cursor": {
          "ref": "393eea96-fbee-49a1-b56b-6f268c16f1f2",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5bc13fc9-a27f-43a4-a16e-f1ffab4e0952"
        },
        "item": {
          "id": "eb2d95f0-0a2b-4be1-982f-069eac9793ed",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ee74866b-422b-49d9-974f-c0f827f62815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "1771d1c5-f511-4e1d-a938-d6d949a1b066",
        "cursor": {
          "ref": "4ea05560-7be5-4cdf-8f46-c92a36b2da4b",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "21853034-dfca-44ec-b33b-1b92f3727096"
        },
        "item": {
          "id": "1771d1c5-f511-4e1d-a938-d6d949a1b066",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "22a50138-2376-4b22-bca1-37e2e1fa0b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "80be4255-b65e-40ae-af08-8a4e4d6bc41b",
        "cursor": {
          "ref": "cb75c900-8eca-434b-9f45-6245b49988be",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "685c01ad-9438-4ac0-a37b-c0b348aa4008"
        },
        "item": {
          "id": "80be4255-b65e-40ae-af08-8a4e4d6bc41b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e76e5008-c116-49b3-baec-408d954bb3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "e6168262-4d87-4509-8f18-3b869335d3b0",
        "cursor": {
          "ref": "941f84c3-1d01-4a0e-8131-6f458f2346d1",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ec7dc7e0-94d0-48c8-a4ae-df45492cca53"
        },
        "item": {
          "id": "e6168262-4d87-4509-8f18-3b869335d3b0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6cd7c336-527d-4a6e-98c8-328c9d55cafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "fd53df99-6ce2-4d54-97c9-1c2d8f11a295",
        "cursor": {
          "ref": "1c3da40f-dcef-4736-8aa8-56203475a15f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9304e72b-5e35-4948-b366-b75a1e553482"
        },
        "item": {
          "id": "fd53df99-6ce2-4d54-97c9-1c2d8f11a295",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "36a9b75d-448f-4a67-8913-5ad1e7f36d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "a168d84f-1600-4d34-8561-43f75ae96102",
        "cursor": {
          "ref": "75d603f9-51d0-4fbd-90a6-771d67aa4273",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8344efe8-3d1c-4c69-834b-ee3c2b5a7029"
        },
        "item": {
          "id": "a168d84f-1600-4d34-8561-43f75ae96102",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ec183268-006f-47e6-ae1b-f160d0208433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "0ea84a54-5aec-43c1-8a1b-9082e0055b14",
        "cursor": {
          "ref": "eae45f44-e1f7-4d29-b569-5860444445c1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e4ea58e3-6459-4efb-af1e-bf1b84ebe217"
        },
        "item": {
          "id": "0ea84a54-5aec-43c1-8a1b-9082e0055b14",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "bcce73fa-3559-47b5-a1a4-69580ea6e6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "edde494b-b162-4532-b3cc-61ce024f5829",
        "cursor": {
          "ref": "94b60332-5bc8-4d47-b802-fe849ef1ad64",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "35afeedb-4cd9-447f-85ef-223101502a77"
        },
        "item": {
          "id": "edde494b-b162-4532-b3cc-61ce024f5829",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "33045a9f-346a-482d-9f7f-cc68a66736ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "3ebfb124-297f-447c-aaaa-ea338f15a278",
        "cursor": {
          "ref": "647c640a-9032-4522-8c04-c06230dcdfd4",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ffffeb51-5b61-4c90-b58b-1e4d1aa67d2a"
        },
        "item": {
          "id": "3ebfb124-297f-447c-aaaa-ea338f15a278",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2e46fb1f-fdc4-475d-b848-9cf667509b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "41d3f454-5b80-47b2-9d8a-215e7a5b7f2d",
        "cursor": {
          "ref": "2dbdd77f-c4fb-4551-a4ce-57dd9f6dbf4e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "441d3c19-72b4-4317-b27f-68acd403abe0"
        },
        "item": {
          "id": "41d3f454-5b80-47b2-9d8a-215e7a5b7f2d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f0d936c6-07c9-48b2-a464-56fc301d3022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "2238569d-55ca-4b3b-a0a7-8ebc29d5d0dc",
        "cursor": {
          "ref": "51b857dd-205f-45cf-b294-23b580a9d06b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "820e1a0f-da5b-4495-b86b-0b71b88ce7da"
        },
        "item": {
          "id": "2238569d-55ca-4b3b-a0a7-8ebc29d5d0dc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5013d3f1-1464-4522-824f-eb81a4ec9829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "cb69b459-b6d3-4d37-b85a-dd547fac739b",
        "cursor": {
          "ref": "50dc9468-80b1-4499-933d-ee2b98e99235",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "982495df-4971-49c9-bbb8-5cda76f7f89e"
        },
        "item": {
          "id": "cb69b459-b6d3-4d37-b85a-dd547fac739b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7fc551db-c99c-400f-a5e3-13afec25c6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1864e587-1569-4a20-87ce-7e02615ece90",
        "cursor": {
          "ref": "7436acaa-a0fe-4603-8024-47ac904878ef",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "77a8bc05-6e65-444f-a204-35a772822ace"
        },
        "item": {
          "id": "1864e587-1569-4a20-87ce-7e02615ece90",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7ac71fad-b30b-46c1-9020-6b39f325512b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "cce7e035-e63a-4b74-8c32-be25f6bb8ed8",
        "cursor": {
          "ref": "8fd6e864-5088-4588-9001-13b17e526ee7",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8f768407-5d44-4be9-993a-8d0adb77c5f2"
        },
        "item": {
          "id": "cce7e035-e63a-4b74-8c32-be25f6bb8ed8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "76a87a49-a2c4-4410-bd9e-332eabbac576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "59bcac4d-df95-4ed2-80eb-a1c11806e933",
        "cursor": {
          "ref": "346a642e-a93d-47c0-a7f6-49f1b4838575",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "67933de7-734d-4bda-ac97-ca3450716a62"
        },
        "item": {
          "id": "59bcac4d-df95-4ed2-80eb-a1c11806e933",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c0cf8bc6-6ba5-4722-8931-deb5bfe23e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "148d4dc0-af52-4a5b-a978-902700a7c115",
        "cursor": {
          "ref": "29fd33d0-8fca-4f9e-8b71-8d72cc8375c0",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2a1372af-6f90-4af7-8332-d9f6080e6091"
        },
        "item": {
          "id": "148d4dc0-af52-4a5b-a978-902700a7c115",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "39e5dce8-370f-4060-ad0e-85cc69f82b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "6f031ac3-353c-4b75-a327-8ddeaac8f8f8",
        "cursor": {
          "ref": "7febb5f7-7ce4-4afe-b023-193bf1f2de72",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f9ddee42-9c81-4a18-aa07-387d16d613da"
        },
        "item": {
          "id": "6f031ac3-353c-4b75-a327-8ddeaac8f8f8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8fa54430-5f4f-4426-8533-02d41179600e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b53ff20a-ca84-4ce5-927b-f27be1ccd8e9",
        "cursor": {
          "ref": "328577d3-7ac3-4359-8d99-5eb13f56d644",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "57f1aa85-d4e5-48c8-b207-3c56cfd2cb9b"
        },
        "item": {
          "id": "b53ff20a-ca84-4ce5-927b-f27be1ccd8e9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "53af3061-a761-4785-b5ae-de12b6e1def8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "7762cb35-a944-4832-936e-35b9fafc822d",
        "cursor": {
          "ref": "7a59415e-3e3d-4235-b5a6-251890750179",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d58f6898-5e6f-461f-8641-033fc558b257"
        },
        "item": {
          "id": "7762cb35-a944-4832-936e-35b9fafc822d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bb7b9d04-97f0-4dda-a15c-fb70ca0ee7a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "9254f7bd-8985-4c08-b48f-d9c181ee2b3d",
        "cursor": {
          "ref": "51e5eed3-96f5-482a-a3bb-2c932000205e",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "abbf6a18-dae6-4b20-a44b-556104b5a28d"
        },
        "item": {
          "id": "9254f7bd-8985-4c08-b48f-d9c181ee2b3d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4c68f2e0-ff91-4e94-a329-f6435b107cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "200e2caf-3ea0-4394-aeec-34aca6f0e044",
        "cursor": {
          "ref": "4be4350e-73a0-422c-b1e9-6182433e075f",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "50461aad-0188-4bf4-8cfd-605d74ac2084"
        },
        "item": {
          "id": "200e2caf-3ea0-4394-aeec-34aca6f0e044",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3d9bbbd7-a664-4a84-9d2a-f765b793f156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "11f4d777-ee98-4323-b16f-3c1dd8b59605",
        "cursor": {
          "ref": "7ff8793b-093c-4e9e-bdad-acbf931306a9",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9a7b0e75-93ee-43b1-95c3-dd8bb4a2d776"
        },
        "item": {
          "id": "11f4d777-ee98-4323-b16f-3c1dd8b59605",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4fe3465b-5807-404d-b989-95ee03c4745a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "8c7f603b-7c35-444d-946d-bd2f2e0227a2",
        "cursor": {
          "ref": "3bb83587-7a0d-4e48-8fe7-30655e865df4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "15ead108-6b1c-412e-b94f-a2f9e26872e3"
        },
        "item": {
          "id": "8c7f603b-7c35-444d-946d-bd2f2e0227a2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3acabfa6-e175-47e6-af1f-92105926456c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "07d6f1a3-1583-4cae-be9d-5bd26fd91674",
        "cursor": {
          "ref": "69b7ca93-a02e-4726-9586-2b3296317b2a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe14c2bf-fd13-4500-b183-a25ab82e7d19"
        },
        "item": {
          "id": "07d6f1a3-1583-4cae-be9d-5bd26fd91674",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "31c5389d-f3f2-42cb-ab48-db20f4f5ecaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "0a29e1d1-dccd-498e-bab3-456952759481",
        "cursor": {
          "ref": "788be76f-1cfd-4280-b0e1-4ac35bbf8c80",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bceebb8b-2667-4b3e-b62a-dbe8151eb549"
        },
        "item": {
          "id": "0a29e1d1-dccd-498e-bab3-456952759481",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f7f7e7a7-5cf5-494f-8aba-01671b55cbc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "31ae5c5a-a1f5-4a9d-9e85-6567da22ef45",
        "cursor": {
          "ref": "9f62fe96-e0fb-4487-83a6-c826453a847d",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3fec7fc5-a882-48fe-89bb-3d178a955e8a"
        },
        "item": {
          "id": "31ae5c5a-a1f5-4a9d-9e85-6567da22ef45",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ab274a15-3a45-4178-b0a0-40d56b08d784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "d51e7fde-db18-4791-a6ae-1ff64a457f70",
        "cursor": {
          "ref": "d4f363b3-6aa4-45fd-a88c-27087ebdac93",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "536946d9-1672-4f0c-a754-5494851dce4f"
        },
        "item": {
          "id": "d51e7fde-db18-4791-a6ae-1ff64a457f70",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "adc3bc24-0796-49c5-8a1e-14441bdbdf50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "bbcf9db2-c5dd-4a77-9091-16e13c7533cf",
        "cursor": {
          "ref": "092f064e-70ff-4c24-9861-cd98ba971b2d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "eb2c37c2-a5c6-4173-8b3f-660398a42116"
        },
        "item": {
          "id": "bbcf9db2-c5dd-4a77-9091-16e13c7533cf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1ada2ecc-b355-459c-9d5e-cc1d1b750525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "f8b4c3e4-80bd-45ab-8c11-511ce6b05aa7",
        "cursor": {
          "ref": "08845f6d-78c2-4537-b34b-4efe965b44d8",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "77674b59-ed37-445e-a01a-3a975a14e124"
        },
        "item": {
          "id": "f8b4c3e4-80bd-45ab-8c11-511ce6b05aa7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e0041edd-ca7d-4066-bcb8-97ff81736d37",
          "status": "Created",
          "code": 201,
          "responseTime": 987,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9c44f499-9329-460a-a655-0a9eef449a79",
        "cursor": {
          "ref": "46f4d02d-9d72-426e-96ce-35d7f7e3195c",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e10e4006-d53a-4e0d-8ac8-32f11addb0bd"
        },
        "item": {
          "id": "9c44f499-9329-460a-a655-0a9eef449a79",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7f8530d1-bf41-466f-b542-fd1702d6bcd5",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b7b8ce5b-2e98-44b6-82d9-ce4355d4fd43",
        "cursor": {
          "ref": "ef05418a-3128-4eb1-a9d6-230433449fcb",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c6e187f3-efa2-40dc-a46c-f21cf5405585"
        },
        "item": {
          "id": "b7b8ce5b-2e98-44b6-82d9-ce4355d4fd43",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9ce77941-d3ca-491d-aee4-5b7174719bfe",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "24b1fc39-3dc6-4b60-a988-48618670fb6c",
        "cursor": {
          "ref": "e92858ec-7451-491e-b7bf-3379e7188df7",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "35bc6035-6c4f-4d4a-a429-d1fc4d2cc8bf"
        },
        "item": {
          "id": "24b1fc39-3dc6-4b60-a988-48618670fb6c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "679ed653-d50f-4cbd-8860-d39dfeb9445f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "05f03929-ac39-4018-a01f-6c4c0e10a1f4",
        "cursor": {
          "ref": "09070950-8235-4d38-98ba-836d5b266bc5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1fb74965-79ce-42b2-9a22-c60297037ea6"
        },
        "item": {
          "id": "05f03929-ac39-4018-a01f-6c4c0e10a1f4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c82ebee5-0a8a-4586-bbba-e73bb7652d56",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "99d66ec3-4b3b-4512-b914-3bfcb5b4c0f2",
        "cursor": {
          "ref": "a342ba25-d1e6-4b5c-b021-b74aa324f037",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "64aea1be-c2ea-4f0b-a125-8250d8844d3c"
        },
        "item": {
          "id": "99d66ec3-4b3b-4512-b914-3bfcb5b4c0f2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3821d84e-7aa2-46d0-8e35-aa63b92ca532",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "89de94ec-6156-4169-97d3-e7b6f0b97e0a",
        "cursor": {
          "ref": "e502d8d2-d61c-47c8-8374-b32546b70ed1",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "501d0c26-d2ea-4194-a26c-9da7cd2da31b"
        },
        "item": {
          "id": "89de94ec-6156-4169-97d3-e7b6f0b97e0a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b1003afa-a00d-43f5-b3fa-7a51ed6718bd",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d46d6484-303d-4ac4-b311-280a8be0ef1a",
        "cursor": {
          "ref": "1d1975ae-89eb-4bba-a958-8aee7ca7375e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "74f83dc7-4a1a-4f0b-a839-b7de79d93009"
        },
        "item": {
          "id": "d46d6484-303d-4ac4-b311-280a8be0ef1a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d2966589-aa95-4404-a1d6-46e6ea15ae69",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0aef871c-79c9-493e-9c92-8615753564e7",
        "cursor": {
          "ref": "6369b014-bab4-470c-907e-1ff4ecf05d57",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ef63d50f-4eba-4110-bcb5-8af56a585ade"
        },
        "item": {
          "id": "0aef871c-79c9-493e-9c92-8615753564e7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0a18b204-4fe1-45a9-b87f-8351cedbba8e",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0a289a22-ccf2-4c8e-82f4-186db2cbd7b3",
        "cursor": {
          "ref": "8879331c-b313-422f-8552-dd271c674f55",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f0c4a53f-f83e-4bd2-a1be-5a72863d48fa"
        },
        "item": {
          "id": "0a289a22-ccf2-4c8e-82f4-186db2cbd7b3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "86ea4c94-9066-40bc-8287-090782095dd6",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "014b6d66-2249-40a0-8104-317ce59653fb",
        "cursor": {
          "ref": "24d224c1-49d8-4c11-9b3d-e3ef1bed0a1f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d2d8290b-5b8c-4981-83ab-9ce67341baa9"
        },
        "item": {
          "id": "014b6d66-2249-40a0-8104-317ce59653fb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9d80c15b-bcdd-475e-8d04-e9d6d82777eb",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1b395c2f-ecca-436f-90fc-3ca6b359b685",
        "cursor": {
          "ref": "e42e8ba3-0dc0-430a-adca-a353c8138a75",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2f055a6c-2f4e-4955-8d04-baff7066088f"
        },
        "item": {
          "id": "1b395c2f-ecca-436f-90fc-3ca6b359b685",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "29350739-c659-4fa5-9e41-8e2211baec56",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6062d66b-d0b5-415a-84e2-428e7f2e0f57",
        "cursor": {
          "ref": "5af7e805-d451-4e89-a9af-bfbebbec5b82",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "23e945e3-5c46-4954-9812-78ea700583b5"
        },
        "item": {
          "id": "6062d66b-d0b5-415a-84e2-428e7f2e0f57",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "210b75ab-e039-4d57-af26-3795c9a7f230",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e75d15b3-b829-4450-8aa9-5cd781a9023f",
        "cursor": {
          "ref": "e733f4c1-4ccb-4c93-87eb-13a37fd16da1",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5edd4476-d437-4b22-a251-b738b4bcda13"
        },
        "item": {
          "id": "e75d15b3-b829-4450-8aa9-5cd781a9023f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9be7fe3f-b4be-404c-a28f-6b9eb06ed500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "264344b0-dfb5-4744-8921-2b8f7a3b2aeb",
        "cursor": {
          "ref": "b4a1f4c6-446c-4429-912f-c71fcb8e3de5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "81c2da26-517c-4f54-9a19-2f844ad4083c"
        },
        "item": {
          "id": "264344b0-dfb5-4744-8921-2b8f7a3b2aeb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cd6abd2e-87d8-4299-95b5-2efc0f61594d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9772f563-9eab-4632-9b1b-aa651af38149",
        "cursor": {
          "ref": "cc021cfb-a041-4cc4-b2d6-ccca855fa3cb",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1b2bb341-1a9d-47b9-a82b-cca81f88461f"
        },
        "item": {
          "id": "9772f563-9eab-4632-9b1b-aa651af38149",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e88c427e-98f4-4577-94ba-97bccc475ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "444c84d7-e06c-49cb-8128-965a5c61e436",
        "cursor": {
          "ref": "2aa6bc47-5dd5-43c1-902e-9e3736430d0d",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2e4f2fe1-1694-44a9-bea7-73a5044efc88"
        },
        "item": {
          "id": "444c84d7-e06c-49cb-8128-965a5c61e436",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "239ca668-0552-447d-b711-948d2784c016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0492a748-1a4f-48a3-9144-fe942e7e359d",
        "cursor": {
          "ref": "7eab222e-888a-4810-a8c5-844e894769d0",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d9a29d73-dc9f-4880-91bd-b4e781a6f264"
        },
        "item": {
          "id": "0492a748-1a4f-48a3-9144-fe942e7e359d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f0f9d12c-1feb-4ddc-b727-af6ad35f51a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "755e0a57-ec2e-4830-a487-30a4c0817856",
        "cursor": {
          "ref": "6035d7a9-cbf2-4242-b2f9-1a573da999f0",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "22ebdcd2-35b5-45d6-8423-1a5a249e578f"
        },
        "item": {
          "id": "755e0a57-ec2e-4830-a487-30a4c0817856",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "20836b41-ca2c-42c6-8eaa-62a390bbbb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "fe0b8ec6-e619-4daa-8d6d-271bd9f2dbdd",
        "cursor": {
          "ref": "2fbb4e54-db18-43a4-99bf-2b2b5c899ecb",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e3674870-4e45-4db2-bb52-d1ec841d6bb8"
        },
        "item": {
          "id": "fe0b8ec6-e619-4daa-8d6d-271bd9f2dbdd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2e3dccbc-5377-4a0f-8d2a-65fd145ef42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "ceffd521-572a-41cc-8068-6e5a530ab1ee",
        "cursor": {
          "ref": "a54ee463-a1cb-4db2-9dfa-5774d6f202d6",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6135b097-27f8-4bed-a1e5-5d04a3c3fd1f"
        },
        "item": {
          "id": "ceffd521-572a-41cc-8068-6e5a530ab1ee",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dae66d16-9119-4154-be05-52a611fa7fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "b9761140-d334-46c3-81f3-4d0c27ed7c9c",
        "cursor": {
          "ref": "1d5e9ec0-c995-4f56-90ac-a285a4b03f71",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "730f6ecf-72fd-4f98-8812-533430f26ac4"
        },
        "item": {
          "id": "b9761140-d334-46c3-81f3-4d0c27ed7c9c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9bfcd15c-7f7f-4523-81f2-644eefc3aac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "446e7ec7-a9a3-4b0e-90a5-5a1a3c33305c",
        "cursor": {
          "ref": "68f20201-14de-485c-ae32-82d85b950d67",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d524db1a-87ef-4085-a5fb-4ae9a8dfd26b"
        },
        "item": {
          "id": "446e7ec7-a9a3-4b0e-90a5-5a1a3c33305c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8b3b33db-c2bd-446d-9f80-536152c0cea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "114801ab-c76f-4553-9b32-cdeeeede20be",
        "cursor": {
          "ref": "751a8b02-23b9-4b69-9ed6-eca3951fdac3",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "97c8fd53-46bf-4feb-965b-a127861cf176"
        },
        "item": {
          "id": "114801ab-c76f-4553-9b32-cdeeeede20be",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4c92af01-2a45-4a8f-94df-ad9e291b0352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "d767361b-8f0c-4e54-82f0-6dd4650dbf69",
        "cursor": {
          "ref": "37ff6a99-687b-4c59-a1cc-c5817146c89b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "219987fc-f4ee-414a-bd59-f51a939e288c"
        },
        "item": {
          "id": "d767361b-8f0c-4e54-82f0-6dd4650dbf69",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9089023e-b265-4160-8b48-0ca515882085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "ff8c9ba7-aa56-4bab-803a-5a821fab4b3e",
        "cursor": {
          "ref": "cfc71303-1187-4107-ac3d-0ed53e0daad7",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "247ab027-d30d-4d1f-a22a-57859ef3a034"
        },
        "item": {
          "id": "ff8c9ba7-aa56-4bab-803a-5a821fab4b3e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "94255886-e9c3-4081-8c65-9b12ca4bb2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "89789147-fd26-4061-a186-57988d473ef9",
        "cursor": {
          "ref": "84a01107-2dda-4649-8838-604fb13ac749",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7183755d-d82c-428c-9a47-d0f5b19e6691"
        },
        "item": {
          "id": "89789147-fd26-4061-a186-57988d473ef9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "18d858fd-8278-471e-88c3-dc5bf56a8dc6",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0f3489d0-c816-46ad-8755-8dfe46fa8d95",
        "cursor": {
          "ref": "1dbc88ab-9421-44d6-b179-f4a40814f636",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2d482a8d-1700-4cbe-ac99-30992efe6eec"
        },
        "item": {
          "id": "0f3489d0-c816-46ad-8755-8dfe46fa8d95",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "aa307a66-ce03-4058-9507-d4ebe6c8eaff",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b75f09c1-85c7-439a-a7b2-83e6b34521e5",
        "cursor": {
          "ref": "af687f58-607f-43c7-91a5-34f8a97b87e9",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "450e0fb7-791d-430c-bbe6-f1d9c5af6a97"
        },
        "item": {
          "id": "b75f09c1-85c7-439a-a7b2-83e6b34521e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "327adc6e-87a8-48ac-b475-bab88e864ac8",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8ee04c44-a41c-4d4d-b852-20b4cf20b674",
        "cursor": {
          "ref": "52765182-b603-4eea-87ed-d5caab00f5d3",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5214ce7a-c676-42c2-b5b1-33f0059e0bc4"
        },
        "item": {
          "id": "8ee04c44-a41c-4d4d-b852-20b4cf20b674",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c4697d81-506f-4338-b9cf-ca8f5dc5ef3e",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f4a46ea7-8e9d-4607-b6c9-bad7c78d53a5",
        "cursor": {
          "ref": "9a0f4538-df52-4f14-b1ff-9848322c34f5",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f919ab1b-7bb3-49b9-a97b-435d27db724f"
        },
        "item": {
          "id": "f4a46ea7-8e9d-4607-b6c9-bad7c78d53a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a2e77339-7afc-4db4-b035-e3410b36f137",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "686de068-715d-44f2-b754-b0ed905b1af9",
        "cursor": {
          "ref": "a006bfc6-6fec-4694-82dd-54aa362e1dd7",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c90df1a8-44d7-4b6b-9308-471d657e06e8"
        },
        "item": {
          "id": "686de068-715d-44f2-b754-b0ed905b1af9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "66756848-66ca-42d3-b090-8e6c5699bf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "c1327978-fad6-4c9e-9343-50840c73c30a",
        "cursor": {
          "ref": "80e7cc13-4223-4570-b659-fa3cb9b4e71d",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6a08af78-088a-43ae-b6d3-47b838c74fd2"
        },
        "item": {
          "id": "c1327978-fad6-4c9e-9343-50840c73c30a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "66a1b690-1306-4325-9b91-ceb47c0e2181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "107e71e9-a314-4b0b-a94b-b3c95792869c",
        "cursor": {
          "ref": "db853d30-8d05-4536-8253-b6c8f71f2522",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f1a6e67d-2b96-4758-9e71-98de425c635d"
        },
        "item": {
          "id": "107e71e9-a314-4b0b-a94b-b3c95792869c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d0012dc7-4603-44ed-9f93-9fd8dff0e0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "47bc6d2c-7cae-49cd-b76b-d4bc23ffe52e",
        "cursor": {
          "ref": "f2705a1f-45e0-4f99-bed7-5457645763ac",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1eaed687-6bbe-4dce-b43f-6a9c831d1bbe"
        },
        "item": {
          "id": "47bc6d2c-7cae-49cd-b76b-d4bc23ffe52e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7a76f04f-0fcd-45ef-aca3-6086d5c99a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "21a5aaf2-099d-43db-b542-483f3ba6b57a",
        "cursor": {
          "ref": "d8cdf181-81ac-45e6-9857-a9efd963ffae",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "54f8a385-3e4f-48e3-881d-4a9211bdd1a5"
        },
        "item": {
          "id": "21a5aaf2-099d-43db-b542-483f3ba6b57a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b0042d0a-2481-4296-9cac-ba42d68e79a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "88d13058-d32b-46e6-83b9-f7fe83303c67",
        "cursor": {
          "ref": "22194829-fcb3-4f1f-84d6-0d33adc12d5d",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9140c2a4-dcef-4f11-b2f2-238ddc3628fe"
        },
        "item": {
          "id": "88d13058-d32b-46e6-83b9-f7fe83303c67",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "83cf96bf-f119-426e-9228-ee60a30ce988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "18b37725-e05d-46e0-954a-eacdabdbbd5f",
        "cursor": {
          "ref": "fbb743c2-e4c8-4c19-a4a0-b954b0e613b7",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "814654d2-8f02-4149-8368-6c07f1a7caca"
        },
        "item": {
          "id": "18b37725-e05d-46e0-954a-eacdabdbbd5f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "25f9929c-ff2a-4d84-b070-3d9a6057b369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "ae429357-9be7-4ee2-8077-a824b63eb36c",
        "cursor": {
          "ref": "59dcfff9-f7e5-4ada-b446-262226c8cf9e",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "57855c50-fcd7-4943-a7ac-4a8eae3bcad5"
        },
        "item": {
          "id": "ae429357-9be7-4ee2-8077-a824b63eb36c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9db8dca2-1828-4f86-91a8-44590d8888dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "b89c1b3c-5fe6-4952-bcb7-50c3ea2e1352",
        "cursor": {
          "ref": "adf1e470-0659-4a89-ab2c-6fb81e62ff36",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "df959902-5919-477d-9507-d77ec2a2b711"
        },
        "item": {
          "id": "b89c1b3c-5fe6-4952-bcb7-50c3ea2e1352",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ee01fde1-8345-4738-a288-a349b0586072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "88b9c5a4-33b8-47a9-a1e6-433f079f501b",
        "cursor": {
          "ref": "8ddb5635-c131-4601-9d6b-d9a8616422c5",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c5d49ca2-772b-4f69-93af-5eb9c2c2021f"
        },
        "item": {
          "id": "88b9c5a4-33b8-47a9-a1e6-433f079f501b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4d8ac234-b663-4644-9653-c36495ddad0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "05fc4cd6-5fe4-4bd7-9d56-9f40197252d8",
        "cursor": {
          "ref": "42b6854e-9ce1-4a9a-b416-e61e292709c4",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "62caac4f-bf7a-4e05-8a5f-d47f268a7cb2"
        },
        "item": {
          "id": "05fc4cd6-5fe4-4bd7-9d56-9f40197252d8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9216e79b-a0ef-4912-a821-aba67745b689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "c3bacd98-e7c0-44bf-84bc-714a49c7bb96",
        "cursor": {
          "ref": "5ab282b6-3f34-48f8-b0de-28a1de44eafd",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c7fdc5bb-a44f-426d-8d26-e16e54469a54"
        },
        "item": {
          "id": "c3bacd98-e7c0-44bf-84bc-714a49c7bb96",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c70d6b94-9dc2-4706-b360-e823c9e5632f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "4ecfcb51-90c4-463d-9a52-54fa0e58f90e",
        "cursor": {
          "ref": "a21d346e-bd04-488f-a458-1f363875b655",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6c44ff03-26a2-4eec-9b33-d4ea7c1ff043"
        },
        "item": {
          "id": "4ecfcb51-90c4-463d-9a52-54fa0e58f90e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "921bfed3-a7bb-42ae-b804-89406e8bda9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "dd3580ed-fb0f-42a0-bde6-946713850493",
        "cursor": {
          "ref": "089680d6-acdb-4f14-a3fc-e849e5377816",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "88c6fadf-1c62-475a-b20a-0c63d474cc5e"
        },
        "item": {
          "id": "dd3580ed-fb0f-42a0-bde6-946713850493",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b5af7e42-caf6-457d-9b77-f7630062a710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "d8c89874-5040-48af-afce-4d0eecd0d923",
        "cursor": {
          "ref": "496de036-c894-4725-8d74-172a03918a79",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bdd1b265-a19a-4588-94d5-8d76558ad834"
        },
        "item": {
          "id": "d8c89874-5040-48af-afce-4d0eecd0d923",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0f099771-8df4-4ecb-8f83-15da59e5e421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "1799437e-a89a-496e-8d7e-55ebe5d11550",
        "cursor": {
          "ref": "30ed2d92-ceb6-447e-afe4-fd5487f0ea2b",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6ef2d6a0-0c86-42fc-b79a-c02e0055b497"
        },
        "item": {
          "id": "1799437e-a89a-496e-8d7e-55ebe5d11550",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "81921396-93bb-4941-a234-dfed90df2484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "c80022ca-c925-4a82-8cde-fa0ca4a2e3b2",
        "cursor": {
          "ref": "52458fd3-0ea9-460c-85e4-c8c691a1fa3b",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "41517428-69b8-4d28-8591-7c9bb724ad61"
        },
        "item": {
          "id": "c80022ca-c925-4a82-8cde-fa0ca4a2e3b2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c2e2e1ec-5e1c-4ead-8d40-9a987b9a0c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "98d7408d-448c-4d02-bdd2-1c769845b8b9",
        "cursor": {
          "ref": "44977d37-981d-4897-bfd2-d92baba80b9e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c765d236-7e7e-4d7d-9453-b4cae4dd57b2"
        },
        "item": {
          "id": "98d7408d-448c-4d02-bdd2-1c769845b8b9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ae9d904b-6098-4e6e-8dcb-07bc7213de16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "9d1f00ab-3852-4406-8204-ccc5eda99aa0",
        "cursor": {
          "ref": "4e9812ac-8550-4d14-9313-bb0e904ae74c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1c651929-a724-4ace-b774-9c7a9875ea1b"
        },
        "item": {
          "id": "9d1f00ab-3852-4406-8204-ccc5eda99aa0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eef08156-515a-498d-9445-e0ec5c5f5bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "440145c1-6cba-414a-9148-9ba3ef4282c3",
        "cursor": {
          "ref": "02c59616-3a34-405d-9c3c-a08ff0272aa9",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ba9c4b5e-ce4f-47bc-b618-894afb290991"
        },
        "item": {
          "id": "440145c1-6cba-414a-9148-9ba3ef4282c3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5fbbb435-91c5-46fe-a790-ef047e064708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "2fadf56a-fa3f-444e-90b6-3aec01c096f5",
        "cursor": {
          "ref": "34edd236-970f-4a13-9034-03ba2088aeaa",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "11932158-2e9d-434b-b30e-ea3a227490b5"
        },
        "item": {
          "id": "2fadf56a-fa3f-444e-90b6-3aec01c096f5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "88278460-d707-4217-adf6-3211331447d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "8df44d9e-2008-41d5-a8bd-dc4e7e3c9659",
        "cursor": {
          "ref": "ad950810-0139-4861-a1dc-b5371a96f6fe",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "82eab0fd-64f3-48c7-9822-651736941f53"
        },
        "item": {
          "id": "8df44d9e-2008-41d5-a8bd-dc4e7e3c9659",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2f22980a-4c55-49a7-8a5d-81b3c1b93899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "3dff37c1-63cc-477b-82e9-ee5bc42dc481",
        "cursor": {
          "ref": "4222e344-fabd-4f3a-8ded-d7883fbe8e43",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "72af32bc-6b76-4300-b581-3c8d97723282"
        },
        "item": {
          "id": "3dff37c1-63cc-477b-82e9-ee5bc42dc481",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "27b872b7-af88-4646-946f-44730385c21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "d693c615-54b7-42d1-a1fe-c10c0d63c781",
        "cursor": {
          "ref": "8186563a-9862-4a0e-88de-2fddda186365",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ce4c615c-36c5-44d6-a8fd-c4bcb677ad77"
        },
        "item": {
          "id": "d693c615-54b7-42d1-a1fe-c10c0d63c781",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f9f58981-c507-4953-8388-17128a526283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "837dde12-4315-419a-a970-c048a2175063",
        "cursor": {
          "ref": "30828298-a69c-4826-864f-e38d183c2f4d",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5171ec47-604d-402a-8231-7b26b5ab00ca"
        },
        "item": {
          "id": "837dde12-4315-419a-a970-c048a2175063",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "dcbb29c6-9b21-46e9-8d5f-650d4ec57243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "ab85997f-3bb7-4606-901f-0377f8d82e9a",
        "cursor": {
          "ref": "8020b4fe-7bc4-43f2-9b94-49df68358914",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6b656bc5-25be-447a-a4c0-ce0664a912fd"
        },
        "item": {
          "id": "ab85997f-3bb7-4606-901f-0377f8d82e9a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e43bea1f-4e0a-4633-8737-4fb255048c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "480613bf-1e8a-4a9e-b312-c28c95d18d3e",
        "cursor": {
          "ref": "c66e6348-6edd-4c28-8cb7-26f6f35890bc",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3fdff5c9-87a6-4121-a548-251b96b9e3cd"
        },
        "item": {
          "id": "480613bf-1e8a-4a9e-b312-c28c95d18d3e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "09f2aafc-796e-4b72-9739-684116679662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "72a40059-0a1e-443f-9725-33cae365b513",
        "cursor": {
          "ref": "367d9229-45d8-42bb-b92d-a37ce05e0f0f",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "750b7c0c-be8d-49e3-bd27-8a79bc6972ed"
        },
        "item": {
          "id": "72a40059-0a1e-443f-9725-33cae365b513",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "aca59561-4b08-41b7-a075-1ecac203ad8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "2f7464b1-2c1a-479c-93e4-554a02ec7a2e",
        "cursor": {
          "ref": "0fe525bf-18c6-4e06-aabd-fd5b4c22a7b6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a2695b8a-03c7-42a0-9965-e6f1f6ccdefa"
        },
        "item": {
          "id": "2f7464b1-2c1a-479c-93e4-554a02ec7a2e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9ef9e1dd-b246-478b-8489-7f2f6348eb61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "2fe67cdf-c805-4d92-9cf6-dbd0ab416a4c",
        "cursor": {
          "ref": "0ed2d163-bc54-4908-b682-7560c33e8254",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a2d4a413-1af2-4a73-afa8-04b1f05dd4f1"
        },
        "item": {
          "id": "2fe67cdf-c805-4d92-9cf6-dbd0ab416a4c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2c8ed42b-1fe2-49ef-a14f-a9e570b8b113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "cc579897-0928-4a43-8aa3-11e79f562599",
        "cursor": {
          "ref": "045a72df-114c-48a1-962a-4efb3b12efe6",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "43017913-6099-4466-84f4-9cf1131940f1"
        },
        "item": {
          "id": "cc579897-0928-4a43-8aa3-11e79f562599",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b6a778da-e770-4de9-b6cc-c8b1755a028c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "a44efd83-a800-433c-8d76-1416c68f9e23",
        "cursor": {
          "ref": "d1e91ed2-981b-4264-8ac1-78b38cf0c31b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "abcac1ca-bd34-47be-9b25-e67c2faeffee"
        },
        "item": {
          "id": "a44efd83-a800-433c-8d76-1416c68f9e23",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d852605d-3364-4450-81b6-2642ccfe45de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62918992-a02c-4367-a0e8-0029338f16d8",
        "cursor": {
          "ref": "5de99dee-612c-4d38-a44a-8c60d3a9cece",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "664e2f9c-c350-4ee4-915c-389a1f3cc4af"
        },
        "item": {
          "id": "62918992-a02c-4367-a0e8-0029338f16d8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "739d9136-16bb-40d0-8f77-f87d1e504263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a545f744-3815-4609-b733-df5e73b18ba7",
        "cursor": {
          "ref": "987eead9-fa84-43e2-959f-c356d6a31052",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f05fc9c8-0dae-496b-b577-2ff6fb492554"
        },
        "item": {
          "id": "a545f744-3815-4609-b733-df5e73b18ba7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "24e666d9-ceaa-485c-8b52-c402519c7f38",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "95086be3-1836-4483-8d80-8ddb949c6f58",
        "cursor": {
          "ref": "40979a49-9472-4f45-a645-65b39a9b3ef5",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "24aef7e9-2c27-466e-8409-c432089fe6cb"
        },
        "item": {
          "id": "95086be3-1836-4483-8d80-8ddb949c6f58",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "14e28416-dc33-44c8-a1b7-c2534a919225",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e8a2b9-2979-4649-af63-36753a27f1bc",
        "cursor": {
          "ref": "0fedc53d-68ff-424a-94d5-2c2cabd5312d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "674f03fc-9ec3-4b3f-9a05-7fbfba63c015"
        },
        "item": {
          "id": "a0e8a2b9-2979-4649-af63-36753a27f1bc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "283db1a0-752e-40c0-8d80-bb462e3df2b7",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8ce54f-51b7-4f60-9470-4b4ab9e990f2",
        "cursor": {
          "ref": "5997d6a7-b9be-4975-8985-b4e009ce2a88",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1c8cc87a-0339-404f-9ac7-a1aed86a8d53"
        },
        "item": {
          "id": "9b8ce54f-51b7-4f60-9470-4b4ab9e990f2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7b714314-497a-4341-a9bd-7a4ee264e24e",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44972af-817b-4dc4-a4c1-15f485be653f",
        "cursor": {
          "ref": "fd9eca7c-45b6-47eb-abbc-2f42e0b38a2c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a5483499-abd0-4882-904e-1030372e3abe"
        },
        "item": {
          "id": "d44972af-817b-4dc4-a4c1-15f485be653f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "77a4f247-3289-46c2-8f6b-dbed831aaa29",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-09-27T00:45:46.941Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-09-27T00:45:46.941Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ca089720-4d88-4ef9-9522-299b4a539ffa",
        "cursor": {
          "ref": "e15ffa36-159b-4779-93af-b9edba2e74b1",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b0036770-f93a-4162-bf8f-f1973c64a32d"
        },
        "item": {
          "id": "ca089720-4d88-4ef9-9522-299b4a539ffa",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "effdcb5c-5a92-436b-91ea-5d736c1328c0",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb0793b-ae9c-4027-872b-50c8e64369d7",
        "cursor": {
          "ref": "1fc9aa43-3b7f-476a-bb27-f0f6d4853c7c",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1d784e27-9af2-49be-9f74-66e5a0911e7d"
        },
        "item": {
          "id": "bfb0793b-ae9c-4027-872b-50c8e64369d7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d1958255-1b75-4e4a-a62e-3b75b046e79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "6361262b-5cd5-4227-a2ed-3eb3d3494b8e",
        "cursor": {
          "ref": "8ab59961-387c-4c1d-8f70-5b6388c3895b",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b7f0b55a-de60-4e92-93f4-4632762024ab"
        },
        "item": {
          "id": "6361262b-5cd5-4227-a2ed-3eb3d3494b8e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "32f21547-51c7-4c06-a4f0-c66589319bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "1b246fab-1851-4186-9da9-dde49bd06535",
        "cursor": {
          "ref": "1aadf6a2-e119-4a8d-8b8b-5af701c9ab34",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2e90f60d-c939-4467-bd5d-532ea4bc5efc"
        },
        "item": {
          "id": "1b246fab-1851-4186-9da9-dde49bd06535",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8a5bd345-fb35-4960-88a2-8e7ff0a04793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5265eee8-5666-49e1-8264-eb9a6cc95587",
        "cursor": {
          "ref": "db55a9fc-09d2-4e08-a343-f498eb817a20",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bcf88ead-6e29-45fa-9173-55cbc90bdcbc"
        },
        "item": {
          "id": "5265eee8-5666-49e1-8264-eb9a6cc95587",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ce8fc8d4-0bee-495f-b0c1-1e08b0094191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "d925e966-7070-481c-a911-e55f1d433894",
        "cursor": {
          "ref": "c5f39268-36c9-476d-9a76-c48b498d7681",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "444554e4-e371-467c-802b-b5a42069d5bf"
        },
        "item": {
          "id": "d925e966-7070-481c-a911-e55f1d433894",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0358d517-736d-4455-8a3e-299e7bdd5e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ae8448d8-3914-455d-a6dc-134b20b552f5",
        "cursor": {
          "ref": "2c300c1a-b420-41ce-b1e4-9d4111906050",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f4d910a3-f026-4446-a2dd-a3e678fa26ec"
        },
        "item": {
          "id": "ae8448d8-3914-455d-a6dc-134b20b552f5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1252b3cf-80cb-4268-9094-7c5545139b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e02598fc-ae70-4839-aa71-29742b6addc2",
        "cursor": {
          "ref": "f1e90bfb-949c-435e-85f4-f79980bb2e5d",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b7ffadec-8b3c-46bd-a2a4-eb9d65fb174d"
        },
        "item": {
          "id": "e02598fc-ae70-4839-aa71-29742b6addc2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b9e27063-e687-4ab9-9c98-ebd3f94f3bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7bb7ebc7-44a8-4fd7-8558-1eb971774995",
        "cursor": {
          "ref": "95befbb5-b4c2-46fe-b928-14ed9ed71090",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4821a44d-7807-4122-9487-7203bd67d0d8"
        },
        "item": {
          "id": "7bb7ebc7-44a8-4fd7-8558-1eb971774995",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "94b9336e-6fb6-491b-97a2-a72428001273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "52c3a6d8-f398-4368-9fd4-1d2c71e470e6",
        "cursor": {
          "ref": "599e5e81-331e-4db3-8ff6-b1f5f9219a0f",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8e68b5e4-9a23-4841-9cfa-6a7a2daef22b"
        },
        "item": {
          "id": "52c3a6d8-f398-4368-9fd4-1d2c71e470e6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2062a4d2-62b7-4813-a68b-925e28365f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "934f83b6-7c73-4057-b125-5f741b5e8ce1",
        "cursor": {
          "ref": "0384ea98-b3bc-4027-a64b-efe5c79c3df6",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2f9debee-36ef-4fbb-8634-9538f1675719"
        },
        "item": {
          "id": "934f83b6-7c73-4057-b125-5f741b5e8ce1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c0acac2a-9037-4f69-a09a-c4c3f9fef178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "f753d24f-2ddf-45b9-b294-2f8755412219",
        "cursor": {
          "ref": "fe848b83-daa4-485a-a9b9-7bf13493e75c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6fa4f4e3-58f6-434a-83a1-089ca4814216"
        },
        "item": {
          "id": "f753d24f-2ddf-45b9-b294-2f8755412219",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3c3384e7-b58b-4ec7-9954-d6fbf72c23c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "086883e0-b3d3-4c25-a6f2-7cb5dc860d65",
        "cursor": {
          "ref": "e4627100-6e9f-4c2a-8579-7f369194fa43",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "54d6e7a8-1666-43c2-9d50-f5d418a3c3c0"
        },
        "item": {
          "id": "086883e0-b3d3-4c25-a6f2-7cb5dc860d65",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ede4963f-8b43-489e-be58-ae39317a2c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "aeef27fb-d910-4e71-8b21-15a1f86f9cc2",
        "cursor": {
          "ref": "0e714157-55b8-41ee-a4e5-c00c4872114f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "25319e88-497c-4b44-9500-6ffef0c9a80e"
        },
        "item": {
          "id": "aeef27fb-d910-4e71-8b21-15a1f86f9cc2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "20980d40-0d1f-489e-b6fe-55525fc22459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "89712d37-de8b-413f-b15d-59c20df5f407",
        "cursor": {
          "ref": "efc648ba-b4d1-47f7-b833-08ff64699f31",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "56073738-25cb-4fe4-a65a-cd273af562b8"
        },
        "item": {
          "id": "89712d37-de8b-413f-b15d-59c20df5f407",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "86f5e6b3-126d-4b0f-bf04-4fc6a0df675f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 155,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2a1bba32-4dcf-406d-9c5b-effc4766ef0b",
        "cursor": {
          "ref": "33ff1eb1-91c8-4b36-9fd9-c8714f8151b5",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "402d15f9-624a-42fd-bf67-797fb78e6f7b"
        },
        "item": {
          "id": "2a1bba32-4dcf-406d-9c5b-effc4766ef0b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6c4a6510-57b7-4b77-a26d-45b98b7c4f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "09733009-bf3e-4608-b90e-595f03996bda",
        "cursor": {
          "ref": "86d105d1-3514-4f0d-8bbc-3ca066b750bb",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "919ccbb9-fbb8-455a-bcc6-0efb79181e5c"
        },
        "item": {
          "id": "09733009-bf3e-4608-b90e-595f03996bda",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cd7b3025-44a6-4f95-aaab-940a54856e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d7de8964-ad78-4708-b261-785e9f3018a2",
        "cursor": {
          "ref": "e0d48970-aa9b-4b5e-a12e-f92d3d7329e5",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "95aa9fd5-a99e-4d7b-b789-09671e5303a8"
        },
        "item": {
          "id": "d7de8964-ad78-4708-b261-785e9f3018a2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bbcd6b31-3f81-4606-bc49-4821f81fa89e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "9ab306f0-c13e-4f28-a8ab-6627efcd1463",
        "cursor": {
          "ref": "93576a32-157e-47c8-97ed-64e6a5879126",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1e1e8764-2bb2-4279-901f-c8bf034bed06"
        },
        "item": {
          "id": "9ab306f0-c13e-4f28-a8ab-6627efcd1463",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cd95b411-eb71-47f8-a827-c1352a09006c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d3592b60-2bf2-4418-8ae7-35b2623889dd",
        "cursor": {
          "ref": "1a26d74e-ecb3-4b25-abde-a10e5f99ae37",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "24efe18a-ac55-407c-aaa2-17ef202993d5"
        },
        "item": {
          "id": "d3592b60-2bf2-4418-8ae7-35b2623889dd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ea40733d-5838-4e89-9852-cd9d07e627be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e1ebecde-807e-4708-b124-72ebd0a17cb1",
        "cursor": {
          "ref": "ad06bc93-0983-4af1-8643-1ed79078bb57",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "05e34c2a-6038-4986-be67-3a2875fae49f"
        },
        "item": {
          "id": "e1ebecde-807e-4708-b124-72ebd0a17cb1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "68939da3-8517-4722-836a-3b4d8d9da65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "c9731537-f684-4327-9f6b-0e090024ee6b",
        "cursor": {
          "ref": "7e256a1a-d4d8-41bd-b770-5d905e4b29f5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b879c87b-c5c8-4b50-9223-aebedc4a6ad1"
        },
        "item": {
          "id": "c9731537-f684-4327-9f6b-0e090024ee6b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a9aa1fea-36c4-4fa4-8919-63af957fb08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9c222385-70a1-4b93-abdf-b9175f5f0346",
        "cursor": {
          "ref": "2ea9a4cf-2cf2-470c-9bd7-51cb66937938",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "19c5c116-04bc-4c13-a449-7af354331152"
        },
        "item": {
          "id": "9c222385-70a1-4b93-abdf-b9175f5f0346",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dff115eb-2052-40ea-835a-a5d49ec12996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7e5dec51-8e8a-436a-9381-a0a87b132446",
        "cursor": {
          "ref": "f46ffc80-ccf2-4811-956f-e2d0960b409c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "00bf88e6-5b74-49ac-b359-433443f91654"
        },
        "item": {
          "id": "7e5dec51-8e8a-436a-9381-a0a87b132446",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7f5ffd0b-b46e-45f9-8d4b-1d103d2d1447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0d160df8-917d-40d9-bbbc-d3f63f1a7f41",
        "cursor": {
          "ref": "3caa0e23-97c1-4ea2-9617-f888665aec6f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d3238509-d711-4a8c-93a5-8debb7ea8d88"
        },
        "item": {
          "id": "0d160df8-917d-40d9-bbbc-d3f63f1a7f41",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f8b317aa-c271-43c0-a439-d282e258a0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "06a86e55-57c4-49bf-aa66-802b0bd8e56a",
        "cursor": {
          "ref": "b42ae87f-4ad2-47ee-8d31-07ab71e07b43",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "be728829-d9ff-40e4-b366-5536f478d574"
        },
        "item": {
          "id": "06a86e55-57c4-49bf-aa66-802b0bd8e56a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eb2f1661-b67b-4fc0-b645-6e97acda914e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fdbe0be8-cc3e-4dc4-a356-4a22b9d4803d",
        "cursor": {
          "ref": "6ac0ac55-6898-4f13-9653-be6e503c25a3",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d5cf76b9-7eb5-49dd-a32f-ef788dddde13"
        },
        "item": {
          "id": "fdbe0be8-cc3e-4dc4-a356-4a22b9d4803d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "883efa04-2141-4a13-bff9-810557522533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0764ee3f-6905-46c5-a82d-418f180c17a7",
        "cursor": {
          "ref": "17c77250-ef6a-48d3-bf51-fa507e900342",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a8ac5458-534e-4968-8aa0-5ac42158298a"
        },
        "item": {
          "id": "0764ee3f-6905-46c5-a82d-418f180c17a7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9548a524-8f3b-487e-af3e-6a6e108d7f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "107a97bc-56a3-4f34-8696-c864cae69e30",
        "cursor": {
          "ref": "698cb79d-c42f-44cf-97e3-3582b63e92b1",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "274b0934-46c9-41d8-a0da-7a78cb110ce3"
        },
        "item": {
          "id": "107a97bc-56a3-4f34-8696-c864cae69e30",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "75568a43-865b-4606-a77e-e4e7f7c89d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ce0f876f-8efb-4632-832d-58c2ad814a22",
        "cursor": {
          "ref": "ade1ee00-39c9-4d03-b56e-3dbbcec9b651",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "982ff6cc-9520-487e-8c04-da3526d1a1c2"
        },
        "item": {
          "id": "ce0f876f-8efb-4632-832d-58c2ad814a22",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "36799cc7-87ec-4ad5-ac5b-a7dc124e2f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2ec73f9f-dd56-40cb-82c1-1e9652d46716",
        "cursor": {
          "ref": "0ac4c441-106f-4fec-8a04-a0ea9e54f4e9",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "54397109-f329-464e-82c6-ae0363acfeef"
        },
        "item": {
          "id": "2ec73f9f-dd56-40cb-82c1-1e9652d46716",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e1d63959-f718-4439-a1ee-a4dc49273bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "b4579c9c-ce12-4c79-b9e4-877cc344edb6",
        "cursor": {
          "ref": "b43bbb20-d7d5-4826-bc53-3088535d7786",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ca45acef-1412-42b8-b2bf-af73488dacd8"
        },
        "item": {
          "id": "b4579c9c-ce12-4c79-b9e4-877cc344edb6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "74b7eaee-c1bb-46ed-8564-6740498bd04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "4c970725-a095-48aa-ad3b-5729184a4441",
        "cursor": {
          "ref": "1ffeb95d-8ec0-427e-83cf-3996096d9f98",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2c99ff01-1dc7-4ae9-b64a-0d8249374223"
        },
        "item": {
          "id": "4c970725-a095-48aa-ad3b-5729184a4441",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e82a2f5f-3ba4-4ecb-b8cd-adec81519ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d5d0bb5a-f924-4789-b658-d4d3056c928b",
        "cursor": {
          "ref": "811a12e5-04f5-4b3d-a0a3-5775c2b531e2",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "044b4319-1f3b-491c-b628-6d0a50e38ac9"
        },
        "item": {
          "id": "d5d0bb5a-f924-4789-b658-d4d3056c928b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "07536e2c-b92a-40fb-bdf1-71a564f85a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "41bd6f92-58e5-4810-a7d1-81ae26af0d0d",
        "cursor": {
          "ref": "71a00fc3-b4ba-40e7-ad18-597f7da8f3e6",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "30f41c51-d445-407d-af19-f0511669baee"
        },
        "item": {
          "id": "41bd6f92-58e5-4810-a7d1-81ae26af0d0d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "10d96817-163c-4dbd-9592-b123549936aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ba9a5d5b-f3ff-48bd-b387-4ae20f974e20",
        "cursor": {
          "ref": "4e9867fe-82de-487f-9539-c41ac4b0b903",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f0e4f5e7-f86c-4d4c-94b0-764cc44ce231"
        },
        "item": {
          "id": "ba9a5d5b-f3ff-48bd-b387-4ae20f974e20",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "39a814e2-18df-4549-a009-242b3134f928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "908b9bb5-a9b0-417c-a89a-3c004eb47010",
        "cursor": {
          "ref": "f6dfbe62-43c8-4bd8-bc5c-8934e457eeb7",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d2bb94f7-3ea5-40cb-8cb3-8270e3123a9d"
        },
        "item": {
          "id": "908b9bb5-a9b0-417c-a89a-3c004eb47010",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b6368b02-dacf-4f19-8dc2-bdeea21e4dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "8e5c14ff-8c3b-4342-a1ad-35efb0ecc1f4",
        "cursor": {
          "ref": "96744c6d-c7a8-4a35-a07d-9bbc8a9f7b1e",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3c2d11c8-d4c4-4768-a0cb-100a8a050a0d"
        },
        "item": {
          "id": "8e5c14ff-8c3b-4342-a1ad-35efb0ecc1f4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0b0d06f2-10b1-48fc-854d-00889cdf9c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "1b1eb353-aa21-4898-8d5f-1383d87f6f37",
        "cursor": {
          "ref": "c646fe06-ef2f-46d5-baf0-2be13b48e85d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4269eec9-cb59-467c-a1ca-151e517d7330"
        },
        "item": {
          "id": "1b1eb353-aa21-4898-8d5f-1383d87f6f37",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0f1a65d6-7354-4ae4-89a7-25acaf07c44e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576fad53-f204-4ee0-a855-192b0d29c40b",
        "cursor": {
          "ref": "fbb6b8db-1ffc-49a7-98c9-f9f72bb7cd2e",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3d9ce2f0-34ea-4825-8557-4d43ff38aaa1"
        },
        "item": {
          "id": "576fad53-f204-4ee0-a855-192b0d29c40b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "349bfa60-09d3-49dc-b883-9b950e21b5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "62dc979d-a62b-473d-87c2-36afe36eef69",
        "cursor": {
          "ref": "2e7994cb-f4de-4308-af18-5296ccc6e7ef",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6d5fa098-c320-4dbf-ad88-90d589a43d39"
        },
        "item": {
          "id": "62dc979d-a62b-473d-87c2-36afe36eef69",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "910ff5e0-8523-4cd9-a4d8-d6958a8450e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "422d5840-db15-4da9-9d33-13d0d893aa82",
        "cursor": {
          "ref": "61cb525b-fec7-4c5d-9695-113e91194ded",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0d83418a-b2b5-4f38-b4e4-750a19cff89b"
        },
        "item": {
          "id": "422d5840-db15-4da9-9d33-13d0d893aa82",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9651a31a-3a9c-46cd-bb06-d7804e49efb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "481a9d91-3998-44f2-a4b6-0e77bcd16e21",
        "cursor": {
          "ref": "a748956c-c7da-460b-8a12-216cc7a43a11",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7a08f645-fed1-4c5c-8909-87e2572531fd"
        },
        "item": {
          "id": "481a9d91-3998-44f2-a4b6-0e77bcd16e21",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "82935814-5dd8-4e7c-ab98-048ce03cb4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "113a09b9-5031-4c34-a702-c895ace98c01",
        "cursor": {
          "ref": "52be2dac-46a2-4268-8274-1f79fad7e18c",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "637cab23-13a9-4325-bb81-be2c3bdc1a96"
        },
        "item": {
          "id": "113a09b9-5031-4c34-a702-c895ace98c01",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a61e1b1a-0e9b-40fb-aba4-a9180df0bd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "df5396c8-93c7-491d-9159-8b6130603545",
        "cursor": {
          "ref": "cd795d76-c53b-4449-9ac1-53829eb24d14",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "90ded035-9087-4cba-ab73-76633a3f925f"
        },
        "item": {
          "id": "df5396c8-93c7-491d-9159-8b6130603545",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b351e101-1a66-456f-8b59-3e9fbca85154",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "9a3aba35-2160-40cc-a404-4443b16a57c1",
        "cursor": {
          "ref": "c7f888e9-24fb-4f90-88a0-8cff6ef7f96d",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fa901af7-8d4f-4434-9d92-2bd122ae734d"
        },
        "item": {
          "id": "9a3aba35-2160-40cc-a404-4443b16a57c1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "edaa0f6b-6d12-4cb5-a886-b0dcaa186efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "8ccea5f1-1424-415d-97dd-753e906fbd19",
        "cursor": {
          "ref": "1a61d34e-5104-485d-abc6-1c2b960d3c80",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ce559d1b-4cd0-48ac-a63c-5b8a9f0d8c15"
        },
        "item": {
          "id": "8ccea5f1-1424-415d-97dd-753e906fbd19",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "193e5ac2-077a-4176-81ae-36cb68fb9eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e5bdb4f8-7150-416a-baa0-e5bc4b5ad660",
        "cursor": {
          "ref": "c283952c-91c7-4f74-bd92-da195aded84e",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7fefa2d7-06ef-4353-9b24-771ba8f0b59c"
        },
        "item": {
          "id": "e5bdb4f8-7150-416a-baa0-e5bc4b5ad660",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d9fc2801-d0bc-4d5b-91bc-c66a55fd8d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "3ffb85af-0a31-48a3-bf05-8178778d8ced",
        "cursor": {
          "ref": "9b775f97-4929-4cee-b632-42ce9ff5b257",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0f5c2c68-f05d-4ef9-833a-4f5efa7cdd33"
        },
        "item": {
          "id": "3ffb85af-0a31-48a3-bf05-8178778d8ced",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a3c210b7-37a7-496f-ae45-3205b95b0859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "559704d0-e855-4c0c-878a-d7db1266abd3",
        "cursor": {
          "ref": "4d0a5bf3-8618-41a7-b103-477083cf9391",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a2d07ab0-c11c-4a19-8292-da2da1d6daa0"
        },
        "item": {
          "id": "559704d0-e855-4c0c-878a-d7db1266abd3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e8df251a-02d9-491a-9bf0-0798bd0f1ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "bf1d801d-fdda-46ec-9813-b73f49a1be0e",
        "cursor": {
          "ref": "9f95e724-4ef4-4d7c-bf6a-4f800620ebea",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "65f2f379-04bf-43b0-94ea-1e9a17e027fb"
        },
        "item": {
          "id": "bf1d801d-fdda-46ec-9813-b73f49a1be0e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e83d87cd-6005-4968-a19a-12328c28e85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "66c399f9-4c88-4955-a3d0-17061bb518be",
        "cursor": {
          "ref": "92cb7c18-d2c5-4114-ab20-425fd2f044b2",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e559f719-014c-4af7-9996-dacdb79455f8"
        },
        "item": {
          "id": "66c399f9-4c88-4955-a3d0-17061bb518be",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "316e5970-7501-48a5-99af-c87d8b0b2ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "c190bf1a-33e1-4fb0-a06f-56a3c016d7c6",
        "cursor": {
          "ref": "d6bf44b6-deac-436a-bbe6-1b2db36ea025",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "381b2e67-7b16-4bf0-8be0-72b984a75b0e"
        },
        "item": {
          "id": "c190bf1a-33e1-4fb0-a06f-56a3c016d7c6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9173b7c7-950e-40ca-b53d-e7bba6d71f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "c28ba695-5f46-4b25-ac45-449bef0c10a9",
        "cursor": {
          "ref": "1b82bb46-7a9f-4e1a-9f8a-9003497d0fbe",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9a555513-c4b9-4d9d-9bf7-d9b999020d19"
        },
        "item": {
          "id": "c28ba695-5f46-4b25-ac45-449bef0c10a9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "cd147cff-9cef-4cef-9ce0-988eafb7e0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f7dde3be-a53e-49df-bd77-a5b15777310c",
        "cursor": {
          "ref": "2b1452a9-82f3-4a3b-9d78-87bd2b690252",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1c4e188c-5ace-42a3-b98e-1e57284491eb"
        },
        "item": {
          "id": "f7dde3be-a53e-49df-bd77-a5b15777310c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8de24d71-a95d-4cb7-aca8-09ff86506193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "0e39c756-1822-4f92-9538-94f5733493bb",
        "cursor": {
          "ref": "398b1f1b-c719-4bdb-a8e2-2a3ef0a307b8",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2dc18278-3cf1-4c82-b1db-2a00160cb1ed"
        },
        "item": {
          "id": "0e39c756-1822-4f92-9538-94f5733493bb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "01b4e85c-9837-4510-a428-2c4262ac7bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "688135f1-6900-4bd7-8407-2fd0265a8338",
        "cursor": {
          "ref": "1d377391-f16b-42d0-8999-1bfa5e411526",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f872c453-29b3-463c-8a01-0f62866443eb"
        },
        "item": {
          "id": "688135f1-6900-4bd7-8407-2fd0265a8338",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cc8f73a9-e5a2-48ac-86d8-4c6a18ed90f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "2c16de83-a6bb-4237-b25b-e5d1e36a74d5",
        "cursor": {
          "ref": "921e41bf-08d0-474b-9101-efbf4a70c451",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e6b5194c-0233-42ba-92a8-bfbadc430981"
        },
        "item": {
          "id": "2c16de83-a6bb-4237-b25b-e5d1e36a74d5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3d540ca5-993f-4597-8dfa-b00c2af87d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "80f2b61e-3c32-453b-a5d7-f094100a8d4d",
        "cursor": {
          "ref": "47288696-4b14-415b-8364-5621fb808861",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5d57e75d-5c09-41cd-b836-ca9a99091e1b"
        },
        "item": {
          "id": "80f2b61e-3c32-453b-a5d7-f094100a8d4d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bf0308b9-7fd4-43cd-a3cf-97eba9a9de7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "d3e07858-fdf5-4333-8e25-437ae7fe8168",
        "cursor": {
          "ref": "1170a30b-bef2-4793-b134-375976dd963a",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1e5d7b08-98d0-4338-b085-551e30e7b327"
        },
        "item": {
          "id": "d3e07858-fdf5-4333-8e25-437ae7fe8168",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4b030594-ca92-40e0-ae30-ad8c0f5ee0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "09195208-0f3e-479c-aaaa-cc7e975c25d9",
        "cursor": {
          "ref": "4280693b-3ee4-446f-aafe-5565629f9728",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1760e026-5337-47a8-94ae-10559413454c"
        },
        "item": {
          "id": "09195208-0f3e-479c-aaaa-cc7e975c25d9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a5d845bf-5226-41f9-971b-64b62c10d431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "d0341246-68ce-4956-93ba-6bd723f81966",
        "cursor": {
          "ref": "aa10ef56-a754-42a9-ba1c-2a0b381b9b81",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "89895bc0-67aa-4ad2-8b8e-68cb77293ce2"
        },
        "item": {
          "id": "d0341246-68ce-4956-93ba-6bd723f81966",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "13d94a4e-8f92-4b02-9d7f-3211ea002987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "7db8d427-99c1-4217-865f-5339777c0cbe",
        "cursor": {
          "ref": "316e928f-8c50-40a6-955f-0fbb6e1ac682",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "98b00ba7-7e7a-48f7-8e38-e3eac96d1ba8"
        },
        "item": {
          "id": "7db8d427-99c1-4217-865f-5339777c0cbe",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "aff3b3fe-abb7-4b85-892d-9ef4f70d1921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "32532279-3df5-463d-b58b-9b62c2afd667",
        "cursor": {
          "ref": "14ced623-bd22-482b-a1ce-664ca032bec7",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4a82b1e2-70d7-4c65-9e8a-744c5dfda0a6"
        },
        "item": {
          "id": "32532279-3df5-463d-b58b-9b62c2afd667",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f5d196f3-e6cd-4002-a8e7-91245b3354d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "95fb8ee3-7a78-48f2-a17c-0c04ecf7f94e",
        "cursor": {
          "ref": "c3fabcce-2956-479e-bfb5-a153064547ad",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "435c37a3-2438-42bf-915e-d62a904097e7"
        },
        "item": {
          "id": "95fb8ee3-7a78-48f2-a17c-0c04ecf7f94e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e3dc6f35-5d3b-4857-aa45-b4e7c11b2538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "6b54ae23-2a13-436b-bc5d-ca7174dd16c5",
        "cursor": {
          "ref": "3d970a05-630e-4d36-96e1-7b853c3e0252",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9f8fbd71-2c94-42ea-9985-ccc8ad95c155"
        },
        "item": {
          "id": "6b54ae23-2a13-436b-bc5d-ca7174dd16c5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3d3c8ac6-dde5-4b54-be57-7de60ca9ad5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "c764f10a-780c-4491-a4ab-0793558f381a",
        "cursor": {
          "ref": "55ef7d30-bdfb-4dc1-b209-4b424ca526e2",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1ff8653f-9850-4211-b3b7-9dad4bc0108a"
        },
        "item": {
          "id": "c764f10a-780c-4491-a4ab-0793558f381a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7724a153-3971-4ca6-be4a-40052f99559c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "09171106-b753-4751-bf3d-5ac413e595df",
        "cursor": {
          "ref": "294706cf-40e1-41d5-8c60-081df25f3705",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0268b8da-6c17-4649-8974-f4f78705d8b7"
        },
        "item": {
          "id": "09171106-b753-4751-bf3d-5ac413e595df",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "537bb03e-4446-45dc-85e4-f7bc1df35f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "b1b76ec6-6d5b-4cae-9fa3-7a901959e364",
        "cursor": {
          "ref": "523e25b8-ecb5-4b65-b351-701c7c10c9ce",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "649c5097-ee3b-4fce-a8b7-6b7ef2b2ff36"
        },
        "item": {
          "id": "b1b76ec6-6d5b-4cae-9fa3-7a901959e364",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1a3a6bf1-345f-4b58-80ed-9065fd895a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "4baa7102-cc6d-4499-8573-18e405b564fc",
        "cursor": {
          "ref": "53f242f4-94ec-48e3-b1e1-a3866c674aff",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "33576d2c-41e4-47e1-839d-4a810a836171"
        },
        "item": {
          "id": "4baa7102-cc6d-4499-8573-18e405b564fc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "38ebe1b3-0ead-4173-b678-5779a7dddb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "00844ac1-584b-412a-aa89-cf53ce0f1db1",
        "cursor": {
          "ref": "5011f4cb-3bee-4f58-a655-45e5fed2ceb5",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "88f0dbad-2ba9-4314-86d2-336d92fab675"
        },
        "item": {
          "id": "00844ac1-584b-412a-aa89-cf53ce0f1db1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f3e82b05-bca2-499c-80ba-e31970abc6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "805df8f3-0af4-4a51-bae3-e30ae3867d94",
        "cursor": {
          "ref": "dcbd7cd5-6199-42ca-9507-1b408f852aab",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ee86e4b2-c8df-451b-9e28-92294eb8dbd6"
        },
        "item": {
          "id": "805df8f3-0af4-4a51-bae3-e30ae3867d94",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "63ce62de-1c4f-4c60-8bd3-0df2f8b44568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "f1890278-d633-4814-adf8-ceff62023ca1",
        "cursor": {
          "ref": "4ff11c06-146f-4312-b5c2-e0e9faad9708",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bea26795-e82f-452d-a2ce-74a41a73ba88"
        },
        "item": {
          "id": "f1890278-d633-4814-adf8-ceff62023ca1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "63271b1d-6b5a-43cb-81a0-8a69d656ac5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "77974afa-4cb9-4f79-bb46-bf3a1799eec0",
        "cursor": {
          "ref": "bd21c806-e8a9-45bf-8f3d-664bc498d29e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "206e6f3a-d399-45bb-a1c8-5cea9903a390"
        },
        "item": {
          "id": "77974afa-4cb9-4f79-bb46-bf3a1799eec0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "19049e89-cd8a-473d-9f59-be72d4e1f840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e1629b3a-0eb7-43cd-b74b-1770962c32f5",
        "cursor": {
          "ref": "50eda255-d372-44af-a6e3-7f986d70aecd",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f68b8384-c803-4114-b333-3c8bbc927e89"
        },
        "item": {
          "id": "e1629b3a-0eb7-43cd-b74b-1770962c32f5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1c1bae89-545d-4bf6-8e4f-c8afe040e5ee",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "90913343-63ad-4d32-88ec-e64e32fbe2ac",
        "cursor": {
          "ref": "e4ab739b-c99c-4482-8a8a-4fe584c1b20a",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cc67f58e-0fe3-410c-8e14-b9004e0539ae"
        },
        "item": {
          "id": "90913343-63ad-4d32-88ec-e64e32fbe2ac",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "60b58488-aaae-46fa-9014-5eb64b7726b8",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "a93fed3f-a0f5-4f31-b5e3-ba9cfcb578c8",
        "cursor": {
          "ref": "b2cd8ce7-5df5-46c2-a56b-81f283ab6d62",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d43a49f5-ce08-4a99-b155-7256ecda821b"
        },
        "item": {
          "id": "a93fed3f-a0f5-4f31-b5e3-ba9cfcb578c8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "635b1789-772f-4478-b444-d558be4fb9c3",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "28ecc3d0-f771-4ede-84c6-2cd8c6379d24",
        "cursor": {
          "ref": "30b5699d-5a55-4cc3-ae15-6a9c05e793b2",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "03bd2289-c675-42f8-beeb-f6a64a21fd2b"
        },
        "item": {
          "id": "28ecc3d0-f771-4ede-84c6-2cd8c6379d24",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e02b0afa-2ae9-4adf-97a0-e7e5ae52a9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "877dccee-adb3-435b-9845-64307551ba19",
        "cursor": {
          "ref": "a1a8c70e-9cc5-4839-a3a5-3f5897d4face",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1e6523b5-038e-4c78-bfd1-8694a9b29396"
        },
        "item": {
          "id": "877dccee-adb3-435b-9845-64307551ba19",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3eb15c66-6d96-4a64-99ba-50b66d371397",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2bc5f42a-72de-479a-941d-e3b3d8a810c5",
        "cursor": {
          "ref": "44e76aa5-c1b0-408b-9180-dbfafa3057a8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "441128db-ede1-46b0-ac1e-4b8a7feffeb5"
        },
        "item": {
          "id": "2bc5f42a-72de-479a-941d-e3b3d8a810c5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "68a078aa-99b1-4e88-b915-754fe24c9ab2",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "cc9539ea-8e9a-45c2-ae74-b5030459f758",
        "cursor": {
          "ref": "f24522ef-64e5-4cb9-b9d3-77250e90542a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5eb2fdd2-832f-4a90-8d9f-a6741140c824"
        },
        "item": {
          "id": "cc9539ea-8e9a-45c2-ae74-b5030459f758",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "72a80754-f8f2-4725-9f24-d6c727fe0bfd",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b8845db3-4c97-4310-abee-a9e5f097d5c3",
        "cursor": {
          "ref": "ac009056-9486-444b-937b-7b03107d1982",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5d291df6-08dd-425e-b3c5-60259a12f474"
        },
        "item": {
          "id": "b8845db3-4c97-4310-abee-a9e5f097d5c3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bb4b7d27-0d18-4fd9-b417-acf43f7e2172",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "c3839184-6067-47d4-a611-80886a0345a9",
        "cursor": {
          "ref": "bc385c3e-985f-4a24-a90c-b89808afd504",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "60c31f7d-d1f0-43a0-80ff-d853d548e8ab"
        },
        "item": {
          "id": "c3839184-6067-47d4-a611-80886a0345a9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3e944bbe-26b2-485e-8053-8f091f1ea06b",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "866ca681-3d11-46bf-b6bb-75e6f74470ba",
        "cursor": {
          "ref": "9ee0d3ae-9336-4155-afee-8d1cc58e6eef",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1bcbd89c-33d1-4f34-a37a-6c615ec33286"
        },
        "item": {
          "id": "866ca681-3d11-46bf-b6bb-75e6f74470ba",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d320992a-93ea-4e02-9adf-02932b853aad",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "5204ff1f-5982-45be-8481-5389dee33874",
        "cursor": {
          "ref": "92e0a703-17af-4907-8949-51e921aa9c7e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1cdeea64-fe67-4f2d-8c8e-884c214441aa"
        },
        "item": {
          "id": "5204ff1f-5982-45be-8481-5389dee33874",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e595c498-38af-49e8-9dd5-e2299865d7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "9c32b242-e18a-4ddd-bf9b-7f88ff9c7efb",
        "cursor": {
          "ref": "cbe55b79-2871-41c0-9ff2-460fdbaab2be",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ac2b4da1-dc98-4343-a6ee-d77f9ae1463c"
        },
        "item": {
          "id": "9c32b242-e18a-4ddd-bf9b-7f88ff9c7efb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "42805522-d84d-4908-9927-807d62215665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "d4363bb7-8b7c-45ad-850f-c47b04d2c288",
        "cursor": {
          "ref": "3d7f239f-0dd8-40bb-99a2-6a7693c6a189",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bdad477f-ecf3-4b93-97c0-8f7d1106a105"
        },
        "item": {
          "id": "d4363bb7-8b7c-45ad-850f-c47b04d2c288",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b8fa7f83-bd54-4e21-9ed5-677988dae26c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "de425a7d-4535-48c2-96c7-069a7ce24833",
        "cursor": {
          "ref": "c8e219b2-9eaf-499a-8fa5-31c094be3ebd",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1c8b563d-3a52-4b4b-af03-fa53bda1e582"
        },
        "item": {
          "id": "de425a7d-4535-48c2-96c7-069a7ce24833",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "586b716e-e0e7-40cf-aaef-f981b0e36cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "eda3b1d4-54f2-40f2-b278-563c82c08762",
        "cursor": {
          "ref": "3d53f3ca-6815-4b7c-bfbd-839d0462ddb1",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "97e67aba-7cdc-4b8b-9884-79fbc692177e"
        },
        "item": {
          "id": "eda3b1d4-54f2-40f2-b278-563c82c08762",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "07d81af3-eb38-43d8-8ef9-695b52a24a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "f065ad47-e139-4e72-b33e-08846292fe98",
        "cursor": {
          "ref": "597d8162-bdf5-4c45-ad43-a8fff1349530",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "12e0b923-d757-4f33-8111-786a9165b538"
        },
        "item": {
          "id": "f065ad47-e139-4e72-b33e-08846292fe98",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f069cba7-53ee-4727-a8b5-fbbf3cfe5934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "144514d9-ffd0-4cc9-9a77-030089dcd230",
        "cursor": {
          "ref": "6f6b2943-fa13-4875-a30f-16db3f281b8a",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "090ba5de-cea4-49af-b1fb-e8be43453033"
        },
        "item": {
          "id": "144514d9-ffd0-4cc9-9a77-030089dcd230",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6b238e1d-d9bc-4934-bb38-b776de7b8326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "87e982db-f5cb-45b2-9c18-80df0c781085",
        "cursor": {
          "ref": "8fb5d1b9-ffc7-4a14-9be1-f74ec4899842",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "98178baa-4a98-4c33-a9e2-3dbe559ff940"
        },
        "item": {
          "id": "87e982db-f5cb-45b2-9c18-80df0c781085",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "08cb2c92-f9dd-4097-8d07-4886e6968881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "bc3c4c9f-acb9-48b0-9c1c-3b193311d69c",
        "cursor": {
          "ref": "43c67e72-4e47-4776-b5b6-c1394e3d4105",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "38448609-d495-4309-95d4-b5eb8e4d6c01"
        },
        "item": {
          "id": "bc3c4c9f-acb9-48b0-9c1c-3b193311d69c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7278fb52-2f2b-4eb7-8af0-61551513f7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8d0282e4-6f72-4127-b58c-f13e859d1963",
        "cursor": {
          "ref": "de4d9dfe-58fb-4862-9c87-ab83d21a4eba",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2934a7fd-6e51-4bec-b1f9-47a239286d83"
        },
        "item": {
          "id": "8d0282e4-6f72-4127-b58c-f13e859d1963",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e18d91b-d161-4d73-af6e-10894e1486f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "ccb9217b-29f4-4a51-ba5d-1f84747e7ec6",
        "cursor": {
          "ref": "0670b09d-63c8-4ddc-8e84-fee49b407643",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5c7aec66-6773-497f-9bac-fb1487f5d3af"
        },
        "item": {
          "id": "ccb9217b-29f4-4a51-ba5d-1f84747e7ec6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ae83009e-b9eb-44e4-a8d7-73eeb9290b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "c3f7804b-46b5-448c-9c43-5d90a079a03e",
        "cursor": {
          "ref": "96a6af7e-80ad-48cf-b640-dfd94a9d2b39",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "48db8362-d5dd-407d-a08c-cee114628c0e"
        },
        "item": {
          "id": "c3f7804b-46b5-448c-9c43-5d90a079a03e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b03b4352-2a89-44da-9b63-d796f1a125a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "ac962ba5-d0b7-4917-b5d9-1e164cb0833a",
        "cursor": {
          "ref": "f9458cd0-887a-4ee9-838f-4be4ac859603",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "39dc16f9-75c2-4021-bea0-070407af63c5"
        },
        "item": {
          "id": "ac962ba5-d0b7-4917-b5d9-1e164cb0833a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "451b2410-ed33-4e6b-aa80-e6bbfcc4050a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "97ae1b9d-b482-4b92-8f90-4fc225dc1e9d",
        "cursor": {
          "ref": "5bcc9557-859b-4101-806f-4d3c281a60f0",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "745b13c0-0aac-447c-8446-5cb58800b8ae"
        },
        "item": {
          "id": "97ae1b9d-b482-4b92-8f90-4fc225dc1e9d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5e89be49-d0c9-4d8d-9484-60b8003f2f58",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2070697c-2719-4a1e-81df-06bfd4412888",
        "cursor": {
          "ref": "57d1ddcf-0df9-4780-ba8e-d65e695bf8ee",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0c4c86bc-5465-4f55-b343-1cfdb9bd436b"
        },
        "item": {
          "id": "2070697c-2719-4a1e-81df-06bfd4412888",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "404ddc55-7555-4c3b-bb8c-48522fa8ea15",
          "status": "OK",
          "code": 200,
          "responseTime": 220,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7faf25a0-b5fc-4af3-9aa0-631344137aa1",
        "cursor": {
          "ref": "52e66b36-94e1-4f63-abda-26eac2647a16",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3a385df7-dfb2-4ac9-a6b0-3b2806da8492"
        },
        "item": {
          "id": "7faf25a0-b5fc-4af3-9aa0-631344137aa1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "025fdaa6-75f6-4f8d-8640-0e2e4c752b4d",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c3c4d9bc-1b69-4eea-9357-ba65c5445455",
        "cursor": {
          "ref": "7b1eb63b-9f70-4cea-be65-c8d8409853a9",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9a5bba9e-f62d-4137-b80b-f9f2c763fd5b"
        },
        "item": {
          "id": "c3c4d9bc-1b69-4eea-9357-ba65c5445455",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "54d44a9a-4660-400e-b35f-f21d03b57155",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7f0cb0bd-c245-443f-a837-2c9eb85b674f",
        "cursor": {
          "ref": "66654ab9-452e-4833-a16c-f77a0f5c40f8",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4f547b37-d844-42f4-a0af-8074ac3a6e6b"
        },
        "item": {
          "id": "7f0cb0bd-c245-443f-a837-2c9eb85b674f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a3405512-5e35-4529-8732-39d47a534001",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f384ce70-d53f-4532-948d-9ac4caf9ab8d",
        "cursor": {
          "ref": "2547f9d6-0bcc-4d06-9a8c-1256624d88e4",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a6e548d7-76bd-4ac0-8a1f-caf957789f14"
        },
        "item": {
          "id": "f384ce70-d53f-4532-948d-9ac4caf9ab8d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fbed2ade-8961-4213-a9d7-adc6eef65824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "11d69fb4-0862-4b5c-9480-1b7e72d517bf",
        "cursor": {
          "ref": "3e026f0b-b66a-4c72-bb3b-e0ebd2e515d0",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3b7dc5c9-34ef-4106-804e-d4ff7a94c152"
        },
        "item": {
          "id": "11d69fb4-0862-4b5c-9480-1b7e72d517bf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "139e3bb7-4e8f-4d4f-8073-daef99513ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "0270ee2e-b527-4d39-aec1-f2a0ef58132a",
        "cursor": {
          "ref": "83a723ba-6c36-42ef-b9d2-a3c42b30a8f9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1b1cf616-74b7-4806-bc7b-64c70f62b614"
        },
        "item": {
          "id": "0270ee2e-b527-4d39-aec1-f2a0ef58132a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e10d451e-ccac-41cf-b510-b49241432884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ded392fe-4b52-4627-9020-a8805282daed",
        "cursor": {
          "ref": "6534760d-3670-480a-af0f-37f2c69273c1",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "88232f06-2836-4806-8a9d-1edee59f329b"
        },
        "item": {
          "id": "ded392fe-4b52-4627-9020-a8805282daed",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5268d6cf-46bf-4840-a881-7fbca8947b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "e05e8165-b792-4ffb-bf9e-70385feebd8b",
        "cursor": {
          "ref": "83589cfa-146f-4c7e-bee3-9077a6541485",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1bc9e704-5c83-43f4-a77a-bac984915419"
        },
        "item": {
          "id": "e05e8165-b792-4ffb-bf9e-70385feebd8b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ef21ce96-14e8-4db0-941e-3cf2f1085ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "76823c02-3f06-402d-83c0-0ff3b3400d3f",
        "cursor": {
          "ref": "32f2810a-e38c-4087-897a-53e694583b2a",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "652a896a-1ecc-48b2-8adc-59c9bd636e6c"
        },
        "item": {
          "id": "76823c02-3f06-402d-83c0-0ff3b3400d3f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d7641b6d-ef62-4a45-9d11-eb97e084b23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8c272292-edad-4d8f-86c7-98a95c58ef00",
        "cursor": {
          "ref": "2849efea-e482-465e-8974-bc15494b057a",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6e6b5100-15bd-4b9f-8529-b29a1cf20622"
        },
        "item": {
          "id": "8c272292-edad-4d8f-86c7-98a95c58ef00",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c9e9cc39-32d5-40dd-aac0-f97976064b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "23da763f-da31-484e-86f9-aff1b0559403",
        "cursor": {
          "ref": "0c2c0672-d87f-4d6a-bd77-453b99e19dc6",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3c0ac9b2-5c70-4e0f-8e38-004c5b9b6879"
        },
        "item": {
          "id": "23da763f-da31-484e-86f9-aff1b0559403",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e9eee203-2588-41e4-b926-451937df1d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "fac08623-8020-420b-ab10-72a06af38229",
        "cursor": {
          "ref": "b0ebb143-a29f-4b14-a298-1c7196349421",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "79f3ee5a-c828-4222-bee1-2ffd80284fa0"
        },
        "item": {
          "id": "fac08623-8020-420b-ab10-72a06af38229",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5a06da37-66fb-4df0-9bbe-18b4e60f48cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "fc62df07-7b0f-40a8-9be5-c00abfb3ba5e",
        "cursor": {
          "ref": "4f2a001f-567e-4bcc-a7ab-745ecd5cc936",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e4db2c67-8631-4c18-88bd-bd34d1e62e0f"
        },
        "item": {
          "id": "fc62df07-7b0f-40a8-9be5-c00abfb3ba5e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1fdf66b9-cc76-4e8e-a19b-cab709a17b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ce4808db-d891-4623-ad48-2823347b09a1",
        "cursor": {
          "ref": "3c3a5dea-e95f-4cd4-9fec-4a5c7b5181d3",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0115bb6f-aca2-4432-a3b4-5aa91e80a2ff"
        },
        "item": {
          "id": "ce4808db-d891-4623-ad48-2823347b09a1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "54b0d63f-12b3-4b17-80ba-1337365b39cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "45aea833-1dc9-491b-bad3-214d92ec9d65",
        "cursor": {
          "ref": "dc72cd56-7ba9-45e5-935b-94e493d1a3c6",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "28128bbc-65f3-43d1-ba6f-1626f86c414e"
        },
        "item": {
          "id": "45aea833-1dc9-491b-bad3-214d92ec9d65",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "81f87c86-105a-43bd-a66c-81f243412ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "edec3e47-f59e-4b66-a0a6-06b855402611",
        "cursor": {
          "ref": "476a657b-1528-42a9-9b97-c4d7927f0f3a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "63ed1821-7acf-4be8-8dd0-bc5303a64ace"
        },
        "item": {
          "id": "edec3e47-f59e-4b66-a0a6-06b855402611",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1a1e8507-080b-452e-a8c4-344128cb3453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "18f7dfb4-d03a-4c7b-b466-7a7b59042805",
        "cursor": {
          "ref": "bec60fdb-eb6b-46ce-96c1-b56ab63cabab",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac92fbde-7972-4d6f-b0cf-8b93cad68c57"
        },
        "item": {
          "id": "18f7dfb4-d03a-4c7b-b466-7a7b59042805",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4de0c470-5a62-4faa-b9ee-ad542bc91a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1dfa2ac1-e754-4da9-80d8-2de349a647cd",
        "cursor": {
          "ref": "a708f00f-a6f7-48a1-8600-cf04ab6f498a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ad89695a-d175-4e8f-b83a-2bc612bf463d"
        },
        "item": {
          "id": "1dfa2ac1-e754-4da9-80d8-2de349a647cd",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3a23a114-6a13-4948-be28-471a8a36f01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "bdf296e0-b6a7-415c-a30d-346c9d2443fe",
        "cursor": {
          "ref": "4f7581f0-1a6d-43b7-a4c2-51b59a894717",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0471f124-6c2f-4865-adf8-7fb3c1ab572c"
        },
        "item": {
          "id": "bdf296e0-b6a7-415c-a30d-346c9d2443fe",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ac8d3ac1-4c8a-406c-bdb6-b2263dff7cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "ac8faabd-3806-4792-bdca-22304647ce0f",
        "cursor": {
          "ref": "3ca82edf-2609-4215-b455-cee99c621f4c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dea4dd37-9238-481b-a8e5-c27f4947f56f"
        },
        "item": {
          "id": "ac8faabd-3806-4792-bdca-22304647ce0f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9c714b95-8282-4001-9a6e-2eba16f76c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "5e6ca20d-089a-41b7-9121-1f6b1e115956",
        "cursor": {
          "ref": "d1ed872a-ba65-4cc4-884a-5bee6eced688",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed4d4ef7-f8c6-4435-a1b8-f4a8b58bfd00"
        },
        "item": {
          "id": "5e6ca20d-089a-41b7-9121-1f6b1e115956",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fd623674-dca6-4b15-907c-5e4497cfac16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "13c7932f-df96-40a2-9381-1095725735cc",
        "cursor": {
          "ref": "2e86d1d9-1772-4589-8bcf-ed3a1f9cebca",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2a1c9e6a-5e79-4a43-91ac-879243d97fb5"
        },
        "item": {
          "id": "13c7932f-df96-40a2-9381-1095725735cc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b68c668d-45a7-4971-9313-d90beb496410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "1aec2af3-7e6f-43a9-8542-d0138526f62c",
        "cursor": {
          "ref": "0efc0a40-7bf5-4b16-b5bb-4b1ed7c65d52",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f6f8a2a1-0989-4fdb-af34-bb2c4f8180a0"
        },
        "item": {
          "id": "1aec2af3-7e6f-43a9-8542-d0138526f62c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "417de945-d662-4190-848c-f70bbb077ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "0e19cc9f-d619-4d4f-994b-4b843ece03a6",
        "cursor": {
          "ref": "8f321abe-b1fb-4cd8-8d43-50ddd8316849",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "051fb480-2907-4380-991b-b4057535c55c"
        },
        "item": {
          "id": "0e19cc9f-d619-4d4f-994b-4b843ece03a6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7187540a-81dd-4925-9245-412af31ec985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "ab92ec9e-d77f-4725-bbe4-86035d5c95a1",
        "cursor": {
          "ref": "62f0a737-d1b0-4bde-8a91-d46e052e02f4",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "54398198-4b8b-456d-957d-64871dc034a0"
        },
        "item": {
          "id": "ab92ec9e-d77f-4725-bbe4-86035d5c95a1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eccb093d-72f8-4a95-95c3-623161d0b386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "bb7355ff-860f-4d0d-825b-fb1b4c437b16",
        "cursor": {
          "ref": "95bead81-eb12-4251-91ed-696ab3294dfd",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a49d9778-a35f-4f20-a865-f18bc93d7c85"
        },
        "item": {
          "id": "bb7355ff-860f-4d0d-825b-fb1b4c437b16",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2dc1f5af-2b9d-4b1f-9d05-fd89fbbd0d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "3164fd73-93f2-4aad-a004-d26366deb26e",
        "cursor": {
          "ref": "0942f1f2-d53c-4fa4-a055-0bc2089c69f7",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1ec0f5b3-1540-429c-bfe9-43f6f9188101"
        },
        "item": {
          "id": "3164fd73-93f2-4aad-a004-d26366deb26e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5cce4fa5-4f16-405a-95c9-8c2d7314014d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "186c5e30-626f-4a4f-b3da-4ebc9ce76524",
        "cursor": {
          "ref": "21215b0b-c5d6-49ff-91b8-c51d3e742b38",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f930ad5b-f552-47de-8809-86c63117a573"
        },
        "item": {
          "id": "186c5e30-626f-4a4f-b3da-4ebc9ce76524",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a9a858ed-37e2-4e82-8059-56cd8482c129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "b473d7d2-770b-42bc-a414-a6e09e9cbd81",
        "cursor": {
          "ref": "3992b5a4-f482-4d2b-88ba-65a074ea146c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "183a8c0d-3c46-407d-a5d8-fb801dcf3405"
        },
        "item": {
          "id": "b473d7d2-770b-42bc-a414-a6e09e9cbd81",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "71d19a7b-973c-42ea-8e4f-687368576a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "192f62bb-c120-4dab-8696-8dfe11aa6ef4",
        "cursor": {
          "ref": "15333f47-61c9-47b1-a0df-bf2f4f7cb4dd",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2229aa8b-4f47-4efb-96bf-018dfab043f7"
        },
        "item": {
          "id": "192f62bb-c120-4dab-8696-8dfe11aa6ef4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e2399923-648a-4a41-bdcb-941231234925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "4ee0ee17-b4db-45c1-863c-3ef514ce2ca7",
        "cursor": {
          "ref": "d3fba38b-6cbc-44ae-a01b-594936c4d36b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "65a2b5b8-c4c2-4e14-a111-1605be194b7d"
        },
        "item": {
          "id": "4ee0ee17-b4db-45c1-863c-3ef514ce2ca7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "020a91d6-27d4-44b2-85ce-0ea4cf3bf928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "0f4acca4-d8fd-4d91-84d8-a8f5bbf61086",
        "cursor": {
          "ref": "11516b58-753e-4ee2-8ad7-5148030b327a",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9cebbf15-4f67-49e2-896f-b7fc86d58459"
        },
        "item": {
          "id": "0f4acca4-d8fd-4d91-84d8-a8f5bbf61086",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "814608e0-8b94-4dbf-8361-c08a9a8657b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3d9031ba-313e-46cd-aaf2-020d01ca003a",
        "cursor": {
          "ref": "7e67f4e8-4fe1-470d-bc5c-19874193c1a7",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5b5dcfbc-3e5d-42b8-8603-868fa5572be2"
        },
        "item": {
          "id": "3d9031ba-313e-46cd-aaf2-020d01ca003a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9c8b4830-e08e-404f-acdd-f6ffd67c6e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "82f132cc-8453-4a91-a0c2-d1d10dfb75a4",
        "cursor": {
          "ref": "143a2c19-d7bd-43df-80a8-2a02ace839ed",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f95f0379-928c-4a6f-9760-1ae9b2be3266"
        },
        "item": {
          "id": "82f132cc-8453-4a91-a0c2-d1d10dfb75a4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e713a91e-bd56-48a5-aeec-893e86c1a65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3f2cec76-9c92-4fd3-865a-f2f17c4428d5",
        "cursor": {
          "ref": "61fdd2dc-659f-4c39-938b-769ee2a0c830",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "20d91f8f-d4fa-4a7d-b80b-185e01edf092"
        },
        "item": {
          "id": "3f2cec76-9c92-4fd3-865a-f2f17c4428d5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ee557862-4fda-4740-80f6-a1960b921cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ba57347a-ea78-4bed-be97-6f1da9f1bcd1",
        "cursor": {
          "ref": "1abf3d06-43b4-4f21-b751-2f3be8050f0e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "efea375c-7995-4065-9638-c3862ccfdf74"
        },
        "item": {
          "id": "ba57347a-ea78-4bed-be97-6f1da9f1bcd1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "50450352-e55d-4cf6-8296-e0a1d74efb67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1cc02d27-6d2b-4083-950a-54b02c9a3372",
        "cursor": {
          "ref": "df423507-4108-44da-b719-94f5725b53eb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "12cc98ae-42f0-4f29-957e-7b228e67f574"
        },
        "item": {
          "id": "1cc02d27-6d2b-4083-950a-54b02c9a3372",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d74eed11-b284-44c0-b12b-656d4670dcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "c96b5d22-e375-416c-bda6-b97741537c31",
        "cursor": {
          "ref": "6b4bad49-757d-440d-a82d-548ae9936298",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4d3ebdf6-9beb-422a-9786-ec844395f60a"
        },
        "item": {
          "id": "c96b5d22-e375-416c-bda6-b97741537c31",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4d542fce-d031-4438-8b39-8e1f919d6ed1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ac7c4e-f97d-4b99-a9ff-125d40cb5647",
        "cursor": {
          "ref": "59841b3c-4207-4b49-aa09-58a904df40dd",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3ed9fa3e-64be-411c-9b9a-370afcdc21d7"
        },
        "item": {
          "id": "a0ac7c4e-f97d-4b99-a9ff-125d40cb5647",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "abc4c3ba-a3a8-4fd4-bf14-cc5595e353eb",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ce004c78-e57d-403d-a05d-55466867dfa6",
        "cursor": {
          "ref": "60304293-7d7e-413c-9859-def1be6fa8ab",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ae1bb245-b02e-47b8-8c1e-5e7ca96ef948"
        },
        "item": {
          "id": "ce004c78-e57d-403d-a05d-55466867dfa6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "92088c37-de1f-456d-85be-ef3aebd4f0f6",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed260575-591b-4504-8387-4be0714a964f",
        "cursor": {
          "ref": "5637d706-cc89-478b-8c25-a5d3905553ca",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2c6c5d27-6ce1-4aaa-b8c0-57ad7ce47a54"
        },
        "item": {
          "id": "ed260575-591b-4504-8387-4be0714a964f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "89fd2937-7f13-48bb-bcbd-2b575967c6da",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "82301831-5667-40e6-ac10-a911e44ed181",
        "cursor": {
          "ref": "93f82fde-2c76-434a-9271-1254504f0ddf",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d85c655b-bb9f-45f4-9849-bc9b86212838"
        },
        "item": {
          "id": "82301831-5667-40e6-ac10-a911e44ed181",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3c051731-9f38-44ff-be72-275ccdb4cf76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82301831-5667-40e6-ac10-a911e44ed181",
        "cursor": {
          "ref": "93f82fde-2c76-434a-9271-1254504f0ddf",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d85c655b-bb9f-45f4-9849-bc9b86212838"
        },
        "item": {
          "id": "82301831-5667-40e6-ac10-a911e44ed181",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3c051731-9f38-44ff-be72-275ccdb4cf76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fcee34-7538-4789-871d-7ec02acc4c68",
        "cursor": {
          "ref": "f3c7d5cf-4ac9-4b40-9012-d16fc6bcdd51",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5a964724-74ce-47ce-af5c-ab72ecc4e361"
        },
        "item": {
          "id": "40fcee34-7538-4789-871d-7ec02acc4c68",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9dc64a78-8f19-4fb8-8c25-d41b47e75ed6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56c8add-9505-4493-ab0f-ad7a93cfacf0",
        "cursor": {
          "ref": "3e2ed5ba-8f67-40a8-a160-7eae8d2594d9",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6b9a6063-b680-45b6-b93f-64a8eb251e12"
        },
        "item": {
          "id": "d56c8add-9505-4493-ab0f-ad7a93cfacf0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b28872bb-5336-4f3e-85b4-12f73c3ae712",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}