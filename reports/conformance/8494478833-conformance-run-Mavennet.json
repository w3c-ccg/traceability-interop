{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b9bd5ab0-a31d-4b1b-ae40-fc851f61bf58",
        "name": "Clear Cache",
        "item": [
          {
            "id": "84cf28df-8707-47ca-af48-bebf703d7630",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c634a86e-703f-450a-9672-ffd59f2e4236",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "83af1c40-418c-41b1-a4f5-bb21de129216"
                }
              }
            ]
          },
          {
            "id": "6b8d2e5e-2474-40dd-99f1-c29f5cca7299",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "029803eb-1572-4655-ba50-ac7f60f515a0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fafc6207-492a-42eb-9d3a-1f9ee5e19f49"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "71dd1f24-12c4-424f-82ab-592e9d61e50f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "693ab4a3-e01a-4d84-b5d1-b97a9e64892e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "150536c2-b68a-4b7c-b34e-750e9753a2d2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76901eff-e402-4a87-9557-564b3d3ca5df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6009d249-6878-4afb-8640-65019b3017c4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b1df448-3533-480c-b8b8-9993b96b0c95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97ec8b57-5dc5-4e0d-939e-911da2a6ca33"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "66492379-ae3e-4af7-9942-c1b4afcfcc45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "613031d1-574d-46ef-9a76-09608f0937f6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a9ee9dd-ca49-40ef-af52-67907af8df84",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ccd545e7-8aa6-41b7-9a1b-b4df399e3b05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b01bfcf-4bb4-4a0f-9cfb-7332bb20fc5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "79782344-eaa6-4b57-8bad-21cbdaa7a325"
            }
          }
        ]
      },
      {
        "id": "27fb14ec-9e73-4943-8ebe-fbb60747e2a0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fd993f48-0107-4218-9e46-ae6883be88ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81b7414c-2596-47aa-babe-b9c79ff61856",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b612244d-d10b-4ccc-9fa4-ddcdbb2b18e7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c031cf-44eb-4e11-a596-4e61674281bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3caa25a-22b1-4240-a722-91ddbd7aab7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae3bfa3-080b-456f-822b-5feadf1d9161",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcbfc61-da1c-4da8-8a62-351a5cad4962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b880c5bc-7b45-4e16-b2ba-c1dd9f999310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13b545d-6ac1-4b69-8cd2-c2b56bb55df4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19edd112-fb11-457f-b904-ab18cfc0371c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae996d8c-ced8-4eba-a998-536b05c3706a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f213cca6-1e71-4cf8-9962-10fc097886a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf5e597e-37ed-44a3-bbc6-e131181e718c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1d3906-e32d-4c83-84fa-e86233ec864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3934702b-ca6b-4b0d-8678-2a19f369c6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d256e3-1962-4588-bc56-5488b9805bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00730a2-6127-4c6e-a517-45dd56617ae5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7bd4b9bb-e55c-40bd-bf06-0a7f73e0c268",
            "name": "Positive Testing",
            "item": [
              {
                "id": "76420d5f-7e2b-4373-a78b-b1e82b5af3b4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fb36dfe-b2f7-46fa-bbf8-9a3d637fbb3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ab80ef76-26e6-4d29-ab62-2fda841eceeb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70fab0ce-9e36-490f-8439-dd69b529cd6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1d86a130-0ae8-448d-b8e8-0ff7aa8ecab9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f03fd5ea-9ad3-4edc-96ff-d5868029078e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "665bb738-d173-45e9-abfc-08d93173e8ba"
            }
          }
        ]
      },
      {
        "id": "457a4e35-7bb2-4d3b-ad99-9be317831418",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "16834a32-1828-45bf-8736-fa881bc6a462",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd0a3abc-fcf7-4bea-99f9-f3a9c109f3b9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b1d17837-2646-4d0e-9e67-5bd392067ae3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c653e7be-1d86-40a3-b26b-9df88d7a4b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33069080-3abe-444a-a312-161128964208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5acbfe-838d-4ef9-83d8-aa86eb5f3e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f76dbe12-6a58-4467-b669-9b22f4804c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47ed393-0df1-4cec-864f-5f442975f0fb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9942308a-ee2f-4f7d-beec-cdd3d0ab9149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27213109-ce86-4047-8cd0-1e7ffa72c921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce85ded-843a-493c-a302-4ff1e5baacbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3788db7c-a016-49c4-93c7-7daa6f541548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a515ef4-5f3d-4637-a5c3-233aa0d58021",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437247a9-9275-450b-83b7-4ee71b27a486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33f3ad4-bb79-4bb1-bd6b-b9d431fdf92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae66018b-925f-44d3-95f9-25904884c342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd5f1059-0d7c-41b1-9ad5-12d50aef2331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f1e559-9aaf-4b90-b5fa-57474fee050c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc4b6ef-96a1-4921-959f-8a31f3358be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b636f056-5ad4-471b-8552-cdc467943119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89dd1173-87df-460d-b0a1-d72fcce68cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11934138-81a2-49fb-be00-75492afcd057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22180d59-d657-4838-82f6-50d10266319b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e84df5c-8a0e-4bed-9349-f4adc91a0170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cd0fe6-ceae-49a8-bcb8-e3a7a15e88c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23c9e33-4f1e-401d-b864-9bad034e4bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4246f04-799f-434b-a632-51279f985f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cde13d-3ab1-48d3-b0e3-d033461ee923",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33416b1d-17fd-4084-9a18-86c6061adf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cc9f62-c5d5-4dd9-83f5-96c75f08f174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeab38f6-01d0-4e8d-ac7b-f5dfcec4da7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea13525f-c125-4377-a9eb-fedefde96808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97dbf974-0793-4294-ba4c-cf1501f105d9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc790d2-7a04-4ff8-898d-5e0e7d954f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901bbfe8-8f44-4716-ae81-196ba4585c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8c8a91-e1cc-4a7c-bcd2-d785b01587d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe56cd4e-e784-49f9-a05f-71517be74e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2055beb1-345f-4c01-81e2-f09edc47f05a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a58220-1a2e-4534-8600-544cca3e3646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cdab65-1df6-4945-9a66-28382360c2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b65304-d41a-452c-84b0-a1bb3daed761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4897976-9da0-4e3d-bc95-0b3babbc11bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ce2c39-f817-4305-8bd4-d33e67511458",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c17ea0-2b1b-490a-94b1-d42e01476701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896f8907-52b2-45df-b909-cbf701781890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba994e1-9c6b-47f4-afd5-4fbf196a587e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08bbd6c0-5934-423f-a813-51d83164ab00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f719b3-0fe3-4dd7-8364-7f268ad43b5e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2047ac-c726-4b40-97d9-4373d5422c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f18b4c-b125-459d-b522-131351cdf443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc3d979-34f8-49e1-8891-d38178f81709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02c42084-aeb7-4ee8-a337-3b33aad21d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c34842a-5534-462c-82fb-237ca154668f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9180b734-f648-4171-a736-d85fddce94f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd85e0cf-12b8-497e-8e03-60c8cadac5ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec49488e-2e73-42d3-bf51-7e6e5f48c1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b1b92fc-a48b-43cb-ae3f-83b4951c68ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f791365c-73da-4a3c-acad-90dbf1d7fba2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8865227-310a-46c9-8c63-c6869925135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4068fab0-2c31-46a7-80a2-7e25e369b5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beaa3a42-db7f-4f7f-b26e-59c77ac6aa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dba5093d-56b1-4e93-ad58-dafd23b337d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a90d615-dfe1-4f86-842b-a5b03d822218",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b87174-b448-4ef2-9172-04f4b47a3660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d1ccba-612b-48eb-ab7e-9cfde62b73a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4cbdbf-a95f-424b-ad3c-a527664d3e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a071c53a-bec3-4db9-87c0-652e515d5d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd18379c-af68-4441-be93-d9356d574ae9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a57c608-c520-4b48-a2cd-1f4a87943cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730dd3e9-0ef6-4634-ad52-47e57f52bd16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9897ba0d-7313-4c13-9786-e4ab2e889130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90469df0-baf0-4250-9112-6548096cf9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c79a647-b9aa-4a2a-abdc-e5d4e6ae7752",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88b833a-f6dd-47b8-8a57-46519b40f706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fedb114-1d94-49aa-9325-8b65dee777dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3568495-7294-46bf-8001-2de4a13db494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bd26932-aba6-4240-9744-a42eea847287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb93fa6-725b-4628-9fc8-1851d796c94f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d96cdf9-a87e-45cf-abcb-012354684a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c003b94-b357-4c80-a098-2917199bfe9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62264eae-51d6-4290-8faf-bdf9fe47ef05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c40d8c5-0e42-48e4-a967-1ffb67729090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3097ed-a59f-47c0-bffc-b995fd06f1a1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6803573f-bd63-4024-a6a4-444717664ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205c4ba4-ab0d-4bdd-adfa-9ca6624e3e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f825299f-d769-40ea-b157-30921595cb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcc1aa95-02d5-4d19-9ed7-201a0a920ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2424ff21-343a-4000-b8b5-78dbdeeed49a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec75fa19-ee73-491a-b4f5-cb4e48d08710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc694f2-5077-417b-ad9b-5c85d61a3546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aa6d69-a344-485b-aa1e-3e439131bf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1da734c-c30d-43b9-bb41-8432c11d1be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e65a4fa-af96-4704-b9e4-b2df6d950c77",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eaa3c3b-4eef-4164-9df7-aec39ff3b9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c13e9e7-db30-435f-95d2-567ce7c912de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f639f51-5e30-47ce-a985-255e7aa10276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf1353f-b879-4848-bc93-cb2a3576c07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b4fbf3-094c-44fe-9e68-414b6560a885",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d74b76-8eba-426a-8478-f1fa9da2075f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e057799-1c61-4996-bcf9-ec12a3d29eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b7aafe-8fcb-4e7e-a84e-3a5384a41d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "584858b2-b36e-4ba3-b5ab-7738208697d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04866d9d-b581-422a-b8b3-6811794365ad",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d10e09-e580-4f9a-ae59-9755cef2671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6d7b44-057c-41cb-a0ac-a7076e6305e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c485c81-dfa5-4f78-b941-2cecc5812630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "838d2656-6f28-4b53-b0be-a4be9e5201dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd6ea44-8d99-450e-9918-59f93f8b5313",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28a6272-9e23-4465-85b1-e15b69e841b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58800c21-a4a9-412b-86a1-ab0efb2ba939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb05c3b8-c66c-4d19-98ee-2716912abcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9add3ad1-2d4f-423a-94eb-c445d2d67135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31369154-b2f8-41c9-93bd-380cd6517997",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00766b5b-eeb6-48a8-b013-6949a4a4252a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92fbe3f-383a-420d-806d-f2fc75f25582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c607d849-0758-4d69-a8b5-91dc0d539de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc52bb28-ac1d-4bcc-96bf-a28df4e91eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1df554-7c4b-414f-858b-a4b19732ec57",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be901fc3-d89c-457f-9586-63b23acb2cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e626d8-7810-4671-9386-f83a83a969a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62fdc42-942b-45b0-9f03-1d5a7d9bacca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdbbaeb-c97d-4c86-8a5d-5a4add2ff873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d35158-536d-45c1-976b-3a013d885c41",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9085b7-83ec-49b8-8539-77f3378190bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de20323-68d1-482d-981c-a9e7bd4998f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5dc81d-7471-4b55-a39f-e472ea8a76f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed0f547-1e50-4a6c-80a9-620602705cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870a0c67-d11c-4236-8e94-d6d748636dd1",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd97891e-5724-4bab-81f2-94beb0680c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b9fcd5-bd2e-41fc-9044-0fdfb41ea027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93a5ab9-a83c-4fd1-9819-c38dae62bdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a429cab-55d2-4f02-ae9e-48b40d76167c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecd5daa-c701-44f8-9404-c75f8b4f2675",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd083ac9-51c4-4f5d-8db5-14bc4eb018df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61d0d99a-db0f-4673-89c3-4eba1326e106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581130de-47bd-4948-949c-aa582151d264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d33ba71c-009b-4352-8aaa-aa92550fefc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0cf5d1-ee9e-4b3c-94be-6d37b69318c0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00441153-ceb3-4ee9-adce-173d9169f2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a054444-a622-47bb-bbbf-2620891fbec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4516a975-b856-4b69-90aa-3b57afbc5b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3de3816-2368-4863-bd35-1f2a8715afa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1913e978-92f4-4f44-a515-e55f7dfe430f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14965a51-d085-46da-9f8b-22a6cd848eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67494eaf-5fda-4d12-b3da-a82a33254b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ffd7f4-55de-4f20-b229-b476e979a2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4605de60-2ed0-4162-9f68-d9b01e100a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7bae13-692c-44a5-b1fe-d11fb7b92d5c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b9d639-9f65-4b21-a827-0fa329060f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d0668a-9667-42aa-9db0-b9e47fbde598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6dcbd8-36d6-43e1-8c7f-92b6f62e7119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0789c516-670c-4d36-b6f5-55e582ede208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3278310e-e533-4075-9234-b1d155c5ff99",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345402cf-42a1-4e53-a4a5-9d8377c8ecd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8bb29e-ebd5-41dc-b48e-2df463283eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5e2bca-e9c8-4037-ad03-1546c55290fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d723c1b4-f376-471a-940c-a71a53b3abe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9a2901-0a9d-4465-a652-459f478504fb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6182d47-26f0-4865-ba46-50a5a7e65a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7293340-4b31-44fc-907e-4da6bf7ec0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa37334-0a98-4a36-bf30-0224be9318e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e988e18a-d7d5-4406-9901-fbe7af4e6aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458824d4-1ec4-459f-bb0d-bf83ea2acd81",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890a21cf-e704-4534-92f4-4ddc336188f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817cb229-b909-43f0-8475-3be364c2417d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25f410e-adb9-4d3f-8d26-ad0b8163c52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38946d48-e111-4ded-a872-ad99b3f83b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f814edbf-7929-4686-886b-777eb4f8f878",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2754bada-9912-433e-9f15-00ba5d6cc6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edd4215-d465-42da-aab8-745ea33fc27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311d9c42-a31b-42d5-b99b-2e77511680e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "387526af-8cff-4bf7-ab57-b0cd06efc1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fde4cf-56ac-47a2-89ca-897234fd2dfe",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490346eb-8f51-4241-ba16-43201841be7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cb4678-dead-4b96-bdc3-cd835848af16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0d80dd-161c-4b24-a63c-388c72fe796c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b175ce-2529-4511-b3a8-e6d666d163d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59dc1b20-814c-4d21-aac3-6654dfb7134f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e81bbc-2c21-431c-b40b-4400c304e1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b32b97d1-ed8e-4df1-9b3d-2ff90edcfc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37da320-5e4c-48db-9cc9-842ced643ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23014a2f-02a4-4e5d-b55c-fbcc8d19e530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85984762-fad2-4e5e-8202-c65a519cdf2a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27850e9-4597-431c-9314-4be89e029c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a352a3-ec9e-4e24-95b4-29ec8dc86d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b000359e-a6ae-4659-93aa-e34ef963595b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7461d48-d31c-45cf-8e39-5217ee655356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b30239c-1393-45fb-b0b8-47c020941fbd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dce7ed-6651-48fe-ab6b-90c862be5d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264dec81-ba61-4a1f-9161-8ed4cbda6343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2c4f36-bc4f-415e-8ec5-6afc793b0fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "efca8b86-f699-4a41-92da-e33af456a5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fd8fcd-43c4-4a1d-8a0e-2dbcf9ee5c3d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d214683d-ad52-45af-b7dc-d84ad040b5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11bb662d-467e-46f8-91d8-a212e1684313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82435f87-6468-47e3-a67b-d92df3c6340a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "37e4b0fb-9dc9-4543-828c-75f5422b05db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2abef1-8f74-4f78-a890-3e661654a15d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c5458b-d743-48c2-905b-796cfa079670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2568df-8686-47b8-8a52-6d894c366aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25c2e57-fe0d-407b-8212-d1439c9a7774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d93dfa9-a58b-43b2-be58-5097ee784140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c532ea-0495-4ced-ad34-06f800925bcc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aee214-9695-4376-82a7-6547505831d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e49d204-77bc-4424-933a-e26a4857ba43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba151122-7cc1-4935-a233-ae9de4cba419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b59bb8cd-5af1-407d-afb0-5abad9520940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbe03f0-5e75-4ae4-ac96-6f8376ca7568",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459627ed-a741-4c52-9ffe-beb1039cd8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed898ca-3947-4453-9ff5-cfa332b4f433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f1556e-42e1-435c-a2a8-70b2864841dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "320e581e-e321-4301-b6f8-2af0421b062a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d6974c-7b84-442a-982b-6fac1fb2dcf6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad879fd-3125-49db-8603-c2902fc2e38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7a6ab1-bb78-48f8-95a0-71ee4d5a0f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e998ef-c448-4a5c-be46-132217671e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c03e195-30a5-4b16-abcd-51d5506c42ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe354c1-6f10-411e-812c-59cb05f3f07c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d248e2ba-52ba-450a-8aa5-a1fc0818ccb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bccef4b-5ab3-497f-8ab8-49fae89f6f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b52bd3f-3790-42f3-baa1-25dfb108636f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5894835e-e3d0-4092-8b1d-c3fc226d1cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899c29c6-dca7-49cf-b39d-ab63401a772a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e2b034-70dd-4c77-8d21-492099f7b132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d708d8c-3323-4099-a3ad-da7b08ed2761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e9162f-a83e-4a3a-9e94-74fd22b356ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a39ab635-2026-4920-bdf9-65189849d582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4081d1a4-3325-4fba-9bad-dae42a933e83",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7994cf28-1705-464c-8724-94832cfb3cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43315ce5-b5a2-41b9-9eaf-1d14103c52ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761c0e5d-149b-4355-8845-aa7c37a7c752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d14c80ec-a238-43ad-8545-026640061181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b0969c-4b48-4196-93e8-078ea2b732ff",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be177646-d29b-4493-a303-3effe33b9a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ff6b28-f887-4d25-8054-145bfd7d99f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455d3880-289b-4e4a-b4c5-b55dec782b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1320dd6-892b-4b88-a37c-f76c418d17fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2641abe-016b-454d-9dae-2704284f4592",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1fe175-5ef9-4484-b273-90955257e78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b5848b-97f8-4253-a377-40804089cb04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc52040-b192-47c3-a7cb-b621541bc0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3546ac-8a96-425b-8cae-4d86adb190d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9968dfce-0e79-4526-8593-33baab1dfb6b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb51a56-3554-46d8-b6f8-5980530d743a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c96e12-3d89-4922-8c13-a4d2a19d2203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267cadfc-ab9d-4d14-a882-fcef5901f23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28dc318c-d2a0-49fe-8448-cd872cd76561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1646a46a-5806-4255-a406-2a052400686e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb213e6-8ba4-40ac-8db4-915e0749eb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e625dc8-be0d-4a1a-b544-cad812ac1537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d340ff6e-701d-4565-be90-e537375f6fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "404fab55-7690-4c9e-aebc-a142391a6d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbd5911-761f-4621-b5b1-2529d39073f3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2e9c69-c632-4193-8424-741f5ec10925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d167cb3b-b385-406f-94b3-388e0c9bc83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c655923-6f11-4170-9d0c-ce7dc4977ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "be5bf8dc-ea45-4138-b87b-d6e98d5559b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6361669d-f5e7-4c45-8ccd-3639930b1135",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39390665-0230-42d1-905f-ddda0c0bfe39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1e72bb-f0f5-4241-9848-a50aa6c41a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f57c58a-2d3c-4f67-911e-39b36c20896e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f903c8e-52c0-4b47-b1e1-fbe90b3de410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801275ae-15d6-43e0-a0b3-41b20d0de9a8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3ea833-9f97-4266-8d7f-235d70dee61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbb4d61-6f6b-47ae-9598-74c64fff8baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f6aebc-dc09-4995-baf7-808658e013af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c029885-1b4a-491e-b7b4-08680a5d0846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f437fa-0589-40d3-b614-92de2dda3aa6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a7b60c-d03d-42dc-8d82-8a31df963752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea17e11-dd38-4344-840f-d3023eb569d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2eb142-e551-4c7a-9889-6b66e6a9a343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c34ec9b-176a-4219-b5bf-8390dd36db5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d853d43-9bf5-45f5-92d7-45cc98cc196a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "904e92d3-babd-4022-8345-917d6d13848f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c55a876-9bf4-4603-ba7d-dc0b0e824aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc86669-775d-43c3-adf8-aa1c3f816f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1ff78b-fcd9-4ca5-a600-05ed4adf368e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b23c8e1-964d-41a1-b8cd-78812e3b5367",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956945e1-5513-4489-8f23-ac6ae4a2f10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73867f47-7cc2-43aa-8b00-d552fe904831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31b0260-1b0e-48ec-99f0-d1026f412f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "df9cc291-fb1a-4374-aeb2-db0bc90d43be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c648ae01-f7b6-4f9c-af80-a2adf0e1e63b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df9a23c-02a2-4397-b8c0-2a7e9332737a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694dcd36-d325-413a-9d3f-f5914f50d62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5e309e-0ede-48ff-ba5d-12a9839c55ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "59628c93-317e-4acd-b372-885f46419c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecd6300-b7f1-4e45-b997-3ecb6a31c138",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913f4120-4b5f-439d-962c-968e072ff713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc371f2-f695-4107-bbfd-0cf279e929fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87306bcb-f1e8-459e-8754-610be8187702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "521ebabb-b6ce-4c1c-9db3-5dcc17534286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56088b6-3088-4a8f-b716-a90f27fa0c6c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd935775-f9aa-486b-acdd-46b34bbf96ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93157375-2355-49b3-b5c2-c7deb2c438d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6efb69c-c80e-4bb5-811a-476a0f455fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9857701-f2a4-4daa-8ad0-253e695a67de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7142a370-bf01-446c-9d59-9dbad0361078",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b107efd6-15e3-4e0f-bb0e-c5b57113afb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3922872c-0e95-492c-b4b5-d40197c24074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22725dd-7dae-4f5c-88e5-1b38d005e548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "121df7cb-88b5-42fb-9356-006369c334c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc49f67-5348-4723-a699-8efce641dc21",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8097c8bd-c7b0-4e77-9cf7-5b7b4d96ac4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9008587f-18b0-4086-8f13-789e7377d507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb4a018-9319-4cb3-a2a6-2aad68aacc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6ce677-25d0-4a75-9826-2a08eabe27f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e214ca1-7fe9-4591-835d-27cdb2532f9b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb67046-f3f8-43a3-ac19-934ce4d32864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc41aa4e-e281-417f-803b-2efeae776a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c9ac53-afc7-435e-8414-1605119f95dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "34293163-67f8-4fe1-b46f-3641ba506367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5b3197-ace6-4043-9f41-faf6385137bc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7c6a9f-2897-402f-a3d6-311db20096a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4906ce46-03fb-4ba3-9ae6-907e26d3859b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d87045-b4f9-4c73-a9c4-e0e637554d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2736a9fa-881d-44e1-b074-d34e5b2f41c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f316b85c-2c59-4515-ad6d-b62ccae72eff",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09651e6-a3d5-4a51-8844-118638f642f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5dc08b1-4e58-4c50-8f7a-292f0993afe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9583c8-072e-4d38-8d2c-66e5d82848d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb9ea03-47e7-4070-997e-d8b1650fb40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1f1aa4-2585-4532-8dc1-f78b25baad8a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf0910e-cd66-4a31-abda-7c37e93f649d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d488a320-1605-4515-b7e4-92ec4c92cc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb7b8c7-cdff-41f3-992e-1adcb61de550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7301f18d-9626-4523-aff3-f9e42258baa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3c746e-cd39-436e-9c2e-a5b96742cf2c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f6e0fa-c881-4552-965b-ac42aacb5906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578a5590-04c9-460d-89bf-1ed2999edbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c886af-34be-47b1-af43-8f4409a16a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7cba5ed-9c3b-4633-87d6-5fbbee76b9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8de40da-76a5-4a8f-a9ba-e86c3155069b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d8c5dc-c6aa-4238-802c-d2d3e571637e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d202ce18-6781-4c79-bd20-bfdc6ba4e137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c2dd48-f7fa-4d8d-a038-f172d6795b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0db15308-54aa-4a7d-a363-48e93520cb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f36c6e-fc7b-45f6-b85b-bb16cdb22cfc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bdff19-883a-4220-9e22-46cd0d3f1543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9484e035-1f81-4395-9cd6-fd2130d6c60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae77d61f-fd51-4a13-bc4c-e7fd5a85557f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d10b5735-2c19-42d0-b9fd-69d2cfab4a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b232e2-e223-4413-b489-207f8bdf5b39",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c8ede7-7685-43d8-8bde-75aa9675692c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9ca97e-6543-4067-997d-176df1c5521d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b54b6ca-0cd0-4091-ae0e-1786b3b8aa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "16527c61-a429-4804-a805-dbbd72916e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3330d1bc-4d06-40a7-9b76-9d7b406aa172",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f12e79-203e-426e-8408-b3b99a7520a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02509237-db0c-46bc-9884-b11b16322d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e374167-9b43-4ddd-9065-38c667d3da93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38e2cf27-7293-401a-84b3-3dad8c6c7d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0721a4-406e-4d7a-96d0-bd626819ec0b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827a975e-a850-4688-b0e8-59bdd075ce8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8f652c-07a8-4dad-9f68-8a5c7418bf3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94bcb0e-8be7-4842-bf8f-c8e418e4d591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8f8c51-8e37-4ab3-bffc-b6c09aac9e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f44922-eccf-4986-b324-d1488f9dd8c2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db61ecd-610f-47da-947e-c1296abcc3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4242b182-6aea-4c27-9e73-a88150b81b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f216b8e-3d8c-4b29-ab23-f344e6c1514a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3c9ebf-1067-4de5-b48f-8a90db7e9ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c94ad44-1732-4f2a-a53d-5494cee6411c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a654aa97-6672-4140-834b-4d28830cbba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2ac719-a689-4d2b-98b3-8102d801fed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec402c70-276e-4fbf-8c87-3e10bf2dea4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4169f0-a144-4fc0-bd80-29d34109658a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d432796b-7ac1-45cc-8cdd-5cb8c43477fc",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf88ac9-7d39-4896-8c45-7c6b754ac2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dab3d24-4e09-4b96-a5b2-904e4467d934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ac6b3a-c1be-4a3f-aeb1-272a7e97aee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb0f1ed-bd17-4dad-918a-2ef77b2f4094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29de538-6717-4b30-b5d3-b80c5079a122",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da0aa46-2329-499e-801b-7aa59fd83f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e203011d-8204-456a-9b72-880a337b982f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2ea45b-0e98-4861-9fd4-b95fa317cba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46c1ecb8-ed0c-489d-bde7-8affaa656cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad350391-8ccb-4bcd-be73-e07f352f5436",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97339a37-0b82-4d3e-b2b5-a0c9bffe0f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3452fcd-cd11-4408-a48a-43c5daed1d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1572425-9748-4379-a04d-823016097b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d831ac-9b8a-42ff-89c6-22b6a3791058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7411f5-456f-49be-950c-3e4575a0a6c8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cf342b-d783-4222-93f8-4fc89f4660ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3db0114b-c98c-4b9d-a4e2-0e5e0661831d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9bdcd2-ac64-4698-8766-a7b315a36807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8413fcff-73b2-4686-ac0b-60d47a3c4669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79611c28-d8c6-4590-b475-9f5d10c6d877",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4adb72-4fdc-42be-8991-664de1acddb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0824c7-dbfe-472d-a4d6-44f5ff30ace2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bf5910-d100-4d95-9d42-d790e2f23a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58539694-6e70-4be2-8205-f4d395e70b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e6e52c-d6b2-40ca-b55e-63338daa02ee",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38767cc1-03d9-45d2-9578-f44b7e77811c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad35dbe-1f42-4f94-8717-db1a470914e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5209e7-e035-44e7-a07b-f9e0e2347066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0da8448a-5ad0-4709-89b7-68563310d4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e5235e-f2b7-4c60-9c23-4443c5dfbbf8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6cad68-bc41-435b-b25b-3a95371171e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6e9e64-9e50-458d-907e-e2653b615aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcdc520-16f8-4f86-a040-02bd67b5ec25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39514ccd-0eb2-46f1-a3de-d2cc49ef7417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9e6f90-4f2d-40fc-b1c6-5f1b5f89838e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a374873-7f85-4939-9a98-9d803752361c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b8ba9b-4bcf-42b5-a0aa-4d19cad65d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc3416a-c5e8-4e29-a399-e91f1a9473bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a86471aa-f119-4490-848b-fc8f81e4b9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6ddf30-5253-4206-a0f9-9c287556c165",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdbaf51-bd8d-429c-b933-8078061d6ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6764f01-ecb6-4612-8106-25af39882828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a828d4d-2c97-40cb-b3f4-7f4b8d84bda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c46b09-e6da-42da-b294-cc7f353d0cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71a8dec-fcb5-4f8c-b161-70178006159b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a0b8b9-97ad-4887-8ee6-b3543d3fbfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64757150-bfcb-4970-a4ed-ebc575c9cfe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f40538c-d547-4846-b6f6-b0bb32fa2e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "302fea19-b01e-430d-8651-ed56b1150048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5a004b-c841-4ed5-86c4-896299c1e50a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bdf4ef-ab64-497e-af98-63a6f778c3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac1178e-dc20-4c5d-95ba-7cb73bae9689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141b984c-aeb4-4d6a-8bce-2e05fcb1799b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdd2878-1f87-4198-b092-628472271ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722303aa-2a35-4c71-b3fa-c8675c4fb742",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31639bd-a430-46c3-8ea8-abe5ecc287f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c46590-8222-49ee-850a-387c971249c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c1d825-ad61-470b-a650-0b26decc3f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3cb5b4-14d4-4ddb-97da-876c7f460deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dc956f-4066-4dff-89a8-cabab84baffe",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0b57a2-1609-473e-8b57-8fe7e3bc4317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7423cd5-57e4-4f78-bb06-3d54acb1d217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cae205-f5df-4e80-a7fb-7682ff42de15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03f5d212-3642-4e86-bc33-058c9e2b5a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece6059e-2de0-41b5-b82e-69c8a78be041",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cc5b3e-9ab9-4cdc-8a79-56e5aba16bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be62e59-4a4a-4ebd-a57b-e2a9b584ca42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1e4d8b-7412-4161-8e1c-f2b507a7bd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d34331a-fefe-43ed-b984-4346ae133cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9492ac73-b32b-4a98-88eb-d3825f4a0eb2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13a2a2b-7ffb-4313-93a9-5185bd2f00a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b269c766-74e6-4dcc-ad34-40754ba68ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba3f0fe-f18f-40ef-9626-5b0ae468e2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7eee80-f6ae-40c2-a5d9-1287c14e42b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bf386f-b7e2-4102-9b9a-3a29348f861d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e7e6cf-3933-48e2-93a4-8bc2b77059bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a7fcf7e-1cc0-4a90-9f40-ecb70b609939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfe114a-fc6d-4e76-a1c1-ea68e56ce709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "faedc7f5-087a-4ee7-9e9f-faa250b7e25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30015ea-b3b1-49cb-a02d-7ad42358a935",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4622410-3868-49e2-947a-094e83923942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5e49c7-f519-4536-89fd-6a783490dfef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de0e2ce-0ef3-4393-b6f5-b72305658ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9bc879-c745-45cc-bbd9-fa17ed713db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf23230-ba50-48e4-a8a5-72e51d146406",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed96be63-cc1a-41b9-a176-0988810fa048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0044ba47-9812-405e-95b5-5c00eebc90b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0d192d-8a8e-4cd7-b97b-c55bad37e266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3636a6e9-4852-48ef-9cd6-025c76cadee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc69f3a9-550f-42b2-a1f5-96c8c877b6f3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c4eaba-09b3-4a84-97d1-9861cdac1942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1fc8fd33-3b75-4bad-b875-986e4ccc54bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491770f6-a9c4-47ca-913c-99dc8aca2e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "52f191ee-a84c-4bd0-9084-c684f5681f9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3af4246c-81f4-4405-90f8-dfd5daee927c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3a41bb5-2e51-4ec6-a328-1d9c56393166",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a2b137-2ea0-4966-b131-a88bb7c2f781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa1ceb5d-922e-4861-bc81-d8961c4d6c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12a7f54-95a4-4e99-be54-36530d3fd37f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "394c8f71-99cd-41da-9de7-489714c0fa4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44dfadb5-82b6-489c-8c99-c8b986fff5bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b7b7028-2490-4ad9-b229-a777019689ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "109b2d89-3407-4a47-9aff-58c4b4f2248e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a43202f-4358-4c7d-905b-48b43ebdd5d5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "033ad510-e441-477c-8a43-e5348b15c2e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "acc6de9e-c38e-4c05-80aa-6c4db9074ee9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "adfecebf-5825-400b-bc2b-1bba948dcb03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e138cbe3-72f0-4f9c-a422-b76958e6d21f"
                }
              }
            ]
          },
          {
            "id": "b84e4a8e-d62d-4aaa-94e2-17d518e41eeb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "455f5a47-8711-43dd-be79-587df2c71395",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a499bb59-d97b-4a3e-900a-7f416cdcbaaf",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a70fda-2947-4766-8bb1-e6bea80cf3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9021348d-0f8b-431e-b997-63f4e0c91116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635a5702-f475-42e0-9da4-f481e4249ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6424502-e079-4cc4-a475-ae9fa3f2005b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3942477e-7f93-49f4-9dbb-d32a7c9bdd54",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a747fac-e236-43f4-bd13-be29e631a970",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dbc428a3-102f-46c4-9f9f-af61f86e021e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5303bddf-5a06-4569-8623-6ca2c56b4ced",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d5660136-615d-43b2-b057-7f2c88ea6255"
                    }
                  }
                ]
              },
              {
                "id": "7977f371-22f0-456b-96a6-91dd8b00908f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbc59bcb-d670-4136-a492-54566f8b5016",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fb17187-b52b-4387-9aca-2ebcee16a406"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8a04987-d865-465d-a15f-78e299bece0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "46bfc55e-4d7b-44f8-9ff9-9f8bcaa315e3"
                    }
                  }
                ]
              },
              {
                "id": "3b3bd149-d066-40a1-b6d6-4277531bbd63",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0022255d-c545-4e63-80bb-7f4e1047c583",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c2cbadd-89ad-414c-a6d5-339fa015a699"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90a8006a-f79f-4ea1-bcab-b3a9c9366fda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "baebeda7-04e4-4fb1-be64-af8afb3bb013"
                    }
                  }
                ]
              },
              {
                "id": "ccd49505-8c64-4491-a725-6ad7e45f57c7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a86d839-e55e-409a-ae24-b09d30e3714a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6506a746-90a1-4b13-8840-393794b132a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db77f7e3-89c1-4c5c-a6e6-8a5cd974c713",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ca2c221f-2eb2-43ad-8e7a-fdb8c11e0c2a"
                    }
                  }
                ]
              },
              {
                "id": "b8ce153b-bdb9-419c-83c5-293b8a69320c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9549bb93-fc72-4342-9af4-01365939aa01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24474650-f950-4fe7-af8f-4f141a19b1ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e67f89ef-67a5-45eb-86f1-dd7db0cc2422",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d1b0500d-b527-4c2a-aac2-b7e9855504bc"
                    }
                  }
                ]
              },
              {
                "id": "950232f4-3541-43cb-9a21-a5240e9121f3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9446e5d7-11b8-41d5-a441-c42e29f31581",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fce93b11-9095-4e2d-9fc9-e4adeb1650f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f89cfb84-7de8-417c-ae1c-c04cc5fc4633",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a4c094bf-11ee-484d-8759-d73b763196f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f8c3ac6-afa8-417d-b25d-2c5ce91121a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae9c6edf-ece8-4654-a204-de8978c11bb9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b1b2169-ca5e-4ebb-9cc3-6be2d6c5890a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "afb5e41e-a6da-465a-915b-09b214293fe4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1f3bb4a-bd66-42a9-86d4-47539f0d6191",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "178c5318-a84f-4eb6-9b46-765bab182e55"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56ef5e89-a42b-4d6e-8961-8786ec3b6fdf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0a655bc-aa53-4547-8cfa-ee77f4c765eb"
            }
          }
        ]
      },
      {
        "id": "e0926f42-7e71-488d-9928-f8960bf6136a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2bac6563-d937-4015-9f0a-793a9e400817",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da32835d-eef4-47dc-838a-40b97368c4bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7f364266-9bff-4541-9c6a-d0483b1bd4bb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b47537-b732-40ca-8a26-3a48e0accdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14dd884-2ec1-47a0-846b-bb4845d20ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e07427-c2c1-4edc-8939-bd9846d8e3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "256d7999-865d-490a-a589-6392a25cb0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9783ddee-7878-4979-85ac-0dee1b5f6efc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4e6c2c-aa4d-4d02-9174-20f3bfdbd173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b216b0a-8f03-42c1-b669-08c173f3073e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219a1e04-3532-46f4-afb7-02bf62a10afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4d4819-9277-478f-b8ee-2039b1bec4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4242161-fbb5-4f95-a996-dbfcecec8a85",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3e8d17-2fef-498e-adeb-4034166873fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5155ddac-a9d2-41c9-8acb-e36d720a2195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbb6a0e-2ec0-4785-8a34-9e062d57ab47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68526a17-7b33-4dfa-969a-22a939cc64ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc17f99-8a48-431e-a1f3-5127b649c8ba",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3f5012-7695-4d56-9881-a8cad21afc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fe9f12-4ad5-48c0-ab83-909a9cd55189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f901fa-a07c-4dad-a4d9-28ff6190b9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba5be1e-22c1-41cc-854a-299b602a9425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28deef86-5c53-49b9-aad1-5a4f20da7c66",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9be628-8e8b-4b9e-aeb1-bb8278461aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee85037-bc60-456b-aeee-3082caa81181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93f752a-3922-4f1d-9a2e-d276b9402310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff37093-bbb3-43f0-ad1e-84f52d34fbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ea7255-dd9d-4d4b-96d4-5f122b177044",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8582749-cc70-41aa-9e54-50166a23ae5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50bfd8fd-410c-4a46-9780-b10bd9e29644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760f464d-68e7-45a8-b93a-174906b739e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2532a8-ff5f-4c76-9abf-223294b82a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff3c1eb-ade2-46a6-85c1-e19b2a214309",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a12c112-3928-4705-b0a7-dd9526412ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50236dc-9095-4b85-af1b-611069766b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f3dfe1-c935-48f0-a695-d92a262c1e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6ca167-6973-4811-a955-fa537745bb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae8124d-5c49-486a-a5c3-fc3be28c8a63",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb64bbc-a24b-49d2-991e-5690f2fb1c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291abc9b-e29a-49aa-bc8a-b8b7f75454d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70ec432-2570-4c75-b82a-1de7436e801e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ba6b3f-d0d1-4697-812e-0d44a891ca27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db27475-cef9-408b-9db8-7748198e2df7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e747a9ed-f413-4207-8614-a0e5b924cca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37b3f44-6bed-4321-b4f6-3a5a02343cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a378cb86-fd49-478d-b612-dee176b4098c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8698fcd5-2e62-463a-96f4-7be9604ae5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404b9698-24af-4f3e-b98e-44c4b97ad5f8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f96f740-ad28-4819-9297-4c6e71847ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f446a0-ab1d-4f3f-a689-2685692fe6e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5cc924-cbc6-480e-869a-84de316f3e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62e3bda-fd78-49ee-8f0f-d9ae56cda42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f8ab855-2a32-4116-9cfb-0bafbff47579",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc574efc-0e38-4cf6-8c47-3cc6b68691ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1ff925-5161-44e3-bb15-66d0b92b91e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87017b4-7333-48eb-b001-86778f0ff7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cd629999-29f2-4fc9-a495-42777fb0bcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd54a4a-64f5-4b14-a6f5-e4b3843a3de4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742a4a6c-adcd-4587-9c47-9b2582c22422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79756ba-162a-4128-b22f-6fa61287d485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e442ca4-b9d2-40f3-84cf-d86423393393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad31f4f-945e-47af-b0db-8fb94ac3a6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d267213-71d2-40a1-b12e-6390e78f094b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaa0ea1-56ea-4a6e-a544-439facabacfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a35d5b6-b3bd-4c77-9597-48cb111e43ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f544855e-9b2a-4456-980d-46850c3e18fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43c44b2c-dded-4f3d-b42e-82b6b90d3bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d195b0-d087-4a82-8712-0438cc7d0757",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b23f9f-90fa-4d2d-a5af-a62447fb8c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b34e3d-1c16-4803-8080-7fa1899a99d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e1798b-6233-47da-93a6-d488c6ca09c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0cba3e-6872-44dd-bcf9-e6e47f4bdd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3d2d0f-12d4-4f00-9a6f-4cffd0f37a6e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01eaf5dc-f2f1-4b5a-b297-d7e0624a73a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d22c56-b034-48fc-94e5-5e8f40f1b87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a4fb4f-614e-43fb-88f6-c642d33d9ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f2b7c4-6118-43a6-b093-37e683e46c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4975c50a-c118-42cb-9154-992b492f2d13",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d73fe1d-17de-49c8-90c1-c246145b64c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1feb54b8-a5d5-4484-802f-b1a9e86d251a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967e3d94-dec3-464e-8759-da9274a5379f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "04a89870-f721-4e58-a7e7-a4729a1a79e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30529bfe-be2e-4c5f-8857-57feed2e02fb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03a9f70-3439-411d-b9fb-4900cf9a145f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924a6d0f-619f-4f53-8782-111cc180b040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb59e43-8a23-4df0-ba0c-75e4ef8c9a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c80f86-01ee-4a2f-b73e-d25396a23a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b902c066-d930-482f-847b-2fd32f069ceb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a49f5a-4d4b-4b86-be39-25022fb194f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9dfaca-f8b0-43f2-81b7-64de1da66d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7c5413-37aa-46dd-9353-ecdaf0f3cbdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "656fd888-304b-42eb-98d9-bc6b587cadcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0250e4f7-87c1-4f8d-981f-6344d93aa35e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddd7ab5-0080-4d9c-bae3-8bcf63c2062d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4069f392-a19e-48f6-a715-6d95a6dacaf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cab592-378c-43e2-b9c9-6b60b5696749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfdd1e7a-80de-4fb4-91cc-96a1813376ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95703bf8-f5c9-4ff8-b18a-bd214e65aa3b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84c3282-be16-44ba-8476-3d0fc403f14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10de3258-7f55-4ac5-97be-a3cd789c7d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c6750a-43a1-43c9-a927-d93014398d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8bd1289-31b1-4ccc-804f-3d8de7013870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d86d51-3116-4993-bc6b-149ecabb8a78",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6038c3ac-a92f-4520-bada-90533d4d2453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081ef098-5cc3-4b68-bec3-60002e77cbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96afd612-a823-486a-b16d-e9010bbe552f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17fe0d47-c4dc-4072-a570-2ce0752a3236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6ad86e-5da0-4a07-9d4b-ad6cdd664951",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90477ec9-273f-45b1-aa09-415f7d8d938d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fea313d-bd47-476d-8fbb-01108897d978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019cee48-17ed-45aa-a304-985ac8d904fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2964ec-ea97-4438-8056-da420f85ddd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ff3ae4-72de-4eb1-9042-57da000ca8aa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daeec7b7-9722-4d6e-98cc-a190bf13dd00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cbd79d-05f7-4b26-a112-e5a7ce0766de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212e5141-22f0-43ba-9dd8-f46bdadb7755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc9a5d1a-e35e-41cb-925b-c45cd6622808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2774750e-db13-4e32-8fbd-5816d370e0a3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf86749-926e-4db1-853a-b10b009ddb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae826b6-e5dc-431e-8c54-8329964b1193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d929a449-493e-402f-b972-772095a8c587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0eefb293-f3e2-45ba-9b2b-a4899ddd11d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c85f12b-3b6c-4f5c-aa96-3d8e9385a827",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c77c77-1c71-4f0b-bd33-b31aee35e006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4d63a5-3ca6-433c-9079-a1b7f3b0a676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5ad08a-2d7b-4c17-b9c4-26785ac4e037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cdb4ac4-d0ae-4676-87f1-6bc47bd61d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5724f24c-e0dd-4771-9b28-225defb27e00",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e4432e-7100-4305-b0ed-f9b27e0a6cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e0a2d6-21a4-48b2-acde-261f50d68b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40ca0e0-8b18-4238-b410-ab35dc25ddff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0edc7f5f-d1ee-48ce-b8ea-58efbb658296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce13899e-aca4-4cb5-b437-5ace1a2405bb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444dad86-82c5-4920-95ca-8904feb4f7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41eb7b5b-34e8-42bc-a458-85e6aa16cd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e574b3b8-a05d-4974-a122-bf5e0de3b6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d261fb25-a8de-4059-beff-4dddb1ce9fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c1d305-a718-4bcb-a896-70a9f375ae8c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f79bb2d-914b-4268-8acd-e185489c678d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b495bdfc-2ff6-46a5-9dad-3d73abfe445b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e723d940-2e64-4cf5-89fd-cb757c734a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73ed288f-b096-41f0-ae11-396d26a753df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131f8b33-a812-4607-bb0e-1944c66e85ed",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a301b20b-091b-4e80-b5a7-57586140d5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b57fbe-4b2a-40c2-aff9-41b75431b05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3184ab57-7adc-44a5-b67b-b7f2f769e305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e31946a9-acb9-4406-8864-bcaf9dc618dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f98c8d8-40b7-456b-b9b4-44ca0584e1db",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1aa5cb-1e2d-4429-ae17-7a1aecbe71bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8b746a-4a6d-49eb-98dc-f03910961950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc6f6b7-bbd2-480b-ac9e-a3191de53677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6507a92f-6f49-4c88-8be1-757615178040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b88cfe-c196-4eea-b7e2-353c3846671c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e32867-b934-4321-99bc-5f7be95f5ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d400b38-8cf6-42c4-92e3-dd6b0c2afe10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ac86f7-6b0d-4ff9-a26a-6adb21e084ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b64e752c-170e-4f35-b80d-86b1a6f79d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001f489c-8aeb-43e9-bbc1-69f8a182c83e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e34f83-eb43-435e-8cc5-60818ed72f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caba0045-21cc-413b-bb2f-092660f2f4e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866389d4-8d51-4039-b302-bc5c65f6b434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef6adb0e-d863-4d72-a632-9975438fdad0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0da4408-742b-4812-9e15-397567ed7ce5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "caf0a7b0-8565-46ef-b284-08bee2df7ccd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd40dfd-6707-4d11-8e75-a9c2d7babc46",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "233ef087-5d1e-4a75-8699-99e001bb481a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2f3676-c148-4cbb-9316-ac8c49141aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f9de69d-d1ab-49fd-8e0f-eaebb5d641c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f7862d5-a5ed-407b-908f-bb76a571e562",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "890aeed8-5a32-4397-a70d-9be60474c5d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2a1155f-2676-4578-8e6b-6e5c301a501c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc40c2be-df89-4ac4-b68e-79b736afc976"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf1bae3e-32a5-4d72-82fc-b1226bd1faa1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db42fc60-4fae-42a0-ae9b-9c506e4eb662"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6827c59-273f-4b86-9374-a54f492926ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0be9a4ca-80f7-4b31-a7d5-60b91eb803ed"
            }
          }
        ]
      },
      {
        "id": "3bd24ea6-3b7f-4d84-9f82-590abf4831f0",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6957e813-ac4c-451b-86a2-571c610b520d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d69e0f1c-f6ec-4110-a7e3-722c85f86ed3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "16be5d19-9834-435f-b1d9-49e5c8032074",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f508f8a5-af35-4acb-9a6d-59205fb344f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1ab8cd-c0b4-4e79-83db-9bbb43053852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16ef4ed-093e-456e-8d38-1a683e0bc6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0774959c-1511-49a6-aa81-3f257a85e919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e534fab9-0aa6-488f-8eb4-0bf4e62a043e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de91cf94-613c-45a2-badc-fcc1d8bb5656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fedca4e1-4f5c-49a1-941f-66b826f6798b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d88436-6033-4683-b269-243f55e529db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46e22084-b67a-4b7a-acfa-e501290d4779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5045b302-03cf-48bc-89dd-70339743da4a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6291e6e3-60ed-4deb-9b62-0dd799a9afe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d52f70a-05df-49f0-9eed-f49c37c11290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83b1a3a-a89e-4478-ab25-b2a26f9ca896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3208df-ffec-45b0-adac-e928de96ee66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf00900-3193-45e9-bb12-6107842ad016",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcabd26-c979-47a9-af4b-cf6d2ae2b676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0ec325-0ecf-4fe5-b47a-cfab58d68063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ef306e-5a5a-4b41-b215-de962c23a2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "685d791b-e781-4a0f-b43a-d7f3d3e86d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566f112f-cc63-4394-8fd5-ac53c78ea4a8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4d0835-bf6f-4c5f-8584-59201dc860d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a92b6e-54dd-4408-9c24-52a9120b5f62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a10179-4804-4487-8f92-ff9597b1f751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42243d1d-cf08-4d16-ba68-dd110932bbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d02cc4-6a6f-4f71-a7df-9bd64d201e3f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f518636-bb7f-4ead-b41f-d0c930575180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25a3412-ee76-4854-b4f2-83f09a4e135a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd12335-7b34-4314-8fe9-2b269e306ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "857f843b-db87-4db2-86b4-32b231d35610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcd62c9-e9b5-4827-8d7c-3cfd7da95952",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a7bc0d-1230-4fcf-9b37-01aa514f1b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d24e174-7ac3-4d0b-80eb-b1670615445e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc04473b-52af-4eda-998e-45c12ddaddcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c98d1ee-5a53-49fb-9f56-1d84406b8eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbaea55-0c83-4c59-bc4e-495cd8563f60",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6bdf24-1340-4e4c-b8f4-9463a6f5c031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb21e976-5789-4d99-af96-bea2aaec87ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e71b370-fa38-4722-9cf6-56bb276adc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc807a53-593a-440d-a584-ee924ddec3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f157741f-8d51-46f6-b93b-60cc6d433828",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03c89b9-d8b8-48d8-b4be-96d458eeb736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d491502-b33f-44d3-ac71-9fea7275b754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b434d3-a331-450d-96ec-65c8c630b019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4be273a5-953b-4287-962b-52310acc5cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e216c73-34d7-4f49-994e-ad9408207ab7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7b9761-4bda-48d7-b83b-6426def50aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6e02d4-88be-4f83-817c-3ec3ca8f4951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a854414a-772b-4cb5-bd32-6cb1c7d0790e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b5262f-2b50-48af-9d80-5093271355ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce919d31-1af1-4522-9839-b4d1a42be16f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f21d096-1021-4c4d-8595-d910ec74ef13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5781958f-5dbe-4dd4-b419-6d25f38c5296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a973cc6f-53bc-446e-8c09-fae5d90f6b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "06136a25-9abd-4b83-b70f-d57abfc52ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19106736-4fb7-45b8-a018-dee6e61f750f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d2b74f-e4c9-4e84-b9b4-c23e01f1f163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863fdb04-7dfb-4ef8-80b3-60367092ca14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03b2fbb-aaca-4292-aa14-39bf3dee7449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8b0a8b-b316-4ed7-9619-ee3d97eaf9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214fe506-acfe-4684-8ab6-cd337fff4d9e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938bc790-c2d8-410e-83f4-9e01528ba34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad94a7a-52fc-4b19-a163-1cb38eebeb98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd05da6d-2306-4db7-8c4c-3face5c2a5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc77b206-34c1-4b5d-b39e-65b475944ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5238d0ce-41df-43e3-afae-e2031cc386e7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5891f1bc-2fcf-4e58-99fc-d3a15b719eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a446447-6973-4154-98c5-79c61d615fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81370571-e60b-439f-a956-285a04ad8d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2849b612-1d15-4bbb-9264-f9a1dbcde497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195efc65-1841-478b-840f-b8406947583e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d2eeef-3709-4c11-be25-8068747663f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6322b0-2a4a-4fef-a954-291791017366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ee3d85-c7c6-410c-8db5-2ff749ffc7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "32b6b8f6-a4ff-41b1-9b3a-27a747a64aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1efed58-585c-4791-94c4-a0ae6fffe46a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b519a1-4206-4eeb-afa9-38088203fce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05aa19b-361d-44db-9b01-6d73bdf7b99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9214f02-7bca-45ee-bb78-0f238779142b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b10f23b0-2909-46db-a50c-58c7b6e2c4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86484c02-159d-4edb-a9fc-9117cf6c47d8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f92a23d-ccfd-4641-bf8b-f3b58fc04e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65397d9a-d53d-46fa-b9d9-44247ce8268c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5713e70-3648-4471-91a9-17e9f303e292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "19ab7776-104d-4ab2-b8c9-2fc4819ebdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90316311-5b22-46ed-a388-a5b98cc735bd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8baeca14-65ed-43cb-9c71-d4be1dba68e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87115510-0544-497b-a798-7bacc0407e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcd10b9-eea6-4e63-869c-4b37a30e4ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed0ba70-b662-4637-85af-c714e1d3b8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e91c1b-7476-48f6-be2f-e6f4adfc4f06",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e32d87-d3a4-44bf-99f8-8c0e352c4090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb136d8-e1c6-407c-8749-5f56e27b384a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdea25e8-9580-4f29-9d54-4ff935fc576d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c50b5966-3e5c-4fd9-81d9-e0f651bc9c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6135449-815c-40bd-b933-127fd0fb5f87",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1ea9ac-3a8d-41fd-87a4-bec47129adeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755b9804-20fa-4362-a8b6-c0bccadd2bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012157b7-02ad-479a-94b8-6b01403880fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dff6300-f7e1-42a1-a322-a94d7c88f1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5003b01-9bdb-41df-b028-95a8048fd672",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6a5379-a070-4e7b-841a-8518268a8b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f771faf-8948-4927-9bc9-c3dd86d896f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91da24a1-e51e-440d-901c-d45128b51012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4cdbad-ef65-4355-90fc-54c26f4d4f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a864f0d-7d82-4a11-91ad-58776c9b5d14",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6160de-0b9d-491e-a5e9-acc969da8534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9753d494-39d1-4ff8-8748-60678e6c12c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c7652d-4a29-4c2e-93a9-924ded33be16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33a84417-ebc8-4b9c-a80c-ca812e64fbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd567e3-82a8-4bce-b319-fb1606f663ba",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940777e2-1c72-4f8d-ac88-f0f0fee634dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4c5b48-0ce2-4818-a9c6-776009351fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448abfed-5412-4202-962c-09c7f00399d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae02807-6078-4cdf-8406-91469a4367a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd10df4e-fc55-4209-9c9e-823e240d20f2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b2691c-5c51-4261-be58-8367ba04728d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1b4af7-5c06-41fc-99d9-aacee75fa355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54870d3a-9589-4c1d-9f99-91d8dafd28d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71a62ae4-ccbe-4911-b356-9a4cc1a37352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e3a15c-e0b7-4505-8ce3-cacf92098960",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b022fcd-7140-4584-8db3-fc9c913ced89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd95f3fe-a265-4b53-a6e4-7497164ce5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adb4629-4360-4b6d-9fc9-c7da1ab946f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "321bb7ba-fbff-4b5f-8b33-b165507d22aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fdf804-18d0-478b-b166-4c73060aca7f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945be01d-6fdd-4a4b-bf99-167d2322c20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96dd52c-17a9-416c-9843-f8e076f22f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00362eb4-796c-48db-a268-e7fc09fbfbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "853d40ca-cb64-4ecd-bbd4-3ce3f597ac83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da3a58a-50d4-4f16-9223-258f5a1bc5b7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5887512-7e59-4e9d-8a5d-3591d9286909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7f2b6c-2905-4816-9356-bd02e088659d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b26c013-d82b-4ee0-804e-87653282b8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21385abb-8edc-4420-aa94-1ceee86833ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33a2fbd-315e-43d7-91d6-2adb41fbd928",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdb3cd3-07e3-4ebe-a567-53c363042ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b81d264-c053-490d-a5a6-e97a2e77dc98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cc8a93-6405-40a5-9565-e5def8b60610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2278684-f5f8-458f-bffc-1c3663837936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ead3033-c508-43ac-8e6a-8f76e30f738d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a108d8c4-b912-483c-8822-4906744b64a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0171b6-ee25-4096-ade0-94a9dcb59607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153234f9-b25b-4add-91e2-4c6e28d9b6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d7c998-24c7-49ce-8967-4ddb61d41e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f94ca3a-455b-4d7d-8c11-ba2181aed193",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f465f49-a68b-4235-a37a-34c8bd3d6552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223189b6-683c-4a71-87fb-d4da60f11fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae204eab-81f5-4300-b488-d7e4ae3ab507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0afb3422-bbcf-406f-b6ce-f7ad9fc2fe83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa10490-5ca1-4644-b02f-7a35d764d8e1",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc88a779-51a2-4c62-ab70-47ac51831cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c03163-4fd5-45bd-b4a0-43e2cc0e0d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd788086-0398-4ada-813e-63404f1c1de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68a4a10a-9623-4e70-9d8a-e1505ac77653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583c7e20-d58b-45f0-a7c9-794a33b7fae2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b40e9b1-ba40-4632-a586-0488d567ed97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e6ca3e-0fec-4e64-b7ed-4518b487a98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0efb01b-9dc9-4466-913a-92c009b6c7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95b8c1b0-6fa2-4206-a37e-12f6cc215d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d474ff83-31a7-4319-8791-10cd36e831f3",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ea8e1c-3895-429b-a949-135df8ad8b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb780f1-7702-4899-ad82-048b2b93442e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82577271-8207-4a58-9e2c-efb04c8149cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86e877f0-4206-4a6a-899c-29d618c36c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793ad019-520a-4e08-8933-092ce51669f7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6f9401-c425-4a83-ade2-31ef6027b864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e000175-9d1e-4a39-8f6c-8a02f6c98290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5876b0-c032-4368-94dc-32db0c30b55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81eeb77c-e04d-403d-800b-e3110ce13ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ce084e-05d6-48ab-b66c-69f585712bb3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0acbc1b-c54f-49c0-ab36-c7da602656a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab7d4ad-96c3-4cef-9330-94e25005a9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20a7fb4-b10f-4dc3-b7a2-83cdc882ef58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6846f9-a76b-4fee-bd44-7ad875048e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88dd7104-c03f-44fc-ba70-15e24d659dc0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac62f67-eb21-4369-8f72-2176bad4b743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87502755-f973-47dd-9720-821616213e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e55446-383a-428f-aa2c-6fa5c25e0827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b490306-da31-4add-a59f-ba183b1e3893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb78ecf-a941-4644-9cb4-8515a2155127",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e67f1b1-1cb0-4426-827e-b83ddae64c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c618467-6249-4ed2-a125-c63ff0275e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d339e255-8873-4529-8842-115ae7418581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48b655dd-3ced-4dc4-ade7-5b178913c17b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ad14a246-9fa3-49a2-851b-4df1f5bafe2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80bd997b-1652-43de-a7c2-5d6a86aa661d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b4afdc-45f7-477f-9614-240991f0d65a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "57fcf6e6-7f39-4454-9b52-bc3bc4f00c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3f89bc-3700-4218-be66-ee54200b1814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "241398db-ccfe-4a54-b2ea-2534e8a75609"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eda93c48-74c4-4ca8-82cd-e4129affe872",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75fcef0b-bbd9-44d3-81ed-3f549af218ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90ceb304-081a-40b4-81bf-5c5deca1ecca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d917159f-a2be-4359-98c4-c11e3eae69e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9dcfec3e-abaf-48d5-ae7f-af0a8eb2a6dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f7b2fb0b-55aa-4b97-a88f-fa084460bae2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "956fc70f-d278-444f-a27f-3046c9869866",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b452303-3d17-47cb-9b12-6c613f5d7af1"
            }
          }
        ]
      },
      {
        "id": "3f4109f5-a365-471f-96aa-556e1007c890",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0cbcaa06-b7d3-4342-9872-be37d7d066c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "57b30a49-e44f-4933-bd23-5a573eff3fca",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "82273181-f820-4199-a424-f5c0321c7d62",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9205b7ae-e415-46cc-8653-a28e3cba227d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25e4f14-e63a-4f0f-9259-5a5faed908ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6deb09e1-ff67-4fb6-9a2b-a413de9dbfc2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e501c9a-6fd1-4cca-8a07-d0634c75eb79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e56328-2976-4f22-b6bc-8a61fe5c4292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4cc08c6-b629-454f-9df4-c04a6458bbf3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51061a85-d19b-4e87-906d-bc7257b43993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca65107-a98f-4a3c-bea2-1ad700e8d5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732c4907-9a93-4018-aab4-c4347718131c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3788d8de-f0e6-4719-ae4f-7dee0eb18802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594606ed-28ba-47a6-9d51-dfc6f5e36444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990211d4-af5b-4a79-9a7e-4478393736ff",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae8786c-4a06-4334-bfce-f37b7e5c9f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f773ddae-9399-4585-8d50-52d1ab4580b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db32cf0d-5986-4663-a489-fb3f121648ca",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d25e37c-11b9-4982-bdd5-bd69f5cafd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c8eb15-08a3-406a-a384-6b771aaf6fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dec2adb-4557-4640-b75d-5b13d45129fa",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53909ac-adb9-4e2a-9617-08f6d61dd8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996ba112-04b7-4208-ba69-20af4a168f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d239d75b-c15d-4b8f-a142-417802a0d4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59d566b-c0b0-4c28-a117-7acd8537e610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e99641d-37c9-4bd6-aa86-08294384c965",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf646e68-c96d-4468-a46c-b0071b5c8de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207ba251-7a17-4e0d-b5f3-7a7b8b541834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba6ebb7-441a-4d58-ae05-e402e4d4b39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f95590a-fc8c-4ffa-abab-c1c14a89ab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f482e2cd-03f3-4d6c-8524-510e4d3ff98f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349b88fb-ac1a-4644-9d8d-447b34818a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "160ded44-24b1-4ac8-b16c-713ee5474123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf25619-3124-4b17-9ba7-c21f7e684493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71556374-7b17-4d25-8cf3-001cada73faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd99c060-7432-40e4-9f5e-03a5153cbbc9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630fb699-130a-4fa0-abcb-963bba0dfd50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ad7d3b-7e1f-430b-86c5-80b0dc5c4b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c425f7-b47e-48b1-ad4b-5dba17942968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd9ff9c-f3e1-45ba-b9a0-cfc075c7f865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6801f3ce-343a-4631-a182-305ba00ced5b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a33e42-b19c-4b3d-b6d2-7d76b7cf24c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9ed1d6-bf23-4b54-9817-42f09c3011ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34af988f-1a40-4559-8bcb-9d0cb7576a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5de8cc-6546-496b-a935-dfad6f34d192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119555ad-9534-496c-af8c-1004450e3ab6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfa7a78-30b6-4605-9860-baef9827e00a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4977c1-c39e-449a-8182-cf472a6a6d72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f407a7-5f1d-43ee-afd6-042e88fa12ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd7a397-f181-4384-b7e6-9235430c7569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f491826a-f997-453b-a7d4-16a2a26765c9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd06a866-bf42-426a-b70c-a2cd9c6fef2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4aa9aad-1dd0-475c-8da1-01bcf42c3240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a713b7c-4dbe-4221-bd32-430d0c1c4d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4196d9-7c4a-431b-9058-0312375a263a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507a022b-6d46-4469-90d6-4af97a3752e5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6fe78d-a796-4176-9ed1-3be7cc08a0fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f429c4c1-30b5-498a-82be-519e6bca7880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c92f2a-da8a-4970-91b1-e6e4acdfdff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e386ddb-d666-42ab-8b7c-ed899bc51068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d046a3e-7011-434f-aece-448b98ce8cb2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a24e814-0a82-4714-af54-4fce821b431b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1bb156-247a-44b7-841d-cddadfb716d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd815b3-aa4d-4784-ab86-847923f09d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6abd3a4-18ec-45ea-91ca-fdc10b7f0aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff443dd-ea8e-40e5-95f7-2d22965ef801",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f93c15-a0fe-44d8-8a5a-412d1430f76e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8197b376-57de-4f78-acdf-f22a14e4f2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09a6391-bc72-4f0d-b0f7-64c8e707c189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cacb0e42-b73a-4d11-8bc6-39664c5e0d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2728704a-06b2-4d1f-93c5-2b25aab8cc88",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b74c5e3-3575-446f-a08d-1bcdf3ca99a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7569e3f9-535c-4c8d-85b7-db20cc7c1e51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c84864-8efd-4d33-b03d-3abd4ab90d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb46751-f55e-4c1a-8c71-14941c60ef98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a42d8f-c8fc-4d78-af53-c1b044d79165",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0cbd81-f13e-4360-a12b-da504325d5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c625381d-6707-481f-9df5-50602c69c063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311b732f-e4f6-45b4-98ac-d92576623d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3966bb-7504-40e2-8602-30f2c37b1478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0380e6f-51ae-4c43-836c-e6bded9b8dad",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a889843f-ec5e-457d-8bc0-c81a0edaf020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d539d26f-0b81-4668-b715-7a9035fe2502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e273d4-d8f7-4e75-9cd5-ab7948897097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da505a3f-dc14-47cc-a131-1f5b10818a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6365346-25ac-46f7-80e5-0e0856e62591",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec98c34-1361-4c4c-b16d-68f08b866063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc35cd8-876a-4e98-97e0-f0cace810efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed638a1-bf0c-497f-948c-6498bfea9ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e572cef4-7f40-4f4b-9bdb-5faac1da0250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba49b33f-256e-4ea4-8dcc-9cb00852d718",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb77f7f-28c3-443d-b3d0-9b85fb19e7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0f38c1-1e3a-44cf-8c72-fd0b155e7653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7593e6-cd27-49be-95dc-60c8e68a8a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184ecf7b-8131-4d2c-a14b-aa38c1ad5cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6446c79b-6db4-465e-adbf-94b15bc7d66a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e08ae2-7c83-4c99-96ea-997aa415f162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3d61cc-f3a2-4a62-b93b-58a304a8f376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5865f0c-0f95-49c8-8493-417fb2cdbcf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921a48cc-0145-45e9-be7b-4c8384859dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca52af2a-a2f3-4473-8e01-4cbaca29bee2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499d338-cea2-420c-a7ea-68866a72a531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1736c0b6-cb1b-4c0c-9297-573a33baa657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb2b61b-d0cf-4581-8fa2-3cc8df56007b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b761c047-bb59-4364-bc5d-27af84639464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efe3eba-6b2d-4ef1-8c85-ad06d37058e1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9393ad-7ee9-4143-8486-386f6cba464a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b1f7f5-9489-4f5d-8323-1d6034f94f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963702e1-5357-4a35-9e43-3b7906e44fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54ab77d-1d79-4315-a8a2-93eb6a8d15ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76146b6f-87e9-4022-83f2-b7919a3b4bfb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b575940-4a3e-4127-b726-d3844a8be156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91648396-35bd-493b-9206-5c57edac9e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f1c59e-a122-4003-8c27-f2f779e8eb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5653d8d9-43cd-455d-bb32-742f0785cfa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8e059f-c84e-460b-af97-76133142dc4d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb240ad-7324-4632-9075-4baeeddb3785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "591db0e5-f406-4ca6-a73b-ba90dae1d570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b544256-b8c1-4b8a-818d-cd577b306c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee17924-5547-43e3-9ca8-2a237aeb641c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c58cf20-5d57-4f0d-8573-203076f21d95",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69501da7-d903-42a9-a76f-71249fd4c5ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "578ea4bd-5c27-4cb7-882c-7977489ae3ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2289052-89fe-4bff-81bc-042205154621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9395aa-d52e-4f88-ad8e-bb1727e10a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db147ee-3c08-4e5d-9a4c-933229fa3990",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b960bd-2d1e-4d65-966a-fb7ccddc0643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400779f4-dd89-4bde-9f72-52e1a9aca2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0d752f-9738-4819-98a6-248a119c8401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3fb681a-3c4a-426d-9289-1fee13957124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3914b0-b8d3-4a54-8f47-1bc0827875fe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37457cd5-49d4-4ad0-bf9b-ca98c433371d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ac0e20b-1b0e-4aa0-8729-001b929c235c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dbac55-9bbb-4645-a17a-c865382b6280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130bf74f-9eda-4511-9fe3-c216a0009eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3ee965-9dbe-4926-b8ac-295929e9f8de",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d7fb12-f1f5-4afc-9ff4-51a3e88fcd66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252661a0-27b5-4153-a18f-501cc96bb557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a571d8d-bee4-4181-ac44-dc2828323356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b30488a-9bc1-4957-9392-7c9967fe4ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fe7ed0-62d3-4402-9fbf-45954a64ba29",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca30bf2-b143-4976-af0e-740062859642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5364dd2e-b817-4596-8a9f-a756db71c7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bf7c52-826a-4286-a13c-a17e3187b398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e50d6f-a390-4ade-871a-3f774aec67d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0a992d-91d7-4ead-aec4-4dd585f89451",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33450888-1010-47e1-b3e2-008c331e4a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0c0a15c-105e-492d-8a62-5757f2873580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac259d6-c58b-4089-a465-fd59ef5c86cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9bcf7a-12f8-4357-af59-5c780b2fd928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d975653-3acd-41ae-8529-475bc6af2f3b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85ff850-26c6-4065-9f17-3329af746b4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32bd4989-47d0-475f-b3c9-c08d3bf6c5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08851433-5069-4c1b-95f9-40c6285f29f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b959db1-4cba-48dc-aed9-eb1a30df5ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca54b676-eee5-40db-92b4-0233c724cd96",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ded268-8871-4c01-b971-acd0c26dc5b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47d158c-9b50-41a2-9aaa-0c3cbe026514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec2c3e1-7896-43ba-bb09-55af5d1295d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84eeecbe-d403-4b9f-8b29-fc164f2b3d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc483b6-7515-413a-80c2-b967c766367c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f769c820-46af-43ac-b9e7-bbe4fdb933eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f998d8ec-000f-484c-8723-fd41571678b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3ff62f-f89d-4541-984b-4d1725a54b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d7d9e2-0e7a-4559-ad3c-d6d260476d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad0aba2-2a57-4df9-b646-ee2e2b692225",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90043a45-7d3e-4fa2-931b-e5452805ac0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433e481d-2891-4aed-b7ee-fa5ae6513da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3091b5-0f4a-41c3-988d-b78906816535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a33a0fb-1c2b-4cde-851e-cd96f37bb950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809c8836-de1c-4dda-a493-2dfb92b7a7b5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff19edbf-126a-4e19-a7d4-4d9a77b76839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31c5fb9-2516-43c7-9399-66047c8eb24a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00813682-9b81-45a9-b433-66b726a035c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df78608d-508f-465d-9c64-cd38672afe58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bfe89e-62bb-4d12-b4b5-9c55b7199144",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbfe430-ad18-404e-a818-5043de83305b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7615928-cf60-45a4-9541-ed4c7791941b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3af0fa-d546-46f4-8cc2-529e0968b210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39250776-f081-4f19-9c59-ba6148def9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bd47ca-8ac1-4d25-b23a-2488d95b3d55",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccb2d32-9a81-462e-a15a-2c32e003ace8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4901331-bb1b-4562-ba6a-d96ccdf2cf7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a6bfb1-e226-4b70-934e-a9291146ec8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc2d30f-5d73-451a-a113-cda67490e191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9acf83-4090-4002-a44d-f5d56f011835",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75aacbe1-02ac-46c5-9bb4-852be55bcd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33cb1862-5699-472f-932d-29249a1c0db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95a3233-00de-4d3f-8797-970e72a69ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4df17b8-0322-41d1-ba10-794331f06f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bf9629-c746-4e4e-a486-f295da735df5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee1eb24-ac1a-4f3c-ad18-d102c906020a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27a6458-8dcc-4d08-afb0-3b378820af68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa3bbaa-52ad-46dc-9f80-9e552f3df8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09ee563-a93c-47db-878e-11e313ab8fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472f57ba-5ac6-435f-abc2-aefc734dd67a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd388a1-6ea9-4d7e-9b09-58dd5fefd1a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56234877-57f2-4129-b4ca-0ab40d1dbdcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa765639-5b4b-48a0-9408-b83f3bef0505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625af074-f324-46ee-b849-308bb768b022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ba7138-ba2d-4f69-b596-ddba5cfa3103",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df4bd55-5cd0-4e48-a220-997c1a58658f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8ac1bc-09b9-4580-baa5-4e53abd297b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8121880-effe-4cbc-ba81-57bb872c5e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd9e0f6-af3f-4361-bb59-2fea76b2f724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bdabbc-a639-4b9d-9521-d94a859e2388",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4eff787-5074-4202-b565-88d12149e134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165f4c1d-e19b-4d56-8a69-162aeefa87d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f376855-60d4-43c7-b97a-329b183470f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137772ac-7f8d-4256-aea0-5b8439f286c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cefb16-3291-4517-96de-3192952a5350",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fac7ebc-e8f1-4add-8016-912f5533f263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d7962b-4d0d-4ccf-b094-92029ffe4f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376cfda1-c1c4-4e54-9fe7-75c363a806d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1990b0c-acac-4502-95ee-58523351fed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3852e2e0-a0e4-4c26-94d0-232159da5dbe",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373f8187-50a9-48e9-8bae-57ac3cf8224e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49a364b-eee9-4feb-a905-824e88d6649a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b4aadd-f957-4ea2-b84b-de0b4c8511d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca2bd59-05fa-4f40-87d4-7763d60e8aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab4489f-928c-49e8-8066-df4317bc4051",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8dbaba9-538d-44b3-881e-10de762f68a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462ef2d6-bc0e-4015-9945-f01c513d26b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c970a1-e979-4a06-81c8-ecd1a8c5c641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69508ce6-51dc-43fd-88ed-e1eb618d56be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9988a3d5-dc20-4535-a7ff-fe06bb299ac4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b58415-0c02-442a-9eff-3be1624cec59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14dc88e5-522d-4981-ad59-4e9a0960ab57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28923fb-4392-4992-ac8e-29c702fcde84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a677def-e0fb-4365-9f6f-1462b447b209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca751c3-f5bb-40c2-b9db-91ba9e0c35a0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b08fb1fa-5812-4752-996f-4a26de03dbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fcea1fc-0712-44c9-9c27-8c08572bb765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaabe353-b385-488e-b984-093c3e0480e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9f113d-3041-45fa-b9c2-a1d382933844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675dc5a6-bbee-4bd4-ba63-ca86a1768ff5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd6271c-3673-4210-b83f-15165c6e2ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b320d95f-f1f1-4f4f-b297-81754a5076bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdc2a3d-6671-4cd7-bec0-c069090a383d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc6ae27-a39e-4371-b16d-c8709c24f1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97a32a5-0189-4159-8f09-1cb0df320d47",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36001ed-4ab8-4e86-b4ed-ef84c130ff14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9bfce4-2779-4b35-88ad-ae56fccb4c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0780df78-4bbd-453e-8069-f03b3f286237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a100ef-db8c-4d17-a27a-20184cf842d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cd79ce-2d34-4553-ac57-7f2579d07f96",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bb02ac-db8b-4328-b83b-03b26a5af13d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6933005b-ca99-4da0-ad7e-8b5f644ce94f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e523bed7-068f-43a0-9426-f9fbde8a3b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "041dd341-9034-4c29-90fe-ad264979bb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6805f097-6ff2-4719-92df-3a09181e1229",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873252e5-df35-4eed-9037-e4e97baf49e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d5b6b8-825b-4fba-8fbe-4bb9c0a7ec34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cdc425-c444-475d-8799-02ba4d162e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e81ffd-ca79-4aa7-9bcc-f1c7176b0e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c37255-c3a0-4f5a-9ab7-f2a49877c326",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d789783b-1a90-4ac7-b60f-a78c5cb94505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec86d058-7a1e-4fc9-9436-72edf8c6a1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16925a5-11cb-448a-a72e-71dd1ebf1971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f9da9f-63b9-4d1f-b0da-d114b912ac68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c216c2-caa7-4f61-b24c-66c143680504",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31399c63-7044-4a00-ad4b-ecf668437b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd70684-da20-4291-a07b-c0ead37bc456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ae1870-b217-4482-80ec-f7b4d25a0243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a7050e-c0ac-4529-83e4-09131291dea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780ea028-2376-4443-a2c4-1a4c593e4f6c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3374dbca-d752-4eba-a40d-159c5e412903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5414b501-6a87-4b13-b6d9-3beeaee6a96d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0bef77-fd0d-48c2-8e83-a903bdda4703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c724c3-0daa-4f4f-893f-687744f1a951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b69a618-f2a6-4067-8f39-e8e765c599d7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefa125f-da2c-46eb-8281-cdc146761c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3bfd0af-1949-45f2-9802-90000cb53e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b6f30a-dd48-4b5c-9f68-29ab7c8e2e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f14f59-ad7f-470b-9b99-438f85326194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ce3aa9-6fd3-460e-863b-489def8f4d51",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431c0d1a-bc93-4869-99db-b433dbd37d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4934fff7-d0b5-4b1b-9668-8afea7ed91ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5e89b9-5464-42d2-bdb1-ccba783e6de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5df7aa-ee09-45c5-a24b-4bcabc3100c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93dba15c-82ea-483c-a3b0-8c3a1209e8b3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6272694b-c6b2-437d-b0d4-2e9b2f3b52eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ebf837-564e-4304-8704-d2753b98c75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d04aae-a1af-46fd-b4e5-44717c1032c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baec3170-23e6-4b53-9400-c1630524d4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d196bc-fbd3-4600-aa53-e0a172567525",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9c0a11-939d-48bd-9ecc-d742c6d1db03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d4a59b-51a4-454b-a6bb-1c1a6fe31ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28451ed3-4e72-4125-b4dd-a4650263779d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ceb8845-eba7-4f44-9fa3-76be65d3ddb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6eda12-9a28-4ea8-ba99-11837aa6d147",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be73ff8b-781c-436e-aa1b-2b97572997f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b352461-512c-41cd-9c04-7ae92346ae80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56dff9d-37f2-47b9-8cd5-f67322efd632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d3438d-54f6-40b9-ac61-59a444e768b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173f4852-eb8d-4118-8b8d-53589589fac2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f72102-7455-4a69-b4c2-ffa2be353f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d755d8ff-47a7-456e-a167-06b4614cda7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650219b8-00cf-447b-8827-c8db4b555e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1fdf15-342c-4c6e-bec4-dfa9dc0f43a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f89903-3586-450b-9d54-ee84d67f901b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7897446d-d0c4-431a-adaa-0475e8103761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7586be24-7064-4ced-b219-d005f9e5f800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1767a2-468d-4b07-a682-d0d7f10baa02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c80b157-04e0-44a8-ab47-9b0258b3bcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d78ffe-6b95-49b7-8365-6a602780959c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b447297-b6d6-4568-b663-a1229aa2d2b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88755a39-00a4-4777-842c-951781a025b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e99cc06-8637-49ff-8c8c-fc785ecafdcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcac11d-b815-4b32-95d6-db45e196721e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d59bfed-871f-4766-972c-9ac484ec63bc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afa540f-3317-4138-9a6c-f51fd67984e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22cdfd12-c4bc-4fd9-b94f-43fb0ec64254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07af536-8ae4-4a29-aae9-3398b9069a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd8ff0c-5c64-4c5d-9127-a174bf4eb80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501d232b-5b64-41f0-9d53-e195f3d96d17",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97bd64e-68b8-4dce-9611-13e6cdb74bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fc4ca43-9441-40c3-b68b-bfc9457d1088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1e2aec-03c6-41ec-94a3-c5543b585158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edff8741-18bf-492a-b734-82a091ab959a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e9a21a-c635-4fd5-bd48-f47e5cbfc7ca",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d77c8c-1304-4a1b-92be-82b64202ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8bc4e86-178d-4da0-85f9-3717cb11fee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57150dc7-4f2d-4ba5-a56c-d1bd79e73355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7640854-7b37-46d2-b4e8-f01b9e35bd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b237ac5-eed2-4182-b628-f8741e7a798b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e0f180-f058-4c87-b7ce-be08370851e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2a698b1-4f60-4dbf-9fb1-84b388836021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5608b68-e890-44da-98fd-d32f91cf70cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f12959-9848-4033-9381-df93d292b65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc78079f-e687-414d-9910-1f892b176eae",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1ec688-3450-4ccc-bfa2-caadbf0b8c54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a6a4d0-71ae-4f51-9812-2eeda9f96d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e23750a-b937-4a43-acf4-2ea0c58835f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7b0ef1-980d-4853-bab4-961a6b3524e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f62a5c-699a-4e16-b28b-f35dc6f81aa5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510d1c07-a348-4f87-95a7-4cb0deb7a78e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee404923-cc12-4520-b742-535662893f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceae35e6-0d34-4e20-a4fc-d19989856723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d0cb83-c585-47c9-8455-28aba017042c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a45455e-83f8-4bbc-80c4-1b29b7f48699",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b14688-ded6-47f0-91e3-7ec4a85d171e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2a1614-8bb7-43eb-bbdd-322ac2d4a69f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "924944bc-613d-4c54-8f9e-da282cb41ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cf280b-e4cd-4679-8f20-032cb7629abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1186c5fd-63df-42e5-a847-a051cf4af04f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa75a679-516d-47f0-9eae-e2f71b27c373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "860237cf-91a5-4280-9ef6-ea217db5de9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42e74f5-872d-4596-a48f-3e5d0f94fffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26fe5486-f808-4fe9-8778-81cb5bb56c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec8ef08-fa4f-4a8a-ad90-6bf11e1857d1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfabf955-70a8-4f9d-9e79-5ed269fe4ae7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50082300-0e01-4e67-9637-545f596c6570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3caef42-cf15-4ea3-8d8c-1dae35814ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094fce8d-d737-4475-8498-b08a0c679f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612e41e7-8fcb-49ec-a462-7a102f0dc07e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c13525-478c-487b-b6ef-2bde6aee69be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f86fa0fc-7a74-4339-a800-84816335e37c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f26bccd-da8c-4ff0-a3dc-2826b8e294b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500264a0-3339-447c-a8f0-a60168c86069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0f91d2-deae-408b-8877-8b4762007036",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549fc2fd-1684-43ed-ac6b-7f0dbecd3b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88934e9-bf96-467f-8c07-b9bcb1541ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07045c20-f175-4406-81a2-99de3f5c333f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b5178d-f8c1-43b1-915b-259bc37b46d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43066fe9-a132-48e6-8a1a-8f8ef3f228e2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a598b36-1416-4e72-8f12-7dfd62602281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4fd9581-25de-44f9-ab40-da65f5831afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7051f043-02b2-4fe1-b269-d489e9fd5a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8569ed0-18e4-4e58-949c-cee1374c79a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d60203b-c389-402c-9c47-33ad4fefed37",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415def97-bb4e-4385-8e4c-5a03a33ea613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ad975b0-a6a3-4913-b9bc-01191ca372d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dcc218-da45-421b-87b2-9c18498d19a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099fa322-b302-4fb7-900d-6073a47d19c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b644971c-cf3c-4173-9e49-59b9b2b51981",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310c9af0-85ea-45f9-8fd9-2ef566907d93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14f157a4-9a7e-4ad8-b1a6-740213320425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f6db90-2c9c-4a47-9dcc-b68a2bd4e760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6517e4a-b86b-4e6c-9e05-d544dedaa536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7ea3e4-14c5-48e1-8dd6-a329761c4e1b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfabab64-41be-47ad-9526-677b7e474a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c46cdff-6c43-476d-8cab-7800adbebb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed03d20-cc36-4642-85a8-70f29c64a421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4cca65-8acc-49d7-9347-15d2d2ab2d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729e8d30-c59e-4817-a26c-e98e1944404c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a1a95b-80c5-4655-85f4-085c383959bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f05e660-1cae-4f1b-bcda-2183f63ae634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673dee38-e6ae-473b-a09e-875db22a4c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89769f52-89ba-4b11-80c7-2b91cc480812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2082fa12-25a1-4572-a52f-a062c7919ea1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0137a5-864a-49d5-93f6-82e87537e05f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18362ba3-995b-4a2d-9298-d3b347454d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb691ac-494f-4816-ad43-0d6921e72cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba99564-370e-4315-923f-a5409752bbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7848849-51aa-4f6b-adde-2c7ed3452f26",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2280fb9-ce1c-4165-8dcf-c697128a4e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5852063-7247-41ee-be76-52e3af40ac36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d209104a-8ed2-4ea4-842f-5d898e243c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb08c617-45fb-4584-a541-1f892c815270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b401dd8a-36e1-48c4-a9d0-0a0cd9b818b1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee0d53d-cef3-4170-9ab9-5429796e18b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0d5e82f-44a2-472f-8181-bc5bf264795e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47777aaa-6ad5-445e-8575-96b6f13b2119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4c37d1-0fc9-4724-ab81-396298d1931f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04a1c86-a34e-4f94-920a-7bca88db079c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2026ba60-f152-4cc3-99a2-58f2a3ff2f49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8d4e076-0f95-4439-bdba-c166d9ef46d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3db6540-a605-4bbe-9efa-ec3571241be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fd6941-e2d8-47bc-a702-74d2c8bd52a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9515b900-4ce1-4d0a-a9fb-8a21e0f053ce",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93571070-399f-41a4-aab3-c12d4fc4dc77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa56199-2d79-4b5f-8b31-ce4e94fed279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d31a093-240a-41c0-a592-071790f3af08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe84876-1816-41c3-9e23-53ca22b86a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71e7b11-7862-4522-837b-8ea2c0088874",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f3d006-7d07-4665-95cd-e4835313f605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e263092c-8cd0-46b6-b01c-44e740cf1de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dcca30-8ad5-4c71-99f0-68f66c4c6411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f70b8e-071a-44b9-a6d4-5f8a3310c76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ccf956-a5d9-4285-91a6-df00d52ad45e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac3d7ef-b5c4-4199-8b7a-dd6d9781502b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05cb1170-a636-468d-a855-9a6c4567e3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4977a5-332f-49fd-9dee-515778b40914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e15001e-c343-4b65-919b-3050afbf6427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa9ffdc-91e0-4d85-b7e9-d92228b25d7f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfeb5f5-c09f-4ba3-ba67-9a5c8f8fd69d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a33080-b765-4682-b2d6-68fba9fda7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b041b2-c207-44de-8c38-431e165be7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edff574-d946-4732-903b-9a03c5dfd8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dcc8f4-60fb-4534-8fb2-e474f56d516e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1540f479-e0f8-4664-b05f-070dfe422a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e77d7d-7b89-4907-8971-fd9659367055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c32ae5-56f8-4bae-b327-74d22e12be37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a16266c-5718-4fa4-8352-04ec4794f5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a827fae8-c1e4-4947-a223-69776543e1fb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b940e6a7-9a2a-4e15-85bd-64304c4636e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dfac0b8-1aa9-4a88-b3d3-cf67a95fd412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d571f843-85e3-42ae-926a-2e9e101a634a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91125d35-fb85-4dcb-b569-9e84896673f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a40cfd1-8277-4faf-abd2-ebe377a9b873",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802ed65b-ebcf-4b7c-a265-2ce6e98b44a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8e5b510-2da2-40c3-a852-4ae4f061cb7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e30b958-8d0a-4390-9e83-948c3bd66a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5a54e5-6849-4827-91d5-3ea80ac3454a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0f00d0-5b13-4f36-80c3-0a90428b2f8e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9875678-b037-461b-a66d-cb973fc6fe3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d535017-3c34-4342-9987-aa5caab0dd05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34989330-0232-4e58-a42b-b42a1326a995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a07e2b7-c003-4353-a31c-2cf2f7d9e492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f96854-3d1a-48a3-b080-4962d3981ff8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1065910b-c64b-4b4c-b9b5-68f95a34e5de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce37208e-fa75-420d-a533-5a5f04cd912c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a17233-31c0-43b3-aa12-9240a7bce276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07d8910-4478-40b9-a0ae-6995e655cf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9476b66d-c6dc-4999-a4a8-9c6af44ad361",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bc87bf-baeb-4c40-a658-cc3ececa288e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffcb35df-fbea-445a-9f8d-6b9ef71d7ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d7da88-e506-480e-a96e-a1649de41bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ca16cc-baf8-403c-ad17-5654efe3eb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68c2d0b-2f92-405b-9427-7914dbbd725a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ce8ea7-9be2-48bf-946e-80b31a0ab620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86695992-d65b-40b8-9c6f-92d964d0b5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef15228-f437-46b4-9965-72fa775d6a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b350c3-e72b-44ef-b948-2c66d73023c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ccc62b-f309-44b4-ac56-da8a60c4685f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb554f7-bce0-4748-8536-3cae5528168e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7cf5b34-9276-447c-9a6f-922d5cf57ed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ca9619-2d04-41cb-86ab-efec365a9acd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03bfcc4d-cfe6-4530-afd0-858b42c1ab4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a47b2de-006a-4ee6-93ba-87de4c8c6ca2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4afb507-c592-441e-bac1-d66475ae6e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "947cb9bb-18ed-413f-bcff-4812a751e0ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e05ca60-ef93-4dc1-80a8-f152a2bde450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545e4d16-d3ae-444f-9fd3-131932a2d9c9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6909814-3981-4c6e-9961-92ad13e1c7fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "829fd20a-6cd5-4d7e-b0f8-69fa1f4c4238"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "162b3567-594a-46fa-8989-4e36ce495d0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "459c6c1f-e2f6-47dd-bc06-cb96b27ae963"
                    }
                  }
                ]
              },
              {
                "id": "0c5f4194-c01f-4135-af82-95377542e067",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98d1bc32-710e-440f-88e9-40d2953bd9b2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a200187b-c2b8-4848-a6bd-8562d7a8b9a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f4e7e456-9c7d-4fbe-8653-d11ef84fd027"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e951ee8-49a9-49c1-b1f8-35fbc38d5a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31e71543-5f1c-4051-81d4-23c4d64e23f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e1d1a82-76d7-47c4-8514-5d6500e79783",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "734c9dfc-c6ec-4e90-9c49-0db6dc2f5a56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba03ff7d-0b81-4bfc-8770-d77ed9090a33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8879eecf-9c03-4fc3-9e60-d3b7a10f3337"
                    }
                  }
                ]
              },
              {
                "id": "cf849653-4af2-4298-af92-17b0f32a4441",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b4a9440b-b185-44a0-ade6-5bd4f1e6e19e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4f321e-590b-4852-9f4d-6a62625023b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6cd65e8b-614c-44c6-babd-26d5698dd095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203a4e96-2ab5-44a6-b181-654d9be8e187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237bd8e4-1fb6-4098-9d29-1f6ab118b748"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2b448f1f-24d1-45dd-991f-880029ed943f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9b27a6a5-7998-4be7-b375-eb7d7b6cbd31",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aba6c51-3e58-4c14-a2e7-8e272e08d7d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a43b225-c7e7-41d8-8015-c559b99587a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "735dfcec-8fe5-46eb-bc4a-0bba241ddd73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "398b2fbb-d0e0-4e1d-8adb-b7485d39c37e"
                    }
                  }
                ]
              },
              {
                "id": "886d7e25-2c90-4d26-9e74-c66cb81d5220",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b73f234a-676e-47a9-aee4-9fa5a8fc3aab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8de94077-e3b7-4a5b-a433-c97ad5458ff1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85c7a0dc-4285-4b1d-bce8-ae58343701a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f289178f-1c98-493a-bc32-6d9cdc888306"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d132e658-3c5a-4229-ae5c-334007faf6b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "75d73b47-8a76-41b9-92b5-ebf1dcdbdb8f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bb6e8bc-3743-418e-993f-f181fda90f34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11f49a15-5d0b-445f-8f18-9ea455de3be6"
            }
          }
        ]
      },
      {
        "id": "270dbc46-55e3-42ba-bbdb-04dc3d15a780",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "099b5f91-5c5e-4122-8902-b82db21a14fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c2a39ae-8925-482e-ba0a-02060a831613",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "495f724a-0f9d-407d-bfb9-8b393e70752d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e992328-6ada-4185-8eac-ff649a5c04f2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9b6ef532-e9ef-472b-aaac-b821c9971cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3d70b3-b164-4a74-ae76-e4c100012b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "feeba3d1-011f-4a56-8b86-90c5f5239654"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d0ac379-3aec-4f74-84c1-65407b939497",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4924a07c-8d59-43ac-9c7a-60e917d7bba8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ef16674-457e-497f-9b44-388cafef524a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61756024-10a0-4f27-bb4d-39a5db405d63"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6ae0fed-84a2-4bbe-8d73-1a2c9b87af63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4562998f-e4d3-4200-b2f1-9e99a408fc88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59ccb652-bad9-4b16-87ec-7fea123454ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eeb98407-fdfa-4359-909c-4a0677502c5a"
            }
          }
        ]
      },
      {
        "id": "3957a762-386d-4e82-8af4-e9119c3a4519",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e1b92de2-1f6f-4e26-9c0a-9b37c77be8fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d99c4f1-eeb3-4052-9c69-53f76596faa8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0af6ecb1-22b8-4e4b-aa6f-d78c044edef0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031aed5b-2235-4ba6-ab19-aecb29f5ee5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fb708e7-bba3-4910-9ee6-708f385fd9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b99c6cc-12a6-48fb-a1aa-796381204cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b82641b5-efcd-4d7e-88df-2e11de4a6bc3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac9ce3f0-1bae-4905-b283-bf08bf52e6fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4947b05b-dbb4-4797-8864-b99295dc3d42"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf15d044-b5b0-4135-ad45-ba76beb5d372",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "839a8357-0ff1-4627-89e0-9333a9b8af01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7782fd4-8f80-42f8-a3a9-e175b2d0b8b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "665a13b4-b71d-4c9f-ac80-d7431f898ab0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf0fa7a4-b0e0-4679-b02d-8e8a30a2e2ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b68bb634-3498-4719-967b-f1e5035da34c"
            }
          }
        ]
      },
      {
        "id": "d2568e07-fd0c-4288-8486-e36d5312f0b8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b09f12b9-bcc1-4947-b556-b805e1115ade",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3656c33f-6312-4440-b74a-ffbe9c6a6828",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14832b24-db90-467a-8408-4e630d0e329d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94a9c60-de41-4273-8949-0336b9d82569",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9006546b-4cf8-40f3-8277-f50261f75012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f707a6-d3e1-4974-b8b6-2912e3dbeca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ba9132a-648e-4f46-ae0e-aaae9597c98e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab6b347f-cf39-4ba8-9010-8bfe7d751a9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92fbf0a5-0c87-4f1e-9041-446111f69b2d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a1d26b7-5170-4141-a115-697bf071f13c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47d759ad-c8c4-456b-959c-ea3e14daab22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08428266-d724-4048-bdf3-a392401d6546",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8cc7659e-ea7f-4198-919f-22fb38838166"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b55112b-b2b7-464b-8296-965cb1ae37c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "05d58392-7154-4c43-97eb-96b766e2d9d3"
            }
          }
        ]
      },
      {
        "id": "ab218130-1106-4326-ba00-68f6569d33d6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa455e52-4684-4ccc-a953-0c815eda5845",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b083fb2c-4232-4cb6-9c46-c8a0e0133402",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3bf65ece-e932-46b0-9507-efec4a280a29",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a773a27e-f9fe-40c2-a78d-f7eb895e2fcb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d5a4783-3c07-448e-8f56-8d49b03376d7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.77543859649124,
      "responseMin": 5,
      "responseMax": 2677,
      "responseSd": 167.7638443375476,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711845513875,
      "completed": 1711845539724
    },
    "executions": [
      {
        "id": "84cf28df-8707-47ca-af48-bebf703d7630",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ca566cde-7602-47a0-9aa2-33329de3d7c8",
          "httpRequestId": "c0945361-f7bd-4436-aa02-1f62f0b6f248"
        },
        "item": {
          "id": "84cf28df-8707-47ca-af48-bebf703d7630",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "76292d95-df0a-4a93-8d71-d318e2babd70",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "6b8d2e5e-2474-40dd-99f1-c29f5cca7299",
        "cursor": {
          "ref": "457c8694-70df-45a3-b340-a32557fc3749",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2918db77-42be-471b-b01e-8c4744dde77e"
        },
        "item": {
          "id": "6b8d2e5e-2474-40dd-99f1-c29f5cca7299",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bccf26fe-6dd0-41b6-9872-9e525438caea",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "150536c2-b68a-4b7c-b34e-750e9753a2d2",
        "cursor": {
          "ref": "f3a001f7-4c0d-4b24-b92f-d4a38c48adb7",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b0d05df4-9d1e-444b-aa7f-b88968e583ce"
        },
        "item": {
          "id": "150536c2-b68a-4b7c-b34e-750e9753a2d2",
          "name": "did_json"
        },
        "response": {
          "id": "2e00b871-bc57-43fa-ae35-8e4c1989bafd",
          "status": "OK",
          "code": 200,
          "responseTime": 2677,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b612244d-d10b-4ccc-9fa4-ddcdbb2b18e7",
        "cursor": {
          "ref": "daa730b7-a674-4a8a-94ae-2db186f0d65b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d0f1cb1b-2020-45cc-b7cf-fde5ee885dc8"
        },
        "item": {
          "id": "b612244d-d10b-4ccc-9fa4-ddcdbb2b18e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "f1bad00b-9677-4280-8fc6-0c23facdf2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b612244d-d10b-4ccc-9fa4-ddcdbb2b18e7",
        "cursor": {
          "ref": "daa730b7-a674-4a8a-94ae-2db186f0d65b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d0f1cb1b-2020-45cc-b7cf-fde5ee885dc8"
        },
        "item": {
          "id": "b612244d-d10b-4ccc-9fa4-ddcdbb2b18e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "f1bad00b-9677-4280-8fc6-0c23facdf2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae3bfa3-080b-456f-822b-5feadf1d9161",
        "cursor": {
          "ref": "cc42c20b-b5a9-41b5-854d-0e416a093de3",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1f4f5a20-0fdf-4647-8124-8d7c9e76a3ea"
        },
        "item": {
          "id": "5ae3bfa3-080b-456f-822b-5feadf1d9161",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "49662b09-76f8-44f1-b8d1-2c4234051765",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13b545d-6ac1-4b69-8cd2-c2b56bb55df4",
        "cursor": {
          "ref": "7c575683-70a4-4478-ab11-ff02154462a4",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ad20a7f4-350c-4c03-85cb-c0f00312ba59"
        },
        "item": {
          "id": "c13b545d-6ac1-4b69-8cd2-c2b56bb55df4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "319c7961-1a03-4384-b528-ccbd4a6b3e64",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5e597e-37ed-44a3-bbc6-e131181e718c",
        "cursor": {
          "ref": "21d7b09c-c003-42fe-a738-8b60234fbf2f",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "110210e0-6c58-41a5-9844-92d36fdf7ce5"
        },
        "item": {
          "id": "bf5e597e-37ed-44a3-bbc6-e131181e718c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c11f1994-f66d-496a-922e-ade546367242",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76420d5f-7e2b-4373-a78b-b1e82b5af3b4",
        "cursor": {
          "ref": "5aba6f6b-9236-433a-a1a6-0fa5ae267d38",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cea8c3b0-7eaa-4df5-a0ec-c1f611948b23"
        },
        "item": {
          "id": "76420d5f-7e2b-4373-a78b-b1e82b5af3b4",
          "name": "identifiers"
        },
        "response": {
          "id": "d83405d1-cd34-4173-958a-f280ef072862",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d17837-2646-4d0e-9e67-5bd392067ae3",
        "cursor": {
          "ref": "e352156a-1d01-4ccd-925e-4c45e12d5204",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "175e259e-a45c-43bf-933c-8a98e74c3593"
        },
        "item": {
          "id": "b1d17837-2646-4d0e-9e67-5bd392067ae3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "916c91ee-c2e2-4ed5-9080-ed615f524e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47ed393-0df1-4cec-864f-5f442975f0fb",
        "cursor": {
          "ref": "18fc05d5-81c1-44f3-8e43-fa5dc3169505",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "53fdbafc-15ff-4513-bbf9-6cea5696c363"
        },
        "item": {
          "id": "a47ed393-0df1-4cec-864f-5f442975f0fb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "25c0bccb-7a12-4cd7-929c-b772cb6d46eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a515ef4-5f3d-4637-a5c3-233aa0d58021",
        "cursor": {
          "ref": "a5bc6193-d3c4-4eac-b728-4597cfe7423c",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "99fba2be-20ff-44e3-a8e0-0aaf1676e0dd"
        },
        "item": {
          "id": "7a515ef4-5f3d-4637-a5c3-233aa0d58021",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ebecc21e-379c-4e43-8280-204337c20387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f1e559-9aaf-4b90-b5fa-57474fee050c",
        "cursor": {
          "ref": "22494656-f137-4c66-80d2-d8449d9e8d3a",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "38c4a161-a134-4692-8158-e6556e8e82c8"
        },
        "item": {
          "id": "90f1e559-9aaf-4b90-b5fa-57474fee050c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bf24a2e2-56bd-47b3-b702-c4b114a193cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22180d59-d657-4838-82f6-50d10266319b",
        "cursor": {
          "ref": "cb6a6028-d8b4-468d-ae6a-020993850e49",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ce5b8fce-735f-4bdc-a8a2-4e07bc22d725"
        },
        "item": {
          "id": "22180d59-d657-4838-82f6-50d10266319b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d751845c-13a7-4d37-8d13-5fc78f3f446a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cde13d-3ab1-48d3-b0e3-d033461ee923",
        "cursor": {
          "ref": "e7e54b19-8a6d-4a62-aa7c-dc6070e21005",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "35a2edb2-4a47-4f82-adc3-0429e083d1df"
        },
        "item": {
          "id": "b5cde13d-3ab1-48d3-b0e3-d033461ee923",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "28191669-9aed-4169-aaee-158d1c6dc3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97dbf974-0793-4294-ba4c-cf1501f105d9",
        "cursor": {
          "ref": "714a8657-23c1-4da0-ad06-afc47da4fd56",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ac2ad171-3dde-480e-894e-a694c2009852"
        },
        "item": {
          "id": "97dbf974-0793-4294-ba4c-cf1501f105d9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4ef84ce6-35f1-4520-a416-644b8a0aa3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2055beb1-345f-4c01-81e2-f09edc47f05a",
        "cursor": {
          "ref": "b744f8b3-e074-45c5-bcab-f0c32c632bef",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "617b5c3f-8af9-43dc-8dcc-352ef9259824"
        },
        "item": {
          "id": "2055beb1-345f-4c01-81e2-f09edc47f05a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f1857a2d-e591-42fe-a886-20c3323f9a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ce2c39-f817-4305-8bd4-d33e67511458",
        "cursor": {
          "ref": "f6045d77-e61b-4a63-9419-8f67abdc9c6d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1837555f-1a07-4f8b-9728-e158e9850a29"
        },
        "item": {
          "id": "90ce2c39-f817-4305-8bd4-d33e67511458",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9102d1d1-e176-4b59-8cd1-bcad5031da78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f719b3-0fe3-4dd7-8364-7f268ad43b5e",
        "cursor": {
          "ref": "70bdcfd5-e9ce-428c-9267-9fc1707bd489",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d1bfb716-0192-4ee9-890e-bba02a6ebeb5"
        },
        "item": {
          "id": "26f719b3-0fe3-4dd7-8364-7f268ad43b5e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d9f6c8d1-4971-48b6-813d-b7c468bce3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c34842a-5534-462c-82fb-237ca154668f",
        "cursor": {
          "ref": "4de04316-0547-4000-93e8-dbf4141f4c86",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "129facab-a93a-4c4a-9ae7-e88092ca8ccb"
        },
        "item": {
          "id": "7c34842a-5534-462c-82fb-237ca154668f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "392f9996-e271-4157-a88e-dc737e0d8374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f791365c-73da-4a3c-acad-90dbf1d7fba2",
        "cursor": {
          "ref": "d58b6863-d616-40aa-9f35-0e0ace81f4fb",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cf57d228-6f56-4145-ab3b-a9914f6d72b0"
        },
        "item": {
          "id": "f791365c-73da-4a3c-acad-90dbf1d7fba2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bf1a7ac3-5ed2-4b25-9569-1e4fbeca3aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a90d615-dfe1-4f86-842b-a5b03d822218",
        "cursor": {
          "ref": "6d446635-935a-4aa7-8d95-cb8db6ec9a8a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "72e2ffe2-bd86-43fc-a7e8-628afe29cb4f"
        },
        "item": {
          "id": "4a90d615-dfe1-4f86-842b-a5b03d822218",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bd1a2eb4-7036-4b87-a65b-d4298c7d724c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd18379c-af68-4441-be93-d9356d574ae9",
        "cursor": {
          "ref": "d0b85549-bb3b-4c99-895f-8106f8ef626f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f3695e1e-e1ec-48d4-bde6-1cbe00e9d9bf"
        },
        "item": {
          "id": "cd18379c-af68-4441-be93-d9356d574ae9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "20e12c3e-569c-41c8-947c-33fc78cdbe8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c79a647-b9aa-4a2a-abdc-e5d4e6ae7752",
        "cursor": {
          "ref": "d576ca21-eacf-4943-bdc3-0ffb1b282f11",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "00e6157f-8246-448c-93bd-128b3ae08e81"
        },
        "item": {
          "id": "4c79a647-b9aa-4a2a-abdc-e5d4e6ae7752",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f511eaaf-b613-4c83-a817-cbb22690073b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb93fa6-725b-4628-9fc8-1851d796c94f",
        "cursor": {
          "ref": "a311e4fd-476c-4b5c-87db-6a2eb989e70b",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5924f188-b250-43fc-ab68-0a06315fd63c"
        },
        "item": {
          "id": "7fb93fa6-725b-4628-9fc8-1851d796c94f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7ae204a1-32e1-4003-8491-3dc98bf6700b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3097ed-a59f-47c0-bffc-b995fd06f1a1",
        "cursor": {
          "ref": "216c58e5-9f09-47c3-a822-4d41b8f40f39",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dc90eba7-588d-44a2-ba16-c8372be72326"
        },
        "item": {
          "id": "cc3097ed-a59f-47c0-bffc-b995fd06f1a1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "61237916-0eab-40c8-8726-72bd7daf6144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2424ff21-343a-4000-b8b5-78dbdeeed49a",
        "cursor": {
          "ref": "fee15d56-c1d0-4d5a-a555-cb1a974f727a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b95cb7fd-fe96-45c3-9757-51dd5b2ab7d2"
        },
        "item": {
          "id": "2424ff21-343a-4000-b8b5-78dbdeeed49a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "33ecb48b-9b94-40fb-94e0-1a6da8c20325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e65a4fa-af96-4704-b9e4-b2df6d950c77",
        "cursor": {
          "ref": "7eb65962-8eb7-402d-8e59-bcadc0f76486",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f4de846b-1785-4bdf-b80b-049d19158f41"
        },
        "item": {
          "id": "2e65a4fa-af96-4704-b9e4-b2df6d950c77",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f3e9b1c1-3927-4259-97f4-b39e12e50fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b4fbf3-094c-44fe-9e68-414b6560a885",
        "cursor": {
          "ref": "cb571f82-68c1-4136-8f43-2ddbf598a284",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1aa58487-9adf-4d7c-9c7d-68b3c30a36e4"
        },
        "item": {
          "id": "c8b4fbf3-094c-44fe-9e68-414b6560a885",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1fdb61e6-e620-408e-9881-9f3033231650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04866d9d-b581-422a-b8b3-6811794365ad",
        "cursor": {
          "ref": "51592ff1-9ee0-4922-a55d-a6f233ac5567",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4870bc42-401c-470c-9f59-8b85cb203e7b"
        },
        "item": {
          "id": "04866d9d-b581-422a-b8b3-6811794365ad",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2dd17644-975e-42ff-8af6-387fdc559a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd6ea44-8d99-450e-9918-59f93f8b5313",
        "cursor": {
          "ref": "7476c674-477c-487b-b821-7f7813b22f8a",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8c504550-5c13-465e-80f6-73688118a6b7"
        },
        "item": {
          "id": "cdd6ea44-8d99-450e-9918-59f93f8b5313",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "385ef4ef-442b-496c-a1c5-9595c742772c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31369154-b2f8-41c9-93bd-380cd6517997",
        "cursor": {
          "ref": "bf896f74-cb2c-40a2-a968-7d49200fae49",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "62d1dced-d01e-4f74-91bf-127ec80e52a2"
        },
        "item": {
          "id": "31369154-b2f8-41c9-93bd-380cd6517997",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f484b7fd-122c-444a-ac5e-21f3941cf25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1df554-7c4b-414f-858b-a4b19732ec57",
        "cursor": {
          "ref": "cfb9b386-1e04-44a9-aeae-577fe0d30515",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f32a1217-68df-454e-b154-f534df1758b4"
        },
        "item": {
          "id": "bc1df554-7c4b-414f-858b-a4b19732ec57",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5478874e-0dfb-457b-8d49-43619061c148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d35158-536d-45c1-976b-3a013d885c41",
        "cursor": {
          "ref": "7e59f070-d3f2-4881-baba-01d5d6ceeb8a",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e79cf09c-95eb-422c-afec-ae7007a3cd0c"
        },
        "item": {
          "id": "36d35158-536d-45c1-976b-3a013d885c41",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f54e3f35-81fc-4ccf-9dcb-93c510fb898c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870a0c67-d11c-4236-8e94-d6d748636dd1",
        "cursor": {
          "ref": "d19f5331-7cae-487b-990f-fb6c502b1e45",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "3536e39f-10ed-4a19-9304-259f88132ac5"
        },
        "item": {
          "id": "870a0c67-d11c-4236-8e94-d6d748636dd1",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7fae0498-6537-4f59-9bb6-930dd39d42ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecd5daa-c701-44f8-9404-c75f8b4f2675",
        "cursor": {
          "ref": "b1d0f4dd-aa48-4b92-8853-ef636fc98cea",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cf4c8b70-fba2-4de6-b4d9-828aa4e46ad5"
        },
        "item": {
          "id": "4ecd5daa-c701-44f8-9404-c75f8b4f2675",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4f27ad3f-30d4-4bf2-a479-873de9948bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0cf5d1-ee9e-4b3c-94be-6d37b69318c0",
        "cursor": {
          "ref": "469bcd42-2e6b-4a84-bf34-11590c249881",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f2b3a87e-7f5b-468b-813e-afbc38c59a6d"
        },
        "item": {
          "id": "3c0cf5d1-ee9e-4b3c-94be-6d37b69318c0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b016a6dc-aeff-4e8b-bf53-4fb770dac91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1913e978-92f4-4f44-a515-e55f7dfe430f",
        "cursor": {
          "ref": "a38e3a91-7260-4ea8-82c0-49280554cc65",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4983881d-2255-4edc-b648-9f4e902aebd4"
        },
        "item": {
          "id": "1913e978-92f4-4f44-a515-e55f7dfe430f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "03eb0491-78dc-4662-9e6b-808e8d4866f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7bae13-692c-44a5-b1fe-d11fb7b92d5c",
        "cursor": {
          "ref": "4d7260f8-d9b2-42a9-931a-a31e013fb725",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9f92bcc0-d0fb-435e-8c3d-d7ea208f6546"
        },
        "item": {
          "id": "9d7bae13-692c-44a5-b1fe-d11fb7b92d5c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c5376414-470f-4870-9f08-532b6f183742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3278310e-e533-4075-9234-b1d155c5ff99",
        "cursor": {
          "ref": "5fbfd486-9943-4d7c-b15a-7ab3966d1ff8",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a566bd2a-692c-403a-a28c-2802a40b048a"
        },
        "item": {
          "id": "3278310e-e533-4075-9234-b1d155c5ff99",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e74053c2-fb4d-4b10-874b-e4bb874e1b87",
          "status": "Created",
          "code": 201,
          "responseTime": 613,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2d9a2901-0a9d-4465-a652-459f478504fb",
        "cursor": {
          "ref": "c43f263c-9293-42c2-bf54-13935c0d53e0",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c6b5d5cc-6154-4d0f-afaf-3ad38a43572e"
        },
        "item": {
          "id": "2d9a2901-0a9d-4465-a652-459f478504fb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0aa52b6a-870a-4145-b0fb-093e258c2675",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "458824d4-1ec4-459f-bb0d-bf83ea2acd81",
        "cursor": {
          "ref": "67a3ad7e-9642-44d8-9a0a-a574b67e9c4d",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8337da35-b1d4-4053-8420-d36ba75575f4"
        },
        "item": {
          "id": "458824d4-1ec4-459f-bb0d-bf83ea2acd81",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "158d9dab-d52d-4357-9653-7db56279926a",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f814edbf-7929-4686-886b-777eb4f8f878",
        "cursor": {
          "ref": "32886dbc-b3f6-4262-8580-bf44738e31ec",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "34c60810-f1d3-4e07-8996-46f6764eaa33"
        },
        "item": {
          "id": "f814edbf-7929-4686-886b-777eb4f8f878",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "71db8934-0823-4966-bb4e-f3eb86a9324d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fde4cf-56ac-47a2-89ca-897234fd2dfe",
        "cursor": {
          "ref": "74054f21-d368-46c9-b78d-89e5508f3231",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f05ee0da-bd87-4b4a-87ea-d7fa9c5775f9"
        },
        "item": {
          "id": "45fde4cf-56ac-47a2-89ca-897234fd2dfe",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "542a9437-8463-4226-95cb-3eeaf95cb9f8",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "59dc1b20-814c-4d21-aac3-6654dfb7134f",
        "cursor": {
          "ref": "9b5e0fe6-1842-46d9-9fbd-165698c74455",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8dda40ba-5267-4301-a313-ab461577a8c7"
        },
        "item": {
          "id": "59dc1b20-814c-4d21-aac3-6654dfb7134f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8a482aae-dc93-4385-a646-9c4285ecd4b0",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "85984762-fad2-4e5e-8202-c65a519cdf2a",
        "cursor": {
          "ref": "4cc74138-b369-4198-b4a6-9d5992c4af87",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bbf3b44d-65ed-43d4-a9a0-81ed28fc8bc8"
        },
        "item": {
          "id": "85984762-fad2-4e5e-8202-c65a519cdf2a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c037c0bf-5740-4170-99f7-05af3f62b6ae",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2b30239c-1393-45fb-b0b8-47c020941fbd",
        "cursor": {
          "ref": "f85c52c7-d552-4520-bca5-5dca1a336fbd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "96e12fe0-7da7-464d-ad45-4eeb19edffef"
        },
        "item": {
          "id": "2b30239c-1393-45fb-b0b8-47c020941fbd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7afeb981-08fc-4f07-b3a7-1474ff44a371",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "25fd8fcd-43c4-4a1d-8a0e-2dbcf9ee5c3d",
        "cursor": {
          "ref": "42720845-694e-47e3-8831-744f90870ba2",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "24e7f029-c80d-4c4e-8c86-b2da4e8541d0"
        },
        "item": {
          "id": "25fd8fcd-43c4-4a1d-8a0e-2dbcf9ee5c3d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9cf7337c-2a75-4d1b-8e90-072020431c83",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8d2abef1-8f74-4f78-a890-3e661654a15d",
        "cursor": {
          "ref": "150523d8-b207-4ce1-b1ec-114a46b065f7",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d10d359b-061e-46e6-bd38-853a174b7b0f"
        },
        "item": {
          "id": "8d2abef1-8f74-4f78-a890-3e661654a15d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c52a78b5-139d-46aa-b806-1c3a550e0bba",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b3c532ea-0495-4ced-ad34-06f800925bcc",
        "cursor": {
          "ref": "97bd0577-9311-4e8e-bbdb-a1b22859b6da",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f3538f88-ee1e-494d-8353-1d5da56850e2"
        },
        "item": {
          "id": "b3c532ea-0495-4ced-ad34-06f800925bcc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7aa08e11-4a29-43d8-ae3d-60ac82c67868",
          "status": "Created",
          "code": 201,
          "responseTime": 196,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9bbe03f0-5e75-4ae4-ac96-6f8376ca7568",
        "cursor": {
          "ref": "1480e33b-3c29-4a79-8968-79759b569d7b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "091559ee-8ba3-4a27-8016-47b894f9db61"
        },
        "item": {
          "id": "9bbe03f0-5e75-4ae4-ac96-6f8376ca7568",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9da3f064-b869-4c46-9817-726e973201df",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "55d6974c-7b84-442a-982b-6fac1fb2dcf6",
        "cursor": {
          "ref": "d92515e0-9a1a-4097-9121-9653399a7f03",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dc4ae2f8-6195-45b4-93cb-e85601c5d14f"
        },
        "item": {
          "id": "55d6974c-7b84-442a-982b-6fac1fb2dcf6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "72292f2f-9467-480d-bf35-88249c45697e",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3fe354c1-6f10-411e-812c-59cb05f3f07c",
        "cursor": {
          "ref": "f87f5aa1-5aa3-4d81-a939-59b7e38531d9",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "124ed793-0df9-4b0f-95b7-cfbaf2df4863"
        },
        "item": {
          "id": "3fe354c1-6f10-411e-812c-59cb05f3f07c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84c4a954-53e8-4316-b5fe-03525fe378dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899c29c6-dca7-49cf-b39d-ab63401a772a",
        "cursor": {
          "ref": "1baf8fae-4b1e-44cb-b278-e7e483b7ddfc",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "74f6ec8f-a4bf-48b0-8040-2595c500f01a"
        },
        "item": {
          "id": "899c29c6-dca7-49cf-b39d-ab63401a772a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6751313c-254e-47dc-9f9b-b6ff42e8d8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4081d1a4-3325-4fba-9bad-dae42a933e83",
        "cursor": {
          "ref": "062c183a-34e5-4ae1-ba80-13f9027e0ac0",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f4ab12a0-a1d0-4c1b-a3c1-3e1b5375c5a9"
        },
        "item": {
          "id": "4081d1a4-3325-4fba-9bad-dae42a933e83",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "95c4dd07-cbec-4c1f-be9e-52c3873891a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b0969c-4b48-4196-93e8-078ea2b732ff",
        "cursor": {
          "ref": "23dc91a5-047a-4ece-a087-c5c2b019fa69",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "645ea8a6-0038-4dfe-857d-331b1f6293f1"
        },
        "item": {
          "id": "59b0969c-4b48-4196-93e8-078ea2b732ff",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bdf224ab-a199-4033-9eda-a8f60c557c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2641abe-016b-454d-9dae-2704284f4592",
        "cursor": {
          "ref": "45ed434c-306b-443f-af49-bbfeeb155aa5",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a76a6bf1-d2cc-4b01-a157-2a3f618e8961"
        },
        "item": {
          "id": "b2641abe-016b-454d-9dae-2704284f4592",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a6b855ff-519d-4826-a039-e55c79a563c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9968dfce-0e79-4526-8593-33baab1dfb6b",
        "cursor": {
          "ref": "bfb375f6-552d-4eff-9b9b-d8c1e6855238",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bbd1a828-b6a6-41d6-bd43-4b12502815ed"
        },
        "item": {
          "id": "9968dfce-0e79-4526-8593-33baab1dfb6b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f16219f5-8a1a-435a-9737-e76731fa815b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1646a46a-5806-4255-a406-2a052400686e",
        "cursor": {
          "ref": "8c2f7bb7-1c0e-49a9-8330-354a6d8c7a8b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b79e346a-68cd-492e-a09d-06da3d9fa6e4"
        },
        "item": {
          "id": "1646a46a-5806-4255-a406-2a052400686e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "379d8b2c-f880-4710-a6e2-ed41ffa9b881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbd5911-761f-4621-b5b1-2529d39073f3",
        "cursor": {
          "ref": "29ebb989-a9ee-42fa-9cd6-e7072f682d21",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7d930a91-8d42-4d43-bdf7-86bc0996a195"
        },
        "item": {
          "id": "6fbd5911-761f-4621-b5b1-2529d39073f3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6823b2e3-0ea8-4c98-9bc0-a151dc770cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6361669d-f5e7-4c45-8ccd-3639930b1135",
        "cursor": {
          "ref": "206a2daa-8231-4dd2-a2d8-6db1780dade4",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ba3d6ff9-7201-4c84-8d54-033d7e6bda10"
        },
        "item": {
          "id": "6361669d-f5e7-4c45-8ccd-3639930b1135",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4fb0ea36-9c8c-4bdb-b164-d78869a3fa35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801275ae-15d6-43e0-a0b3-41b20d0de9a8",
        "cursor": {
          "ref": "42e1e930-c066-4a4e-a972-8a1d88ce20fa",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4d47e262-b72e-49b2-9cac-c4e7e1c2117f"
        },
        "item": {
          "id": "801275ae-15d6-43e0-a0b3-41b20d0de9a8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4ecbe0b2-6ef7-49dc-af62-e134033d9063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f437fa-0589-40d3-b614-92de2dda3aa6",
        "cursor": {
          "ref": "152a3ce8-918f-460c-8de1-2d1cbeb9e351",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1ef5d7bb-a54c-43e4-b590-59ac40abc711"
        },
        "item": {
          "id": "30f437fa-0589-40d3-b614-92de2dda3aa6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3555d5a4-3992-4ed6-bd30-c085bcffd4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d853d43-9bf5-45f5-92d7-45cc98cc196a",
        "cursor": {
          "ref": "6c94b64b-77fb-4365-95be-46e3c73c0ba5",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4c7198db-3dde-40df-844b-6c553878e3a4"
        },
        "item": {
          "id": "2d853d43-9bf5-45f5-92d7-45cc98cc196a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "beb0c175-d6bd-49fa-9daf-8df55eb0ef06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b23c8e1-964d-41a1-b8cd-78812e3b5367",
        "cursor": {
          "ref": "ccfa92fc-03dc-4907-8c63-323d18bdd2c6",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d1ea51f0-5cb0-4d3d-a526-3dc8e4925939"
        },
        "item": {
          "id": "1b23c8e1-964d-41a1-b8cd-78812e3b5367",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c04413af-3163-4e22-8b6e-da0261f323b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c648ae01-f7b6-4f9c-af80-a2adf0e1e63b",
        "cursor": {
          "ref": "bb5f7ff6-62a6-4acb-bf55-ebacfaa8b54c",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d83afbed-0891-4127-9699-828cc13545f7"
        },
        "item": {
          "id": "c648ae01-f7b6-4f9c-af80-a2adf0e1e63b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "25b37833-1bf8-47d6-bf69-ba5264cc745e",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6ecd6300-b7f1-4e45-b997-3ecb6a31c138",
        "cursor": {
          "ref": "6715b08f-9fec-45b5-bd0f-62e57472abf1",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0bbd6798-2efe-4c1c-9515-a724558729ca"
        },
        "item": {
          "id": "6ecd6300-b7f1-4e45-b997-3ecb6a31c138",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2ad04064-b837-48fd-b5a0-bb5ef6386fc7",
          "status": "Created",
          "code": 201,
          "responseTime": 207,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e56088b6-3088-4a8f-b716-a90f27fa0c6c",
        "cursor": {
          "ref": "ff38488f-0170-44d9-bcd2-1f1e547c8b03",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6637e568-f345-4d22-a34b-33e4555209a0"
        },
        "item": {
          "id": "e56088b6-3088-4a8f-b716-a90f27fa0c6c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cb4e07ab-146d-48ea-9517-0c3668713e8e",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7142a370-bf01-446c-9d59-9dbad0361078",
        "cursor": {
          "ref": "5cb377f3-00c8-40ec-86f0-8892cc390391",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a920d8d6-7b06-444c-9c9b-97ff32a947a2"
        },
        "item": {
          "id": "7142a370-bf01-446c-9d59-9dbad0361078",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "32ae8ec1-68e9-4e4d-a1cd-c66cfbb8332e",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bfc49f67-5348-4723-a699-8efce641dc21",
        "cursor": {
          "ref": "71aa77a9-250f-426f-970d-2c261da951d1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "17a315b6-97f4-4460-bec9-d5ce8976a7c8"
        },
        "item": {
          "id": "bfc49f67-5348-4723-a699-8efce641dc21",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6cd8a71c-e3f0-44f9-b5dc-ca87505a3d4b",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8e214ca1-7fe9-4591-835d-27cdb2532f9b",
        "cursor": {
          "ref": "3f8ec272-d1a0-4a62-bf29-c93742f05ca2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b9d99038-ac51-4232-84e9-67052b74bcac"
        },
        "item": {
          "id": "8e214ca1-7fe9-4591-835d-27cdb2532f9b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fcb9aece-f727-433d-91f9-14fac416c0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5b3197-ace6-4043-9f41-faf6385137bc",
        "cursor": {
          "ref": "9a417a08-6989-4da9-81ac-392d57d85c82",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "602e4f31-cc03-4905-8ecf-d0511d048749"
        },
        "item": {
          "id": "8f5b3197-ace6-4043-9f41-faf6385137bc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e850ddd8-f542-4fa1-be31-06f11c8c8619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f316b85c-2c59-4515-ad6d-b62ccae72eff",
        "cursor": {
          "ref": "3be013a0-a60d-474b-bc06-13b2007995a5",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6d48fbaa-6bf3-41f4-806a-ce4b680747e9"
        },
        "item": {
          "id": "f316b85c-2c59-4515-ad6d-b62ccae72eff",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "62bf4a7d-0e63-4d3d-84b3-e395773d5f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1f1aa4-2585-4532-8dc1-f78b25baad8a",
        "cursor": {
          "ref": "02b4ea0a-8f79-41d7-a550-d6b1b31f680c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9d8f7a5a-9f1f-45a6-b460-424ebfa42610"
        },
        "item": {
          "id": "4e1f1aa4-2585-4532-8dc1-f78b25baad8a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0fb4f317-1909-4805-a8b4-e5a479f35bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3c746e-cd39-436e-9c2e-a5b96742cf2c",
        "cursor": {
          "ref": "29c6fb23-061f-498e-b004-656d3afd3baa",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8c9dc6d8-d936-4006-9a8d-057f09a17ca5"
        },
        "item": {
          "id": "bb3c746e-cd39-436e-9c2e-a5b96742cf2c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "bbd38835-19cb-4ec5-8ef6-9392ede3ee4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8de40da-76a5-4a8f-a9ba-e86c3155069b",
        "cursor": {
          "ref": "c49f47fb-cd21-4120-85eb-2f0d9ead8877",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a7a87df5-ed8e-4bc5-bc75-51864e2a223c"
        },
        "item": {
          "id": "f8de40da-76a5-4a8f-a9ba-e86c3155069b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3b5055c9-6eec-47ce-afa3-d5a65dce3043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f36c6e-fc7b-45f6-b85b-bb16cdb22cfc",
        "cursor": {
          "ref": "d1090da4-75bb-4b64-8515-0778dfebea91",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cc84b30e-46f2-4725-8473-83a8e35ecfb8"
        },
        "item": {
          "id": "f2f36c6e-fc7b-45f6-b85b-bb16cdb22cfc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b075a6ce-4bf4-4131-b13d-0859d2784a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b232e2-e223-4413-b489-207f8bdf5b39",
        "cursor": {
          "ref": "5ee622b1-eb95-416b-8968-66477bc7e983",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e192e2bf-7365-40b2-8fc8-5750715d3461"
        },
        "item": {
          "id": "79b232e2-e223-4413-b489-207f8bdf5b39",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "82641989-98fa-4983-bfcd-7501d8cb71ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3330d1bc-4d06-40a7-9b76-9d7b406aa172",
        "cursor": {
          "ref": "c43e1cfb-a9a2-4a8b-a437-3f5724455fc6",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f139aced-73bd-4d8e-8313-63aaeee174a9"
        },
        "item": {
          "id": "3330d1bc-4d06-40a7-9b76-9d7b406aa172",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "613fe4da-233c-43a2-b36d-ffacfc500418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0721a4-406e-4d7a-96d0-bd626819ec0b",
        "cursor": {
          "ref": "4c901958-07f9-4fe4-a123-ac34efd6324b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d236f2ab-9232-4e35-b8bd-b0cbd01ba405"
        },
        "item": {
          "id": "1d0721a4-406e-4d7a-96d0-bd626819ec0b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "488aa0c3-4d5d-4f09-bcce-3d60e988b3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f44922-eccf-4986-b324-d1488f9dd8c2",
        "cursor": {
          "ref": "913c864d-6cb6-42da-a294-14cca25ee1c5",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "49d516cd-0b77-4e70-8f56-b5e3c8d23c37"
        },
        "item": {
          "id": "38f44922-eccf-4986-b324-d1488f9dd8c2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "99b23097-fea7-4ebb-8241-e4cddd84c20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c94ad44-1732-4f2a-a53d-5494cee6411c",
        "cursor": {
          "ref": "f461093e-bce8-4caf-84a9-3922c4b81661",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bb51c800-0144-4731-94e3-0b3c1e6dfafc"
        },
        "item": {
          "id": "2c94ad44-1732-4f2a-a53d-5494cee6411c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7f8e6f58-483c-46a0-9d0e-3df8c17c8b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d432796b-7ac1-45cc-8cdd-5cb8c43477fc",
        "cursor": {
          "ref": "727b6bf2-793c-4f3c-9bd3-0a1e64cff1ca",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6f876b91-8b3c-4b68-a39e-a4fd14a4da0f"
        },
        "item": {
          "id": "d432796b-7ac1-45cc-8cdd-5cb8c43477fc",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "88ca1153-4d0d-47d7-9acb-76d0247ba626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29de538-6717-4b30-b5d3-b80c5079a122",
        "cursor": {
          "ref": "b3d5c3e4-67b4-400e-958f-6647d16cfaae",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9cc0ec51-a6c9-4b56-b74e-56d6dae80345"
        },
        "item": {
          "id": "d29de538-6717-4b30-b5d3-b80c5079a122",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "796ee5de-23ab-4c96-917b-587b944d5227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad350391-8ccb-4bcd-be73-e07f352f5436",
        "cursor": {
          "ref": "db091960-1393-4f6d-8278-a8bd14fd8e09",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "97b34803-3045-45f7-9040-8b6d7ef97d7a"
        },
        "item": {
          "id": "ad350391-8ccb-4bcd-be73-e07f352f5436",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bc0abd20-0278-4b70-a62e-8bd9a30ae6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7411f5-456f-49be-950c-3e4575a0a6c8",
        "cursor": {
          "ref": "d1728ca1-73e4-420d-8071-59d71fca2a0c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e459cf6b-87a6-4278-85b0-a67e8ced9f02"
        },
        "item": {
          "id": "9b7411f5-456f-49be-950c-3e4575a0a6c8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "93da3af2-7cbd-4605-937f-e65babbdc8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79611c28-d8c6-4590-b475-9f5d10c6d877",
        "cursor": {
          "ref": "0098c253-7a10-4740-897d-eee5c2362b62",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "147be4f3-e2de-49a1-b02a-fdbd5bde10b7"
        },
        "item": {
          "id": "79611c28-d8c6-4590-b475-9f5d10c6d877",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3c331899-06cb-4106-8f3e-68fdffdaa969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e6e52c-d6b2-40ca-b55e-63338daa02ee",
        "cursor": {
          "ref": "88361be0-63bb-44ff-ba4c-08560c7ffad8",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "85c75d78-6f1b-4705-bcc7-4cdb9f07cdf8"
        },
        "item": {
          "id": "e8e6e52c-d6b2-40ca-b55e-63338daa02ee",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f18f5f22-594a-411a-b6fa-36f40867513d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e5235e-f2b7-4c60-9c23-4443c5dfbbf8",
        "cursor": {
          "ref": "6687a1b4-f9f1-47b8-9479-f49f2862aa48",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "63592e75-f354-432f-b151-784be1c6b5df"
        },
        "item": {
          "id": "a2e5235e-f2b7-4c60-9c23-4443c5dfbbf8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1f2b5a83-f5ac-4e95-9c66-d3ebe0d7d190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9e6f90-4f2d-40fc-b1c6-5f1b5f89838e",
        "cursor": {
          "ref": "73df9fe4-6f23-447a-8714-4689a10411a7",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f77d3485-3e71-48c0-9828-8591d51a2f82"
        },
        "item": {
          "id": "0a9e6f90-4f2d-40fc-b1c6-5f1b5f89838e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "427ea393-2a1f-4157-a707-2d8503cb7c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6ddf30-5253-4206-a0f9-9c287556c165",
        "cursor": {
          "ref": "8c3bfeb5-c28f-42df-82d4-92a44b8c9e25",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d9e6b14a-d6dd-473a-b4e8-ab08f7d0bc87"
        },
        "item": {
          "id": "fd6ddf30-5253-4206-a0f9-9c287556c165",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "52dc9332-4ffc-4e25-8fd6-a44525987696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71a8dec-fcb5-4f8c-b161-70178006159b",
        "cursor": {
          "ref": "377e764f-91f9-44c0-9602-8f7b7b4d6ced",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "31d531f3-f220-41b5-987b-32d774bd6329"
        },
        "item": {
          "id": "c71a8dec-fcb5-4f8c-b161-70178006159b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6d76d0b3-73bb-4665-af2c-73428d8ca3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5a004b-c841-4ed5-86c4-896299c1e50a",
        "cursor": {
          "ref": "0fa52319-c59c-4c58-9215-788edd2fef3a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b225701a-a2ef-4e79-aa84-b2a89fbc437d"
        },
        "item": {
          "id": "4a5a004b-c841-4ed5-86c4-896299c1e50a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c9f2663d-fe41-45f8-9e18-9999eea385e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722303aa-2a35-4c71-b3fa-c8675c4fb742",
        "cursor": {
          "ref": "8e2fde1a-4cf5-4aef-ab99-2238c9fa532c",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7bdaad5d-bb5e-4138-bdbc-bd6fba413666"
        },
        "item": {
          "id": "722303aa-2a35-4c71-b3fa-c8675c4fb742",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bf0daefa-9c28-4374-9624-35b53e437b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dc956f-4066-4dff-89a8-cabab84baffe",
        "cursor": {
          "ref": "8f4df762-d850-4197-ab67-f943fe6bb435",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "53465ae0-4f5b-4dec-8d68-2f2f7272239e"
        },
        "item": {
          "id": "91dc956f-4066-4dff-89a8-cabab84baffe",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d34b92f7-2307-4a25-a4d0-f0936e8e49e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece6059e-2de0-41b5-b82e-69c8a78be041",
        "cursor": {
          "ref": "d85708e8-e2c5-44f5-9299-d15e83b79e77",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "42d4b6f1-70a2-4d3d-9da3-2890f82bd7ed"
        },
        "item": {
          "id": "ece6059e-2de0-41b5-b82e-69c8a78be041",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aa9a0835-6d9f-41e5-8693-710bfeb8b1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9492ac73-b32b-4a98-88eb-d3825f4a0eb2",
        "cursor": {
          "ref": "1a22c03c-ab14-435b-b689-6cbd6137b44f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "95c3cca8-fa2f-47ce-96a0-d607946662a2"
        },
        "item": {
          "id": "9492ac73-b32b-4a98-88eb-d3825f4a0eb2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3c113519-86bc-46fb-9dc7-e8cb6eb2153a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bf386f-b7e2-4102-9b9a-3a29348f861d",
        "cursor": {
          "ref": "b2b58290-154d-4448-b9e7-0394f3629f6f",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8f6997d4-57e5-457a-a44e-d0d481c067f9"
        },
        "item": {
          "id": "b5bf386f-b7e2-4102-9b9a-3a29348f861d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3f331363-c57d-4af7-a4b8-4d943c5c865e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30015ea-b3b1-49cb-a02d-7ad42358a935",
        "cursor": {
          "ref": "36ec7afb-48c7-4aac-bc41-284f12c2460b",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "794dbb80-7328-4770-bd1a-0f13e15d3165"
        },
        "item": {
          "id": "a30015ea-b3b1-49cb-a02d-7ad42358a935",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cef34049-1fc2-42f9-8238-5786f5ed8566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf23230-ba50-48e4-a8a5-72e51d146406",
        "cursor": {
          "ref": "7b7b4b8b-b7dc-4aec-b23a-5aa22e601040",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b4235a3d-bfc8-4637-8890-330a1e1ef92f"
        },
        "item": {
          "id": "caf23230-ba50-48e4-a8a5-72e51d146406",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0da7a130-77e4-4c95-8362-8de31f54999d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc69f3a9-550f-42b2-a1f5-96c8c877b6f3",
        "cursor": {
          "ref": "93e48983-ec3d-496d-8cc9-830da4ebcdfb",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d04f21ac-7926-4968-9029-fcd882c36df6"
        },
        "item": {
          "id": "cc69f3a9-550f-42b2-a1f5-96c8c877b6f3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8bafa1e1-560f-4c13-9356-a20aeee6edf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a41bb5-2e51-4ec6-a328-1d9c56393166",
        "cursor": {
          "ref": "7b3c25e3-a001-492d-abe1-dff4d0d44f8b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "38e0df89-ce85-4162-82b3-92399c7af25d"
        },
        "item": {
          "id": "b3a41bb5-2e51-4ec6-a328-1d9c56393166",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5ca88ee1-3efa-4774-a2c3-10c6c9661bef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a499bb59-d97b-4a3e-900a-7f416cdcbaaf",
        "cursor": {
          "ref": "7cfd4df8-ac5c-46fb-a902-754fdfd17d04",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5fb744d8-4ec5-4305-aea5-07d977593c01"
        },
        "item": {
          "id": "a499bb59-d97b-4a3e-900a-7f416cdcbaaf",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fda0f81b-958a-4084-a718-46c7756f64da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "3942477e-7f93-49f4-9dbb-d32a7c9bdd54",
        "cursor": {
          "ref": "84ed9fc0-dc51-4f5e-80dc-c8b377f1a924",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bae40fd5-4b39-40a6-8d9f-7371e7499aa4"
        },
        "item": {
          "id": "3942477e-7f93-49f4-9dbb-d32a7c9bdd54",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9e75af98-1d3a-47f2-a4a6-d262e52350ce",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7977f371-22f0-456b-96a6-91dd8b00908f",
        "cursor": {
          "ref": "0361f75b-1a99-4915-abbd-1a80b762f129",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5ba5bd6c-12d8-48be-b044-3c942317111a"
        },
        "item": {
          "id": "7977f371-22f0-456b-96a6-91dd8b00908f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7343c694-fda4-4124-9a2d-4c338397020e",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3bd149-d066-40a1-b6d6-4277531bbd63",
        "cursor": {
          "ref": "faf9268c-27ad-4c3c-93a4-88fba9e3a5e1",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c6045afa-3adf-4278-8f92-556cfe4bef9c"
        },
        "item": {
          "id": "3b3bd149-d066-40a1-b6d6-4277531bbd63",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "17b4cf02-7d93-489b-aa91-a4c16f4e6a42",
          "status": "Created",
          "code": 201,
          "responseTime": 212,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd49505-8c64-4491-a725-6ad7e45f57c7",
        "cursor": {
          "ref": "fb98b833-8f0b-4027-ba81-6d8691ccc445",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "03b5e8cc-911c-4273-9bf8-24ec115563f3"
        },
        "item": {
          "id": "ccd49505-8c64-4491-a725-6ad7e45f57c7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "87161403-5eb9-4ef0-989b-e86722ad85fe",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ce153b-bdb9-419c-83c5-293b8a69320c",
        "cursor": {
          "ref": "fe81c2bf-eb5a-42ea-96d7-3250b4cd9821",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cdcdee0f-36ef-4510-874b-b718f95a371e"
        },
        "item": {
          "id": "b8ce153b-bdb9-419c-83c5-293b8a69320c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "110d4841-036e-44cc-9450-7dfed8b96e55",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-31T00:38:48.273Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-31T00:38:48.273Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "950232f4-3541-43cb-9a21-a5240e9121f3",
        "cursor": {
          "ref": "cf8e5978-2eae-40b4-b453-e67bba463da0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7db33436-9629-460b-9a8d-fefd268eabef"
        },
        "item": {
          "id": "950232f4-3541-43cb-9a21-a5240e9121f3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3e562b97-f2b0-465b-9c79-daae78444d81",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f364266-9bff-4541-9c6a-d0483b1bd4bb",
        "cursor": {
          "ref": "77991e8d-2c5e-48c8-b41b-5ce2d29bbb97",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "eefb47e1-c92d-42b7-bc08-d72ca11c65e5"
        },
        "item": {
          "id": "7f364266-9bff-4541-9c6a-d0483b1bd4bb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d764315-f882-4ae6-b559-3f5432da748d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9783ddee-7878-4979-85ac-0dee1b5f6efc",
        "cursor": {
          "ref": "b2766198-1d84-4f12-8e38-206c8d87e69c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c227480a-cf7f-4a82-a3c0-d7bd5aea87b4"
        },
        "item": {
          "id": "9783ddee-7878-4979-85ac-0dee1b5f6efc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5b4e3e8e-c685-40a0-b643-f8958bcf5e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4242161-fbb5-4f95-a996-dbfcecec8a85",
        "cursor": {
          "ref": "71da46ac-b894-4d17-b53d-56609e98363f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cdee263d-180d-448e-8af3-c8d4428f3066"
        },
        "item": {
          "id": "c4242161-fbb5-4f95-a996-dbfcecec8a85",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c48c4d2e-48e6-465e-9afb-764532b2140b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc17f99-8a48-431e-a1f3-5127b649c8ba",
        "cursor": {
          "ref": "b65105c7-faed-43a5-a2fb-78c6aa4310f4",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f7a19713-b075-41ac-bc4d-8702bdbfe875"
        },
        "item": {
          "id": "7dc17f99-8a48-431e-a1f3-5127b649c8ba",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8cc98b30-5036-413a-a434-44c7c994d044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28deef86-5c53-49b9-aad1-5a4f20da7c66",
        "cursor": {
          "ref": "e3614ec6-c119-495e-a1cf-c99518d24b08",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "25708cc1-0906-40c3-9e29-37501cf4d3a1"
        },
        "item": {
          "id": "28deef86-5c53-49b9-aad1-5a4f20da7c66",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c140d4c6-962e-4438-b7ab-d45fd115f803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ea7255-dd9d-4d4b-96d4-5f122b177044",
        "cursor": {
          "ref": "cd4b9e60-8d56-4707-a287-9ae1b6e9533c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "389b137a-487c-4e9f-aa15-a2ddb930a5cf"
        },
        "item": {
          "id": "14ea7255-dd9d-4d4b-96d4-5f122b177044",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "59988687-f6e2-4e75-ae22-94a24fbe3635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff3c1eb-ade2-46a6-85c1-e19b2a214309",
        "cursor": {
          "ref": "af640716-d02c-470f-be2c-9b4ea46ab93a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "744ef061-2e4a-4320-8726-a4ab1b9009d1"
        },
        "item": {
          "id": "0ff3c1eb-ade2-46a6-85c1-e19b2a214309",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6dc90109-fb22-42f3-b217-504c4cf11b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae8124d-5c49-486a-a5c3-fc3be28c8a63",
        "cursor": {
          "ref": "465327b0-8416-4cb2-96e0-846dc3a3dbd4",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "11ee4705-41da-4286-ad35-9b60d58959fa"
        },
        "item": {
          "id": "1ae8124d-5c49-486a-a5c3-fc3be28c8a63",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "66f4edcf-1859-48e8-8651-c0dd096f5841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db27475-cef9-408b-9db8-7748198e2df7",
        "cursor": {
          "ref": "31e28e00-bc1e-40fa-a685-c84512d30843",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6617d7f7-f7ec-44b4-89eb-dd9d2b92af85"
        },
        "item": {
          "id": "6db27475-cef9-408b-9db8-7748198e2df7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5d8ec143-d758-45ba-9aa0-15e7877944ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404b9698-24af-4f3e-b98e-44c4b97ad5f8",
        "cursor": {
          "ref": "084b4e36-6a1f-4481-a82c-aa6632781cd3",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b3cfae88-a748-4f22-80a4-f78ac1c8640a"
        },
        "item": {
          "id": "404b9698-24af-4f3e-b98e-44c4b97ad5f8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bdd51975-fb0f-4610-b194-fae20ed943fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f8ab855-2a32-4116-9cfb-0bafbff47579",
        "cursor": {
          "ref": "db08cd92-de6e-4912-b990-96a89b4c496a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "788e2202-595c-4dda-a7b4-fa829d4cb7e3"
        },
        "item": {
          "id": "3f8ab855-2a32-4116-9cfb-0bafbff47579",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2faef9b5-a084-4ddd-a338-a3eb619cebeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd54a4a-64f5-4b14-a6f5-e4b3843a3de4",
        "cursor": {
          "ref": "9a7fdd80-61c0-41be-afa6-286715bc4f25",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5985e9ad-5d96-4d90-8901-00f146964c77"
        },
        "item": {
          "id": "7cd54a4a-64f5-4b14-a6f5-e4b3843a3de4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f5d15f30-57a8-4748-8d44-93a1052455ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d267213-71d2-40a1-b12e-6390e78f094b",
        "cursor": {
          "ref": "89eab3af-5a50-4e38-8e78-0a52022ec6ae",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "57286864-1791-4c4b-8bca-950d6b3da68f"
        },
        "item": {
          "id": "8d267213-71d2-40a1-b12e-6390e78f094b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "29a52953-e7ef-4ccb-9e92-5096e78ac20f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c5d195b0-d087-4a82-8712-0438cc7d0757",
        "cursor": {
          "ref": "6ae09ff3-b2f7-46b7-b11a-2850223a4b31",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "553cd621-fd72-4534-9b84-c1e40e1f55b6"
        },
        "item": {
          "id": "c5d195b0-d087-4a82-8712-0438cc7d0757",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "68f01837-1f6f-417a-9ac2-f3c1b3230268",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ca3d2d0f-12d4-4f00-9a6f-4cffd0f37a6e",
        "cursor": {
          "ref": "474d1bd1-93c6-4da4-81ef-059b73d56451",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6f38fa18-b38d-400f-98f7-d0d06ded2b6a"
        },
        "item": {
          "id": "ca3d2d0f-12d4-4f00-9a6f-4cffd0f37a6e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "48b0d8c5-6b49-468f-a109-67cef7b6b906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4975c50a-c118-42cb-9154-992b492f2d13",
        "cursor": {
          "ref": "1e3efc14-eeb9-4087-b4b7-bd58daa3f382",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c4f8ce58-b140-4a0e-af0b-d8a905ce5284"
        },
        "item": {
          "id": "4975c50a-c118-42cb-9154-992b492f2d13",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "42ca2595-1254-410d-9162-01de7402039f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30529bfe-be2e-4c5f-8857-57feed2e02fb",
        "cursor": {
          "ref": "75674205-fb9b-4935-9604-9ca22885d203",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dcba6b26-e16f-4bdb-8680-3eb7eb6321ee"
        },
        "item": {
          "id": "30529bfe-be2e-4c5f-8857-57feed2e02fb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ce2c20de-14e1-4a1b-9256-675ac9784c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b902c066-d930-482f-847b-2fd32f069ceb",
        "cursor": {
          "ref": "eeb83483-b695-4312-bc2e-c254a23c900f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "17683275-a168-4de2-aefb-60267ede9173"
        },
        "item": {
          "id": "b902c066-d930-482f-847b-2fd32f069ceb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fdb16128-1607-4d84-b43f-f547537c4ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0250e4f7-87c1-4f8d-981f-6344d93aa35e",
        "cursor": {
          "ref": "68a22fb2-f468-4bc8-aecc-43cd4aabd6cc",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ea71ce01-241c-43a6-bf65-4995a376abf7"
        },
        "item": {
          "id": "0250e4f7-87c1-4f8d-981f-6344d93aa35e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "20995eda-6bd5-430c-a624-0c0b1d4ea577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95703bf8-f5c9-4ff8-b18a-bd214e65aa3b",
        "cursor": {
          "ref": "b8a93a56-763b-437b-b3c0-d0013438ff1d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "375a4bac-e527-4ffc-aa5b-9b07f2efbe6a"
        },
        "item": {
          "id": "95703bf8-f5c9-4ff8-b18a-bd214e65aa3b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "15784859-e287-44fd-8d44-ba3b50d82fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d86d51-3116-4993-bc6b-149ecabb8a78",
        "cursor": {
          "ref": "b84412ca-20cb-46c4-8c8d-81359d01af2d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ef5d1bcc-f0a1-4dc2-ba55-95f3169738b3"
        },
        "item": {
          "id": "76d86d51-3116-4993-bc6b-149ecabb8a78",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c550ad16-e6f6-438a-a196-6d8bc2af01db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6ad86e-5da0-4a07-9d4b-ad6cdd664951",
        "cursor": {
          "ref": "b5efcab2-0ca1-4ea0-b1b1-7d49981ef47a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7df41932-323e-44b5-986e-33085fc4a4d2"
        },
        "item": {
          "id": "8d6ad86e-5da0-4a07-9d4b-ad6cdd664951",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cbf85ae2-7d9d-4d0e-9ad5-df3b8bdc8af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ff3ae4-72de-4eb1-9042-57da000ca8aa",
        "cursor": {
          "ref": "dfb9c8fc-f929-40fe-9c19-5c7c0ce53ca9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "367f5b5a-4758-4d14-99cb-e449494e89ac"
        },
        "item": {
          "id": "e0ff3ae4-72de-4eb1-9042-57da000ca8aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c8816b96-8e87-41d4-b169-96d9f9e7ef16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2774750e-db13-4e32-8fbd-5816d370e0a3",
        "cursor": {
          "ref": "1526046d-4a9f-4a76-b646-fa9e294a6e62",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "28cd34c2-744f-4e15-8b1d-6eded249d02b"
        },
        "item": {
          "id": "2774750e-db13-4e32-8fbd-5816d370e0a3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "85eb1e6a-3998-4bde-a753-493cf1b1e1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c85f12b-3b6c-4f5c-aa96-3d8e9385a827",
        "cursor": {
          "ref": "761233f2-3fae-4fff-ab3a-d52a2e98cf42",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6bff7cb7-a129-42a6-9257-08a620bf4b5f"
        },
        "item": {
          "id": "4c85f12b-3b6c-4f5c-aa96-3d8e9385a827",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7a54a12f-50b5-4371-9ddf-e750537abff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5724f24c-e0dd-4771-9b28-225defb27e00",
        "cursor": {
          "ref": "d7e5a903-acc7-4151-91f3-31767d859767",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ebd686e5-6f57-4582-8e1f-25d69bffad26"
        },
        "item": {
          "id": "5724f24c-e0dd-4771-9b28-225defb27e00",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "53e04a7a-14da-42e4-96d5-3e3e2932684f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce13899e-aca4-4cb5-b437-5ace1a2405bb",
        "cursor": {
          "ref": "3f6f2e79-bb5d-4ca2-a071-995af44e4fb6",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e25ad806-df79-4a23-98b2-69a91bcbda33"
        },
        "item": {
          "id": "ce13899e-aca4-4cb5-b437-5ace1a2405bb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fbf503e1-dfb2-4757-b076-78e1f3169f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c1d305-a718-4bcb-a896-70a9f375ae8c",
        "cursor": {
          "ref": "7d6086fb-15de-4e4e-ada8-55c046a30c33",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "33350d02-c7bc-46dc-a210-7dc7a44f57ce"
        },
        "item": {
          "id": "22c1d305-a718-4bcb-a896-70a9f375ae8c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "549e87ce-d5c1-420f-9254-97813858562f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131f8b33-a812-4607-bb0e-1944c66e85ed",
        "cursor": {
          "ref": "c4df4c2d-675f-42d4-a9b8-73e82c078890",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bc409143-84fe-472d-816f-bb764eb44f1a"
        },
        "item": {
          "id": "131f8b33-a812-4607-bb0e-1944c66e85ed",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a6d5765b-a53b-48d6-81d8-2f773571ba42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f98c8d8-40b7-456b-b9b4-44ca0584e1db",
        "cursor": {
          "ref": "38a823b1-c26d-4acc-aba2-6ba6efc9a6a5",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "65481506-8f18-45a8-bd3d-ff325e8a28cb"
        },
        "item": {
          "id": "5f98c8d8-40b7-456b-b9b4-44ca0584e1db",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5b7da786-4d61-47f0-ad16-65a79bb41995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b88cfe-c196-4eea-b7e2-353c3846671c",
        "cursor": {
          "ref": "6a8caede-ec3e-43d9-af5c-0580a765317f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f664b105-88a4-4bca-aa00-0786b8e613c8"
        },
        "item": {
          "id": "46b88cfe-c196-4eea-b7e2-353c3846671c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "68af3e37-8482-40af-80d6-605b5481c458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001f489c-8aeb-43e9-bbc1-69f8a182c83e",
        "cursor": {
          "ref": "48217243-049b-40ca-9bfd-c001a7e85acc",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "768b89d7-d923-4ef4-8f8a-6eb294261428"
        },
        "item": {
          "id": "001f489c-8aeb-43e9-bbc1-69f8a182c83e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fde80d4b-c084-4b02-98cd-ab527044c7e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "caf0a7b0-8565-46ef-b284-08bee2df7ccd",
        "cursor": {
          "ref": "f8f06631-43f0-4509-aed0-de0ea2037f1a",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e57f3f00-6867-468d-98b0-47d68b52bc69"
        },
        "item": {
          "id": "caf0a7b0-8565-46ef-b284-08bee2df7ccd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cc968140-d177-44b3-8d49-c61d5c8fe964",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16be5d19-9834-435f-b1d9-49e5c8032074",
        "cursor": {
          "ref": "0c9f5464-f0ea-415c-ae5a-7932f7ac701c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "96036d8d-dc43-4ee0-98ff-140ec82c1905"
        },
        "item": {
          "id": "16be5d19-9834-435f-b1d9-49e5c8032074",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "898e8fcc-f849-4902-b756-7137b23dd77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e534fab9-0aa6-488f-8eb4-0bf4e62a043e",
        "cursor": {
          "ref": "177d0897-8e55-4fdb-90c6-afdbfabd148b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c434354d-0324-4e16-bdc2-962a27a512f3"
        },
        "item": {
          "id": "e534fab9-0aa6-488f-8eb4-0bf4e62a043e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3d95a2c6-d8f4-4035-838c-5a9e675588b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5045b302-03cf-48bc-89dd-70339743da4a",
        "cursor": {
          "ref": "425bfa2c-5e7b-402c-aefb-1e9d76372563",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b797513e-e1d6-4cbc-a5a1-d3f0660584f4"
        },
        "item": {
          "id": "5045b302-03cf-48bc-89dd-70339743da4a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d0e0a6ec-5c2e-4256-a865-30cd4036b2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf00900-3193-45e9-bb12-6107842ad016",
        "cursor": {
          "ref": "eebb2e67-d659-4171-854b-4d2be2876d03",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b3bfdf6a-e6bc-4d25-93a7-758a5b83757e"
        },
        "item": {
          "id": "bcf00900-3193-45e9-bb12-6107842ad016",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5b5ead82-ad48-4a2b-9d9c-e30616a01997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566f112f-cc63-4394-8fd5-ac53c78ea4a8",
        "cursor": {
          "ref": "c934e073-2285-47b2-a626-45de08dc309a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d54483a9-cb1f-43b7-9d0c-7c8ff481bae7"
        },
        "item": {
          "id": "566f112f-cc63-4394-8fd5-ac53c78ea4a8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1f7bde05-4488-41b9-8cb7-b6a48ac91fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d02cc4-6a6f-4f71-a7df-9bd64d201e3f",
        "cursor": {
          "ref": "9261a35b-289a-46e5-aa34-609274df3382",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6bd12c1a-163d-4338-82d8-556df5c53781"
        },
        "item": {
          "id": "81d02cc4-6a6f-4f71-a7df-9bd64d201e3f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "407d8df4-9a03-4da7-8da1-17aa49f7b31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcd62c9-e9b5-4827-8d7c-3cfd7da95952",
        "cursor": {
          "ref": "da8255e9-3e92-45ea-85d6-dccebe46262d",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "98cc00c9-ac74-4e20-98ed-42973e9f4188"
        },
        "item": {
          "id": "adcd62c9-e9b5-4827-8d7c-3cfd7da95952",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6faadc2e-4971-4966-84ab-5631b5f10577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbaea55-0c83-4c59-bc4e-495cd8563f60",
        "cursor": {
          "ref": "2c8703ee-2bc3-4529-b3b5-a69797f65568",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "758bf8e5-b988-4966-9721-87bc1d149124"
        },
        "item": {
          "id": "5bbaea55-0c83-4c59-bc4e-495cd8563f60",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "94264986-2314-470b-8a91-9631c26b1afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f157741f-8d51-46f6-b93b-60cc6d433828",
        "cursor": {
          "ref": "7046f304-2a7d-4a33-bd05-e152676dbb6b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6851a044-cc39-4502-acf5-34e3ff8fbde3"
        },
        "item": {
          "id": "f157741f-8d51-46f6-b93b-60cc6d433828",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c32cd853-c3e4-4b5b-8667-2d3030566a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e216c73-34d7-4f49-994e-ad9408207ab7",
        "cursor": {
          "ref": "83a147e7-1a42-4c9a-b980-59868179e972",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d8bbbe02-0416-4a47-a6de-21f333bd2b17"
        },
        "item": {
          "id": "4e216c73-34d7-4f49-994e-ad9408207ab7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a0f1cd77-5b7a-487e-95c6-fb269f89c4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce919d31-1af1-4522-9839-b4d1a42be16f",
        "cursor": {
          "ref": "50635471-60c6-4240-9916-0fb2ca31c13d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "843fa16c-7789-4473-bfa1-a85c195c6540"
        },
        "item": {
          "id": "ce919d31-1af1-4522-9839-b4d1a42be16f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3d9c8a18-8877-4231-a57a-f355aebff8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19106736-4fb7-45b8-a018-dee6e61f750f",
        "cursor": {
          "ref": "59367edf-56f1-49da-b10f-d106818148c2",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e34684da-3e78-4c54-b7fd-a206ad4d91d4"
        },
        "item": {
          "id": "19106736-4fb7-45b8-a018-dee6e61f750f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "940755a0-e181-4f72-b083-ff1b3bfb223f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214fe506-acfe-4684-8ab6-cd337fff4d9e",
        "cursor": {
          "ref": "325458a5-3076-4f33-a5ec-afdf46ed13f1",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8ba10437-f0ca-4d8c-b498-50508c093139"
        },
        "item": {
          "id": "214fe506-acfe-4684-8ab6-cd337fff4d9e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "190c8730-b4d3-4268-afba-46bf327b8ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5238d0ce-41df-43e3-afae-e2031cc386e7",
        "cursor": {
          "ref": "c9784564-0443-4c66-b532-1468c8a23e24",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b3ab8803-159a-4d92-8fae-3aec922476ee"
        },
        "item": {
          "id": "5238d0ce-41df-43e3-afae-e2031cc386e7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "310ef241-c12f-402a-bb6c-b908a3f97581",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "195efc65-1841-478b-840f-b8406947583e",
        "cursor": {
          "ref": "77aeaa9e-ad31-4971-8e3a-ebfc2636b36c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c2fe2984-416a-4bd2-b7d3-ec838d64ba89"
        },
        "item": {
          "id": "195efc65-1841-478b-840f-b8406947583e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f6dc952d-00e1-4117-a03f-9ecec6410be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1efed58-585c-4791-94c4-a0ae6fffe46a",
        "cursor": {
          "ref": "f239b2a3-95ff-4aaf-a82b-7eba5ee9c2a7",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1514e4a3-478e-4e3f-8145-89ca197c9292"
        },
        "item": {
          "id": "f1efed58-585c-4791-94c4-a0ae6fffe46a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7620cf03-967b-4a04-8455-69a5cf9b0cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86484c02-159d-4edb-a9fc-9117cf6c47d8",
        "cursor": {
          "ref": "c9830ce2-dc8b-46b8-9b5b-07c0d4fdf150",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "edc5a77f-1686-4c8f-a0cd-02e32ec3c8ed"
        },
        "item": {
          "id": "86484c02-159d-4edb-a9fc-9117cf6c47d8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f5632965-6ff9-4736-b05a-d1c1b9b5a1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90316311-5b22-46ed-a388-a5b98cc735bd",
        "cursor": {
          "ref": "dc9c85e6-27ca-4ee9-9c01-123aa4576fad",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f73eb13e-acf6-40ca-a382-58fd0f42967b"
        },
        "item": {
          "id": "90316311-5b22-46ed-a388-a5b98cc735bd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d05215e6-206e-41dc-8dbc-8189864dc76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e91c1b-7476-48f6-be2f-e6f4adfc4f06",
        "cursor": {
          "ref": "ef7cbff4-0958-4d2a-94c4-bb2ecaecef0a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9f034452-5e2a-476d-a76d-65ef016ec785"
        },
        "item": {
          "id": "16e91c1b-7476-48f6-be2f-e6f4adfc4f06",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4331d920-9478-4b1f-bdde-539813193f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6135449-815c-40bd-b933-127fd0fb5f87",
        "cursor": {
          "ref": "3f47352b-f145-4c8b-a469-7f3c6824dab4",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "25b95825-efeb-4ab9-932c-b6cb1bbcd37b"
        },
        "item": {
          "id": "b6135449-815c-40bd-b933-127fd0fb5f87",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "98b07697-8254-4a24-a7fd-e25fe2eb67ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5003b01-9bdb-41df-b028-95a8048fd672",
        "cursor": {
          "ref": "b981c610-1c62-4c6d-b3c5-06bff46c95f2",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "812907ac-24d7-4db1-9b56-229661ebc911"
        },
        "item": {
          "id": "c5003b01-9bdb-41df-b028-95a8048fd672",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6a705bec-e448-4d7f-a61d-e7edfc8ae2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a864f0d-7d82-4a11-91ad-58776c9b5d14",
        "cursor": {
          "ref": "1a57ad51-6363-4ccf-9826-8daadb601e45",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5a001072-a465-44a4-901e-f2d10ea0ca06"
        },
        "item": {
          "id": "9a864f0d-7d82-4a11-91ad-58776c9b5d14",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d5fa1ccc-7480-4f07-b7cd-ada70e7cf338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd567e3-82a8-4bce-b319-fb1606f663ba",
        "cursor": {
          "ref": "fdddddeb-614e-4fc4-a117-a742f76cfa8d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6b0bd4c4-c5d0-4af8-b31d-3306d1cba31b"
        },
        "item": {
          "id": "3cd567e3-82a8-4bce-b319-fb1606f663ba",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "38104cce-e4f6-41de-a653-74cc5f6b0b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd10df4e-fc55-4209-9c9e-823e240d20f2",
        "cursor": {
          "ref": "6b2b0a58-6b71-4e74-8d20-7f876bb34a7f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f40cbc03-0c01-45ba-9f4c-44deffefbc23"
        },
        "item": {
          "id": "dd10df4e-fc55-4209-9c9e-823e240d20f2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8472a31a-78cd-4b11-928a-454c695b01ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e3a15c-e0b7-4505-8ce3-cacf92098960",
        "cursor": {
          "ref": "e982691b-6b49-4a78-8b06-4ffdc0197dd1",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2878bb8e-43df-43d6-a445-95c2ef22c4c1"
        },
        "item": {
          "id": "72e3a15c-e0b7-4505-8ce3-cacf92098960",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c0070aa4-50d2-417b-a1f8-b54fbd505ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3fdf804-18d0-478b-b166-4c73060aca7f",
        "cursor": {
          "ref": "6ce0cae2-f4b7-4283-8721-8d6338ab60be",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "35ac89c8-3313-46d2-8192-bd2964a376ec"
        },
        "item": {
          "id": "c3fdf804-18d0-478b-b166-4c73060aca7f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9256ca59-bb5d-4968-b1e6-0414c49c5c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da3a58a-50d4-4f16-9223-258f5a1bc5b7",
        "cursor": {
          "ref": "72656748-a3bb-4935-901b-9f6e3c9c407d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a8078c73-523f-4631-a196-bf4f0e20fe9e"
        },
        "item": {
          "id": "1da3a58a-50d4-4f16-9223-258f5a1bc5b7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b7c2de51-ae0d-4c67-8fa9-2647f88e8d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33a2fbd-315e-43d7-91d6-2adb41fbd928",
        "cursor": {
          "ref": "3d39e584-8633-4855-b17e-0cf2a936aaae",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3cfb2c30-ed8b-4055-b0e4-4b27eb01a816"
        },
        "item": {
          "id": "f33a2fbd-315e-43d7-91d6-2adb41fbd928",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5984ff3b-6998-46ce-ae18-7e8bdf46d2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ead3033-c508-43ac-8e6a-8f76e30f738d",
        "cursor": {
          "ref": "91e63065-0bab-48cc-ab5b-a691caeb33e5",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "97517336-94f6-47c7-8aa9-1807f83d5e65"
        },
        "item": {
          "id": "4ead3033-c508-43ac-8e6a-8f76e30f738d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f861c5dd-97f5-47be-ac94-3a004c4b4725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f94ca3a-455b-4d7d-8c11-ba2181aed193",
        "cursor": {
          "ref": "18ed1f89-1b19-44dd-8042-dff09de6cb84",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "da99aaa8-5c62-4eb2-9065-d8c0b6afa8f9"
        },
        "item": {
          "id": "0f94ca3a-455b-4d7d-8c11-ba2181aed193",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b1474e02-13a2-47e2-8e08-3186e6189dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa10490-5ca1-4644-b02f-7a35d764d8e1",
        "cursor": {
          "ref": "1f56af11-9fa3-4718-8ee2-67739d09f347",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "43945e78-1df2-4c9b-b63f-a273359020fc"
        },
        "item": {
          "id": "baa10490-5ca1-4644-b02f-7a35d764d8e1",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "66b1b076-7335-4451-80b7-3372f5180933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583c7e20-d58b-45f0-a7c9-794a33b7fae2",
        "cursor": {
          "ref": "f9b7bcf9-c397-4a0d-9246-555243f32c29",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d5437ff9-ecbc-4074-bba4-5d63e75e2715"
        },
        "item": {
          "id": "583c7e20-d58b-45f0-a7c9-794a33b7fae2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "30683a92-f36b-4757-9592-a05ad25db6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d474ff83-31a7-4319-8791-10cd36e831f3",
        "cursor": {
          "ref": "e15c271d-6efc-49fd-a26c-27969ec6c281",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "af4a47f4-4471-4037-9b1e-68f43d629d0a"
        },
        "item": {
          "id": "d474ff83-31a7-4319-8791-10cd36e831f3",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7ebd3c9c-aa99-4fce-9d8a-e8af2d790383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793ad019-520a-4e08-8933-092ce51669f7",
        "cursor": {
          "ref": "c66a87fb-f2e2-41f4-a3ce-c8cf06a3b39f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "87cc8ebe-3044-4238-a8b5-8a4975f22872"
        },
        "item": {
          "id": "793ad019-520a-4e08-8933-092ce51669f7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8fb7cfd2-8c3c-4624-b018-c2b8b123e83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ce084e-05d6-48ab-b66c-69f585712bb3",
        "cursor": {
          "ref": "4f52d8fd-d210-4ef5-8ee1-ca8c7270e504",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b30627a6-3f34-4600-9f31-5bead038df32"
        },
        "item": {
          "id": "14ce084e-05d6-48ab-b66c-69f585712bb3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "612d4d0b-5a33-4443-90e8-2d52dab2e0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88dd7104-c03f-44fc-ba70-15e24d659dc0",
        "cursor": {
          "ref": "31d1c4ef-e6d7-442d-9e4d-5cfa669bddcf",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ef514745-434c-47a9-9b2d-44cca6b9c4ee"
        },
        "item": {
          "id": "88dd7104-c03f-44fc-ba70-15e24d659dc0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9e5e4dd7-0dbc-43a4-b084-848a2bcaf9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb78ecf-a941-4644-9cb4-8515a2155127",
        "cursor": {
          "ref": "2f019062-42ed-4926-96a6-59b5ab6df787",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "33595911-abb4-429b-89d8-b5c9f44c4115"
        },
        "item": {
          "id": "8eb78ecf-a941-4644-9cb4-8515a2155127",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "77cb8e24-50d1-4fd6-b5ac-51681ee0360d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bd997b-1652-43de-a7c2-5d6a86aa661d",
        "cursor": {
          "ref": "5d347d4a-49b5-4f97-b832-aa528695bc09",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ae5a62f5-9976-437b-9e24-8a38411e2f4c"
        },
        "item": {
          "id": "80bd997b-1652-43de-a7c2-5d6a86aa661d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c8b97a01-018a-4edc-8a9c-f53eab41389c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82273181-f820-4199-a424-f5c0321c7d62",
        "cursor": {
          "ref": "1dbef025-e0a4-4f17-b260-39eb0ce32a1d",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fb664517-b618-4722-a894-ef453cdf520a"
        },
        "item": {
          "id": "82273181-f820-4199-a424-f5c0321c7d62",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0f43a6cc-c1e4-4091-90bf-db24a45a6b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6deb09e1-ff67-4fb6-9a2b-a413de9dbfc2",
        "cursor": {
          "ref": "85e33d25-f32b-43dc-a7af-590ed04b879b",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "71b28b5e-8e47-4104-8253-e7c713d854c0"
        },
        "item": {
          "id": "6deb09e1-ff67-4fb6-9a2b-a413de9dbfc2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2cfaa4d8-e8b4-41c7-b824-1b85295db9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4cc08c6-b629-454f-9df4-c04a6458bbf3",
        "cursor": {
          "ref": "1327ebbb-be5b-4578-8a75-41a733bb8ed8",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "da7bb83a-41f1-4952-add7-120f97dd0681"
        },
        "item": {
          "id": "d4cc08c6-b629-454f-9df4-c04a6458bbf3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "33e14e60-1ce7-46be-a4f6-d2ba55e35ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732c4907-9a93-4018-aab4-c4347718131c",
        "cursor": {
          "ref": "dadc764b-6899-4320-8b75-7492958b2220",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c4ee8ea5-286a-4aef-8785-70e490af4e8d"
        },
        "item": {
          "id": "732c4907-9a93-4018-aab4-c4347718131c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "29beb505-062d-46cc-9370-7c4561b421d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990211d4-af5b-4a79-9a7e-4478393736ff",
        "cursor": {
          "ref": "65736169-9dd1-4273-b1c4-73fadb6691d1",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4a99eb48-15b0-4a6c-b91f-ab22e634d999"
        },
        "item": {
          "id": "990211d4-af5b-4a79-9a7e-4478393736ff",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "47f98f6a-932c-4ade-9417-e9a3feb19bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db32cf0d-5986-4663-a489-fb3f121648ca",
        "cursor": {
          "ref": "8b24dde5-1989-4bbf-a68f-3ccd2999ba31",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "00c7c767-3896-45ed-999e-729aada09916"
        },
        "item": {
          "id": "db32cf0d-5986-4663-a489-fb3f121648ca",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b56137df-c0ba-497d-b2bf-1cd3ce025cbc",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0dec2adb-4557-4640-b75d-5b13d45129fa",
        "cursor": {
          "ref": "ef8a4934-5e89-453d-b845-a308f1df7af8",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ebe8444c-9943-40ee-b541-1831b5e8bfaf"
        },
        "item": {
          "id": "0dec2adb-4557-4640-b75d-5b13d45129fa",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d7c7791f-da95-4368-a2d9-843e8be60251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e99641d-37c9-4bd6-aa86-08294384c965",
        "cursor": {
          "ref": "4a89fbda-8627-4d11-b792-a90e1f666447",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ea9afba4-1cb1-46e1-b007-823c3012c678"
        },
        "item": {
          "id": "6e99641d-37c9-4bd6-aa86-08294384c965",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ca8e0519-4a8b-4ff1-ba97-f942af3d4ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f482e2cd-03f3-4d6c-8524-510e4d3ff98f",
        "cursor": {
          "ref": "bc52f15f-fa00-4c7e-a5ca-9566883ffed9",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "001e186b-6e9d-4c00-b9fd-d212cbaa4dc9"
        },
        "item": {
          "id": "f482e2cd-03f3-4d6c-8524-510e4d3ff98f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "63032b69-d083-4caf-81af-2753b95b836d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd99c060-7432-40e4-9f5e-03a5153cbbc9",
        "cursor": {
          "ref": "0d39382a-ae64-4381-8307-45579d99dabb",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "12b9c7d4-0a8d-47e6-8b9f-d9ba7ba1569e"
        },
        "item": {
          "id": "bd99c060-7432-40e4-9f5e-03a5153cbbc9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "de094419-f8d7-4422-ae71-70674aac6bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6801f3ce-343a-4631-a182-305ba00ced5b",
        "cursor": {
          "ref": "de0b1556-6afb-4835-9664-1fb78ec30457",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "983589f4-2ecd-4589-9127-0603b29d2b10"
        },
        "item": {
          "id": "6801f3ce-343a-4631-a182-305ba00ced5b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5faffdc7-d712-4f15-88c1-4c97ae3c8fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119555ad-9534-496c-af8c-1004450e3ab6",
        "cursor": {
          "ref": "2fab4639-e922-4cf3-988a-9adac3bd91c6",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7cc9d2d2-0d47-4e5c-808d-f0652bbe6ef8"
        },
        "item": {
          "id": "119555ad-9534-496c-af8c-1004450e3ab6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dbc2ac94-4713-4004-bf63-e85714890b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f491826a-f997-453b-a7d4-16a2a26765c9",
        "cursor": {
          "ref": "8a34233b-f6b7-4f6f-a233-3ccbca942051",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52792665-1667-4f15-a864-f783a76f66cb"
        },
        "item": {
          "id": "f491826a-f997-453b-a7d4-16a2a26765c9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a7090413-3854-4ce3-96f9-267af2463227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507a022b-6d46-4469-90d6-4af97a3752e5",
        "cursor": {
          "ref": "4fbec7b4-c497-4998-b88e-1675babda58e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6961aade-4f0a-411c-85d4-eb4cb316d962"
        },
        "item": {
          "id": "507a022b-6d46-4469-90d6-4af97a3752e5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "67532df8-2752-4ee4-bf0d-c92f8d82c363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d046a3e-7011-434f-aece-448b98ce8cb2",
        "cursor": {
          "ref": "474f2599-58d1-4eb5-9374-41e04b63309f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "525b72b3-f02d-4ae6-86b4-7ea5e025a801"
        },
        "item": {
          "id": "7d046a3e-7011-434f-aece-448b98ce8cb2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0a9a4928-c912-4e08-b7e6-ccfbc70fb5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff443dd-ea8e-40e5-95f7-2d22965ef801",
        "cursor": {
          "ref": "c7d0799f-5438-4d40-9d8b-5d8804308e99",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c32a5cd4-a206-44f3-af76-e6c5258b8de0"
        },
        "item": {
          "id": "7ff443dd-ea8e-40e5-95f7-2d22965ef801",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "888d215a-3c98-4eb7-add3-e3df460b0f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2728704a-06b2-4d1f-93c5-2b25aab8cc88",
        "cursor": {
          "ref": "c31cbf86-cdf8-479b-9b78-755225844b97",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "56c185a6-3ad2-439c-94de-6ce3a3178d4e"
        },
        "item": {
          "id": "2728704a-06b2-4d1f-93c5-2b25aab8cc88",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9d7a8cff-344f-48bd-b8a8-77b902af870a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a42d8f-c8fc-4d78-af53-c1b044d79165",
        "cursor": {
          "ref": "402c4494-f371-4d07-a642-351316004523",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "91d4be48-0c63-4337-b354-07db87a5c2e5"
        },
        "item": {
          "id": "10a42d8f-c8fc-4d78-af53-c1b044d79165",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "252851f5-79a2-4f2e-a6b8-73d725a59c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0380e6f-51ae-4c43-836c-e6bded9b8dad",
        "cursor": {
          "ref": "f866be16-4856-409a-a4bd-3e1327f93102",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2fd4538f-8d52-446a-b862-d46ac2eace18"
        },
        "item": {
          "id": "b0380e6f-51ae-4c43-836c-e6bded9b8dad",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a40ab54d-9eb4-47d3-b204-2d36cca25e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6365346-25ac-46f7-80e5-0e0856e62591",
        "cursor": {
          "ref": "c3bb5887-4cd0-410a-b2b0-95cfcdd44159",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7a48e78b-6be7-4708-b7c1-769996875b06"
        },
        "item": {
          "id": "e6365346-25ac-46f7-80e5-0e0856e62591",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5024440f-a372-4346-a5bf-6fbd1cedfddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba49b33f-256e-4ea4-8dcc-9cb00852d718",
        "cursor": {
          "ref": "168377fe-cd9a-406e-b538-6cb5958a686c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "054b9bf8-c3de-443a-8d84-ebc7ee0515ad"
        },
        "item": {
          "id": "ba49b33f-256e-4ea4-8dcc-9cb00852d718",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "62f139ee-4d4a-43be-b3ed-41a7c9ba14d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6446c79b-6db4-465e-adbf-94b15bc7d66a",
        "cursor": {
          "ref": "927eea94-aa58-4f50-bb7c-2b91b9434a20",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "65a910f4-2981-461e-b9f1-ac0b634f049d"
        },
        "item": {
          "id": "6446c79b-6db4-465e-adbf-94b15bc7d66a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a5e83fff-d429-4d87-ad2a-ab7276b610c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca52af2a-a2f3-4473-8e01-4cbaca29bee2",
        "cursor": {
          "ref": "bd2ca06c-4eac-4bef-9df6-8409dc93dcee",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fb10a547-6f94-4674-b9ae-1a08fc2acacf"
        },
        "item": {
          "id": "ca52af2a-a2f3-4473-8e01-4cbaca29bee2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3abb92ac-6dcd-4052-84e4-730ab1f2594a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efe3eba-6b2d-4ef1-8c85-ad06d37058e1",
        "cursor": {
          "ref": "a5d1d6ab-a869-419a-8679-36a9f0bf8e8c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2f116b9c-1a36-48d3-aed1-b3d471de5aa7"
        },
        "item": {
          "id": "8efe3eba-6b2d-4ef1-8c85-ad06d37058e1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "04570cf7-f9f6-4230-8707-b9f642824c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76146b6f-87e9-4022-83f2-b7919a3b4bfb",
        "cursor": {
          "ref": "21d954b7-e46e-46c7-8951-d9f2126ef440",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a4bf1fe7-7212-4120-bfc8-0922631907e6"
        },
        "item": {
          "id": "76146b6f-87e9-4022-83f2-b7919a3b4bfb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1c7da268-3a52-4fad-a0f8-814366a6ae54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8e059f-c84e-460b-af97-76133142dc4d",
        "cursor": {
          "ref": "4f6162e1-eb9e-411e-b4a5-3c9c339373e5",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e0222917-4fa0-4d0b-a663-1e0606f791ba"
        },
        "item": {
          "id": "6c8e059f-c84e-460b-af97-76133142dc4d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dc47177c-91b5-430d-8f82-93043f4ede2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c58cf20-5d57-4f0d-8573-203076f21d95",
        "cursor": {
          "ref": "da13ed25-ec3c-428d-a273-186c31989d18",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "aba65c27-f1dc-4a2b-87b1-deca3ba86df9"
        },
        "item": {
          "id": "3c58cf20-5d57-4f0d-8573-203076f21d95",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "aae8cc14-b896-4480-a8e6-43c197d29e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db147ee-3c08-4e5d-9a4c-933229fa3990",
        "cursor": {
          "ref": "b0d0e3fb-ab97-48b1-921b-b509ea3fafd8",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f27ef7a0-1d78-4abf-9e3b-9ce372ac45e0"
        },
        "item": {
          "id": "5db147ee-3c08-4e5d-9a4c-933229fa3990",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ad44f400-217e-45e0-a34c-36f7519d047f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3914b0-b8d3-4a54-8f47-1bc0827875fe",
        "cursor": {
          "ref": "27f31307-fb23-44a4-a324-ca8b5e678a27",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f73656da-0ecf-4716-90d2-61394c2642f4"
        },
        "item": {
          "id": "7e3914b0-b8d3-4a54-8f47-1bc0827875fe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "67dc8266-207b-452f-bf1a-826c98391c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3ee965-9dbe-4926-b8ac-295929e9f8de",
        "cursor": {
          "ref": "9bcb6f27-23ca-4e10-b997-c48898a47efc",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "695c4287-6bd3-444f-9763-93667055e2a4"
        },
        "item": {
          "id": "4a3ee965-9dbe-4926-b8ac-295929e9f8de",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d212c4fb-7164-4c15-87f7-abbeaa38901d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fe7ed0-62d3-4402-9fbf-45954a64ba29",
        "cursor": {
          "ref": "6ccecff8-23ea-4a44-8d5d-361e26255304",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "dc1b5a91-d892-4f80-af4e-1e9d1305e6d9"
        },
        "item": {
          "id": "08fe7ed0-62d3-4402-9fbf-45954a64ba29",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a235a61d-abbd-431d-904d-010c41eac5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0a992d-91d7-4ead-aec4-4dd585f89451",
        "cursor": {
          "ref": "5943bfef-ca98-4b19-b6ef-f7880a545277",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "36f85d4c-8be9-4ffc-a1d8-e5ba07e3a096"
        },
        "item": {
          "id": "bd0a992d-91d7-4ead-aec4-4dd585f89451",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "62ef9268-0275-4a81-8a2f-554704608522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d975653-3acd-41ae-8529-475bc6af2f3b",
        "cursor": {
          "ref": "8f6d5cb0-6d19-4326-9fcb-a49dc3eaf0ab",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e92dd879-accd-4831-96f8-df8130b4e8e5"
        },
        "item": {
          "id": "2d975653-3acd-41ae-8529-475bc6af2f3b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d6d6709b-62d3-4fbf-be5e-15e58910617c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca54b676-eee5-40db-92b4-0233c724cd96",
        "cursor": {
          "ref": "51c4b358-5a45-4f5f-9e4c-ebc728af5570",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e68a7cda-73d1-4851-8595-c9f1906d4962"
        },
        "item": {
          "id": "ca54b676-eee5-40db-92b4-0233c724cd96",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c3bd8b71-94ea-44ea-aa07-c1d9c1bce7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc483b6-7515-413a-80c2-b967c766367c",
        "cursor": {
          "ref": "70c93785-41f0-471f-8eea-82df1b2ea3f7",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eb6ba2d8-26c6-44da-949a-fbbe82c9c1f0"
        },
        "item": {
          "id": "fbc483b6-7515-413a-80c2-b967c766367c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7331bce8-fe30-47ca-b295-74b1faea4237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad0aba2-2a57-4df9-b646-ee2e2b692225",
        "cursor": {
          "ref": "e63c4582-32ba-4f99-9b50-7377d10c5958",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f8b0eb1d-b69c-411d-a442-8e36931e8d93"
        },
        "item": {
          "id": "dad0aba2-2a57-4df9-b646-ee2e2b692225",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2691024b-0a90-479b-8ba5-dac54d44c44c",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "809c8836-de1c-4dda-a493-2dfb92b7a7b5",
        "cursor": {
          "ref": "c5082e4f-b01c-406e-bf39-45a8af8632df",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "89312e97-b97a-4f91-80e8-dfc4d1bc4400"
        },
        "item": {
          "id": "809c8836-de1c-4dda-a493-2dfb92b7a7b5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cffd0daa-f087-4a31-84bc-4560f2faf383",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "d6bfe89e-62bb-4d12-b4b5-9c55b7199144",
        "cursor": {
          "ref": "330251e5-ae39-4001-8942-53768f25f4e6",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "aa70a3ce-392e-4654-9471-125687132c74"
        },
        "item": {
          "id": "d6bfe89e-62bb-4d12-b4b5-9c55b7199144",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "079575db-ff78-4183-9050-6d7d563f97da",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e9bd47ca-8ac1-4d25-b23a-2488d95b3d55",
        "cursor": {
          "ref": "a889936e-b53f-4bfb-b8ee-9b3c93884165",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e426c5f0-e7ff-4be3-8d1e-3290a955305e"
        },
        "item": {
          "id": "e9bd47ca-8ac1-4d25-b23a-2488d95b3d55",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10caef0e-599b-41ee-bcb2-a6763e585122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9acf83-4090-4002-a44d-f5d56f011835",
        "cursor": {
          "ref": "b61431cc-5126-4b90-9820-b7207ff44bda",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "38f666b5-3e65-41c9-b44e-2ffaf532df71"
        },
        "item": {
          "id": "8c9acf83-4090-4002-a44d-f5d56f011835",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ec2f12e8-39f3-47c7-b424-73c5faee0a8f",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d6bf9629-c746-4e4e-a486-f295da735df5",
        "cursor": {
          "ref": "65f7e454-552b-4871-896b-556ce0943727",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "84947d83-92cc-4312-97fa-c437febd0c87"
        },
        "item": {
          "id": "d6bf9629-c746-4e4e-a486-f295da735df5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "12fe4520-468b-40b2-a19f-aa76c4484c03",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "472f57ba-5ac6-435f-abc2-aefc734dd67a",
        "cursor": {
          "ref": "d75835ab-b03b-43b8-895f-4077cb5e85b0",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "32584b2c-7452-4b0e-b7ee-0eae9f4f1462"
        },
        "item": {
          "id": "472f57ba-5ac6-435f-abc2-aefc734dd67a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5b4a5799-c1d0-46f1-acb8-9bba1d10b6a6",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c0ba7138-ba2d-4f69-b596-ddba5cfa3103",
        "cursor": {
          "ref": "e206721d-6dab-4f2e-85bf-c721ee763ff1",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "99538d8f-516d-4d4b-a8e9-43387105c279"
        },
        "item": {
          "id": "c0ba7138-ba2d-4f69-b596-ddba5cfa3103",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b0841d15-a6fd-4d0e-aa19-9c98b93a1c79",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "20bdabbc-a639-4b9d-9521-d94a859e2388",
        "cursor": {
          "ref": "f6f69dd6-d8d0-4817-8bb0-5993ee94d184",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7466f768-0108-4dd1-bb6a-b57e719e8415"
        },
        "item": {
          "id": "20bdabbc-a639-4b9d-9521-d94a859e2388",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bf6845a6-4db1-41f0-afc5-81618474c90d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e9cefb16-3291-4517-96de-3192952a5350",
        "cursor": {
          "ref": "e386bc6d-8e34-4f06-a065-d8aa14cff742",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ba98a5f5-88ee-4d2b-9ca7-19d5d0e5e6f7"
        },
        "item": {
          "id": "e9cefb16-3291-4517-96de-3192952a5350",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cb6ec4b3-3874-41da-b25e-c986f719e768",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3852e2e0-a0e4-4c26-94d0-232159da5dbe",
        "cursor": {
          "ref": "080167fe-2d5e-4f84-93e0-bec2eee1ef85",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8d6a40ab-3db9-42d0-af05-bc456cb5beb8"
        },
        "item": {
          "id": "3852e2e0-a0e4-4c26-94d0-232159da5dbe",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c8caca12-65d7-4bf7-a0b5-e5e66a6ee58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab4489f-928c-49e8-8066-df4317bc4051",
        "cursor": {
          "ref": "44a0d682-0d12-4a72-8f68-65c257cfa3b1",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "335269a3-89fe-44ee-aff4-9d26d5293da9"
        },
        "item": {
          "id": "bab4489f-928c-49e8-8066-df4317bc4051",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8056ae65-17de-4563-8363-b6485e2780e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9988a3d5-dc20-4535-a7ff-fe06bb299ac4",
        "cursor": {
          "ref": "07437d78-039e-4218-bf96-e5f3b76defad",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f50f3cf7-53b2-466f-b0c0-52eb37479572"
        },
        "item": {
          "id": "9988a3d5-dc20-4535-a7ff-fe06bb299ac4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7f54121e-32db-4872-a6d6-d68e7e16b3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca751c3-f5bb-40c2-b9db-91ba9e0c35a0",
        "cursor": {
          "ref": "80514eac-59ce-4928-9087-9bfea554d6fc",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "abaa5862-306b-4eff-9303-2ffb6ec076c2"
        },
        "item": {
          "id": "8ca751c3-f5bb-40c2-b9db-91ba9e0c35a0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1322b96d-dbbe-4c8b-899b-6a3a85caf7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675dc5a6-bbee-4bd4-ba63-ca86a1768ff5",
        "cursor": {
          "ref": "60cb4ca1-8d66-4af0-a000-0b2e3f0072c4",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ec9cafa7-300d-4b5a-823a-5ce99478c346"
        },
        "item": {
          "id": "675dc5a6-bbee-4bd4-ba63-ca86a1768ff5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ad83f578-30dd-47f8-b791-9217e187edbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97a32a5-0189-4159-8f09-1cb0df320d47",
        "cursor": {
          "ref": "aed84a76-ba4a-4abf-9c24-96813f96270b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "733fd8df-d2a4-447c-8b11-156442514270"
        },
        "item": {
          "id": "b97a32a5-0189-4159-8f09-1cb0df320d47",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2a1c081a-5417-4b94-a780-a23a419be653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cd79ce-2d34-4553-ac57-7f2579d07f96",
        "cursor": {
          "ref": "d4642e84-a7ac-4019-beb9-561cae7fc340",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "49729690-1347-467e-b634-9b6413b3075b"
        },
        "item": {
          "id": "c4cd79ce-2d34-4553-ac57-7f2579d07f96",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "86c7bd5c-965a-4883-8580-35427eb76c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6805f097-6ff2-4719-92df-3a09181e1229",
        "cursor": {
          "ref": "02f15a24-ba5b-474b-8a86-81858ab8b342",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4ed57391-c049-47a8-835b-c4aa87799772"
        },
        "item": {
          "id": "6805f097-6ff2-4719-92df-3a09181e1229",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "80f50099-ccc2-4c88-86a2-3c914a614f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c37255-c3a0-4f5a-9ab7-f2a49877c326",
        "cursor": {
          "ref": "0b430985-e0f7-4580-b5bd-1961c31a1bc9",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4b74c191-0f16-4247-b733-724d75922042"
        },
        "item": {
          "id": "31c37255-c3a0-4f5a-9ab7-f2a49877c326",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7bad4130-0854-4673-bcbe-546a7683638f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c216c2-caa7-4f61-b24c-66c143680504",
        "cursor": {
          "ref": "ad117a9b-624b-48e5-b5d4-e111f121d03b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8ffd785b-8412-4419-8c6d-e858e73c9fd3"
        },
        "item": {
          "id": "94c216c2-caa7-4f61-b24c-66c143680504",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "50cfe12d-02f3-4c66-9434-805b1cd36e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780ea028-2376-4443-a2c4-1a4c593e4f6c",
        "cursor": {
          "ref": "1380b39b-a36f-4015-8400-2675ff31ff00",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4712cda6-4b57-41a1-9e4e-99425a5366be"
        },
        "item": {
          "id": "780ea028-2376-4443-a2c4-1a4c593e4f6c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6abd5e1c-1db6-42c4-a541-c58c16b19afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b69a618-f2a6-4067-8f39-e8e765c599d7",
        "cursor": {
          "ref": "23273173-9196-408d-b894-6c8376417264",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5938757a-f2e5-4ae4-89fb-bb3fb15a7299"
        },
        "item": {
          "id": "0b69a618-f2a6-4067-8f39-e8e765c599d7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e6f4358a-3b36-4856-943c-2442121d7810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ce3aa9-6fd3-460e-863b-489def8f4d51",
        "cursor": {
          "ref": "9ac4dada-2a22-4c83-9c77-40abac48f986",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "75e97e76-99e1-44d7-9b49-b3f584e67f5d"
        },
        "item": {
          "id": "10ce3aa9-6fd3-460e-863b-489def8f4d51",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "966fd551-6cd2-4470-8180-a451a630fd94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dba15c-82ea-483c-a3b0-8c3a1209e8b3",
        "cursor": {
          "ref": "d43ee790-a895-48f0-a986-dba6c5db3333",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cff3df24-4d86-46a5-ac6d-e607689c5642"
        },
        "item": {
          "id": "93dba15c-82ea-483c-a3b0-8c3a1209e8b3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d7cb8813-ce7f-4e24-bd0d-d243588d411b",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e1d196bc-fbd3-4600-aa53-e0a172567525",
        "cursor": {
          "ref": "30e07e8c-6548-4dbb-9e42-50b30bf794a1",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "819b81d2-4882-452b-a91c-f88cdcc70b7c"
        },
        "item": {
          "id": "e1d196bc-fbd3-4600-aa53-e0a172567525",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "192239d1-8562-4a82-ba74-1f172491ae9e",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "bd6eda12-9a28-4ea8-ba99-11837aa6d147",
        "cursor": {
          "ref": "6df804d4-84e1-4ee2-b806-1a5205e1cc8d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e3b31f76-6b2a-43f9-b7f3-4f4ec41e7683"
        },
        "item": {
          "id": "bd6eda12-9a28-4ea8-ba99-11837aa6d147",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b8bd92e6-603e-43b7-a9e7-76f324ff3b12",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "173f4852-eb8d-4118-8b8d-53589589fac2",
        "cursor": {
          "ref": "020d0f83-81cd-4a00-b119-38044627bc80",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "adfc1a29-f662-4217-a11e-f091607d7abd"
        },
        "item": {
          "id": "173f4852-eb8d-4118-8b8d-53589589fac2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "170ef278-5d23-42b0-9a4e-cfcb16f37cc9",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "91f89903-3586-450b-9d54-ee84d67f901b",
        "cursor": {
          "ref": "4be89e2a-97a2-4ab0-8b48-ee6a94130454",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "26183619-3a27-4131-a269-726e9b1a5c1c"
        },
        "item": {
          "id": "91f89903-3586-450b-9d54-ee84d67f901b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bb3416ac-b794-4f08-9b17-b82f8149a58c",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "39d78ffe-6b95-49b7-8365-6a602780959c",
        "cursor": {
          "ref": "95f57125-fcf0-45c3-bd5c-1ffe28492569",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d818fee7-25b9-4737-b1d8-c34f30ef2075"
        },
        "item": {
          "id": "39d78ffe-6b95-49b7-8365-6a602780959c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e71d3324-5257-4ed3-81b0-0ef109c6ce7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d59bfed-871f-4766-972c-9ac484ec63bc",
        "cursor": {
          "ref": "798f9c2f-0e5d-4127-9c09-3a31af8165f1",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0776a260-6492-484f-b819-6e774fd75bdb"
        },
        "item": {
          "id": "4d59bfed-871f-4766-972c-9ac484ec63bc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5b21699b-13a7-421e-9e2c-528ac0181c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501d232b-5b64-41f0-9d53-e195f3d96d17",
        "cursor": {
          "ref": "8ebf7ee2-8fc6-40e9-89f5-83f2f95a4494",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "62e3743d-c5b8-47ed-979d-bfcf4f530a89"
        },
        "item": {
          "id": "501d232b-5b64-41f0-9d53-e195f3d96d17",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e517f5cb-8eed-432b-bcfa-a08541cab7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e9a21a-c635-4fd5-bd48-f47e5cbfc7ca",
        "cursor": {
          "ref": "48fca37a-5300-40b8-96fe-c9724746a53b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4e170794-6358-46a1-9c58-970c4fee7a77"
        },
        "item": {
          "id": "42e9a21a-c635-4fd5-bd48-f47e5cbfc7ca",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "db2a19f0-0dbf-4891-8d16-a42aad2069a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b237ac5-eed2-4182-b628-f8741e7a798b",
        "cursor": {
          "ref": "09be1b6e-738d-4f9b-a2d9-bff999c70274",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "184db3fa-1411-42cc-9df6-e008fede3a6a"
        },
        "item": {
          "id": "5b237ac5-eed2-4182-b628-f8741e7a798b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "200eef48-9c61-455b-8be2-801cc7ce50b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc78079f-e687-414d-9910-1f892b176eae",
        "cursor": {
          "ref": "a2d60f41-011f-42e4-a540-5c15e77b127d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ee28db2e-686e-416b-b8fc-70154ba16f6c"
        },
        "item": {
          "id": "dc78079f-e687-414d-9910-1f892b176eae",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d0d3dcb2-ed03-40b4-9e20-687fb4de8615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f62a5c-699a-4e16-b28b-f35dc6f81aa5",
        "cursor": {
          "ref": "656b7af1-67a9-49fa-ac0c-6e83956fc2dd",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "726df148-ae5c-4cdb-ac4b-0d4124882d22"
        },
        "item": {
          "id": "39f62a5c-699a-4e16-b28b-f35dc6f81aa5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "91bab8cc-794c-492a-a560-8a7921f362ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a45455e-83f8-4bbc-80c4-1b29b7f48699",
        "cursor": {
          "ref": "babfb88d-9e8f-4302-9acf-65652d2ba22a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e48739fd-96d5-4444-84b8-8eb6ca4cda06"
        },
        "item": {
          "id": "3a45455e-83f8-4bbc-80c4-1b29b7f48699",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3d00e3ff-8cbc-4e3b-83de-9ec6ebe9d8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1186c5fd-63df-42e5-a847-a051cf4af04f",
        "cursor": {
          "ref": "9ccf4ac0-481c-4a28-92f9-3b69109456da",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5f7eee5f-46aa-411b-8be2-26543ccc7d01"
        },
        "item": {
          "id": "1186c5fd-63df-42e5-a847-a051cf4af04f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7e91e64f-9168-44f2-b890-f1b63d65672b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec8ef08-fa4f-4a8a-ad90-6bf11e1857d1",
        "cursor": {
          "ref": "6ad8015b-2f1d-4cec-9f91-e8bd453864f9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1b41ae8e-193d-4fa6-89ca-a5c291fd0b7c"
        },
        "item": {
          "id": "9ec8ef08-fa4f-4a8a-ad90-6bf11e1857d1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4ec5177c-065b-496c-9157-17b59594efdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612e41e7-8fcb-49ec-a462-7a102f0dc07e",
        "cursor": {
          "ref": "0b4022c9-e9d6-4a7b-8ac3-aa426d56f6bc",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ad259374-8fc9-4ccf-82df-ed9fe4d7dec4"
        },
        "item": {
          "id": "612e41e7-8fcb-49ec-a462-7a102f0dc07e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e38f23f4-2487-49fd-9245-678520384b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0f91d2-deae-408b-8877-8b4762007036",
        "cursor": {
          "ref": "3d4a0b50-79e5-4dab-840e-123ba0230fc3",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3bd846de-e74a-472d-96ec-246ea34446d3"
        },
        "item": {
          "id": "bb0f91d2-deae-408b-8877-8b4762007036",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f90cf5a5-90b9-4ffc-8c82-1905b7f672af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43066fe9-a132-48e6-8a1a-8f8ef3f228e2",
        "cursor": {
          "ref": "cd9dc12d-4989-42a6-a4e4-1f004e1133dc",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "0b43ccaa-0da0-4903-aaf3-83ac518fc02b"
        },
        "item": {
          "id": "43066fe9-a132-48e6-8a1a-8f8ef3f228e2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1460399a-559c-469e-9187-7bccee458151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d60203b-c389-402c-9c47-33ad4fefed37",
        "cursor": {
          "ref": "9eb055d1-dfda-4a0e-9cd9-53d767a9a2cb",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9d17291f-93a8-4648-aa9f-4193a2b0ec26"
        },
        "item": {
          "id": "9d60203b-c389-402c-9c47-33ad4fefed37",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "73f53c72-6236-46b9-8be6-6ea55de2dfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b644971c-cf3c-4173-9e49-59b9b2b51981",
        "cursor": {
          "ref": "e6767e04-5daa-480b-9089-9a413b7f8e05",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6d5c6229-b0fb-4e3f-ba0f-b7f95f4de840"
        },
        "item": {
          "id": "b644971c-cf3c-4173-9e49-59b9b2b51981",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1dd7c3a4-7ccb-4de9-a249-5fd8c6f2de7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7ea3e4-14c5-48e1-8dd6-a329761c4e1b",
        "cursor": {
          "ref": "09791e81-94f2-4006-a7ac-a8c1e7623828",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "02faaaa5-2ba8-4816-83f1-53cb760fb3fe"
        },
        "item": {
          "id": "db7ea3e4-14c5-48e1-8dd6-a329761c4e1b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "84cd475d-ff2e-4c20-b114-ab2d59be1d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729e8d30-c59e-4817-a26c-e98e1944404c",
        "cursor": {
          "ref": "80a5223d-1e5e-4a09-bebe-7bc6b5176a6b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "57d91a32-86ee-471f-a5c5-9982bda57922"
        },
        "item": {
          "id": "729e8d30-c59e-4817-a26c-e98e1944404c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "395989fc-8f95-46e4-955a-189b3a6332a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2082fa12-25a1-4572-a52f-a062c7919ea1",
        "cursor": {
          "ref": "fbdd2188-3a67-495c-b404-3c99b7914b24",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e1f6268a-097c-4324-a0b4-139b53cc0277"
        },
        "item": {
          "id": "2082fa12-25a1-4572-a52f-a062c7919ea1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2f066128-1956-4ab0-96d9-a3dc1606f125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7848849-51aa-4f6b-adde-2c7ed3452f26",
        "cursor": {
          "ref": "a5946065-c0ae-459a-9e3e-76d73af34706",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "43f15680-9943-4bef-9eac-659a979f9a1f"
        },
        "item": {
          "id": "d7848849-51aa-4f6b-adde-2c7ed3452f26",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4497cc84-30cc-45fc-b431-8b1d040fbad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b401dd8a-36e1-48c4-a9d0-0a0cd9b818b1",
        "cursor": {
          "ref": "4cd4b499-48a2-448e-923d-dd6beaccd4be",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6f45b829-d815-4411-ace2-abc3df18c599"
        },
        "item": {
          "id": "b401dd8a-36e1-48c4-a9d0-0a0cd9b818b1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b4b8dc2c-cdf0-46b1-bad2-1217b0bd70f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04a1c86-a34e-4f94-920a-7bca88db079c",
        "cursor": {
          "ref": "154ce522-6e69-4c41-8978-989a8c8cfd26",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8235a6c1-cc20-405b-b460-64d0503eded5"
        },
        "item": {
          "id": "a04a1c86-a34e-4f94-920a-7bca88db079c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f0a3aecd-8b36-4ce1-8af6-0b65d1a984fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9515b900-4ce1-4d0a-a9fb-8a21e0f053ce",
        "cursor": {
          "ref": "2e8ba5d9-852f-4843-8946-4a3b5b39e1a4",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "99777b63-3e78-49c2-a9fd-4791157434b9"
        },
        "item": {
          "id": "9515b900-4ce1-4d0a-a9fb-8a21e0f053ce",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "02a10746-cc80-4069-8ffc-c15b2bd2f9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71e7b11-7862-4522-837b-8ea2c0088874",
        "cursor": {
          "ref": "9e6a7de9-eb83-4c66-9bea-fc1218a32425",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "918d261b-4af5-406d-8f69-9fcb44c09abf"
        },
        "item": {
          "id": "a71e7b11-7862-4522-837b-8ea2c0088874",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2d3edc18-3ceb-4a7c-be36-64715925c95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ccf956-a5d9-4285-91a6-df00d52ad45e",
        "cursor": {
          "ref": "16123b20-8c7c-429c-8916-0c021ec0e7a5",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "53eb2b99-724b-41e6-9bf9-15f3f9b70f3c"
        },
        "item": {
          "id": "13ccf956-a5d9-4285-91a6-df00d52ad45e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "56ebe658-d19b-42b0-89bf-5f8204850ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa9ffdc-91e0-4d85-b7e9-d92228b25d7f",
        "cursor": {
          "ref": "0d2db1fc-3159-448a-bd5f-ee533032cc24",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "8b0d0470-065e-4e59-aeea-e44346124f07"
        },
        "item": {
          "id": "ffa9ffdc-91e0-4d85-b7e9-d92228b25d7f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ece6bdad-ab89-40ff-b305-0fd882d54dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85dcc8f4-60fb-4534-8fb2-e474f56d516e",
        "cursor": {
          "ref": "72c9a0a4-fa1e-4dd2-8dd6-c5501c2aff0d",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5fda4683-3ea1-4485-8fda-af5fe3a59b07"
        },
        "item": {
          "id": "85dcc8f4-60fb-4534-8fb2-e474f56d516e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "60b05bb2-9439-442d-a625-41829f5afaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a827fae8-c1e4-4947-a223-69776543e1fb",
        "cursor": {
          "ref": "a674ee7c-ca0b-49db-b3c9-99785daef384",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "cde3a0f6-3ba0-4cb9-a575-dc2a25f8c83d"
        },
        "item": {
          "id": "a827fae8-c1e4-4947-a223-69776543e1fb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "04402188-bad0-4aa0-b96d-ef6ae132c65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a40cfd1-8277-4faf-abd2-ebe377a9b873",
        "cursor": {
          "ref": "438b7c2c-0032-4b4d-8145-7b941104e8be",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "5083895b-ad58-412f-b3ca-65240352f890"
        },
        "item": {
          "id": "5a40cfd1-8277-4faf-abd2-ebe377a9b873",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "975ab08e-634b-4428-89b8-ee8433b5e048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0f00d0-5b13-4f36-80c3-0a90428b2f8e",
        "cursor": {
          "ref": "c64b2178-debe-4b8b-8707-cf0de6c65067",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "57beb610-7795-4612-9101-4c7b30b5fcfc"
        },
        "item": {
          "id": "ba0f00d0-5b13-4f36-80c3-0a90428b2f8e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3898aa2b-db79-4f92-b37b-8085c161d0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f96854-3d1a-48a3-b080-4962d3981ff8",
        "cursor": {
          "ref": "8d740163-cbde-4e68-9939-b6fd41079adf",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "976f4808-106e-4ffe-b692-315773b728a5"
        },
        "item": {
          "id": "d5f96854-3d1a-48a3-b080-4962d3981ff8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3fc84f19-59e3-4f55-b136-e13c61e5b8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9476b66d-c6dc-4999-a4a8-9c6af44ad361",
        "cursor": {
          "ref": "698937d5-994a-4092-b470-7d40c2bcd03e",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "58067e51-80aa-4b0d-a11b-f9e514000426"
        },
        "item": {
          "id": "9476b66d-c6dc-4999-a4a8-9c6af44ad361",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "52099304-07a3-4113-b47c-cf7f10a32926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68c2d0b-2f92-405b-9427-7914dbbd725a",
        "cursor": {
          "ref": "aa3b1029-f6e5-4c90-bab6-ff84d3369731",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8381700e-c98f-4de0-b1f7-ffb2f9236708"
        },
        "item": {
          "id": "d68c2d0b-2f92-405b-9427-7914dbbd725a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "15c28933-d05a-49b9-bfac-fc90826b33ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ccc62b-f309-44b4-ac56-da8a60c4685f",
        "cursor": {
          "ref": "b22a1ade-a1ab-4749-9f93-b30d9338dc04",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "73df8fdf-8c5c-43c7-9764-1b487f2380b4"
        },
        "item": {
          "id": "71ccc62b-f309-44b4-ac56-da8a60c4685f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2b08d028-db7f-4b15-abe4-3f05129bfef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a47b2de-006a-4ee6-93ba-87de4c8c6ca2",
        "cursor": {
          "ref": "b5bad445-0f5d-4a0d-98ee-dde3d534bde6",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "71df9944-cbf2-4dfc-850a-0eec2feea970"
        },
        "item": {
          "id": "4a47b2de-006a-4ee6-93ba-87de4c8c6ca2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "42adbe77-6693-460f-9078-7d8f9ffdb3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d1bc32-710e-440f-88e9-40d2953bd9b2",
        "cursor": {
          "ref": "81fbcce1-2ce4-4ac4-9951-afbb26581f60",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "47943a43-0df4-4c4c-a36d-f6eaa42054bb"
        },
        "item": {
          "id": "98d1bc32-710e-440f-88e9-40d2953bd9b2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1346aab7-55d7-46da-bb94-5de3471cc73f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a9440b-b185-44a0-ade6-5bd4f1e6e19e",
        "cursor": {
          "ref": "6e3cdd90-9098-4cfe-b90b-bbf218f89785",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "701622ce-fcc5-4ef6-af0b-95a076f1ab00"
        },
        "item": {
          "id": "b4a9440b-b185-44a0-ade6-5bd4f1e6e19e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f1b4a38b-e442-40b3-96e8-9aff7bc7eb61",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9b27a6a5-7998-4be7-b375-eb7d7b6cbd31",
        "cursor": {
          "ref": "b13a441d-bb35-4599-b9f0-0bb816bd2654",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "de0276d9-85d1-4ff5-9d9c-eae2e9610c28"
        },
        "item": {
          "id": "9b27a6a5-7998-4be7-b375-eb7d7b6cbd31",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6bb94f2e-504e-47ac-b1fc-416f2cef6154",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "886d7e25-2c90-4d26-9e74-c66cb81d5220",
        "cursor": {
          "ref": "6fb77420-b7c8-4d82-9325-0d8bd29decd3",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3f7d8672-e767-40c1-b3bc-889b43117518"
        },
        "item": {
          "id": "886d7e25-2c90-4d26-9e74-c66cb81d5220",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6cfde212-dc97-419f-858a-f5748b25d76c",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "495f724a-0f9d-407d-bfb9-8b393e70752d",
        "cursor": {
          "ref": "73a285f7-8250-4ab1-810c-1447cd7fc02e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6b743dfd-b6d8-4af6-8f52-4f2bce1e79d7"
        },
        "item": {
          "id": "495f724a-0f9d-407d-bfb9-8b393e70752d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ee39dfd-fb62-43b4-91c9-d0ca9d0b1f65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495f724a-0f9d-407d-bfb9-8b393e70752d",
        "cursor": {
          "ref": "73a285f7-8250-4ab1-810c-1447cd7fc02e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "6b743dfd-b6d8-4af6-8f52-4f2bce1e79d7"
        },
        "item": {
          "id": "495f724a-0f9d-407d-bfb9-8b393e70752d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ee39dfd-fb62-43b4-91c9-d0ca9d0b1f65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af6ecb1-22b8-4e4b-aa6f-d78c044edef0",
        "cursor": {
          "ref": "51d1ffba-010c-4f15-bb02-ec2f73864933",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "721fe42c-9aa9-4219-b98a-466a4b807688"
        },
        "item": {
          "id": "0af6ecb1-22b8-4e4b-aa6f-d78c044edef0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1603b7ae-5cd4-447e-a194-bb502fe05ae0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14832b24-db90-467a-8408-4e630d0e329d",
        "cursor": {
          "ref": "25c977b8-820d-4c2a-8897-fe6236c2fdec",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "0c90611b-f75d-4aa5-9790-9b43793c387b"
        },
        "item": {
          "id": "14832b24-db90-467a-8408-4e630d0e329d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b49e9b3d-8b50-43ac-a8fb-d72cc7e39e87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}