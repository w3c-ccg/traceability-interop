{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7d450dc4-c421-462d-a3b7-257d9016eb27",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1792fa6b-2c04-4149-a05f-98375defd25d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1da0291-45ed-4bb2-b38a-51935091a234",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b3872e0b-b0b4-4106-8edc-407d80cdd65e"
                }
              }
            ]
          },
          {
            "id": "c79564b9-6baa-436d-aa13-f32952087b42",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24bb4481-3aee-468d-ba08-719a65e3ede8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6405bab5-cd7f-41b4-af8a-14a4ecfea3e9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cc2f2f00-a24f-4d30-a534-041c0de8db05",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b3e15b60-d5a9-4a57-9755-d4d64471bb61",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f1ca737-d825-4b57-83ec-3e64c16dd243",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04434b5f-05b8-44f9-9b5f-d3e64488980b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf0605d9-5142-4b2d-8651-162434dd7d47"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "71ef9214-52c8-4795-82a9-59c0af154dd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "391a7722-6967-431b-8fb0-0669d06c9256"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cf9e0bea-9503-45c3-9765-f62d18590c16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "345e5758-8673-4d72-9b89-82401cb382f9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "990dc431-4f5a-4833-8b05-d0dfe41e8ab9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4a900c6e-0482-4d7c-80a6-bcbe0c8c1b07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b15a752-b3a5-4c10-bb4d-311db8c3f719",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00cbc7d3-e7cb-456c-ae79-07df0287b998"
            }
          }
        ]
      },
      {
        "id": "6ab8905f-bc68-4fe5-aa07-f3907fc3d686",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7f015aab-8005-4a82-a374-c637e5ce7922",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6ebb143-4a80-4bb7-8583-be72e6637606",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "010e7b94-9da1-430b-9e48-0239e3cac673",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92872a8-ff1d-4ae4-a284-a860d6ef9246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ad84758-5fa4-4f7c-b3cb-5c024851fc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a18daf5-d477-43c9-914c-fab230f9b28e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19898034-5a54-448e-86a1-238850ff28a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d1fdb03-7667-479f-b93b-978061894f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a7ac28-c4cb-4ac7-ad82-00bfafae4397",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4914cd-78f6-4132-ae41-945110e25e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98523958-d2b2-412e-851a-ecb950e3598d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "122baf4e-18ab-4634-aaf7-ec10d50c129b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfd9dd10-94e9-4ed6-b3ea-3ddc8d29c496",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e940ed5-9aaf-4e04-8862-7521d58eed6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "669714f5-9a20-4d4e-a494-c99901ba575f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a312c4-d83d-4c9d-89ed-a12736792c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d27890-8b46-4509-8649-c5ba365cad18"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e3ed1829-3be2-44c4-9e1a-bb20063fbd23",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28b63f4a-ad9a-4255-be43-9387cc49b0a4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5e733dc-f18c-4dfa-92ee-c13527c44690",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4e83a182-1f81-45b0-ac88-28aad5f4f26f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "675991d0-d563-4316-b4ab-a6b4393d230b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "aac734e7-3481-4a8c-b98a-909fb4d0ab4e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "050c608a-ae57-4a78-946c-7732dc351675",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f3bed37-79bb-4f51-b826-a81d93e934c8"
            }
          }
        ]
      },
      {
        "id": "aebfd580-f6a3-45c0-b605-b597ae08de7e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8bfa005f-5da8-4a65-8211-4d7bb964d59e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ed8204f-4fa2-4d99-9c21-8e899667b261",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cec6e12c-e576-489f-8bf3-bd65faf170ab",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500c0040-2b6d-42b7-a90f-f1fe71049a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f56bdec-59d0-4608-b117-ab42d7ce7374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff4f723-1618-4898-9302-20325be00630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4998f196-51a2-48ae-b013-48663ef0f1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ea151d-170f-4a06-a00c-a7d09047d727",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd020a5-ae84-49c8-9f83-50c80faff657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded549ca-ed77-4ac5-a457-9adef30c18fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3b63ea-19c3-4ffd-84e9-eb9720cde9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20099a4d-6334-4d77-b2a9-378974654749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b0496a-febc-425b-bf40-c681e0be1e55",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9080c8-091e-4bd7-bf1f-99db589eaa38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69b77ee-e056-4473-8f06-0e0c1a82e270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb951f26-aecc-4793-86d6-b9f45772b035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "660839d6-b435-4ef3-8af6-2142887fe63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bce2747-3012-4c95-a368-90ee1fc68c8c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e010cd7-eccf-4b5a-a5f8-0e35af64df41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c7d38e-8b1b-4e3c-80e5-97bb10cbd0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3282bb7-fe12-48b3-9e4f-5841d87b745b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4487e1f6-e745-421f-848b-7a15f5755551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2f58da-5045-48e0-afdf-6f97b4d1ae24",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11a4ccc-9479-46bc-b899-53a1e23d8c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d9f47d-3527-46f0-a82d-a64e1c2cf575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e721bb9-0c3e-4ed1-903c-d3d59f5c20a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34d474c8-d229-4c0a-9f25-a8f5d35e1abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abb6f0b-e301-451d-adac-7da93424773f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38848a1-bc63-476b-8e56-2a12fdda67bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1d23a8-ff21-4cf7-9556-2d5992d86c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6638070e-a8f3-43ed-8a83-154ecf6ecf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "243d078d-6370-4f51-abe2-c21f8a3f5f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c76c6d-a882-4be0-a4b0-ba95a1a79ee2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec8aee8-76b6-42ba-8128-bd6df867ce53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc19a41-0983-4007-b42c-93710ead5716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579667e2-e4c8-4f3f-ac2a-e02c506e291a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09e8bbbe-75d8-46cc-bdec-f18631ec5ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19355cb0-0f9c-428d-aa94-fee38c97146e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fb0338-a36b-4945-8194-03dca869fa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fc160b6-677a-4550-85de-e5db5117f0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6795ff-6634-4a34-8e54-17a6a57e2065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e702bdac-ee92-44d9-80fc-129f8aa4d4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1655f00-1f0a-4a0c-8b2a-b8165b9445de",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43815bd9-09ab-41fd-b603-aad59ac62c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8deb430f-543c-4518-a391-8bdf7c19ebcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d709665d-f4e1-40ae-9917-e757024269f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddba30b2-c012-42f6-a2f6-5aae0bc75866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0b7e6bb-31c4-4848-90a5-bebfe18302e0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81355e90-913e-45bd-a0d5-43a106f2d1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a976a10e-2cab-4e33-b6e0-b6432c2d6c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0d38e7-9926-48e2-b441-1916305266a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4722e7dd-0c35-4418-9fc4-48c573839a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5371ab56-074b-406e-a32b-27dcd9ae799a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa978e0-3011-4aa5-a80c-b2d61dcaec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59cb65d-bcbf-4dd0-a489-c6c9f942bbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377d165a-b1a5-45a5-a5f1-00738c7ef01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35e9a047-82ab-492a-8960-9db6973507ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971ad17f-08b4-45d6-84ad-02a51ded8a1d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b57f77-f48b-4e17-9573-0c5ecf73720f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa92083c-415b-47b4-961e-17e7891b7713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb07a39-0e0c-4907-af19-fc4aaca57854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8949aacf-6949-4c55-bf32-33f24a0bba7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643059b6-987b-4ae1-bd93-2ec4d01f6b0d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5141a6-b370-4346-9f6a-534bd01cc716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751db314-cb37-4b4d-82c2-abf2958436ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4baca3-3432-4389-911a-bd3f567c07e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccbffc7f-ebc9-4e46-b6a3-e5384048a916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbaadb5-f00c-4e5d-ac8f-7a6786c4fb11",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b5144e-8309-491d-84de-7cfbf8d9e9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e99323-7bb7-45f3-b37d-4d1d30967253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be5846-d4b1-4f7d-8a1a-79bb8b9911e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0433bcb9-ed64-4312-b5fd-49e63280067b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379fb0d1-fffa-44bd-a6cd-e5fee6daa74e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda3ed56-e5b3-46c8-8aef-85048e7155f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8fa158-fd6e-4287-bef2-da6db9781109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5114f2-b5d2-4db3-8bdf-789cd2699b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0e24ef6-2b85-4e3e-8ca1-dd083530c5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37231e5d-90e3-44ad-b191-f14b34e8c17c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686badf3-ea25-4fe3-ac37-0053207c2a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec50fed-a939-466d-a8d3-5cedfd1dd10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c48cdcf-216f-4deb-9ef9-16b7a4254c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a828d18-85f6-4768-bf35-4bb5cf25eb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311f0b94-98c1-4005-b23a-3f84b196023a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ddfd56-8970-494a-87ba-6b812cb403d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508b1419-ad5d-4a35-8c89-877919cd0ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418c2f1f-07d4-4c1d-a7f2-ca7c89c4a73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "710e4f3a-46f4-4fce-a25d-a018f8ae4dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7207fefd-d19b-40a5-89e7-12c3d9e53f00",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadea6f8-2652-4f8f-89a1-633c80fbfa56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70e52de-f9a4-44b7-8cf9-710f030b2895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4905da1-8023-4c77-a175-2a555e9b8301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "049679ce-b0af-45ec-a4bb-0977da375155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf946bfa-2606-434d-9f4f-50eb698fc28f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c056ebd-a2c3-4e71-9273-8fb1b12be82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf363f84-5e56-4752-90a4-f771c03b0bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca5fa8e-2106-4756-bca1-6f2a4f9e8be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69baf477-d1f5-4cc1-bd8d-adaf6e179692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8f0244-33dd-4cd8-abfe-4e417ccaa8be",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bc13e3-47e4-4255-b709-66b2cc1b5e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1affa6-2a66-4675-8a73-80f4e831434b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ace6fe-9e14-457f-b763-a05a637ca1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "035d7c08-c545-413c-b946-1e4a7670eed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c37069-03f6-4b1d-85ab-af4198f48248",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4d70d-70ea-4120-a5b5-a5fed4ded780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265a99a8-9821-4894-b8c2-b1f827a7c4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c733ff-8bae-410e-b8cf-fe0070c658c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e669b70-9fc4-4cae-83b0-f0fffc641cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6938af-7ac4-4b81-816b-4c2885434d0d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e489210a-398b-4b36-9dbe-a2243bd75fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c13b16-08bd-4e3f-a7ca-aae007b7e5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c52a13c-cedf-4cd0-8e86-e814fc48857a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f517ee3d-81df-4354-baab-49f78dbd44d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3d9b4d-a529-44c4-9a19-e95618381480",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e4e686-28bd-439f-a25c-1ade7f2f7ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4d0b0d-6a73-46b4-ad57-090741b5621c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10343406-cb03-44ea-8e59-22d84ea7aad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27fcf6a1-23af-473e-a7d8-ed67b400312f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9012d139-3463-45b7-82b7-cf08e5a60bc3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceee9b92-9ada-4a6c-ae06-f7c063c0f367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d4a6c2-0e46-4e3c-a5e1-faed0b82c32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b15830-e6fd-44ad-92ef-58dcf0a56490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f799e3da-d9aa-40c2-bb16-e923488dce20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4614dd-47fe-4cae-b15d-b94171d1f6e5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66db1ded-405b-4272-82da-3381b2cb3449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4dcbdc7-276d-488d-a1b0-dcf3a793d5ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98a5e9a-9867-41ed-9bc7-08de6a3557ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b654824b-261d-4d5c-81d0-539cac9beacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526799e4-5fde-48ce-bda3-197405b259f0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a129875-68fb-494c-a109-fdedeb216274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667cf081-e903-4c42-b808-625eaee11103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174bc163-5b86-4e79-b302-dfb23831bd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d1fe21-667a-4568-aa7f-ca34454484af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb57a2e-10e2-49fb-a7bd-b22c94ddcd3e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36965313-0238-4437-8f5f-1e82e9ee2cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6199c5d7-5a51-4750-ab8d-346e0ee56dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dddfcae-c991-4488-9436-ab1181af81a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3aed5cf-fa2d-4a12-b1e6-8ecb047ab623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27c1b07-8501-4e1c-9196-bdc62391f65d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b61041c-f8c2-4e35-a964-2ee4a01f7552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6186c2-c530-4c48-a73a-501b700212a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa4ced0-e9d8-4a56-9de8-8b703e759e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c6a451-32ad-49c1-baa2-6aaf3292b5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e26923-9a2c-4167-92c0-4b912d31cfd4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ee67ba-be65-40d4-90fe-a63b826b2bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c65a3e-77b5-47d9-9ded-2fdbb1df68ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8156049c-443c-4fb3-a0f4-d5aad2692db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84d82276-ea86-4c45-bcfe-47bf3a346945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0835fa-a268-497c-a222-2ebd03da1394",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0f1a55-bbf2-4975-8a01-288f6322b1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c49f85-e360-4e19-ba66-d778df75c9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877d13c3-6674-4212-9931-00ec36fda500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3a71be-5aeb-49b3-a688-adab9f57663a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd7a9a2-a4bd-4845-b53e-43322c88eedc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71387e4f-a5e1-4d95-8ead-171f472396c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5b3d41-98f0-4185-ae9f-ce3bceebbb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef44665-f5eb-445b-be37-a1c4c5bd15cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3a721a9-4315-4524-a6ec-fbcc6bb6d43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fdb876-00d5-4356-9a67-61a7e6d02a08",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9987cdee-3b87-423c-a3d1-1099c9fb98c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cc4101-9884-4eeb-a725-a0461c10d87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374a2abe-14d1-4a9b-8e5e-8f7fa99da639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83795d5a-c61b-4d55-bfe5-a141c1e07f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a122d694-d773-418d-a7fc-b2dd5ebdcf0d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec01b7b7-de0f-4197-8954-f3ea89b31ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c33c19d-b8b9-43a0-a107-d0f98f7fd37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9eaf917-ba9e-4f7d-8934-316f4d1107ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1725cea5-3e85-4c1d-8e40-ac60076802b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba406a5-6ed3-4c83-a9f0-0669b7835839",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb264916-64c2-4485-9e45-e1377f12621c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3cee894-bfe6-4986-9127-f72bd050a1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e268ab4-88da-428a-8a46-b36b840563b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaa52f25-edb6-4551-a942-dcdadbe367f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105c5189-90c8-49e8-a440-edf5c58ce1d4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833b7236-e423-4653-b925-5effd371f0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da73a4d0-a2e7-4050-9320-4cd1087b29a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa8fa76-60b9-4300-b731-c6a3c4773a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6844a8e9-3249-4e31-a8b2-2c8e30bba767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed44a90-e04e-4510-80d0-34035408a1a9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d4b26a-dcce-400e-aa25-3b1e5d7cbb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b94c5a20-a000-4789-9cd4-7848ae9d70c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503dc064-786d-41c7-945d-4040420fe737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4616f5-5af1-4dda-b4ec-9dade24b12be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e39c2f-5fd0-4eec-81e2-e527581fe3f9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e42a40-0bc3-4a53-a0c6-c362dc9f3331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81069cc6-ece0-4457-9c1d-7e2a692cb0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9bcadc-192d-464c-ac45-f52201c54d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f69edfee-8b02-4d0e-a3cc-de85bae4b70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d6b9ce-0d60-49ef-b63f-71c1d2582168",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548e7434-a167-4e24-aae7-c744def747cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7cd193-3f43-4e5c-afbe-133f6c7ec3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f08297-db5e-4e40-a01d-7340e08ab441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c688f0b9-8172-4fb9-bc80-8ea573ebb1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298b4778-01d5-45bc-b0d2-f48b1d8d10ea",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ca9604-4dd0-4290-8475-b1c9fb3a3a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833e5c60-9b5e-4785-a63a-4e26767acdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e228181-233a-4124-b459-bca260bafa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b6a07d-6e18-4ceb-b462-27c79a5fcd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de71f2d-4b81-44c0-a569-d81814be29d3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9fb6b3-fd75-40c4-8e92-936f8b0a380f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1723d37-58fc-4e6a-aef1-754d13f1c2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53acbfb5-f913-4d5c-90af-951a65eb61ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f12a9d7d-64cc-4756-aa18-22643060ebc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d754d24-e6db-4add-a023-b1e343ab9c4d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19f4db5-8bc9-48cc-a49f-1d733c734b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883d5584-7fe2-4b28-b150-74077b4db993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1790cee2-30fc-4409-9ab9-f2b3e2e3a02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a180ef7a-5a68-47cf-b752-5d80c4ef60ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0461527f-9d2d-4989-a2f6-d59fab567aef",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68df013f-1052-434f-ace5-6c4e7243b62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422a630a-e7d4-477b-ae05-38c897b48e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef5da5f-c1ba-4360-acef-27fce5ee040b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa7db86-45b3-44db-935c-ca8a3f8736c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b997351-6862-4167-ac59-9117886fdacf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a78d08-1100-487c-ab1f-b60f81ef11bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da7c6fb-e93d-40bd-a6da-856e72496b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61362242-8dd3-4e8f-8396-dbd36de42439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e233e8e-963e-4763-ae36-9bdccd51bce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e9f573-c97e-4f9e-b34f-aab655118178",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cce8ec-582b-439c-8eb3-ec43dcdc1c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f1ab4c-1319-49be-89dd-f9bb548551f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006f1447-8f37-45bc-b53e-91b86e050dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "31733d97-3e00-4157-be33-3186fbbede0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702b7783-89ac-43c6-b520-0f601c012f60",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3711b0-22c0-4338-88e1-0be2d31b8005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e4aeb0-dbfb-4857-a14f-84052e4c9ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d10caea-21f2-43f1-96f1-8ffdf5527092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f1e8e9-ca1a-4401-96f4-55eb3127cb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e984c52-a966-474e-9683-6c29d3f7497e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a60e91-4cb9-4111-8e9d-7ddb42ef7712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45919283-d226-424a-897f-cbf9003478bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392a5dce-0899-4dfd-80b1-d2c73de0f0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81c68929-f8f5-445b-a908-5e5bf74474ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16abcf80-eb12-4f73-8e27-6699d468a5db",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95378187-4c40-49f0-b858-b44d0ac4167d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b2f208-cbc3-4a91-87a3-fc2e15a91334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d35ec8-3953-4f9f-8d20-40d25dd5a72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41d107e5-9286-411a-a276-9cb4aa075026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f92756-ae92-476d-9a08-737cbdecd29e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212ea856-67c1-45ac-b2d8-0b0b5289a0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9fb34bd-5460-4e62-86bc-82303b220652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ddac27-4b27-4de1-8eb3-6f925f6e5fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7e5427-0e27-48a2-bb8e-13f165aeb7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a76588-09cd-411b-87ea-d8975b55224b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ac4d40-d74c-4161-8c92-37ef1903ed0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87a38e14-e139-45c6-ba50-014f57d495a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffd65be-071a-458a-ab49-5ef661751bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4e55a5-dce4-4acb-9e5a-b611dfc66c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4e780b-043c-49cf-a7c1-ef8478a913ee",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31a03f9-8035-4a71-9e5b-12c9e8d3ac72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39cfd7cf-f445-47fe-a00e-3c71d3e2b566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80eaeb60-ce0a-416c-b1f3-ec72fa08f975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e44dc176-eb94-49e9-91c2-e93546583cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44940f8-0ddb-4fc0-8943-6bbb8100ba4a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ffc9ef-9e82-4aea-87b5-fc412cb0ade9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817d6dc1-41be-4ae9-90c1-fec40ac31c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98effa3-c3eb-456e-8529-ef038829a5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "93ab7912-9e81-4659-b80c-f574e31939de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051c4abc-c94b-4e0b-af29-a2e1e861c80f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee81aad-4366-4bc4-8f7e-a2962a994765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "942e89a9-3195-4c80-8760-bfc83a025f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bdb6587-36ca-40d3-99de-e686a16dbb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce92c75-90d7-42a0-8368-3e3b9610b7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c83ce46-194a-44a0-9f59-b3eb3ad39c89",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2592f479-704b-400e-b314-47686a0f13dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b05d24-1b28-4996-8fb9-009d5aa67e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41ae2fd-a094-4ea6-aa9d-70942d5f2dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9d99d8-29b9-4a2a-b4e0-7b180bb32c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f966533d-dafe-4c6e-a9c3-92137c661403",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b793693-ac01-4c0c-817c-4358bba943c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ceee8b-9daf-4cab-a055-9607afd1455e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525ea059-51e9-4d42-9142-f53f194c6cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b80968b9-85e5-4369-a81d-f9bb2166fb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc827b8-360a-4945-b532-09b02b2a06c2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bef186-557a-494e-b6cc-e295928db9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7e261c-3067-475e-b033-8e469c0a1b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a48a8f-7439-45e3-b778-eb7349740c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "746fc112-c3a8-4a4d-9652-f5d241002ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd106f26-02e2-4337-9bb4-8b69b77bbf28",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38385020-af85-4501-89fb-1148a72bed3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6752c01f-6c06-478d-9aec-20c9d18f403d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f1417c-61eb-4bd8-b762-afe6a398c47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "61d7a743-23aa-4a89-87bb-9f6e8a0f98c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff0d661-1453-4633-a02b-cd4fd9561794",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a2ba65-c4ea-45da-8299-4db93af491de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53608b07-e097-41ac-b66c-3ec3dee38dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd5a94a-eb3e-4d1d-9c14-f66a70bde345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce029f9-8e88-4894-abe8-182b451bce07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f83a66-996e-4e01-8da5-8e3261f84351",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9783703-d98b-4fe0-bda1-abc878d2ce82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16498e09-d198-4a78-ba25-ae79ab6ae047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7534298e-893c-4448-a79f-42bdbbe2a6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b819494c-1359-4c9e-a95e-d17c4b12459c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd0ba86-60cc-469f-9245-5a0c6a6b2071",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da40a890-85f2-4de6-8e9e-761da59ea22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59734e1d-41a4-4e6e-b41d-96b7f23e0a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6e3784-f57c-4719-92a9-354bdaa57e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "db70def8-ff16-4ef3-a1da-6f9dc6adfe1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3178040c-a779-4dad-b0c8-2ef509c70d53",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6f77cf-d8b7-4625-be26-cc5c1a4763cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590670ad-6c0c-4864-ad2f-106e9438a076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c002043a-d3b6-4e49-a53a-81c1bd38973f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "53b28147-612f-49d8-8329-5cf6d81b9a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d96b5be-1dc6-41a8-93af-0268fabd86bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7af404-d22d-4a2e-b01f-eb5739214b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0bfdb6a-23d6-461e-b400-09e3d0f4c8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdeffe20-6d99-47db-9911-7578cfd7033f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb035ac3-154f-44d2-a085-e1db988f5f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e426e5-e6c9-4834-872d-557406ef4339",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2df6d6d-ddde-4d69-8b53-706e7d04a39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4312cabb-9f6a-4033-9e70-616d94b543e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b828267-7137-4a7d-aeb6-513fa6094234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fc2838-71c1-46c6-b7b1-03967153f0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1746b4dc-aa45-49be-8bd2-0f746c5db65d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772ece74-589f-40a4-9d6f-e0b2679f1788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34a1a49-eeda-4b8a-9c1a-496bfb078bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d470e14-7f8c-4320-9c32-28ce55527c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d242b80-6918-4688-be1a-580586e484bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33dd57c-aca5-41e6-8a49-4254e05ee66f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcb42f0-0090-43c5-bd21-65dc10fd4943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3921bff7-e535-4245-ba7d-d19f3426b07b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b28fb8-f8b2-42e7-8a19-f75ec957e59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da6ce2ee-169b-49fc-9b52-1355f9f8ddbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76de5f39-0591-40cf-8b04-2bc13167e0b4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5c043c-b6bf-4a11-b017-e9bab83faca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dee955e-2aab-4dce-9aee-8f540b533f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4893daf2-5c53-4b2b-b853-dc649b937a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b266b8-12d7-4c22-80a2-6d5a3abd54fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377c1cf5-c212-4296-b999-8dfd34e4c52b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef132d79-e012-42c0-855f-fbfdd2ef13a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e375492-2716-4b96-a82a-7438e3502304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35101cc0-d0f6-4700-87c8-0a7832b043b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b438a7a-fc21-4b1c-93c0-7231c7789952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54667730-197b-4100-8c0b-6f61d0725c72",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b8662a-6629-4904-887b-49bceb871218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cbbace-c8ac-4a00-a273-f255a5a2884a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c645ae-86fa-4783-aa81-60cd48973621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50ad1eef-300e-4396-9136-6181dba5f37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b97174-c49b-4620-b44f-318592dafe03",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202ed7f9-abeb-446c-b4fd-c761fe8af3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ce734e-99be-4412-83d5-d342addfef6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e00784-fc45-471d-a9cf-c9ed72786779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ebdac68-e81c-47e2-b99c-f7c6d752e6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecadad4a-b5a6-4da2-bf18-802356a30d56",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e720674-217a-460c-a75d-c9490397bf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5553229a-d3ca-41fd-b199-31e185856b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d505735-f768-4438-951a-d8b2ba9d8750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccbae16c-3763-4154-a80f-59e83fbdf4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21455347-041c-493b-8085-00c8fe509c87",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96c1a96-a180-4f38-adab-a16abeacecb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec892d42-4f4e-46f8-877a-da5ea6868f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1aa19f9-8ba6-4dd7-906e-d86c491ec0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c76327-fd5c-48bf-93d2-1ec7225330ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea0e2ca-67b5-47e7-b4df-1146a90f1d3c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed7400f-3c5f-40c8-8bcf-7cbb191adcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32b4e20-5822-44be-8dc5-27be13a94ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac931705-874a-46f3-8046-eb289474d7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aaa6ce4-1387-49b0-a3f1-dbdef3c96d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea718561-9d39-4170-a5c5-13c922ab0339",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85bb2db-26f5-4e06-85e2-2664dedbd735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d2b451-7153-49e1-911d-3abb4703ebee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abae3c14-c142-4e6b-9a91-a17b81be5fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f308a255-1cf0-4a33-93a9-8e084b360da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f2e0cb-39b7-450b-914f-27636008a36a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d557ef8a-94ec-4dd2-9434-bbb770407253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a74527f-64b6-4c5f-a59d-51df2ad9f20a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b199e6-377a-46dc-9a92-18085a492689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f58d4b82-7447-4567-acc7-cf9047f976e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539ba107-c986-451e-81d3-d12c698650ca",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b90f204-f3e4-4e88-80cb-15aa1e34dad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f6820a-343c-407c-9a62-e0350a836fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9172287e-782b-4fce-b02f-b894dac6f931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5495ef4d-c6bc-422b-8acd-de5889ed0c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a4636e-498f-412d-bda1-923af10fceff",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc90f962-11e6-4b24-962f-cb54498f1e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7976ab-8ce2-467a-8d35-f33ec258d734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341ba2b0-87de-457f-a194-33d16ba83690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f525e03f-1656-474c-b00f-3d6a4e8510c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e767803-ddca-4779-aef6-6a361b218c54",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8774ced-07bc-4442-a37d-e71fdcd211b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bf5ef3-07c1-45a3-9d46-48146f8ef871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dffdb12-49ba-4867-a53a-ab3891a83d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31418b59-7410-4f02-89d7-1b916b746d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29aae239-6883-435f-b38c-95bebead93cf",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f331c6-2bd7-4155-8441-aa59e385d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d829257c-5c06-4eda-9bf5-05ac404b9c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fc83f3-16f3-4609-aec6-aaf20c7284d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d39020-dffe-41c3-aa82-f05137b4ed8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b4e5c3-fd86-4943-b3e4-f863fdb0c22d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a37f9ac-c812-463a-8a06-64d4323f3e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c69da7-945d-4c9d-8f3b-a6385e77f8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b3e4c4-94d8-4f90-8e40-4763d93eb30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5bef1e-e921-436b-be72-34adaec4be94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f483fb6-c018-438e-8d37-6c656def6d24",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3690fdfa-1a50-4904-a70a-5d54e4622897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc993ac-2bf3-48f2-95d9-652cfad8a150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40d5fd1-55ab-4e5b-b3a1-045bf19b4921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14fd4241-79ff-410d-b125-9f4d338e63aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1a8e99-cc31-4260-a30d-ca31034b0ea5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d8fa67-139c-4db9-a6f7-6584c982d428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3218252d-95c9-47e6-85d1-8ce9a059ac7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a6a4f3-7846-4fbb-8a54-8dea17edb48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e126c547-6308-4e33-9279-81b3459d9206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b16ebc-17fc-40c1-920a-f29f2d5b2764",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85e0de7-2dd3-429f-a0a9-b1e125a298e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422a9843-d975-4466-b254-cc2db03b9400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ce03bd-02d1-4bf8-8fd5-75bd0cda16d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb45f1b1-490c-4496-ba12-d3101c556c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ce0687-d9a9-457e-8e6b-401c0a54918e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3458bad-09ef-4c58-a2e0-9ea1e7c285b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a83d6c2-b045-415b-bd93-14c5207d7890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25279a5f-ed04-44ad-82cd-3c4d512fc333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1acc173-042c-4cff-bd3a-94d83a98fd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a520c16c-c6dd-4f1e-bfaf-d744fcf9c2f0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5773da77-acda-4a5c-9110-175cfb7eca8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c47d9ad-f64a-4e22-a128-7888d17080fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17231c91-a045-4c4c-a5d6-c5bd893a7335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bae34731-7ba3-427e-93cd-d4d7c2b9b779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52458d9-213f-481f-9487-f350ecf3b0dd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7e08fb-da94-4c02-8b56-b7792571a781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0bcf60-e4eb-4f51-9969-e7f47639e52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d095bd00-4a9c-4853-ad29-441544feeed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15a34057-ac64-4071-be28-d91d3abaadd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af84d0f-57cb-4039-b06d-51cb4eae72db",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41f66b6-a07d-4795-a6f4-b21b8fa13e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee1cd50-a528-4ab9-9851-64a82b1fe0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440d7067-e95a-4a1b-8afe-6ffb48ff92e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13dbc49a-d2ee-4a17-8424-31c83199f007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005435af-b744-4838-8a28-5087468fa072",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497c39d7-c777-4a15-aa77-437f7dc3e77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d46b249-466f-4f39-944e-367696c862e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ee10f4-01ce-4d3b-8d01-729de993cbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf1fe3b-b10a-4c52-ba0f-743b16ccbaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5baf98a-a350-4e30-8b40-a0d1fc1c593a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00bfc61-0e03-48e3-9163-b60e9e2bdbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65ec664-7036-4cc4-b3a0-a8d1b8ccaba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62ffb04-a32a-48d3-b355-d4f304d57290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e49d98ad-4145-4cd6-8dd3-74992f608d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d01bd1-c5bb-4c39-8a6e-bc81f3d7ce7d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6176204-1421-4d6d-a8fe-5fbff2a851d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06f66e7-b1c5-4d8e-aa62-2a9e4edfe379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1d6a6b-a861-495f-8a4c-c950f38f2171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "625f2fe2-64ac-4cef-aaf5-e80c62ddf56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c34071-dba9-45db-b0ca-10b2170b8cf6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423ff9cd-cb49-4d52-b62a-4b6191ffd17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d17bffd-034a-4ecc-b87c-fdbf873bf4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c906f414-45b0-47a2-868b-c89594e762e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "78408782-486e-4f33-9ab1-90829dd0dba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad6bfcd-8267-4861-a213-02f489d4bc9d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401ce9cb-58f5-4e70-811a-828c5ca521f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c23842-00b3-49da-9a5e-cd9e86a36f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b33d01-b7c1-4706-a09f-2b7ed25ed967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf73a84d-db1f-4efc-8ed9-aac44d7e0d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066beda8-5485-47f8-a54b-ac2f0397a2fb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba2b2aa-7360-432e-8670-0e97eb0e3639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a669434-c911-45ec-8582-327e22ecc6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08edc4b5-64cb-4669-8a6d-1244a0f3fbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3590bc-857f-462c-a5d8-1ff541d86f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df136b7-0a20-4f8c-ae34-37744c23288c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83538b8-9d09-4e68-8293-788370d06230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b39709cd-3fb1-4297-a040-bbd4273722cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9341c7d0-0642-42c9-8b7e-4eb7bb1321ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2430d3ae-5817-42e3-9f2e-aa1f1a6d2237"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1504768-7dff-43c9-8b84-b801fec94403",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29f97eee-23e7-4b98-886e-55a5988e2fcd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a0dc7c-3c2a-4dc6-a2e1-07356ce2a5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dde6cdb2-149b-42fa-9485-6368904ebc55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cf0332-ae51-4778-a26c-126eabf25de9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f59f2896-5ea2-437f-9b06-e37347e120b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5191c53-9d22-458c-b61c-b6758563677d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "337c6800-b246-4009-94e3-bc7df0a33ad5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fd10e9b-d96a-4a34-889b-efa47915b6c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f3b618d-d931-418d-a4d4-8e08f7f055cd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2bc9021e-c131-4858-8822-2c14d4a8a58e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0032af1f-ea76-4b2b-81c6-d6c446933087"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "82c505bc-2b0c-4318-ac2c-41dcb22ed2b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cdac9296-e52d-45c9-8f03-f221521c4271"
                }
              }
            ]
          },
          {
            "id": "57a0f535-6078-4f97-b216-de3853a29513",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9ce38fad-4ae0-43aa-83ad-2238aac27a18",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9b5067d-7575-4549-aef5-ceee0e7e7d07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5d6c4e6-0c15-4861-bec8-65cee815f214"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9668271-26fc-49d6-a8ee-db431fd6f731",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "edac3619-ebf3-4fee-8992-c0a6d609d786"
                    }
                  }
                ]
              },
              {
                "id": "f582b90b-17f8-445e-8423-9c9715860aa9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bcfd41a-db97-4a44-aadd-9942698b8747",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ecd9ae1-7f18-4d73-a215-e3389311d0b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4983fc4-e673-4ed5-aec1-ea120a259a5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "db2378ba-391d-472c-9914-a946dbb43747"
                    }
                  }
                ]
              },
              {
                "id": "38f42721-587d-469f-89f5-bde167adf966",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62909f8d-9a83-4711-bcb3-94edee9f18dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0351f2ff-03fa-4d9d-91b5-ee369dc31eea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3924c100-7a07-4809-8be6-2cb537aaf05b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c0ec1648-cf15-4394-adb2-e72ab089a345"
                    }
                  }
                ]
              },
              {
                "id": "d3d79d63-0cd1-4419-854e-d95ac993c379",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7bfdca5-9aa1-4c52-abc5-e569af77acb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dcd4459-ec44-4474-ac03-b7e929a5b8ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7764b9a-16c6-4c07-aac1-ded3ce2d3a36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3c0622c1-4229-43ff-98bc-718e266b773f"
                    }
                  }
                ]
              },
              {
                "id": "6c847729-0ad2-4d69-9f2c-d2fc0c05d2c4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c0d35b9-6001-4891-8d49-e4be30dd2d9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbc4c4ba-561b-4137-a0ec-53c3c836927a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8d66004-2948-4719-a7a5-299ffa2732f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0ff2c098-cb3f-4b37-950e-47d86ab4868a"
                    }
                  }
                ]
              },
              {
                "id": "77f62d51-1567-436d-a805-1201d0ac7ba7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0d5b097-433d-453d-a2ad-c6d4dd802b1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2985c957-cb1f-4cf9-b30a-3c94d44d2eb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82c91860-4672-473c-b57c-e0b0e1db633b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6143b0cb-bce7-4037-bf89-a991409539a1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "234c1a1a-ecd7-4f85-be8b-ce4a073634fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df6a144c-9541-4a73-bdcb-21dc25c04eda"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c9cae761-ee58-4442-b1cd-db90f39cd708",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14345d17-4724-4252-9062-503edae422ed"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bef8ad60-3721-40e9-b7f2-0a186778a50d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3673307c-af9f-4d64-ba7a-e27f42b505fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "927d5a02-5bbc-4f95-9f0e-15e55e2e73f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00c0c00b-6eaa-4f3b-8e0e-789429924527"
            }
          }
        ]
      },
      {
        "id": "ef6af300-295c-450b-b0c7-f1edf289a1c7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2f4c96a4-983a-4bf9-8fe9-8b33554aa7b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62af3733-d2ce-4081-ab51-c9c889a31e6c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "544214cb-2f79-4595-9af1-8e85690873ca",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c86b713-c0c2-41d3-9ee6-96b6dc1ad99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902cd6b9-c3b6-45da-b133-3640f17761e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5db915f-1948-4072-9dcd-3bcd1fa7dcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "54cf182e-b1cc-4b19-8d60-9ff93db3fe62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe142e75-40cb-4b37-8e2c-bae35f884740",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef689cef-4207-4fb7-ac1a-61b12dee7c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd6eae6-51bb-45b5-923a-f8420136d211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29934df-63fd-4a6f-ae66-0de92028cb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aec6cd2-9bed-4184-a435-06040e985253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0baac0f4-3ba6-4165-9ed2-f56ceceb312a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3232a0e1-9001-43af-b727-e41621ebc0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7734a7a-8cdc-4451-8b09-b55902043882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b68857-957c-4525-b11c-daf698f36037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb0b765-71d6-4fcf-b10d-8c8cb531814a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23ff9ef-4a4e-4ca5-a182-c5c86682c8cc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9533407a-e3dd-464f-ac3e-7278ff9fcf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67204ab2-3efd-4c04-90ea-f9b105ee4776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5e2f98-6927-410a-95c6-3ed2bf0ae9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f26dbc-6401-4d9c-9a01-3748434205b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe41a156-a28c-408d-a3c3-ef827d0a3f0d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce95d77-f09f-4b15-9ca5-edc922e877fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d46cb9-7637-40c0-881e-745fc5669f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfffa73e-f3bf-4f0a-925e-fd8082fc68bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43e70d4f-f408-41eb-bca5-5f78dbab8866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6964eff3-0f38-4f00-b93a-b6212863274b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30915ec0-2201-4823-bfa0-c77425ef57de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1658eb9-9f68-4147-a2ec-0a586b30da98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6ba953-8b5a-4724-8be8-ceedd850e3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53c0e6bc-7fbc-4701-93fe-219e9a4dbeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a16e1a-a2cf-4269-9059-54c8f66c89db",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1aca5d-88c3-40c2-9b20-decce09c3264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed78a5dd-aef2-4da7-b470-1813664e9cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3265b232-d88e-4c16-8513-4c6a42f00ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b1802d-9aed-4032-9fa9-ae304c7da36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9629c8-bd90-46c8-abc0-5fcca5df8d39",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3719d4b-7a5c-46fd-a8f0-f5046daabfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e877b3-b548-43f5-9bf4-3ad2bb9cea8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b294e676-3f58-4f8a-91b3-93ca9b72aebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0836c4b2-a714-4f31-8029-8c936d889a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d3221b-4a5a-4a01-bb17-e39c70ff9007",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea6a352-7102-468b-a81e-0a1e12142764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66dcc632-be09-48d2-afdd-68c5bd172e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe78d4a-046a-4b10-b73a-84642fa30df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e5bf50c-b73f-442a-bcc2-61c2f96c9d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eccb944-29cd-4190-aa57-e4ea68ccf5a5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9432aa1-ce3c-471e-8d91-b4ea161e3013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8a0e79-987d-4f2e-9f9b-d1337186f5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a593ef68-24d1-4850-b304-fd6aed68921f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fecf7f1-d9db-4495-a9df-0968d92ea212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae512ee-1628-4b7a-84a7-fe3fd36760f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c108184b-611b-49cb-b45e-50ee8f0d6bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bebc73-2380-4e51-977e-e1ee520c1b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ef34f9-85f4-4c35-8451-00c4065beb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "da60dfbd-30a7-4419-9f96-62d517cc2b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9318e4-88ca-430f-a94f-99cd53e33f23",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2baf4c-db6a-484b-9458-1d0c599bd146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89363cc-63ce-4f8b-8aff-f9ba773a4afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e456970c-92cb-433b-aab0-e4b560a3ddd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f866eb6c-e6b1-4c74-be82-db1a6edfc55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab22836-248d-4e41-bafd-42fa81929fb0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609d5418-a5cf-406d-ac36-65431c73c680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4579dac-d267-4ef1-a472-5e4410866a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b788ec8-d5db-4bdb-9ef2-dbb6802170d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e962db08-bd50-48d3-b681-524864ce4b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7141435a-44aa-4c2a-8cac-ce54a5679a94",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90122ef0-4924-4bb1-97bb-e54f5d538ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9554b22b-039a-4cc4-8b04-cfc18018d383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a17b69-5824-4143-ab81-cc24fa5a0ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee683e3-9d63-4ec2-91d4-f04201fcdfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ad1d4f-27b1-42ee-aeb7-b23e09bfc71e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85ae4d1-bdcf-4c3b-972d-c58db009ff8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4530e3-398a-4241-8247-98146c63b572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096f56f1-bdda-4b41-86ff-eccefb99f56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "32199aa9-3300-462f-a952-cff9a8aa51c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44aabd1c-c0fd-43fe-a02a-6d3775ee09ef",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba37eaf-6299-42ea-83ac-02f163405912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c2bfca-bf71-47e4-a202-d47cf46b5747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49f45e1-26b5-42de-8aac-5398a8e61a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "24c5b5cc-d4df-4acf-8010-41d9e9ecd0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e80a066-e4ad-47fb-b1d9-d9f20912c9ab",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b80eef-1728-489c-8f49-a46cce785a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd573a01-0366-444d-82ca-218ba6880e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3389e55f-f23f-4713-93e0-4bbc9623a715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab933064-dd14-4b36-8e9b-5227ecb42e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7c7207-8317-4aaa-9642-7ace86352e67",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c6668e-b17f-48ad-9e45-893efaa3a4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17598e81-4ce5-4143-9a92-c73ec485f13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5000b392-9539-4424-9bed-2753681f22ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7276b17-ba0d-4efe-944e-01da019b98f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d0ec08-1438-43b5-bfad-3f96a3a5c3a3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074ff214-fd9a-4d9a-a147-01ddcc05fb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd72bcb-3829-427c-800f-26b5da94151b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc7bd6-5377-4be0-866d-7c746ea66708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e2cff83-a458-40ee-96cc-f95151f57230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d578af5a-37d8-4c69-a690-96fbb39a61ec",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195120c6-9679-47b8-aeba-dd7d3b4cb822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db3b099-43a5-4216-8225-92b73b3330fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0de06e-f283-42a3-b567-1f31a637eb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b39e3474-79ba-4950-841e-a655d3e52d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd29379-3582-4d8f-ab33-4ef5b2849974",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9250b7-9e2d-402a-a350-bcfbcecd01ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57ce65c-1bb8-4295-8ca2-578a0e711c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a425b3-d375-4312-8f06-d1d1c40dbc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6549d75-9eb1-4316-8759-81919a2632d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694b0692-6ba0-4427-ae2d-a414b025f010",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f6315d-4209-4bb6-9933-2d704eb66e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5bfd61-3b37-4f79-aa99-7b0cb316458b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d496b74-0bbf-4399-98e2-f544e79d6bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db1425f2-2cda-4266-bea7-68e0daec0333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10841be8-91b3-4ed2-885f-39416935203b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840efd53-2d7a-4d4c-a8a6-ae5b3db41a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9867ac29-72f1-429f-82fd-c88fe7a2ff79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c123948-b3f2-40d0-930b-f04aee022a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da9d03d-0bed-458c-8f60-07809c2fbec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c432fa62-7c80-492a-8e72-62bde7cf6c0e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a6ddc1-58c8-4a2b-b6d7-a0e31aa08be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac285ec-83a9-41ef-aee8-2b2628486586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19eb7399-873d-47f6-9328-01e73f389e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31f20c2f-0365-433d-8324-475a65ae23fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d563e581-1971-4341-ab78-12a72bb950e7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2fca52-bf1e-4415-8869-f66808b27136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc23499-13d2-4afc-9749-c5a9d225a651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a1c006-6e83-4418-b136-0c08cf3ca544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9063b1d-a15c-44d9-a3a3-b8ccb5637e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96b76d1-d6b9-4ef8-a436-567c90621735",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c7cba9-9b9e-48f6-b316-77ac6e2f949d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1011e49e-2519-4aa6-83b1-35c36f236f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f5c815-46ac-4af5-b783-f6f745659d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00f0137f-708a-4bc4-87ed-bb002c13c102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494b567f-8b68-4006-8373-52420341205c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ea3583-5955-4ef7-bc5b-a88915811562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149322ad-e168-47ed-9504-7fc3f3dd0183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9d059a-c21f-40ed-a5dc-68bc3dcd692f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "413dc4b5-aa49-4035-b6f8-2c20f0f0a4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d525f5b0-e88b-43a9-909f-88bfecc89b1d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a989db64-dece-438e-9c6f-b19254f024f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d88a3b-1faa-4752-ad91-f5429d5abde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08275eec-f8f2-4d78-93e4-21efc3ab0dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5526ad63-8acd-44e7-b5ad-0e9d6af90222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5134ccba-95c4-4e35-a078-8d0d827a6d12",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c4f64d-d58f-4e3c-9ab7-6eb35e391120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ab6686-75b3-4f80-8605-949e0bc8f09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e423105b-16cf-4bdf-b21a-746f23f700c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4de6415-223b-407f-b3e8-68fc124a6a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033ddb63-7e2b-409c-861b-26fbc09bcbe1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db839d04-d0c3-454b-9b27-9d709c8ce286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a729ac79-59ba-4677-9115-21f6afc170a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3e91d6-d0e8-416b-8853-0890c44068d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3897135a-66a8-409f-b222-8e18a8696454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317a810b-4f63-4e5d-bbcc-052a3d3882c6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c19cb9-db17-48de-b1e4-b25e3ca84801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7b7229-c7d5-4e15-a50c-5c1aaf9f2c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8d3c41-bea9-46a9-a545-932782ba5c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24875d47-9c18-47c5-9e70-44b708c30886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b82eb7-f271-4a85-adc3-b5f24cf01d80",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce852182-17f5-44fb-b976-8ca38098029a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006265ef-0184-42eb-b954-b1c0fb516ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da93d0ab-6977-4835-88ba-735ad1cdea1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "818725cd-792e-4db4-9ac5-3e3cfc6f02cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fecbe778-e913-4cf5-b438-8db3e166760a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6968142b-04f7-4d21-a3a8-3cbac0dff88f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b4795d-44f1-4280-a0c2-4e4061d9bb8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a134bc23-6486-4ac0-ab35-4aaa05855ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b555ea-0c19-4b46-a426-bdb7011c9b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "763816cf-042e-4a8b-9088-5c0e09a315fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5a05acc-c0a3-46ca-92ef-de92a8aaf87d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "389c9ef8-3445-44f2-a156-84f83cd405a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a08e1258-d02f-432e-9dcb-3192493e854e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4cfe849-ec2c-4420-8cc4-03e423189199"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c6c03d6-9a63-484d-9cd4-686cf399f3cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fd3179a1-0d39-4977-bde2-066303a708e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9855400c-5481-443d-beff-b788d5f4a05f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abac6bda-f0e6-492a-85d4-1af3540fd463"
            }
          }
        ]
      },
      {
        "id": "9df2e309-a345-4426-8437-5e6547d6df1a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "45cab1c1-eef0-4275-a977-89149482dbef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8dd30ce-cd72-4c51-874a-98777c074f7f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "59a8c2c5-e0bf-41fe-965d-a2a06ccbc11e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f312b6-755d-45f3-bbcb-2ed9ed4e2f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd300f92-d1a6-4bf9-8a56-f79280a7b065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca403a3f-cbd4-4eca-9378-43d895bf7386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5bee71-01f0-429d-b4d3-d8b3a88a4fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bf7dc3-0c9d-478f-88a8-dd611f462660",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdc7484-cbc8-4189-8831-7f488bf86a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe340967-35d9-41ee-a80c-71856f5d0627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56ba9d1-dc47-4317-8925-0284920e1503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c28bdd12-bba3-486e-8192-75a00744360f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10d71a6-f992-44ae-8d0e-f7fd4421d730",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8d5b4a-4b07-4ae2-b74d-b6874e7eae51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a68d22-4431-42a2-a1c4-f159089a27fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cd29e7-7a30-4ed4-8cf0-72ac85f1babb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6b2c98-eccf-4689-9cd2-6dc2a95c2253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d6ae2e-473f-4106-8891-0c0c99589907",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3270ee89-e494-4e29-bc18-b91129c74637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e28753-1d2e-4824-b004-409e8ffc943b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3090df-6ce2-4888-8018-1bf0fdf68f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c760f2e-6051-4985-a51e-546e83568156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acbf014-7a03-45c5-bbcf-a6877561725a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da082499-51da-428a-94a3-daf4a392a8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0b3bf0-db85-4125-a57f-c879705ec6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f95c1f1-93e8-4e26-9d67-4b4dc6083180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb21ee6-7004-4f19-87a3-fe2645022ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762752ce-ca9d-4800-9b04-e9dddff5fe6e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a5f1c3-ee83-451e-8724-47f9f1088812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5eb2c1a-0ca6-482a-ba8e-c20b49f62cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6784f4f0-56b6-432c-ba7e-3255cc3a5b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53c3ad04-3022-4fd7-8fa6-79f37dbcb83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc44179-8e28-4625-95c6-c57866a50aca",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be65ca6-d154-44a6-a85d-28986efd1667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043cd3d8-d6ff-421a-8894-a1e6a4323142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e78760ff-394e-4180-aaf7-c5657accad5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9fc40cd-f224-4e7e-a539-32aa06ce4fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7171fa4f-c7d7-4559-928f-8fd77c307ede",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fbb4de-1428-4347-b76a-a79e66987717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d93ea39-0330-4751-abee-0b8d341c649a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d171fb54-24b3-4347-ab49-02197160a78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70f069cd-f712-4b44-8985-b0a632d1f8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc6d9ea-08d6-49a3-9ca5-6ea59d6e6758",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164abbc6-e8d3-45e7-b023-125c98241eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822d7643-cc5e-46d5-a371-da4afd0dc409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1269e60b-14c2-4048-a4f3-e0529f84893d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2d694a-49f7-4700-8b5d-8d66e604aa35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72386090-f9b4-4b5e-aeff-403de1984d16",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1e0d21-58e6-4ba3-92d5-8b4a90763bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846aeb11-9e7d-493d-8854-85772ca4c0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef466942-2cfe-4528-8d72-361f10ce447d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b76532-d38f-4050-b4ad-a0c630012687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836f16dc-3d31-4227-bea4-a82f52866a66",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d1353f-be6b-45ce-88d0-761e867b5b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ef776e-6438-499c-87cf-8e1c6ecc66d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248ea388-fb7b-4ae2-8fae-543fb9c5cd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3a3383-03eb-4025-9ad2-02e4a6066f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8c6f8a-abde-4d5b-86ff-cf999e781e97",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917545d5-85eb-415d-9990-5851a999f0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6ac2d2f-e4a2-4d82-96c0-10ca6527dbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50339ba-0713-4cd7-8c00-d21af49e4c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b99c58dd-646f-483e-a1dd-27a2c8d9ce09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6346cbf3-fc5a-41c0-a09b-03da0af05b34",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1952017-3970-48a9-a572-2b9ee31fad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a52591-4436-4a47-8cdd-5e850b0ea6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e28107-f244-488f-acaf-30fd4be7418a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5615d6-9086-4016-bb3d-665954bf0cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720324ff-9d68-41f4-872f-5c197f2d84a2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8209adca-023c-4922-9e4e-46316e066fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "339bbc46-b146-4676-917b-5f4e58bcc15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c339452-19f3-41a0-a49d-874e935bd2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcefae22-5326-4379-a989-c51c797659ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a7f5c8-473e-4f4a-a191-a1c3185dff96",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a30a28-b384-4281-a178-1cfc724c7230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa76d7a-5858-4344-92dd-2b5a8bc51dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02984c93-164f-401a-ba54-caa8b41613e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2918efc-5b82-4b4e-9b01-4ff8a75a7a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b17a6e-45ed-44fc-9fc4-122e8f02730a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32eeec40-bc13-4386-a59e-ddf498083363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84a0c2b-ae5f-4bba-b5b1-e6d55b73345f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b47433-c09c-483c-8a90-5f3dfffa7335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7fa0c4d-ceb6-4eb1-934e-4446ba21a655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05be76b-554a-4900-8faf-31ea1b3e8570",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844d6466-4b0f-4049-a33d-7fdec3e648e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198ccc92-f15f-4861-9578-150eb7e0c5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f895cbb7-de27-4489-9e65-4ff6cc44f197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ac5bae-ac33-4c3a-9634-4a6159d5062a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19eb463-f82d-4e7d-8f64-ff33a5c9a4fb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5252e78-d26b-41d7-bc10-8c134e8b8f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcbdc2f-ecc5-4c6d-b14a-58f972090b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49133d41-716f-47df-9d02-284fc404d029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d46f9e-c9ce-4121-b14b-3ebafaead407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a47314b-23ee-4ca2-bc7c-5aebe2e4e727",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b972dcb9-8eb6-4cd2-9859-236feae8949b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc8658b-6c1a-4c05-9c4a-3fcc8334bbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccc395f-8fcc-4d50-891c-06a10e3a4b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02772025-28ad-42dd-99ba-cb0c28727481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9977b8e1-2942-4309-8314-be9bf49e3156",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e933a0-790a-40df-8118-646e139a9cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f913ac42-4475-4e38-9deb-7b432ed1f6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42e7a0a-e827-4c95-9ce9-340ccaabe3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06635685-a593-49f6-97a8-b2c39d1814dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08b2f29-000c-45cc-8a95-70d55930d344",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c91fc17-0e7b-44d4-8eb3-61a50caf8b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87d1d31-a138-43ec-870e-22033d432f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8769d72f-d120-4ebd-bdfd-35a8b4e74b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0684a70-66af-4f95-8a65-595cc72cf271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e530165-3bd3-4e65-a248-b66733a4b2c2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf583b4f-6aae-4b2c-9074-517760ee1553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c85d8d-7f02-4a95-8211-64d1f46590c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3866b356-7c99-488f-a0a6-edb6b3433f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "230f56f5-6171-459e-84db-471fc01ecfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53d54d9-5cb8-4881-8a9b-be56981ff955",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f059f2a-aaba-4e43-bd88-72aef555e4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0915442-c40e-4ba8-bfaf-d092bccba04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f124c9d-0da4-4f8a-b03a-1f507186fa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db31f230-c0ca-4051-a22e-cf9c7afac1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3433ca89-823a-4cfc-8214-ad584100412b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330e74da-b0b9-420c-a9ce-dbd878c7b15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20f09cc-97d7-4610-8823-1dc760367893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a573b027-904e-4108-b296-3bbe14fd4307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b602f52c-51dd-45be-ac31-c3669b20847e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0378d53f-791c-4840-9e34-9fe808245111",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caefad6-dc52-4adf-bd61-fff3457038a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac34996-eb82-4349-a199-8570629c62b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618b43bb-b99e-460c-bb6b-aa3384e7d8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4033153-0071-48ea-857f-e8f5fb0b8cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6061b7-b879-4611-a921-aef100120823",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ac0563-09a9-4d20-9502-964f6df62898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e7b49a-1fe3-45d9-811d-940ef861e582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef88537e-af8b-4f71-8f4b-efb1e5df4206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "904e4bfd-cb84-44c6-8503-8ab3af5d563d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b82730-4447-4ea2-a4b6-57748ca36c61",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0159b0e-a1b7-4012-8b04-05ce8204aba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec19027f-7f4e-4dbc-97ef-e2c28edaf3b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d668605-24e3-4451-81bb-d813210fb024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6027a8dc-4238-4a14-81f4-a5736d6ee72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be21ca5-eafd-4643-a763-d2de1d6a004a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1f4e43-5f96-4af8-aac8-7543111362eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31314847-ba9f-40df-8cd1-1ca3ab538e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09782b8-3536-44cd-af80-f9fe04e65042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4239befa-282e-4785-9a27-947fb53869f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4160d1bf-6568-4f68-8313-0f85c6b9241f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af4c6c5-a4da-43af-9248-3dace25e059c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50542277-d543-49a4-ab4b-584b9afc2b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c24624c-d80e-44ef-9065-d449b34e62a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "314af41b-5829-47ca-a825-9d316bc27f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e4f38c-185a-4858-af3a-a8e48a281f42",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ada852b-fa7b-4aef-ba38-0f07914e4b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15af49d7-f641-4dec-a47f-32f92892010e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2959c3e-6e95-4ddd-a073-701c05544b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6384e4e5-c7e5-44c2-b029-2f9a98930e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2b47c8-d775-42b3-a5cd-ef5618411665",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5609fb27-bff4-403f-b7ea-313c138e4ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091c9678-2348-4420-ae82-b869e59376b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efaa993-400d-4804-b54b-98775961131e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38185d82-450f-4aac-bf83-e13a78fac832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de2b13b-35f0-475e-bc16-a3887bcc7e1a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cb90f9-06e2-49f8-bdd7-4f2b7a9d57eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d564d31-4593-4707-ae32-49cb38690910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5075aa0-25ee-4243-92b9-01ebb093cc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbd882d-2d3d-4d00-9093-9966c3f1df5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bb8c7d-833b-47e4-b949-20ec2fe0d18f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9b49b1-df71-4df7-b561-92842ed95aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4205f2-58f3-4fa2-b7b3-07a0698d91b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc82a99-9a39-4d4f-93c0-82759c892e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f683caab-c7df-4250-80ca-f1cefdd8a7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e53bf17-051b-4ccb-bd94-ce07ea3f0009",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df877ce3-4583-49b2-b4e3-172953bc0213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ef1221-b365-47ae-a289-d94f325725d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ac670c-568f-4dcb-b6be-d807f2eeab29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8610a6-734e-49ac-a8d7-c72fd99881db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc8a475-478c-46b6-aec7-9fe1347ea15f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df45ab0a-b6fc-48fc-a89e-408f2511e56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081b70cd-52bf-43fc-a876-28cd13aabda4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867858ce-afcc-4208-b75f-0f5ba902b0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a26328f-ef78-4f2b-8735-0a487bd13351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b008ae65-5829-4e69-8be3-fe7382cd8b39",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154d8886-b449-4028-aaea-cc048bd1c230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ee7876-2543-4fac-930c-e3f731e4b58b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4945ddef-1ee3-4a2e-a96f-2d81ae88c366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0779592d-78d4-46c5-b7f6-f29dfdfc61f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b593870e-76a9-4493-8520-a3155d69dc4f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ef6aa8-9857-4013-aa53-03b49891e847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cb2d1d-8fc9-4c69-83d0-411b959b6d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef49cb9-238e-4d25-b524-0b43f85c55f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "268f11f6-b52b-422e-a751-1163903ca423"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db15f320-3f72-4868-b70d-16bed6bc911c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42f7301c-8bc8-4312-807f-0eab142067c8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d35484-7427-4947-910e-373b0beffdaf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "03ef1353-8c15-4f87-880d-c2e33035c3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51842b07-aa13-4ee6-a729-2cda5e95d50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c759d1c-72fb-4e9d-909b-51dbd483159e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c094e3c6-f1de-452c-b62d-1191c421d23a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb38fea4-3a89-4e73-86b9-d65cb47b9e73"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99116541-1b9d-4fb7-bfb3-b3bdfb68f099",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d68aa49-3131-49e8-ab9f-6a49b15f5df5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8af52723-db6e-4d60-8aff-ce1a3c9fb583",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "50fd088e-8411-43bd-9082-1f99fec47f24"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64cece2e-c0ba-42d0-8059-ff2524f836a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75e5d79a-703a-4041-a35d-0ba5a6401d4e"
            }
          }
        ]
      },
      {
        "id": "0d3f0dd7-0762-43e1-b9c7-a259a48ab2fe",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2a00939e-177e-4672-b788-d2bd38db57db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71eb89f0-a792-4467-a972-39dc76929574",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "24090345-571c-41bc-8c77-32b1c9bf0bd7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ec37ec-415a-447a-bc41-9f96646c307f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1da839f-7b91-4031-9475-88160afc968e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e622b4-0f56-49ca-8b7d-a16278c229cd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3feb75a3-be6d-49e3-8fae-8f89d7686e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29798f6-ff89-42c7-9439-9a05604f514d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5215c7-7c79-487e-84c5-55a6654a8286",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d3fc38-b179-4e02-aafe-3e6d62432fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bdc9934-115a-4af7-b72d-d0755455cbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbf9cd1-afdb-436a-badb-97a1e058d9dc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff64216-4d01-4198-b586-bfc6d504cca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d7308b-c996-4244-ba59-739263bc2e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91d9ad0-246f-452e-bfa1-dd78afb8368c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360504e5-962e-46fa-ab6a-6208fa5db786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f5c8c6-d61d-4b76-b7f4-ca0d3779dc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb330353-462b-42c3-8b8a-c3fd4218eaa0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a5f39a0-d1d5-43da-a484-da87b0d218d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad7c3c4-59e8-433b-898b-6b29ea05fc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c00f77-661c-4486-8355-81418b9e5c9d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95a8909-5d5a-45bd-afcb-a65ce4e60ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead8cac2-6769-4fe6-a144-02701af51465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0325f02-d700-44f7-ba53-e17567260689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05611cfa-50fe-4655-b495-940a9a1586d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f7115b-3b3b-46e9-9f02-e68a7d1331c2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b60f6e9-75db-49b1-963e-3ed483ccbe00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4d72ab2-be37-4b3b-8564-40004cbeba00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675dcb09-b05a-4b0d-9908-28f61645ab5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe18248-b910-4f68-ad85-e43a10274bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42c4637-1e71-4424-8b80-197bee553a05",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3531f05-dcb0-4891-a5f6-e78dbd3473a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8357ea9-aaa2-4c25-872f-9ac795897717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234a9241-2d6a-4c30-b1fe-a1d680a15fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c39370-c390-4196-a562-65600b3bb22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac87d2d4-f125-4d70-b3e3-7037b397a7f7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15040480-ae8b-4114-a84d-7955aa946757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "261d7326-4a1f-4568-b8bc-7d17006555eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5056f0e-3256-4f9f-a07f-4b14ccdf4201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f36a63-4d78-477e-aff5-09a347ee925a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b081cc-f3a1-4053-afb9-3b3c1e36c584",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488f8c9f-8180-4266-a4bd-2f02c2319516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec04694-2f96-462f-9a06-dd78875d4b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c728cc2-0082-4acd-8b67-a66d1df2b8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c54ca6-d72c-40f2-9f0a-fce3fa78d667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17476deb-5896-47ba-b90a-75896049c3af",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6063cf1e-9c4d-4fcf-ac52-1cd96ed7c764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd666c72-4ace-418f-9431-4b2cc384cd95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397368a3-fd39-4636-8228-b41533a86169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ce9065-35e1-4cd2-8970-567b289f748c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e3695a-b328-4439-8fef-188b54973012",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e966a0e1-9b2e-42af-805c-0e2df94fd802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08315e3e-7aa1-4f3d-bfa8-b49210a02bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d758983-cce6-4745-aef3-d68268a93fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a466c481-8b74-465a-8ca2-e1fb70f8a6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c9f136-6054-4ffe-8c08-4fb71b42b572",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed483b4-7a01-40d5-bc09-22e7ecc98370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d10e927a-ffdb-4b33-a027-ca8e823b8836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81af2858-5aa9-4996-b0fe-f1535496c90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ee088c-64fa-4de0-83d5-a38379906e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da34013-c498-4910-beb4-aff24e3f7a5f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43dde88-b87d-4ba4-b4be-416b5d13fd6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fac1d91-bc49-4d25-85e0-28b561cdb8ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894482ba-d7c4-4f15-a927-ca9e360152ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846e8c78-9c81-4457-a06e-0f37ee8058f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614192d7-63d3-46bb-a602-d5f6d2fc5160",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6237dc8b-0344-46b0-9031-c164cd9723c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8114c72-e4dd-473f-8a4d-ce96aa5606d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55006a51-d71f-4c46-a95b-c9b12082f489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec853511-4ce2-46b6-bad4-c1a30c6101ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2761c0-526a-45df-b44a-0c003f5311fa",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5c103e-c623-4ef1-9949-a710e8a144c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e9a50c-1324-4360-b413-5c31f0b7786c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be5829c-f7aa-4373-9f3e-4dea1aa144d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1a575b-7e6a-4922-ae19-1539365fbfa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a002da8d-71e6-407a-adaa-de2738b8b6c4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf53f848-d9ee-4e40-84f5-091cfa5eb266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e25bc1-2e22-408d-be74-4d1a06229bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edb89e7-f245-4a8a-ac3a-76cdc485ec9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc32bc9-8d68-4876-8ca6-d27637df83f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039ed474-0023-4ed2-bc40-f6a711e4b391",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262991d8-842a-4313-9ab3-37fbcde12b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a00fa0-708c-42d1-8098-12855d423005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38be8765-5c9b-42a8-8cf8-0a298456c4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6967ec8-f83e-45da-bd82-1383ad2f3c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc22520a-cdbd-4d51-8805-64d572dc2647",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dfa179-818f-4e94-9e58-0b78005167ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41975ce4-1cab-4dc0-95bf-e47a3625bab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4199ebb9-e628-4e06-b768-f7de0589cd36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35aebd96-3075-4a71-be7f-ce12500aa271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f63aef6-2334-4e20-a24e-2a6baf115f56",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0d9376-a7b5-4149-9f2e-8d19e2246043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a184f1-a62d-4589-a08a-ff08ace261ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63661e68-02b5-40d4-afb2-da6ea177e035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7de7fe-989d-4220-a5e1-35044ed865de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c04e288-28a8-4812-9dd5-7436987ae241",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a9ceb0-749c-4530-babc-c82d815beed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72056d29-a889-4ead-a5d5-ba354063aa52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715a65ef-f6ab-4b57-b4be-ec001d07ac3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6a078e-bd47-4746-97ed-caa8b09c90a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638f701b-d97a-488d-b0dc-e846b5bfbbf7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295da7e2-8870-4116-a0cf-ff7ae77244b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f8c669-9b36-47bd-ace5-ab113bc51f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "117c53c1-8d07-443d-8e95-2135331a64a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4235e92-9406-4dc1-9e47-6bd9e3d4bb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca46f37-3be1-483a-b192-7f16d076bd43",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af50b744-08f1-4ea3-90ea-c9c1152b0d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "583fa5d9-3580-4d6f-97c0-0bae926b5c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3785fe43-f7ec-4c1f-af20-0a537c2f641f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb7c45c-ba0e-4097-bdf6-41358bdb12ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb2c260-48ea-45ee-ae86-819d03e0967d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b81fc4-f9f6-413f-be7d-f24fb7d49981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "423d0804-1595-4eca-8947-2a510703d72f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b9c0c3-eaff-4bb1-a0ed-2a4c18d61d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964939ab-1670-4a53-a0e5-d02e7a1ce810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb8e1d9-0bcb-44c9-be80-1ac45fbde16c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3440ff8-ab2b-4d76-ab59-7b58da2472de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d28b1a0-f217-4d55-ac88-2c129d6bca09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9aa9ec-b5eb-491d-8537-17fc8e13cfeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69acee34-a6c4-44e1-82de-3da30e86e505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b040ea09-9979-4186-aec8-4d401597d2de",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f3c607-9293-47a0-b99b-0458bda8254a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2b6d83a-edb5-4341-ab1c-03d8adf704ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e34744-79b5-4450-89cc-52f0825e45fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff9162c-8fe5-4479-9686-560428906368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec72cea-62ee-44e6-9cf0-ab32b2164b75",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc86e1a-df4e-4ccb-900e-00442f185dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7c4b5c-1c45-49ab-be3d-fc95767dfe9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafb1285-d9d5-47ee-b6c0-7081925de6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81133470-7d9f-4be5-bc57-17762a5b1123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3e99ef-48a3-44df-8945-4a31ce5d9048",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48573aa1-c847-465a-8301-585fdabcdca1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a6a5229-f8a3-4809-8049-1f4ee63bcc0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb7c1fa-5797-47e4-bae6-568069d2e960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5df0a3-e428-4a71-93ca-42f035dd43c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d641c108-4574-4384-89ec-6e56fba90e99",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b30c52-bd50-4387-accd-354755a2d3fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa9218af-dec3-4da5-a53c-89caf537e0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17c56b9-93ac-418f-95f4-fd6892f0f9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd04403-199d-49a5-8244-1a4eec560218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3211e8-ebe4-48f6-b3d3-f7f1810cb40b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531aeff7-a252-4fe0-b8c6-c45966c636b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3360cd8-1a1c-4af2-8195-d10a6544d3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8405f0b-cdb7-4c75-9d11-04831509b63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e99804-e12b-4def-8b15-4e9d385c7069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ea56c6-8225-4422-90dc-e7b918657d51",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d95c2f-519c-4162-9e5c-1ad54e4ce98c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f65db5b-54c3-43e9-abcf-9db9984118d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb5ac85-a13a-47f1-ae55-7f59b2e6cca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a89c249-ded3-41af-9bde-8abd6f713df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079fbfc9-bead-4c94-8b94-689a009b861f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619c79ff-6478-4809-a4f8-de1696d0d2a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6a40cdf-2222-4b4d-8cd4-1f348e66e316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f06b68-9f45-4927-8d85-1b79dcdafbc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c38e03f-4414-4b57-bd22-38eaf4ce5d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659eef2e-ffde-4068-b4c5-d3396a008c92",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1955e1b-e8ae-4f5a-8700-c4a0a396f1de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfbc1fbf-d5f9-44d3-bb2b-d7540131aa65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8091dbbe-5960-4e10-b8bd-f044d68f1d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23001c9a-0d96-4304-8522-171d0af39511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f6b010-3e0d-4a62-afb3-5f0cb3b28142",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a013c0-ef7f-4d20-8c40-6a42065568ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933dcaaa-4ca5-4b60-98e1-a99aebab3e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189cf6d0-49c9-4bf3-832d-1544285d4d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53a17fa-8a91-4677-a8ad-ee71ddc3bb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db363821-3152-42fa-b354-9677540f6f74",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664bc20a-6483-4d9d-8d52-8137932df83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d26115-060a-4e9c-936f-0054b00d780d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7f1343-73f2-4504-87a1-84fb681abfbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c2a329-5b59-4023-b4f1-f77e2cf522f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6542ee0b-5aba-4ef6-9d73-ca88ff6fd15d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ec6551-3ffe-4f86-b44d-c236bed6c11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3713ec8d-b66b-466d-ad99-5ce636a3630e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee35703-3528-4b47-97f0-bee4dfda9ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f1a212-6af1-431e-b5ca-1e42c232452b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13efca4c-8a88-4091-acad-b6ab574d6249",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7448480d-8fe0-4952-9b80-efccebeef73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbc84b3-98bc-4076-b97d-c675724787f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c02338-3cd0-4daa-9418-e897a537b791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b45bec-8dfb-4b44-8f40-a4125a6bf4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547e3772-ce5a-4c79-9780-2231450f6b9d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a4ec66-aa0b-4d9e-a866-935680ca8cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b65f40-fe4a-441b-a97b-1905739db3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ed5b9d-8be5-4956-9eb7-73bc05ef9eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9505ff-885d-41d3-86dc-38985e4c674a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b04ea2e-94c4-499e-aa55-7937d6c86cac",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596010c7-a9c3-4f96-9292-fe6a988c57d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba0c6b9-7f73-4a68-9176-9a825adbfc9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfc3a4b-386a-4587-aa7c-b0b493c6d53f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c9e4d8-596b-4905-b4f2-0985e133beef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec75bcd3-c6c9-4eea-81aa-2b07ea2a7e35",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54be0114-7b99-4cd8-afc2-17d69e98ba62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c875da-8873-46fb-b737-084205fa61fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e01ae0c-67dc-4d4e-ae49-c74dea2a49c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8daa4a3c-17e6-413a-85d5-7f96c8c11285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c564b04-5a16-46d0-b4e1-5ba990c38bd3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974b8025-9225-4be9-840f-c894cba774d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b59304f-71c1-4ed4-b39e-3e17a1b46a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd98362a-6357-455e-a558-20db102d58e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ee8efd-5415-461b-a1ea-294790940c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46202abc-8919-42e2-a9ff-1bd051d84fb4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec206a8-cc45-46f3-99da-d6ab432f7df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd096b4d-cf66-4424-a2e1-b4606ca0a151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9585d3-ddbd-4f6c-aff0-94bc92d31b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0b28e1-bc80-4e50-b430-4b75fa1f6cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df863674-07d3-4980-a89a-670a3adb8a28",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466b3901-7509-4076-9020-b0072694d4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dac3a8a-3808-4319-a4f4-0f92f91840dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1239b04-cba1-4b32-a1cf-e71b27a3d5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd92d61-f474-49b3-ae19-c9f39d79c8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b145f6c1-b326-4fed-8494-2bc1b99c6cba",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0969daf7-cd49-484a-abd1-30074d8bda26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e7f216-2076-48fe-8ff3-e8752480c91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36586d7-217a-48b0-8486-a0a26963e9ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dace6d94-574b-44a1-ad24-77b42d772fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0eeaef-510e-4769-87bc-55d8b8e6e0e9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235a6c02-d5ae-4137-ace7-4d10882fb4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4171683f-3947-4f5d-b155-d050108713bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6851a3-dae3-445a-aeeb-4ba5901ce1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d07e9e-ddc7-4a64-b495-3d7827f3843b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38eb05ac-20e4-4b1b-91e1-edc7f6362ec4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb3685b-481d-4172-9567-0df5e4a138d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544f96ef-f3cd-48ae-bfc3-1e438b9e66fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccba471c-30eb-4726-a7fd-5dfac61d6e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd896b7-48bd-4837-88d5-bf0d95189a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8073f5-5a0d-43f4-999b-f6b61bdd3aa1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15fcd72-85ba-46c6-bd7d-c58b51f7b573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a9f30a-2f63-45da-a40d-025e92d12f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a912e43d-d5f9-4efe-80c8-fdf7fbe5f11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770a1206-7977-4f14-aeae-a9a513e0cf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67daf8b7-8b19-44d6-93f8-667157ff6768",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5216588-86f1-49c6-9294-b55be1516b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e3199c-a766-4b6c-ab45-76c8fec6375d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2213cdcb-8418-441b-8af9-f29e9060f417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b50ee5-d36e-49ca-a7ff-551e8e829a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374ea14f-b7e6-4558-ab0f-d6875e1ac875",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fa1058-b972-4e6c-af2f-3b52c7e4e533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13691219-123e-4cbf-9ed5-05ce7a3e29c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491a9d68-9791-4ac7-b7e0-42563f4b7668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d26cdcf-44f7-4ad8-851f-b3275cf32a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b600a490-2922-48bf-b980-94eb9c040fcc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee7fa4b-ebf4-440b-8341-e3527672e606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c96263-8035-44d5-879e-479445ef2bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80dd4a5e-7382-411a-93dd-8c25c5d4c660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441c4dce-24c6-4dfe-af16-ddfa69ad0519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74532b31-93c0-4cfc-890a-70c58254db9c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edad7e1a-45b1-45af-95e1-7b4d15556954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b58da9f-411b-4ef3-ac3e-b26b0b09205c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc689b5-dc5a-4786-99cb-7778dc014590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888216eb-22b8-47b8-bd3d-b7f9fd2a48d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1531030-9676-4490-8307-4370143a4f66",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908d153d-dbd9-4bcb-854d-6d6fdcb5112c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a5088a-5d12-4bf8-b3d8-93cbe9f95105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79dbe57-6e36-4ead-ab21-776dedd988d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42990075-1e00-4616-9243-3896bca94465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea6e44a-78a1-4ccc-8922-f607e4cff82f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc45b1d-7cda-46ad-8a26-08ce1e777c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b918231-771e-4e69-9110-b94cd3baaac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77fc466-ddc7-4a8d-8622-bff869adc9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33980cd9-1407-49d4-9e10-c7a4b5070922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677b1080-3e2f-457b-a8e9-29223d36dcbe",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2aaa10-7da0-4b97-b7e5-8e880200e3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30344c1-5ebd-4317-951d-6fb60ce10a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ea0a8f-7101-4cbd-bb16-4f88c2dd9c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31147260-ae7e-4161-8108-3ce890702558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53703c7f-d785-4999-aab5-ef16ec939021",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c200c202-2716-415f-93fd-9e8b9119a942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ae541e-5a28-4531-9744-4ed1460843c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0ed1a0-7237-4e64-8d59-cea0f58adf65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd0e4e5-44db-418f-a224-205eb1637dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b4f76f-1189-4eda-820f-6b8da89594c4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ba08fd-cb5b-41a7-a7ee-2ba07e571640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7cd4a82-4c3a-490a-976f-b5ca7d9075cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0d592b-2957-4208-8948-8086b3fc290e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c45ecb-6c12-4d3d-85d1-edad6723f810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea1f368-e6ef-44b9-b7d8-9bc45cd78bd9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cdb9ff-9076-4214-8e7d-a21ca9e4ce69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7e0dbc-e556-453b-b8be-650f733ec41d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b974dfa-de4d-4ebb-9482-887989302671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a4e941-6fb1-4e63-83db-8bff4d3f85e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950b34b5-b13c-4222-bcb1-18d7126869a3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da42672-d2ef-475b-90b7-7489b51dd6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809bd869-e9f3-4611-bb16-2c2eb7549da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6a82fd-d95e-4a6d-abfb-67175ce45702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434a9483-b510-4839-873b-ab84740c9edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70588482-56b9-48fa-9360-12e6ba5df284",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329d003f-a801-44dd-8d9a-3aa0d9903c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd4c85b3-9f05-4529-b6ad-8817111fa123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68587dc6-4b2a-4408-9c65-a9ddfc6e4bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4c36b5-3e48-49a0-a0c0-3b6cd1f81442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ca56af-f5a7-4606-9a8d-dbf989f0eaf1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1d1ddc-d0ee-42a2-9b07-cc454cca019c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99392790-89b7-4ae4-b14c-2a6af5730e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a9d0d5-e595-4951-8f17-1637879b880f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55a4afa-8364-482d-b814-4cb8c3d18faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1044721c-275a-4658-b6b5-eaf64ff01773",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7007ed-0bfc-4897-b550-7e9ada4789c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43eb224-6ef4-4690-be39-3e609ec5ff2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364918ac-0966-4f66-bd62-fc5055d927f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6349a4f4-557a-4859-9cd2-35496f2f18e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a302d1-2a79-4dff-a268-7620dc1ed761",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611fd814-95fb-4c25-9f37-acd54130f959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a17eee5-aeeb-43e6-94a6-8bfb61925bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c8a420-3976-43dc-a41e-885067141a0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36583b69-e799-4f7a-8f4d-9c6d2430854a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fd1da2-41fb-4b34-83c4-6bae1ccff128",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334976e5-3c6c-4a9b-9034-c6bc9b7af2dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a20557a7-99b3-4e49-a91a-3cd288c6a604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876e5a88-1877-446d-b707-f3c37121c0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2a45fe-d936-4409-bfb9-8ba919a46435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7516f05f-5706-4305-b143-f77579bcf619",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef59748-2fb1-4a7c-95d5-3fb881b8f58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0caf3c40-5da6-4f2a-a837-fc0faf66af91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39960ceb-f0b3-443c-9a3e-468c4783e72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12cf42c4-e729-44cb-93dd-80ee1a04e156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5461dfd8-7551-4e54-aafc-f2faa96cd091",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5533fda-cc0c-450e-ac0b-d855d2295683",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "415cd467-71cf-4658-9ba7-e2d7476fe250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eed4dff-67e7-405d-be8b-88c0fea5dabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a494690-c8fc-4556-96cc-e1a9d7155e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d3aa1a-0f7a-45d9-8919-11c61a45a77c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01fb8ec-ada9-4bc1-8aac-1dc0bdb5dd37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86e0582b-c8c0-4e49-85da-c60335e2d283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f622f1c0-cb6c-4a3b-8f71-6f701d4b18b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb83b27-8920-4ac0-810f-f26b27d0622a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99c5d33-6cf8-408a-b362-9aa963c8d392",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21ceb63-b13c-4187-835b-4a1fe3927728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5184b17b-e16b-49d5-ae23-26c457b655b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a38e5d6-c83f-4317-b47b-6bb7f78a2f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4ec2a0-116e-4147-a62f-a73cd16c8e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6560570c-7566-4f98-8ef0-372d364172e6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e42f270-ca31-4ae0-a969-e7287192d5b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17584a2-4746-454f-a36b-0fb27a6f896b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9c3614-4fa3-4d99-9b4e-7617c12f0d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed6c1ca-fdf3-4443-8f1b-e027665ef72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53af5d89-8a42-42bc-9d33-b82d4a0af208",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0cbe12-59cc-4e80-afe7-8a27bddad915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23bc666c-f556-406a-ac42-31514da263b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470c2f8c-b162-4a3a-bf30-a6add9da7c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21fc01d-4e6d-4673-8c73-9e3ea770f189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4349199b-442a-4017-ba7c-f982cfcefa19",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9eec9d-e954-43e6-9d31-11858343683b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bfcd989-eb9b-4a75-bba8-ca8e6b4443d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdc726c-927c-4da0-bea5-ad18a7173c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad5ff2e-c47c-4a32-a1cc-612b6ce2b7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fff499-e348-4617-a4c5-2cd1987cff0c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679b3c97-c1fc-4802-955e-d435dee6c768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f59b3fe6-0756-4412-88ac-c3ebb1cdd548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c390193-4991-435c-b2ae-3f887fe8cf8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf539f20-0df0-4d47-a0e3-720fdf1fb374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7d40f8-3805-4b32-a91e-7ce67f120158",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1faebcbe-2719-4f22-995f-b59fa94807a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4c0cf2a-fe92-47d6-a9da-1959e4b5b910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f119b6f2-09ca-4fe0-b056-efeac5cfc959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9abb577a-52b7-4be7-ac36-9ad94781a418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15b21da-8c0e-425e-95b8-4d925c86fb18",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23cf037-7da2-45ee-b30e-61315d8495af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a4f4ee-55d3-4163-9b0a-99723acb38a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458b92e2-b0b8-49c3-b9ba-ffc380b19f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a84aedf-6b6f-4fd3-9b25-1356fc4bdd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7f42af-5252-40bc-b804-4165cf1c22ad",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4755dd-b402-4525-a48e-2603413b2b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de67e46-55f3-40d6-8ec4-3f6bc8dab77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4dc71d-d812-48ed-b723-a2d577c4e3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fa5a71-e2ba-44bb-9a85-921e187da099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f18421-f19b-48ea-a892-1bd630d1ccfa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e9dcd0-25bd-4a4e-90fa-c28699c874f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "743caaa1-6746-4aea-ac59-2bee0d4fcd54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929f73a8-d319-43a0-bcc4-9f646bda91b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f72621b-ed56-4805-a732-df4f79b114fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70e6e44-e75e-4f8c-ba09-3c4ecabf3b89",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2df51e-06f5-4438-b12d-c3ac619db207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bf8ea50-300c-4d43-b4aa-e3c10dd92dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddda1a8f-7700-42f4-a63f-2001eb73e28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5e3fbf8-bf6d-4fe4-a3b1-1b165a1dfac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4be7f6-c0c2-4af3-b457-5efdd89117a5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71358a9-83d9-4fe8-a379-476daa7863fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55823b5a-b7d6-4c39-9910-5351e277051e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8874aca-860f-4242-9c65-9c0b803a127d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c43309-98aa-489d-92c5-85145f303836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8c27d7-db8a-452f-88ea-75076bac5cf6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445b439e-982c-4bc9-b30d-cb165041786f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75139ca3-352c-4951-9e56-ddde554e44e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5ac84a-1639-4916-9674-4680b281ebe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79af3d3c-07a5-42a6-b8aa-67c1c1c47a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ce8991-e5e5-454f-9ad7-6c7124759c28",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a5a718-61f1-40af-9113-970d29a96a1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94a0655d-fd6f-4e82-b20c-834afd77fa65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e293bd74-6124-4163-899c-c452649c390e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b173bed-9b48-4b84-95c6-dfc5dcf36eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eff0e14-04db-481a-9431-4a4c2b726ddc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba010e07-e4ab-4781-a2d8-3334a5e285b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d08c3d-237e-475a-8bf4-9002d72cd9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ff41e-3809-4df9-89a4-c0d5bff6bdff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cab33a0-4310-4de5-9bdd-aa0d590dc62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64c60ce-28c5-41e8-8aa1-ba0b67e7c34d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79eb4f7c-a961-4bce-bfd5-b554f553fd89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a618b4a-245d-4703-9e66-426d9d809217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028d0c73-c87b-44d6-9fd2-854b5f3754e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d4bc8c-c8fc-4953-8a82-57fbded286c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9421b9-485b-4f54-9cd0-803a89bc3c1e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ecce8d-5ebc-4c8d-8be5-6399558634a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "214e5b26-396d-4d3c-9e7d-793147bc42e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b239dbed-6ea3-4e4d-9759-dee5a78344b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8cbb95-3fb6-400c-ad80-5dca44876c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c06ee5-1e50-45b1-b883-20a69cb90566",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0811a3f1-6837-433a-abfb-d09f0f22afda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "873534b9-bf48-453c-8593-80fdf76db403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886a49ab-4809-4072-930b-ab17f3268b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1511e10b-b8b8-4ffc-96c4-1a18b37acdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ef05cc-968c-4e5c-a6bd-410485ab359c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc15cf0f-3ac6-41be-8d90-f27cc8313ca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aff2eb7-37f6-4f90-b8d4-2ce84e2677dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a527075a-eb61-471b-ab0a-7961346252e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5f08cd-e30c-4dc7-b5b8-958c16ba2f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bf62ac-94b2-4561-a7b1-fc488669c3a6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30afa47-066a-4fa7-8de0-7f110439bd48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c945108-5813-4e5e-98a5-3cc9b775bc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ded1b4-ee74-42d5-a494-5069909787ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee34278e-cdb4-4482-950e-efc4225b546b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67987b83-dd8f-4e19-8395-12232b82c9c2",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a274da-e845-4c00-9d07-4817f6a7ffc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb1d858-ba8d-4d28-a618-a3227b9eea35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010fa78b-f540-4cf2-9e7f-58635a3ebb4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f89e640-8011-4b51-ae83-11a6abbdc210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7aa741-13cf-47f1-99c3-50636de9fa35",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cbabbb-563b-47f2-8c16-2fd517169d26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9e211e2-2c17-4685-849a-93c521ea2efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125e6437-69f6-431e-b9d1-dbccb24f9f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d8b960-af58-4573-91e6-b98c4ee36185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca334aa-47ee-4783-84cf-dce9346e85dd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1f843a-1f9d-4ad3-b552-0f4e92d84578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "485d5a54-f0e3-4fe0-b436-688e82e8164f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15848bc3-5720-4630-8f3c-d10158bf224d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4e7389-7515-4db9-91f4-f0e434bb3d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a020fe-f7b1-460d-a534-0e0f1d386d57",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48aa3fb-e130-4c10-8f0c-638f9c33c27e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00146fae-7b39-4f07-9181-7c13374a2418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7bf117-28bb-456f-b42a-12e64bf446ea",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e10e841-5029-4369-b08b-ed1aae3ccabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6506c52-4075-43db-90ce-b32d6d9eefd4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4239569b-6370-4f10-b39f-076c8e90f2de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525b7d6c-41fc-4f3d-bfb7-77abe0fbb700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1906109b-2ee0-449e-bd4c-1f58bd12c743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42601223-67e7-42d1-bd07-3a3332ad92f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a03d6a1-de75-4aa6-bd1c-10c780a36ef3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3d32c3-c938-486c-810c-08065b828f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "044e540f-6b0b-48e7-b5e3-0902d6cc505e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da30431e-cd73-4072-b559-247b9debcea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f074b12-9cea-442c-bd79-53ed4844955f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e3ab16-416d-4bb0-b7d9-0ad1a8c18862",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0659ea7c-5dbf-4141-afad-1b4a431480fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "803e5b6a-efe7-4706-b690-b77a58181ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6424df5b-95f5-4cb6-8d7f-418af3aa8c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ffd2dd-795e-4acf-bd0c-431f9b4acb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a71b96c-f9e3-445b-9135-d31977bc9487",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5416e02-87a1-4d0d-8fa2-f4ded938546e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6926308-c6aa-4b44-ae08-2c11e862e121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65c4544-51f7-4c36-b2f3-d5ba1f2bfe2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0c190a-ad68-4b69-a133-18d910cd1f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa777cd6-1d01-4cf5-bbb4-ae34871048cd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3a6c5f-9669-41b8-88a0-94db93fdbbc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d91d579-ab73-4d46-8101-4926d1da6f71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a372e120-5f98-48b3-8c87-8459a343749d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ae2ea0-f479-462e-8a73-b647ef7e249b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2490b3-14ed-4a2f-8e81-a514b67cca92",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a4f37a-f5fc-4772-871e-25b9f6baf31b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8542ea51-a6c1-4b55-8b11-a8ae4447c6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0b7cd3-208e-4c5b-85a0-eda6464d0aa5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ac775f-a850-423b-8864-8dcb959b4af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b353bb-a5af-4288-9cda-3b29aa45bfaa",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6fbb59-0f20-476f-bccd-d5f11d7e315d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd9eb251-0f68-44ed-97ba-6fb60c8e7bd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56808143-6e56-4812-bbf9-9bc37e3397d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a7f2e2-9a83-40bb-bf5a-acdbc193a67b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5ca5e24-1bbf-40f6-8f8b-33a01dbf4f18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38f3f0f8-c8b2-4ce6-8d18-085f8033dbdd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ef3a70c-f03a-40ba-aa84-bd18d16a11f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce493d87-3a1d-4fe3-824a-1645acac72c1"
                    }
                  }
                ]
              },
              {
                "id": "e62d6cb0-cb9c-49db-b2c1-8c199f360a2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0bf8ee5-c0cc-48a1-be38-eddd1f92b722",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792990cf-9185-4b3d-b38f-eb9eb1c41012",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8b0b7b3a-17b2-4266-a135-92cd3ca6948a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57627712-1634-466b-80ec-3b9ff79f6e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b87cf9cc-36ad-446b-886c-5709a1225098"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "416b4a8b-68fc-4c54-b18a-1ac9c724a79f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43888f2f-d25b-40b8-b385-72e14be76e6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ccbc0c2-9cfa-48ec-bcdd-a19a38661608",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3091d472-c099-417f-b985-e7c515c98aa4"
                    }
                  }
                ]
              },
              {
                "id": "81586d7c-4a9c-4a9f-8b62-05262c5cec13",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "667c8919-ae8f-47ee-a684-59b8c28bdb14",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5870543a-034b-4803-ad4d-99957e78f73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "795439ea-f07c-4525-b4d2-432240e085c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5420e0c-0d9b-4b17-a89f-a644f51be03d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f7bed8-63f0-4725-babb-9578c63c6e9f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9e839cac-b9ca-4708-8d77-0244b1664631",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e2465bf-5e43-4c05-844b-a0c7d6f0544b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19ece211-dc0a-47ef-8efa-edd460d0703a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b8e7b10e-d139-447b-b66e-7b2748f97a37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "207c6298-347a-4e12-8cd9-b2625519b5bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33d3202d-e85b-426e-99e2-5831ead192d6"
                    }
                  }
                ]
              },
              {
                "id": "2a44b8fd-60b4-4a40-92aa-e3457425658c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d74b5edc-1243-4b5a-a496-e4a03ac29054",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "22db572a-49dd-4f51-a99d-3d5886742ca6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddd3e929-d9ab-4f48-be2b-c28f07afb24b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaf7a178-1b45-4c2e-8ccc-c3907197da24"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2acc3a2-dce8-4bf4-99a6-2e9aea2b40c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "632a40eb-c03c-4f17-a92b-366b0b1b884c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "320208d1-ab14-421e-9432-7bbfd407d274",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0590fc39-8e9d-43c5-9fb0-da4f9d413d21"
            }
          }
        ]
      },
      {
        "id": "0408f681-5df1-49ce-800f-867525fa26d7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "aa7fa917-3300-4096-8b49-0c7adde97b0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe24ea3a-e85f-4812-9e17-a61c681973c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "05ff2322-19be-496f-a377-31e0bc847f65",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42295390-1aa0-4991-94ad-6b6c63d7c90d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0c6d22ce-277c-4ea9-9739-14f800dff3e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e273d70-3ea1-46cb-ad9b-444cc90ce9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f301f5b9-7d09-49c0-971a-fefbe9654b73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8c2eb5b-8c88-4b05-98d7-f1ec3f71aeee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4569dccc-8dd4-41eb-b7c1-b3dd9f45f880"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7da83dab-517f-4aaa-8b5e-d0d660e36000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e545d72-0c68-4e36-9f8a-cc04275f6798"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5e10331-adfe-4158-8388-b76932744703",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "24e28712-99ce-4012-8995-8245a5cc7f36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a8dc258-b67f-48c8-9edc-538d412310b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24a94169-5a0f-4005-8320-76fb717c80c7"
            }
          }
        ]
      },
      {
        "id": "a5cd415f-a996-478a-9aac-5ed87986b31c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b8088549-f06f-470a-ab13-e71514f683de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4977a158-3298-4c0f-af9d-023beedcb538",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f480bf35-b5ad-4386-b004-858b2312a92c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d53f7a-7edf-4bbd-91d5-8748e7b24ab6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42ead779-f91e-4396-900c-f6b7c26a9e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92a405c-8f35-42d6-87d4-acaf4e9b496c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30c4af14-a47c-4aad-8dd0-095390a9f495"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6e1b371-e68a-430e-8a1d-1436ac6f93b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4cd7f77-8994-4ce4-a92e-995d539aae7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b15f000-505c-4f86-a278-8defa7d40d91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61cb909d-40eb-47dc-b5dd-5282a13a301d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34d63b4d-3bc3-488e-8cd6-2675aebd8966",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8b714bfd-0d9c-411f-b9c0-0edcf6045443"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e313def8-c3b2-45c9-be39-f5b32544dd5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5bd8097-6083-45da-a9d8-90d6c334bc39"
            }
          }
        ]
      },
      {
        "id": "b030cb87-c65d-4ac0-a533-d5f257239924",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "24e2cc3b-88c7-4ada-a6fd-b43cbb407327",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5529fc69-ded2-4453-8ba1-bd0054256b2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3ba24b9-2ba5-4bc2-add1-7c9a4587f292",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e76134c-aa3f-4153-b126-041eafe1876b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7457f59b-1ded-4184-8479-43d77ce05d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295e1bc1-c376-45f4-952c-86e5ce5eb079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9daf0d5-031e-4df5-9df7-b814a4cf15ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ee08fc5-60ac-42cd-bbdd-11dc501f59cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41eef205-5100-4940-a254-d23ee5d226b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ed9d90d-ed86-4f6b-8d4b-d3f3d331fc78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f55696a-488f-4f0e-a529-5ca25c487f53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c19fa48-a4a8-4d8a-aa2a-b3c5907ad71e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "88cb494f-53da-458f-87c2-7a200870215d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67d033fb-304b-427b-abba-cc3523495fbd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dbff0bd-f089-4b85-b9a9-9c111beeefa3"
            }
          }
        ]
      },
      {
        "id": "0109925c-8161-443d-b99d-2952cfe00e58",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d98ffad-ff95-41c6-b1a2-679720979972",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ea703a0-012a-41ef-af2f-3384dd28790a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a7aaf98e-0c44-47c0-9110-bbecc9e0b0b7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "251319ee-7831-40ce-a1a1-1a823f6efe9a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7e82cd7-58ff-451f-857b-215a2658b1da",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 217.73239436619724,
      "responseMin": 8,
      "responseMax": 6084,
      "responseSd": 731.5682837161107,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687740527614,
      "completed": 1687740603005
    },
    "executions": [
      {
        "id": "1792fa6b-2c04-4149-a05f-98375defd25d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2ac00f4f-0c9f-4fc3-bb72-e7cc7f34cbaf",
          "httpRequestId": "5b4fc578-5d83-4ecd-aecb-5ab414b3a35b"
        },
        "item": {
          "id": "1792fa6b-2c04-4149-a05f-98375defd25d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "342b1b60-84c2-4c31-be1d-1b82152843ec",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "c79564b9-6baa-436d-aa13-f32952087b42",
        "cursor": {
          "ref": "6fdef3c3-9370-422e-ba03-247ec50df4b5",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "873f4414-949a-4867-b3a3-8dacbc78a03e"
        },
        "item": {
          "id": "c79564b9-6baa-436d-aa13-f32952087b42",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f6a11dff-ea30-479e-8861-e6192efb7557",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "2f1ca737-d825-4b57-83ec-3e64c16dd243",
        "cursor": {
          "ref": "fd657651-587c-4ab4-93bf-8cf27d40aca0",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4201c18b-c6d1-48e5-accf-e8ae1d0c0367"
        },
        "item": {
          "id": "2f1ca737-d825-4b57-83ec-3e64c16dd243",
          "name": "did_json"
        },
        "response": {
          "id": "d757acd4-0a02-4245-8ff2-9dc570f24fa9",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010e7b94-9da1-430b-9e48-0239e3cac673",
        "cursor": {
          "ref": "616ab3b2-894d-460c-970b-4316ddbeb2fe",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6aca000c-9ecf-4921-842f-1bd9286c4bdc"
        },
        "item": {
          "id": "010e7b94-9da1-430b-9e48-0239e3cac673",
          "name": "did:invalid"
        },
        "response": {
          "id": "7d1d0623-1fef-4b52-b1a8-df900578b495",
          "status": "Not Found",
          "code": 404,
          "responseTime": 935,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "010e7b94-9da1-430b-9e48-0239e3cac673",
        "cursor": {
          "ref": "616ab3b2-894d-460c-970b-4316ddbeb2fe",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6aca000c-9ecf-4921-842f-1bd9286c4bdc"
        },
        "item": {
          "id": "010e7b94-9da1-430b-9e48-0239e3cac673",
          "name": "did:invalid"
        },
        "response": {
          "id": "7d1d0623-1fef-4b52-b1a8-df900578b495",
          "status": "Not Found",
          "code": 404,
          "responseTime": 935,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4a18daf5-d477-43c9-914c-fab230f9b28e",
        "cursor": {
          "ref": "7926f99a-121d-4b48-903c-1925aff61640",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0b41e388-8947-4c5a-a376-b2b93d2cc22d"
        },
        "item": {
          "id": "4a18daf5-d477-43c9-914c-fab230f9b28e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2c680db4-c5cd-431c-afe7-582fa3ef85a3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a7ac28-c4cb-4ac7-ad82-00bfafae4397",
        "cursor": {
          "ref": "7ca2156a-855d-4094-bef8-8a85728cee76",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "74843939-4970-4018-8895-0026223b1fa4"
        },
        "item": {
          "id": "12a7ac28-c4cb-4ac7-ad82-00bfafae4397",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3d4215c4-4c44-4848-8f87-6714ea101b68",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd9dd10-94e9-4ed6-b3ea-3ddc8d29c496",
        "cursor": {
          "ref": "6a6aa03b-dee6-4e0b-ae2b-a410f1373cd8",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "025c5191-38cf-4962-81a9-e9fa1faa05d8"
        },
        "item": {
          "id": "dfd9dd10-94e9-4ed6-b3ea-3ddc8d29c496",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "03cde977-f3d5-439b-a9f4-d6cb541804dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "28b63f4a-ad9a-4255-be43-9387cc49b0a4",
        "cursor": {
          "ref": "99120ee4-93fc-4fc3-b89c-05a76b646343",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c08dc943-9f9b-4ea0-b973-a9e985d93aa9"
        },
        "item": {
          "id": "28b63f4a-ad9a-4255-be43-9387cc49b0a4",
          "name": "identifiers"
        },
        "response": {
          "id": "66d99205-e9ca-40ac-a49a-73f96714d692",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec6e12c-e576-489f-8bf3-bd65faf170ab",
        "cursor": {
          "ref": "0394e982-ae96-4ab5-9113-48000fa09539",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "69a375e4-3b5f-4137-b3f1-67cd5f375b46"
        },
        "item": {
          "id": "cec6e12c-e576-489f-8bf3-bd65faf170ab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "db997a28-0780-4f6b-a9aa-14aff352b4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ea151d-170f-4a06-a00c-a7d09047d727",
        "cursor": {
          "ref": "5ed812b0-aa1c-4d3b-8590-8c9524bdb49f",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7b130513-d0ae-49e1-991c-6513750c5d27"
        },
        "item": {
          "id": "89ea151d-170f-4a06-a00c-a7d09047d727",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6ca7d1bc-2498-4107-8b22-b4b220ff57ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b0496a-febc-425b-bf40-c681e0be1e55",
        "cursor": {
          "ref": "0f041f19-ab11-47a9-b932-49306bc951a8",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e49e4baf-3147-487d-9085-e7275c216d5e"
        },
        "item": {
          "id": "92b0496a-febc-425b-bf40-c681e0be1e55",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "64c253d8-e44f-4c94-8e2c-13dc4793e16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bce2747-3012-4c95-a368-90ee1fc68c8c",
        "cursor": {
          "ref": "5c29ba66-8ae0-464b-b60f-94de0dd5fd1e",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e997ab0d-4340-4d76-bddc-1af800cbf75e"
        },
        "item": {
          "id": "2bce2747-3012-4c95-a368-90ee1fc68c8c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e64198ce-71af-417c-aff0-6f5006ebcd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2f58da-5045-48e0-afdf-6f97b4d1ae24",
        "cursor": {
          "ref": "6bc3ccac-9c25-417c-9d49-446ffc1dbe9e",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7aeda87b-3308-42b1-bad7-5980a309ebee"
        },
        "item": {
          "id": "6c2f58da-5045-48e0-afdf-6f97b4d1ae24",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5152d0f8-6046-4609-b275-fcbf97f7ec72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abb6f0b-e301-451d-adac-7da93424773f",
        "cursor": {
          "ref": "3d271a97-1fc4-4ee6-9cfb-57c094e272bc",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a1bd9840-48c5-4004-b04e-a677b469d649"
        },
        "item": {
          "id": "0abb6f0b-e301-451d-adac-7da93424773f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1edbb61a-fa7e-4fe3-bfa4-16f31714a1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c76c6d-a882-4be0-a4b0-ba95a1a79ee2",
        "cursor": {
          "ref": "8d6d77ed-3491-4385-9cf0-eed9377f4ee1",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b7951225-8698-47ef-9e7a-4d3215c50da3"
        },
        "item": {
          "id": "97c76c6d-a882-4be0-a4b0-ba95a1a79ee2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4445f514-c4b5-44b3-b376-95d70f09fd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19355cb0-0f9c-428d-aa94-fee38c97146e",
        "cursor": {
          "ref": "10eae8b1-51de-459a-b3a8-51f06f61784f",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3042bfe8-12d3-4f12-8953-7e19a974532b"
        },
        "item": {
          "id": "19355cb0-0f9c-428d-aa94-fee38c97146e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2e1ded19-b25a-48cb-be9b-db246a0c72c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1655f00-1f0a-4a0c-8b2a-b8165b9445de",
        "cursor": {
          "ref": "71d1f6a3-eca6-428f-8b61-f8aa1ac4716f",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1c4b39c9-7629-4f7c-a816-25f6e2a9d066"
        },
        "item": {
          "id": "a1655f00-1f0a-4a0c-8b2a-b8165b9445de",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b8ee1c23-420a-4940-b400-01845a7ac37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b7e6bb-31c4-4848-90a5-bebfe18302e0",
        "cursor": {
          "ref": "99c3df79-8487-47a9-870d-6ffb6adec37f",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6c8a689f-82b5-49a9-b329-fbac1038c3ad"
        },
        "item": {
          "id": "e0b7e6bb-31c4-4848-90a5-bebfe18302e0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f87be2bb-12fc-4fac-9a2b-18b20ded2c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5371ab56-074b-406e-a32b-27dcd9ae799a",
        "cursor": {
          "ref": "ab664c5e-6f56-4b21-805d-b3de25d0b4bc",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "683fcaba-65ac-4100-91aa-e177269dd85c"
        },
        "item": {
          "id": "5371ab56-074b-406e-a32b-27dcd9ae799a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "74273b51-d21b-4ce8-96e0-b7658cbe512a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971ad17f-08b4-45d6-84ad-02a51ded8a1d",
        "cursor": {
          "ref": "cf04fc50-0958-430c-946f-749e7b4136bb",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cbbcd0a4-c4fb-4b2b-9d09-14f9280e6b72"
        },
        "item": {
          "id": "971ad17f-08b4-45d6-84ad-02a51ded8a1d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3bbfd42c-c3d4-4550-91ad-6e9ca69606fa",
          "status": "Created",
          "code": 201,
          "responseTime": 1116,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "643059b6-987b-4ae1-bd93-2ec4d01f6b0d",
        "cursor": {
          "ref": "90005a38-6207-400b-af5f-91e4eb0c00b1",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2039b1a3-fb6d-4b40-bc61-34f353c49d67"
        },
        "item": {
          "id": "643059b6-987b-4ae1-bd93-2ec4d01f6b0d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0d22e834-f98f-43be-be71-9e8aae3698f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbaadb5-f00c-4e5d-ac8f-7a6786c4fb11",
        "cursor": {
          "ref": "be2a73c5-8ea3-4287-8e37-f569fb691940",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "42b7fe18-53f4-4061-bee9-c0f3d3b13eb5"
        },
        "item": {
          "id": "7fbaadb5-f00c-4e5d-ac8f-7a6786c4fb11",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f86a7aef-54ad-4378-91d7-f34e05aafc21",
          "status": "Created",
          "code": 201,
          "responseTime": 5329,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "379fb0d1-fffa-44bd-a6cd-e5fee6daa74e",
        "cursor": {
          "ref": "b4d2ff12-6293-465a-a1ff-e762a88ecdb2",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6e0566fa-2db8-44ad-b5e8-5b27e41733ce"
        },
        "item": {
          "id": "379fb0d1-fffa-44bd-a6cd-e5fee6daa74e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2d7b63c3-183d-4ef3-80d8-8c06c3405d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37231e5d-90e3-44ad-b191-f14b34e8c17c",
        "cursor": {
          "ref": "4ed1789d-e314-463c-86b9-d793a7728f83",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d858d285-cd1e-4e81-b2ff-d055db03fed3"
        },
        "item": {
          "id": "37231e5d-90e3-44ad-b191-f14b34e8c17c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "311644a5-1ab1-42b8-9f88-e22c06545688",
          "status": "Created",
          "code": 201,
          "responseTime": 6084,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "311f0b94-98c1-4005-b23a-3f84b196023a",
        "cursor": {
          "ref": "442d7ad2-f076-49dd-9541-2380b9dc28d8",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "eb62a6d9-c8c0-4831-88e3-e075912e58e4"
        },
        "item": {
          "id": "311f0b94-98c1-4005-b23a-3f84b196023a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "263a57af-8890-4ce3-bd5a-d7e0a9efb732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7207fefd-d19b-40a5-89e7-12c3d9e53f00",
        "cursor": {
          "ref": "88dc54b4-e78b-4135-b90a-a72376171cc3",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "43a703a1-8d86-49f6-ba75-0ffcebc1259a"
        },
        "item": {
          "id": "7207fefd-d19b-40a5-89e7-12c3d9e53f00",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5048482c-57d3-47fc-9ea0-126c3f9808cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf946bfa-2606-434d-9f4f-50eb698fc28f",
        "cursor": {
          "ref": "9238c7fe-8e1a-4680-871c-5b01f622cc3e",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "95bf334e-4db9-44ae-86d0-ba6bf122ba13"
        },
        "item": {
          "id": "cf946bfa-2606-434d-9f4f-50eb698fc28f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cd6ecebe-a316-4192-817b-6976607e7240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8f0244-33dd-4cd8-abfe-4e417ccaa8be",
        "cursor": {
          "ref": "e73e5cc5-5cb4-4ca2-baa1-3b9c5896aa27",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b32ba15e-5f86-4bac-b9ac-fde6499ef1e5"
        },
        "item": {
          "id": "4e8f0244-33dd-4cd8-abfe-4e417ccaa8be",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b5053cf9-ee4c-4d21-9011-73903d1a8293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c37069-03f6-4b1d-85ab-af4198f48248",
        "cursor": {
          "ref": "ace6bb79-7eb7-4c14-9675-44e5a989e12f",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a2ff84b7-9e35-488b-963d-49f5544032f6"
        },
        "item": {
          "id": "14c37069-03f6-4b1d-85ab-af4198f48248",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1df2d87b-f597-4b28-8d34-a0abb7c39a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6938af-7ac4-4b81-816b-4c2885434d0d",
        "cursor": {
          "ref": "81fb563f-cb79-4a8c-aeea-7755d12000b6",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c30cf2ee-ec84-438a-95ac-947ce57d0483"
        },
        "item": {
          "id": "4a6938af-7ac4-4b81-816b-4c2885434d0d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ce0cf59f-5cd2-45ad-b3c9-81a4f5dd1964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3d9b4d-a529-44c4-9a19-e95618381480",
        "cursor": {
          "ref": "9d660471-4037-40d4-85f2-8fcb54b5fca0",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d1977dae-64f8-4465-8d14-8fa3515f03ee"
        },
        "item": {
          "id": "8d3d9b4d-a529-44c4-9a19-e95618381480",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2bbc74dc-83b6-4f3c-810a-64f3ac5f47ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9012d139-3463-45b7-82b7-cf08e5a60bc3",
        "cursor": {
          "ref": "02ac29f4-b694-4c74-930b-f5a82cecdc98",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f64fdc04-093d-45d4-bbeb-36f8633d97f2"
        },
        "item": {
          "id": "9012d139-3463-45b7-82b7-cf08e5a60bc3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5fa7c802-7421-4eb0-a194-94385f688cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4614dd-47fe-4cae-b15d-b94171d1f6e5",
        "cursor": {
          "ref": "97577ca7-d733-4236-9c6e-605921dd61dc",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bc78bd66-fd38-4c07-b41a-576e70c77fb1"
        },
        "item": {
          "id": "5e4614dd-47fe-4cae-b15d-b94171d1f6e5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "51bb174c-311e-4ae3-9f9d-b17d30ecd3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526799e4-5fde-48ce-bda3-197405b259f0",
        "cursor": {
          "ref": "2658f55c-ad25-44ed-9fed-d0445e09f4f4",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8b9d0088-706b-44a0-b096-107b7973d7ce"
        },
        "item": {
          "id": "526799e4-5fde-48ce-bda3-197405b259f0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "45a292fd-6b60-44e7-9157-6a8da9a22ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb57a2e-10e2-49fb-a7bd-b22c94ddcd3e",
        "cursor": {
          "ref": "5dd16db5-61ff-4abf-8306-9692a5084905",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "549fb0de-cb02-4d9a-a410-4717c3cee06d"
        },
        "item": {
          "id": "ebb57a2e-10e2-49fb-a7bd-b22c94ddcd3e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c06641fd-b2b7-4d1b-8de9-929104eed926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27c1b07-8501-4e1c-9196-bdc62391f65d",
        "cursor": {
          "ref": "92c3ca45-9f2d-455f-98e8-6fa7418c3dbf",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "842cf9df-97b9-4f33-b2a6-45928b8b0196"
        },
        "item": {
          "id": "a27c1b07-8501-4e1c-9196-bdc62391f65d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b05aa2ea-974e-4a9e-8b7d-f112ee11e9b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e26923-9a2c-4167-92c0-4b912d31cfd4",
        "cursor": {
          "ref": "cd34123a-e4b0-462a-ac5b-fecffef3a7cc",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e1d9391c-6457-44e2-96f5-ca39489e4f18"
        },
        "item": {
          "id": "a6e26923-9a2c-4167-92c0-4b912d31cfd4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0531d424-fa41-4582-96a5-5f731bf177ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0835fa-a268-497c-a222-2ebd03da1394",
        "cursor": {
          "ref": "b1482651-5ef7-4c62-b817-4999ed36beba",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5b21b499-c11d-43aa-a800-8732a2309b72"
        },
        "item": {
          "id": "0b0835fa-a268-497c-a222-2ebd03da1394",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "034c9688-ddc2-44b6-9c3b-7b4adc1dd0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd7a9a2-a4bd-4845-b53e-43322c88eedc",
        "cursor": {
          "ref": "9ea9ac39-5adb-4ef0-88f2-f09e57b0b514",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d0aefb5b-cf79-493a-8f7e-11baf32e52e4"
        },
        "item": {
          "id": "5dd7a9a2-a4bd-4845-b53e-43322c88eedc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "14a3f74c-9ca9-4167-9f2f-83f3b24b51d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fdb876-00d5-4356-9a67-61a7e6d02a08",
        "cursor": {
          "ref": "fb82c9c5-94a4-4923-a55a-7292f7765377",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cca48515-5116-43a2-9326-fc0aaf74deca"
        },
        "item": {
          "id": "44fdb876-00d5-4356-9a67-61a7e6d02a08",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "468239d3-351b-40b2-9d51-5af346ea28b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a122d694-d773-418d-a7fc-b2dd5ebdcf0d",
        "cursor": {
          "ref": "80059578-73f7-4384-a91e-1696bda744ba",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4528d471-daff-4390-9b8d-053a5dff820b"
        },
        "item": {
          "id": "a122d694-d773-418d-a7fc-b2dd5ebdcf0d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dc385d41-a405-47a6-a3cf-274f3263aa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba406a5-6ed3-4c83-a9f0-0669b7835839",
        "cursor": {
          "ref": "81828869-b270-4bf5-93a4-c592a8494f44",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "07543500-030b-4c9a-bb2e-493ad8dfb0c4"
        },
        "item": {
          "id": "cba406a5-6ed3-4c83-a9f0-0669b7835839",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "63107a92-1ee7-4d96-be50-0dd084a8de0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105c5189-90c8-49e8-a440-edf5c58ce1d4",
        "cursor": {
          "ref": "68c82131-b0cb-41eb-9ed4-06589e17e40c",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cd6a2d21-a0ac-4ed7-968f-4498f774018c"
        },
        "item": {
          "id": "105c5189-90c8-49e8-a440-edf5c58ce1d4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7fed2b9f-ae24-44b2-a738-c7637da0448a",
          "status": "Created",
          "code": 201,
          "responseTime": 2826,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8ed44a90-e04e-4510-80d0-34035408a1a9",
        "cursor": {
          "ref": "306b03cc-4ab9-4bd5-88b1-fd0a5e2bdd91",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "200cc680-468a-4210-91c8-37308d8c1bef"
        },
        "item": {
          "id": "8ed44a90-e04e-4510-80d0-34035408a1a9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8d1305d8-b885-4793-a217-1a5e5d9af8ad",
          "status": "Created",
          "code": 201,
          "responseTime": 2559,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "44e39c2f-5fd0-4eec-81e2-e527581fe3f9",
        "cursor": {
          "ref": "bf37f989-8a26-4b1e-b16a-68039be0a538",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "643baf17-3422-4d9b-b393-755f47770005"
        },
        "item": {
          "id": "44e39c2f-5fd0-4eec-81e2-e527581fe3f9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2bd71854-d152-42be-b288-d9d1ef4fe630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d6b9ce-0d60-49ef-b63f-71c1d2582168",
        "cursor": {
          "ref": "155e9d69-2910-410e-a8a1-ee8bfa159a15",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "436804ac-cca6-49ab-ad82-d825cf2e2ebb"
        },
        "item": {
          "id": "36d6b9ce-0d60-49ef-b63f-71c1d2582168",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ef35efd6-b64d-4df0-9f61-c19e1da62fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298b4778-01d5-45bc-b0d2-f48b1d8d10ea",
        "cursor": {
          "ref": "35f09de5-fbb5-496f-bc24-5e8e3df680f1",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "505c73e2-2ae7-421a-9cb4-325846231e4f"
        },
        "item": {
          "id": "298b4778-01d5-45bc-b0d2-f48b1d8d10ea",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e64c5b36-d7fd-4a75-948c-ac2eecb33b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de71f2d-4b81-44c0-a569-d81814be29d3",
        "cursor": {
          "ref": "b1a4303a-30b7-4a46-9373-00caf2829e03",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5276bb0f-6875-4060-a1bd-6ae17e5dcea8"
        },
        "item": {
          "id": "1de71f2d-4b81-44c0-a569-d81814be29d3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "91e070ec-2b87-48cc-a998-ab66398e3c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d754d24-e6db-4add-a023-b1e343ab9c4d",
        "cursor": {
          "ref": "f1656715-e179-4bdc-a304-d369ee0b122a",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "10ac4349-0796-4a10-bab8-d34ebe0321a4"
        },
        "item": {
          "id": "0d754d24-e6db-4add-a023-b1e343ab9c4d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "39c46711-28b1-4670-b7b6-a9d8ceaf14b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0461527f-9d2d-4989-a2f6-d59fab567aef",
        "cursor": {
          "ref": "0b1f7972-04ee-41ec-8c67-6ad8a4a555d8",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f8ec62b0-e597-4bfd-af2a-d5ba7f694351"
        },
        "item": {
          "id": "0461527f-9d2d-4989-a2f6-d59fab567aef",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8ae1a828-4618-463d-bc6d-864655742f58",
          "status": "Created",
          "code": 201,
          "responseTime": 2864,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9b997351-6862-4167-ac59-9117886fdacf",
        "cursor": {
          "ref": "b7163284-801d-4eae-80b7-772fe6f6f6bb",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f8a4bec0-8d2c-434e-8d1b-7f6446270182"
        },
        "item": {
          "id": "9b997351-6862-4167-ac59-9117886fdacf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "409bf142-a598-4fd8-885a-c549a7412f89",
          "status": "Created",
          "code": 201,
          "responseTime": 3040,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "20e9f573-c97e-4f9e-b34f-aab655118178",
        "cursor": {
          "ref": "0d0b389d-9ff0-4b22-9d4d-d0b0d39d7fdc",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "75ff1539-8f62-4799-a038-6d4e771c0be8"
        },
        "item": {
          "id": "20e9f573-c97e-4f9e-b34f-aab655118178",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "99c58733-51fa-451e-a9d8-4000bfda72cf",
          "status": "Created",
          "code": 201,
          "responseTime": 2126,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "702b7783-89ac-43c6-b520-0f601c012f60",
        "cursor": {
          "ref": "034c9c27-791c-4001-ace3-a29b51b451ca",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6362145f-4c81-4b0f-b663-4b8e9ac0f961"
        },
        "item": {
          "id": "702b7783-89ac-43c6-b520-0f601c012f60",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3be728ad-1444-4528-aec9-001dd267f865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e984c52-a966-474e-9683-6c29d3f7497e",
        "cursor": {
          "ref": "eddcc68e-0579-4029-87c1-086f34bfcffe",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "31a8ee8a-af3f-4437-bbab-35421ebccaab"
        },
        "item": {
          "id": "0e984c52-a966-474e-9683-6c29d3f7497e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bcffe58a-f1ad-453a-8602-6c21c475e4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16abcf80-eb12-4f73-8e27-6699d468a5db",
        "cursor": {
          "ref": "6fef8bdc-9446-482f-b4c0-dead9671251f",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e9f6d499-e2d3-47ea-a00a-a924f5ff0cb8"
        },
        "item": {
          "id": "16abcf80-eb12-4f73-8e27-6699d468a5db",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e06961ca-356b-4ccf-a3a5-93ad9806cdf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f92756-ae92-476d-9a08-737cbdecd29e",
        "cursor": {
          "ref": "37f8f601-12d9-4bdf-814a-998cdb1895a1",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5c9b3fd9-bb30-43b4-af8d-3e474c4d5959"
        },
        "item": {
          "id": "b9f92756-ae92-476d-9a08-737cbdecd29e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bc05b492-e819-4a90-b5ff-3929598aa929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a76588-09cd-411b-87ea-d8975b55224b",
        "cursor": {
          "ref": "9914f537-2ca7-46b8-b7f0-a76e3c7e89c4",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bbbc82a2-9121-49a1-963d-cb810c8b8976"
        },
        "item": {
          "id": "65a76588-09cd-411b-87ea-d8975b55224b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f601be0e-1eb8-431f-a4cb-738839dd08fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4e780b-043c-49cf-a7c1-ef8478a913ee",
        "cursor": {
          "ref": "4b447d0b-4f1a-4fe1-a98e-8ca2db17384b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2ea262d1-7ccb-443a-ae5c-764d702caf23"
        },
        "item": {
          "id": "5f4e780b-043c-49cf-a7c1-ef8478a913ee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8408e9ec-435c-49f3-b7ea-c9a4043d9e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44940f8-0ddb-4fc0-8943-6bbb8100ba4a",
        "cursor": {
          "ref": "555bc5c6-b52e-4f64-94aa-2da692aed9a3",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "62295081-49d4-4c08-9734-30bf7cfb8736"
        },
        "item": {
          "id": "a44940f8-0ddb-4fc0-8943-6bbb8100ba4a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cbbfa1b4-6a4b-4c32-a476-499e11500385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051c4abc-c94b-4e0b-af29-a2e1e861c80f",
        "cursor": {
          "ref": "7add30aa-4426-4db3-9232-a4ecd2d0e29b",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cd7825b3-7ee0-4198-b3ab-bf1ad165a308"
        },
        "item": {
          "id": "051c4abc-c94b-4e0b-af29-a2e1e861c80f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8ede99ab-7b76-4264-9a8f-b9fb4f996b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c83ce46-194a-44a0-9f59-b3eb3ad39c89",
        "cursor": {
          "ref": "48f182a1-3291-4277-8c49-5ab43d247bab",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "757606ab-1332-4077-9272-02948eede707"
        },
        "item": {
          "id": "8c83ce46-194a-44a0-9f59-b3eb3ad39c89",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "93cb5d0d-3cbe-4ebd-8a64-8aa5e16dcc76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f966533d-dafe-4c6e-a9c3-92137c661403",
        "cursor": {
          "ref": "efc34bcf-4901-4a97-a875-f494e3a4a23d",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0d5ec6fa-d5ef-4abd-bdd5-ccdf007423ef"
        },
        "item": {
          "id": "f966533d-dafe-4c6e-a9c3-92137c661403",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8ceeb655-7027-421a-b5fc-ae8dc26f1404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc827b8-360a-4945-b532-09b02b2a06c2",
        "cursor": {
          "ref": "110ed0d0-4f70-492f-9cc7-d2c0ecda4a0a",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b4a9b295-ca7c-4876-8264-9185025b8dab"
        },
        "item": {
          "id": "bfc827b8-360a-4945-b532-09b02b2a06c2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b300928d-8520-4562-b052-6d14ab6acf67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd106f26-02e2-4337-9bb4-8b69b77bbf28",
        "cursor": {
          "ref": "0ce2a410-1ccd-4341-8377-35d08c992087",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2b0248d6-e61a-4cbf-bb2d-81d505157177"
        },
        "item": {
          "id": "cd106f26-02e2-4337-9bb4-8b69b77bbf28",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "56802a4a-740e-40e8-b0e9-02bc7e03015e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff0d661-1453-4633-a02b-cd4fd9561794",
        "cursor": {
          "ref": "785017e7-d676-4ba9-90b2-6100633742d3",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b5027901-c3d9-43e5-9726-4b3827270c15"
        },
        "item": {
          "id": "fff0d661-1453-4633-a02b-cd4fd9561794",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cc6283de-08f3-42aa-9e1f-cd36a967672f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f83a66-996e-4e01-8da5-8e3261f84351",
        "cursor": {
          "ref": "75f60c3e-8d6f-4e75-b37d-9dc78e23e0b8",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "820822d8-514b-411e-a765-1ae764a6f780"
        },
        "item": {
          "id": "b8f83a66-996e-4e01-8da5-8e3261f84351",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c66f063b-427a-435a-8c0d-ce015caaaa17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd0ba86-60cc-469f-9245-5a0c6a6b2071",
        "cursor": {
          "ref": "e8cfe08b-32af-4918-b8b5-a9d34425f617",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e8f5e3db-c1c2-473b-a23d-2a332d315237"
        },
        "item": {
          "id": "bfd0ba86-60cc-469f-9245-5a0c6a6b2071",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0e1f7dc6-5b6b-40c7-9ce1-9022a6290187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3178040c-a779-4dad-b0c8-2ef509c70d53",
        "cursor": {
          "ref": "875d742b-c626-4222-b8e7-788a667f41ea",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "03f7d01e-2095-4be3-b44a-570b4fe9c454"
        },
        "item": {
          "id": "3178040c-a779-4dad-b0c8-2ef509c70d53",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "adc84017-b771-4ede-bad0-f26dfc1db746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d96b5be-1dc6-41a8-93af-0268fabd86bb",
        "cursor": {
          "ref": "45a51d07-67b3-42a5-a737-0fad9c94c86d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3992cf15-b4c7-4b8f-88ff-0e55b854db2f"
        },
        "item": {
          "id": "7d96b5be-1dc6-41a8-93af-0268fabd86bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9d3056bd-dd1d-455c-ace2-284c4e2efea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e426e5-e6c9-4834-872d-557406ef4339",
        "cursor": {
          "ref": "f22e32a2-60ef-418a-9ae6-74a561168c7a",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9b6b67ba-e7f3-4fd5-a56f-13ef49de5b7b"
        },
        "item": {
          "id": "74e426e5-e6c9-4834-872d-557406ef4339",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "938d7a5c-b795-4196-832f-19c3a178c263",
          "status": "Created",
          "code": 201,
          "responseTime": 2427,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "1746b4dc-aa45-49be-8bd2-0f746c5db65d",
        "cursor": {
          "ref": "daafce8b-4a7d-4baa-87bc-beae3f665790",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4ab9921c-f500-4c57-9ce6-ede9844d8025"
        },
        "item": {
          "id": "1746b4dc-aa45-49be-8bd2-0f746c5db65d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6d3bd303-5a8d-4365-b43d-58f85e1e6cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33dd57c-aca5-41e6-8a49-4254e05ee66f",
        "cursor": {
          "ref": "5c425f26-a2c4-4357-8917-7df7175956c6",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "15ec5681-a12e-4f09-9896-a34ede8d310e"
        },
        "item": {
          "id": "f33dd57c-aca5-41e6-8a49-4254e05ee66f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fafb59e9-0869-4ca3-9878-b39c0751cdcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76de5f39-0591-40cf-8b04-2bc13167e0b4",
        "cursor": {
          "ref": "c0bbfd0d-cfc7-4824-b10a-30fd7e16da8d",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "764c171f-40dd-40fb-84a5-714e53b8f751"
        },
        "item": {
          "id": "76de5f39-0591-40cf-8b04-2bc13167e0b4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "56a304f5-aecb-47cf-8786-be6c03e4b1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377c1cf5-c212-4296-b999-8dfd34e4c52b",
        "cursor": {
          "ref": "4360d3f7-54f0-4a06-ace0-3446b0068527",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4d02a579-b88e-4916-bb7f-471712397e9f"
        },
        "item": {
          "id": "377c1cf5-c212-4296-b999-8dfd34e4c52b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1de8b67b-69fa-40fd-8171-d6720976b5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54667730-197b-4100-8c0b-6f61d0725c72",
        "cursor": {
          "ref": "eae0e027-535f-40bf-9e32-26e8c20e7529",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "983aafdb-7279-45ba-afd0-b81d79b5207f"
        },
        "item": {
          "id": "54667730-197b-4100-8c0b-6f61d0725c72",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "40ff8dde-a814-40df-8416-1237b2ae32c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b97174-c49b-4620-b44f-318592dafe03",
        "cursor": {
          "ref": "d647757a-5cd5-470f-b113-9deecf2cd800",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3f748f56-638d-4444-9035-de0a8048ce77"
        },
        "item": {
          "id": "78b97174-c49b-4620-b44f-318592dafe03",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7e416888-4e66-4df1-9a5d-f78b2aa58076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecadad4a-b5a6-4da2-bf18-802356a30d56",
        "cursor": {
          "ref": "6b717fcb-f53a-4a94-8109-337da8a4a6ff",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9a3e2aa6-96c1-4e67-a87e-a24b59625c1f"
        },
        "item": {
          "id": "ecadad4a-b5a6-4da2-bf18-802356a30d56",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f2e0e279-2a3a-4af0-958a-898a999a1a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21455347-041c-493b-8085-00c8fe509c87",
        "cursor": {
          "ref": "d05b68ef-67ec-4a50-a4bc-d3fd6a8b164a",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d15ffd1a-7fec-41e7-a87b-713a88789c02"
        },
        "item": {
          "id": "21455347-041c-493b-8085-00c8fe509c87",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "decefcb1-95de-41f6-ae09-4890420506f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea0e2ca-67b5-47e7-b4df-1146a90f1d3c",
        "cursor": {
          "ref": "3e444c28-67fb-4730-a906-817cb0d01caa",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8a3159c5-ff05-4b0f-a277-270900e66401"
        },
        "item": {
          "id": "6ea0e2ca-67b5-47e7-b4df-1146a90f1d3c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "936b6ff9-23bc-49fc-9514-ff52d5a93d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea718561-9d39-4170-a5c5-13c922ab0339",
        "cursor": {
          "ref": "212a6480-6eb4-40d4-96ea-f7f8b74a38f1",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "90d29e6b-066e-4d6d-be4e-f8f2a9b4e75b"
        },
        "item": {
          "id": "ea718561-9d39-4170-a5c5-13c922ab0339",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "47effcda-7505-472b-96af-40e917224a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f2e0cb-39b7-450b-914f-27636008a36a",
        "cursor": {
          "ref": "2d32a887-2a92-4128-a7c6-8d0288f5f958",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "085c4d21-faa8-44d1-84a3-ecdc13c3c4de"
        },
        "item": {
          "id": "44f2e0cb-39b7-450b-914f-27636008a36a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e5d60824-9849-4cd2-9b54-c49d565433da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539ba107-c986-451e-81d3-d12c698650ca",
        "cursor": {
          "ref": "fa44dc9a-1bd4-4a20-9da1-fb1f74786553",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4a42434f-b6d4-4f1a-a738-bbffc2bd7170"
        },
        "item": {
          "id": "539ba107-c986-451e-81d3-d12c698650ca",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ca1d9d9e-1592-436d-a853-09eeeddf2f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a4636e-498f-412d-bda1-923af10fceff",
        "cursor": {
          "ref": "344a6de3-0ff1-43ae-8dd2-70016e7b6a38",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "05209326-949f-46d5-911d-945d5e51f988"
        },
        "item": {
          "id": "61a4636e-498f-412d-bda1-923af10fceff",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f99145a5-a6db-4435-9317-390bfae00b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e767803-ddca-4779-aef6-6a361b218c54",
        "cursor": {
          "ref": "1ce6cfc1-ecbb-48a5-bb92-1ba909535659",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "890a2cb3-b5f9-446b-9583-d7c6a6b02bb1"
        },
        "item": {
          "id": "6e767803-ddca-4779-aef6-6a361b218c54",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "965a99bb-0f89-4b72-a21a-35d3561d7568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29aae239-6883-435f-b38c-95bebead93cf",
        "cursor": {
          "ref": "4ef1df14-5a2b-4480-9f72-58632d9c18f0",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8d1d913a-0724-47a4-afd6-7e6f47f6abc8"
        },
        "item": {
          "id": "29aae239-6883-435f-b38c-95bebead93cf",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b1507255-520f-4796-9ca7-963c688cd5e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b4e5c3-fd86-4943-b3e4-f863fdb0c22d",
        "cursor": {
          "ref": "80a00133-4e72-4477-b6d2-5d0439cbf8e8",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5b34004d-9ced-4817-a488-f4153e28aca6"
        },
        "item": {
          "id": "67b4e5c3-fd86-4943-b3e4-f863fdb0c22d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3b5b11f3-bac4-47fa-8776-2f94bdc17a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f483fb6-c018-438e-8d37-6c656def6d24",
        "cursor": {
          "ref": "53fc2c12-c5e0-42bf-8174-ac84d3efd0f5",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2ffc5b48-eb47-48f7-9d16-7ccdbebd73fc"
        },
        "item": {
          "id": "9f483fb6-c018-438e-8d37-6c656def6d24",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0f4f2b1f-543d-4b50-ba57-b634e86f6763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1a8e99-cc31-4260-a30d-ca31034b0ea5",
        "cursor": {
          "ref": "48fbf7ee-6d11-4ad7-92c6-a0d1f8917008",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "757b425d-54c2-4c8b-9b8c-57c8e812eccf"
        },
        "item": {
          "id": "df1a8e99-cc31-4260-a30d-ca31034b0ea5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f41f2344-c37a-44b6-a41f-087adbf55f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b16ebc-17fc-40c1-920a-f29f2d5b2764",
        "cursor": {
          "ref": "99968691-7d7d-4ec4-ac84-96440884bea7",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8b98f687-a49d-428a-8ab0-f3c694b2b7c1"
        },
        "item": {
          "id": "43b16ebc-17fc-40c1-920a-f29f2d5b2764",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6ba8a25f-3812-45d2-aab0-0283980a7fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ce0687-d9a9-457e-8e6b-401c0a54918e",
        "cursor": {
          "ref": "d27133c8-579a-4b21-bb2d-165de6d2dcfe",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7101b8e1-b5ec-4713-9a94-07edc98e9f07"
        },
        "item": {
          "id": "20ce0687-d9a9-457e-8e6b-401c0a54918e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9103c390-8073-454d-9ca8-5e0b84598b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a520c16c-c6dd-4f1e-bfaf-d744fcf9c2f0",
        "cursor": {
          "ref": "d024a69f-0be0-4f05-9bc2-3d0a8b936e2e",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "08171d21-0a5c-45af-a88c-2af0600c8679"
        },
        "item": {
          "id": "a520c16c-c6dd-4f1e-bfaf-d744fcf9c2f0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f92220b9-cea5-4748-912e-618b05964f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52458d9-213f-481f-9487-f350ecf3b0dd",
        "cursor": {
          "ref": "58bfd660-dae1-42d1-b680-4b95447d4c6f",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e2e3a536-b79a-41cf-bc3e-bb9f18edae3d"
        },
        "item": {
          "id": "b52458d9-213f-481f-9487-f350ecf3b0dd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "3c950c94-0484-4dbf-baba-d14805e71010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af84d0f-57cb-4039-b06d-51cb4eae72db",
        "cursor": {
          "ref": "5f89dacc-0481-4a40-a9a2-75124f7ea2fd",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b17d6caf-d8e7-419e-b07e-2c7c409c2f9f"
        },
        "item": {
          "id": "7af84d0f-57cb-4039-b06d-51cb4eae72db",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "610cd6d3-1f90-440c-9a27-ce451418ccf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005435af-b744-4838-8a28-5087468fa072",
        "cursor": {
          "ref": "2a4ce717-4a18-4e83-9408-5991d1f66048",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3c16559d-307b-49e1-a095-d0d1b1e132f7"
        },
        "item": {
          "id": "005435af-b744-4838-8a28-5087468fa072",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7006aa81-7d69-4210-8eda-2cefab0b6c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5baf98a-a350-4e30-8b40-a0d1fc1c593a",
        "cursor": {
          "ref": "9d810561-e1cb-4791-aa74-9958aefd34c9",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d214fc87-3f2b-480b-a21a-c2c44253ea59"
        },
        "item": {
          "id": "f5baf98a-a350-4e30-8b40-a0d1fc1c593a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "be7a71d0-99eb-48fb-971c-075379e005ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d01bd1-c5bb-4c39-8a6e-bc81f3d7ce7d",
        "cursor": {
          "ref": "925d78cf-d9a6-4fa4-a086-062938631d35",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3d6c4116-ec5a-4c24-8351-977fcec7598b"
        },
        "item": {
          "id": "c4d01bd1-c5bb-4c39-8a6e-bc81f3d7ce7d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "26b446d4-cb9e-445e-b8cc-7be7bbb4dc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c34071-dba9-45db-b0ca-10b2170b8cf6",
        "cursor": {
          "ref": "b5e8e8d1-1c4e-4a90-a0c8-2bbf8423ac67",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b9860fc1-bef5-44ba-b7f1-463c9f7bc3cc"
        },
        "item": {
          "id": "66c34071-dba9-45db-b0ca-10b2170b8cf6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "08b73708-4e0a-4393-b2a3-295d5b59a0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad6bfcd-8267-4861-a213-02f489d4bc9d",
        "cursor": {
          "ref": "f1ac306a-c09e-47b7-a9b6-9a23a7d10efc",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f6becb6b-7b4f-49f6-b80c-30f915f0c13d"
        },
        "item": {
          "id": "6ad6bfcd-8267-4861-a213-02f489d4bc9d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2abde3cb-4c9f-4b6b-9380-548c124cfb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066beda8-5485-47f8-a54b-ac2f0397a2fb",
        "cursor": {
          "ref": "cf8ca433-f813-4af5-912a-25eb0025c9cb",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "42c59139-9806-4b70-af2e-cc1572601b1d"
        },
        "item": {
          "id": "066beda8-5485-47f8-a54b-ac2f0397a2fb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fe5ee59e-40b6-4ca7-9bbe-86ce8b74c044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df136b7-0a20-4f8c-ae34-37744c23288c",
        "cursor": {
          "ref": "fde0a2dc-8888-4096-8b61-da65dad1e3c1",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0fb617bc-f6bc-4b0e-9549-82e9a5b3caa1"
        },
        "item": {
          "id": "1df136b7-0a20-4f8c-ae34-37744c23288c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9163d305-b344-4023-b7ff-01ee3e5fbf41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f97eee-23e7-4b98-886e-55a5988e2fcd",
        "cursor": {
          "ref": "d9dd5f78-db4b-4ea7-9d1e-8d69507f92d2",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "53dd0799-1869-43e3-a4f3-ba1f749ba157"
        },
        "item": {
          "id": "29f97eee-23e7-4b98-886e-55a5988e2fcd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9e87b888-fa29-446d-9933-6cf213f2ee80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "9ce38fad-4ae0-43aa-83ad-2238aac27a18",
        "cursor": {
          "ref": "ef1c12ed-f849-48cc-bd0b-61e21dd78bd9",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e8a84d69-bc07-4d22-bc2e-5e273a232339"
        },
        "item": {
          "id": "9ce38fad-4ae0-43aa-83ad-2238aac27a18",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9cb70411-c125-4f37-9b60-ebf930b5fa9b",
          "status": "Created",
          "code": 201,
          "responseTime": 1960,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f582b90b-17f8-445e-8423-9c9715860aa9",
        "cursor": {
          "ref": "18b928b2-c7f9-4725-a272-8166685ba0e6",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "66c98876-1764-4312-838b-11d2764740d1"
        },
        "item": {
          "id": "f582b90b-17f8-445e-8423-9c9715860aa9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6307b78b-c55f-43fc-b698-ac56881ee711",
          "status": "Created",
          "code": 201,
          "responseTime": 2376,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f42721-587d-469f-89f5-bde167adf966",
        "cursor": {
          "ref": "ba529fad-8bca-425a-a323-14fd562b7afc",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c5be9b7f-a1ed-44d6-b694-4b7e8e1595c0"
        },
        "item": {
          "id": "38f42721-587d-469f-89f5-bde167adf966",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a9513cc7-0df2-4886-b947-e0b70310f1c1",
          "status": "Created",
          "code": 201,
          "responseTime": 2402,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d79d63-0cd1-4419-854e-d95ac993c379",
        "cursor": {
          "ref": "d07dc533-9ab0-463e-8684-a30d50960c77",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7c33f261-2c23-4e77-a73c-77085ab5108b"
        },
        "item": {
          "id": "d3d79d63-0cd1-4419-854e-d95ac993c379",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ad5aebd8-81a3-4951-94b6-41ed31fa7ccf",
          "status": "Created",
          "code": 201,
          "responseTime": 3081,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c847729-0ad2-4d69-9f2c-d2fc0c05d2c4",
        "cursor": {
          "ref": "d5d1e030-ec38-476b-9b6d-53bcec33b878",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "599b174c-9216-4104-915a-45a04e19886c"
        },
        "item": {
          "id": "6c847729-0ad2-4d69-9f2c-d2fc0c05d2c4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "56e0e1ab-7ff6-4968-8568-30e6c58e37f8",
          "status": "Created",
          "code": 201,
          "responseTime": 3471,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-26T00:49:40Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-26T00:49:40Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "77f62d51-1567-436d-a805-1201d0ac7ba7",
        "cursor": {
          "ref": "9168fba8-1730-4b66-9403-87727abd28be",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "268993c8-6a45-4271-9990-05834d8b3cc2"
        },
        "item": {
          "id": "77f62d51-1567-436d-a805-1201d0ac7ba7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "036d1e7a-d638-44a4-a2ec-5ae9d439c979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "544214cb-2f79-4595-9af1-8e85690873ca",
        "cursor": {
          "ref": "38471730-43b9-4c14-8ab5-491290bc3b65",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fb073090-a10f-4821-ad87-3fbf0923c239"
        },
        "item": {
          "id": "544214cb-2f79-4595-9af1-8e85690873ca",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b19032ee-c316-49fd-b83c-ea80c3bcd184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe142e75-40cb-4b37-8e2c-bae35f884740",
        "cursor": {
          "ref": "758aca0b-ca9a-4b1f-ad47-0bbd3018d595",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4e76d524-c2cc-42f9-a71e-575ba84d9f83"
        },
        "item": {
          "id": "fe142e75-40cb-4b37-8e2c-bae35f884740",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0782f7cf-0ce7-4788-beee-9486e83c0317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baac0f4-3ba6-4165-9ed2-f56ceceb312a",
        "cursor": {
          "ref": "09401c45-8791-4d4b-a8e3-1195eddea112",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "505388d1-b760-42e9-8e2b-190c75c37e26"
        },
        "item": {
          "id": "0baac0f4-3ba6-4165-9ed2-f56ceceb312a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bb8c6d10-6385-4d80-bce5-a40a53ef4b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23ff9ef-4a4e-4ca5-a182-c5c86682c8cc",
        "cursor": {
          "ref": "b4945b60-bce6-4245-83ad-4f1e868099a2",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "842af563-8c9c-44e5-b8ff-4f0a880a864c"
        },
        "item": {
          "id": "b23ff9ef-4a4e-4ca5-a182-c5c86682c8cc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e82f6f60-22ee-47ad-b4ff-c5ccff226869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe41a156-a28c-408d-a3c3-ef827d0a3f0d",
        "cursor": {
          "ref": "dfa97984-da30-4719-9e23-beb55c744e3b",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e6ef4fdc-b7e5-4c6d-bb17-d0312e342e4e"
        },
        "item": {
          "id": "fe41a156-a28c-408d-a3c3-ef827d0a3f0d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "60c79245-a777-4c27-90c1-0c460db1affd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6964eff3-0f38-4f00-b93a-b6212863274b",
        "cursor": {
          "ref": "b26928c0-78bd-47ee-b162-0ec5a0e408f7",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "94150029-2418-4e41-b253-18c7a71f4d7b"
        },
        "item": {
          "id": "6964eff3-0f38-4f00-b93a-b6212863274b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "211b25e2-5f49-4623-a483-eea5830e5655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a16e1a-a2cf-4269-9059-54c8f66c89db",
        "cursor": {
          "ref": "5ef080af-6aa6-4b28-a108-1543a3e637d0",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6ef236db-32e6-41cc-af5d-e87c7cbe3c92"
        },
        "item": {
          "id": "e2a16e1a-a2cf-4269-9059-54c8f66c89db",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cc482e96-ff67-4cb6-928d-660ba1423390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9629c8-bd90-46c8-abc0-5fcca5df8d39",
        "cursor": {
          "ref": "5730aad6-afa0-4da8-93f1-af574a2f843e",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e9246e90-a28d-4062-9b93-388bef6b8475"
        },
        "item": {
          "id": "ca9629c8-bd90-46c8-abc0-5fcca5df8d39",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eea2b3a9-bdd4-4657-96f8-8b1e0a97cb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d3221b-4a5a-4a01-bb17-e39c70ff9007",
        "cursor": {
          "ref": "15dbb389-a392-4fdc-b3f8-b791f19a20e0",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "05e8e9e5-1b70-4eff-af27-60eb4ac2ccfe"
        },
        "item": {
          "id": "79d3221b-4a5a-4a01-bb17-e39c70ff9007",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "24f4af0b-9b83-4ee3-9948-010327cf3598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eccb944-29cd-4190-aa57-e4ea68ccf5a5",
        "cursor": {
          "ref": "303c5fd8-b897-4ba4-9c3a-30951e419624",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ddfac2e2-cca5-4ce7-a76a-9de5e517fc47"
        },
        "item": {
          "id": "9eccb944-29cd-4190-aa57-e4ea68ccf5a5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4a651c3f-0347-452e-bbcd-7b5b169c6937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae512ee-1628-4b7a-84a7-fe3fd36760f3",
        "cursor": {
          "ref": "b11cf0f7-c7fb-472e-9fa2-dffe074765c5",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e142e1f3-f537-4835-af33-d8c242adb180"
        },
        "item": {
          "id": "4ae512ee-1628-4b7a-84a7-fe3fd36760f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ca55bbc4-e77b-4658-8424-ee3bf6e7e12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9318e4-88ca-430f-a94f-99cd53e33f23",
        "cursor": {
          "ref": "829446b5-c199-4758-958a-6cd1b16f0af4",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f7be49e9-4be8-40c4-8df0-184167c36d63"
        },
        "item": {
          "id": "9e9318e4-88ca-430f-a94f-99cd53e33f23",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "00b299c2-9e00-4759-9f40-8accc67f9e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab22836-248d-4e41-bafd-42fa81929fb0",
        "cursor": {
          "ref": "0bcbe8ca-d2c0-4ee2-adef-392681d362af",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6015314e-a99b-40b6-af31-8d09c29c2311"
        },
        "item": {
          "id": "3ab22836-248d-4e41-bafd-42fa81929fb0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7e2b0c67-c5ed-4adf-a10f-0bcb5370e5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7141435a-44aa-4c2a-8cac-ce54a5679a94",
        "cursor": {
          "ref": "3e59b954-9654-4d3f-9237-a8a1410df7ef",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "183d59f9-d45b-46ab-b86a-9aef8814ddee"
        },
        "item": {
          "id": "7141435a-44aa-4c2a-8cac-ce54a5679a94",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "41033e9a-a48a-4e5c-a838-6327a429f951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ad1d4f-27b1-42ee-aeb7-b23e09bfc71e",
        "cursor": {
          "ref": "4a9b7bbc-75c2-4752-b870-00b2c06d652b",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6ee54aa2-1427-430d-b9da-ae62561d5af8"
        },
        "item": {
          "id": "d1ad1d4f-27b1-42ee-aeb7-b23e09bfc71e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bc55e186-8037-495e-9474-7e20342bffce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44aabd1c-c0fd-43fe-a02a-6d3775ee09ef",
        "cursor": {
          "ref": "94d98202-4244-4113-8022-c703b3253cbe",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7a0d3e38-c2cc-422d-9f29-1defa8ceb3e8"
        },
        "item": {
          "id": "44aabd1c-c0fd-43fe-a02a-6d3775ee09ef",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba1f545a-06fe-4c7b-9fa0-e6a68c9a9b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e80a066-e4ad-47fb-b1d9-d9f20912c9ab",
        "cursor": {
          "ref": "ead112aa-a831-4a4a-bd5c-be8e0591cca5",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d22295a1-b21c-43f0-abdd-3ae58becc3dc"
        },
        "item": {
          "id": "3e80a066-e4ad-47fb-b1d9-d9f20912c9ab",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9156317-9ea7-4565-8522-1de4e9f11138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7c7207-8317-4aaa-9642-7ace86352e67",
        "cursor": {
          "ref": "252cde3e-97b2-4946-b9ef-940b40144e69",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "59981a6c-4438-4acb-991e-10862d5f85e9"
        },
        "item": {
          "id": "0d7c7207-8317-4aaa-9642-7ace86352e67",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8e8b5bb6-a892-4dbb-8373-f6fbbe36912d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d0ec08-1438-43b5-bfad-3f96a3a5c3a3",
        "cursor": {
          "ref": "07ec3c01-5bac-4e56-ab66-9ac0b38d03f6",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "673b3673-44da-41fe-b8bc-3296b0673b8e"
        },
        "item": {
          "id": "95d0ec08-1438-43b5-bfad-3f96a3a5c3a3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1d02b3e1-4caf-45a3-a595-ab625904d3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d578af5a-37d8-4c69-a690-96fbb39a61ec",
        "cursor": {
          "ref": "da0d00b8-74fa-4222-9f50-941f15569162",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d789deb2-fc22-42a0-a884-eeeda6cf6d87"
        },
        "item": {
          "id": "d578af5a-37d8-4c69-a690-96fbb39a61ec",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "78c37ea9-6bf1-458f-90a2-7cdbfa8c1f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd29379-3582-4d8f-ab33-4ef5b2849974",
        "cursor": {
          "ref": "d629d25a-1ac3-4bf2-a696-5ee9a78f53b5",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "70551c0f-d534-42e1-ab92-abcbc1cf277d"
        },
        "item": {
          "id": "bfd29379-3582-4d8f-ab33-4ef5b2849974",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "88660e94-7661-475f-b7a5-83210075602e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694b0692-6ba0-4427-ae2d-a414b025f010",
        "cursor": {
          "ref": "1e7895cc-ebb8-41ae-aace-275297a0c5ce",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3e11a587-c53c-4bc9-97df-d05e24504421"
        },
        "item": {
          "id": "694b0692-6ba0-4427-ae2d-a414b025f010",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2e0b012f-0fb0-475e-86e9-1805bd428003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10841be8-91b3-4ed2-885f-39416935203b",
        "cursor": {
          "ref": "fa1e32ce-3065-47c2-bb80-6c400baca8b8",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "019ba086-b408-4d2c-b20b-4963b7a5530b"
        },
        "item": {
          "id": "10841be8-91b3-4ed2-885f-39416935203b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eae5c7b7-1a70-4ae6-87b4-d562373965cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c432fa62-7c80-492a-8e72-62bde7cf6c0e",
        "cursor": {
          "ref": "b1fe387b-2766-42a2-832f-c4b8f8e78924",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3e38f270-5f21-4b8a-989b-8531bad4ca42"
        },
        "item": {
          "id": "c432fa62-7c80-492a-8e72-62bde7cf6c0e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3056e92c-6226-4297-b844-07d6417cadb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d563e581-1971-4341-ab78-12a72bb950e7",
        "cursor": {
          "ref": "d8056104-69ae-4baf-b79d-05bedd52a6eb",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e57f1a53-9068-479b-9b3f-1dc435285f33"
        },
        "item": {
          "id": "d563e581-1971-4341-ab78-12a72bb950e7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b2c8b0bb-b523-4e44-a708-dc5402feab53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96b76d1-d6b9-4ef8-a436-567c90621735",
        "cursor": {
          "ref": "f838314e-68d9-46e1-a0e2-7cbda7295178",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bdbb8ba7-ec1c-4ca5-b027-55c305a924b0"
        },
        "item": {
          "id": "a96b76d1-d6b9-4ef8-a436-567c90621735",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6f8cb151-75b6-4287-9035-ea5f041a7c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 596,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494b567f-8b68-4006-8373-52420341205c",
        "cursor": {
          "ref": "2dc0a6d6-a265-4f31-a9e3-da994842fd24",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "feed1e48-f876-4bc9-8e08-748b53d31e8c"
        },
        "item": {
          "id": "494b567f-8b68-4006-8373-52420341205c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eb9f447f-12a8-417d-ae29-99f2b4997a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d525f5b0-e88b-43a9-909f-88bfecc89b1d",
        "cursor": {
          "ref": "3fbe50f4-a79a-42ea-a547-9bcd9c026abe",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "53d5e621-230b-48ec-82b2-3441e5071067"
        },
        "item": {
          "id": "d525f5b0-e88b-43a9-909f-88bfecc89b1d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0bf64808-a7ab-473f-9a86-977d39293ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5134ccba-95c4-4e35-a078-8d0d827a6d12",
        "cursor": {
          "ref": "23ec7172-9bbc-4808-adf8-59f2fdc096ef",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "acfcfe9e-ef84-4ca2-b482-5a9611373e66"
        },
        "item": {
          "id": "5134ccba-95c4-4e35-a078-8d0d827a6d12",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9d6e24f9-0561-4be7-bca6-583b4a50cd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033ddb63-7e2b-409c-861b-26fbc09bcbe1",
        "cursor": {
          "ref": "e19b0011-a10f-4ae1-8bcc-a980b4adda72",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f91a027a-2a50-46af-a862-93a3ca9373e5"
        },
        "item": {
          "id": "033ddb63-7e2b-409c-861b-26fbc09bcbe1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "23bdeb02-cb65-4b69-a498-344145886439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317a810b-4f63-4e5d-bbcc-052a3d3882c6",
        "cursor": {
          "ref": "e013be85-64c1-4c0a-a0ad-d8afed18a868",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "14fc96c7-7334-4e9f-86b2-c436e8a4feb6"
        },
        "item": {
          "id": "317a810b-4f63-4e5d-bbcc-052a3d3882c6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a96e15cf-ec4e-4367-8c84-d3ce98cd1eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b82eb7-f271-4a85-adc3-b5f24cf01d80",
        "cursor": {
          "ref": "974745f3-a02f-4af0-aaf5-1168e958a641",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ff01c1b9-54bb-4da6-93b5-e3f14f75a30a"
        },
        "item": {
          "id": "72b82eb7-f271-4a85-adc3-b5f24cf01d80",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "752b4b14-1214-4a70-a6c6-0922caf372c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6968142b-04f7-4d21-a3a8-3cbac0dff88f",
        "cursor": {
          "ref": "695bdd24-ccfd-41c4-ba75-6a7df077f0b6",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "be43ecd6-c4fb-47ba-9500-62cc2c4b1518"
        },
        "item": {
          "id": "6968142b-04f7-4d21-a3a8-3cbac0dff88f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "11d42f9e-0cc1-4535-8632-9d3492aa4315",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "59a8c2c5-e0bf-41fe-965d-a2a06ccbc11e",
        "cursor": {
          "ref": "e5acbf31-0865-4914-b3ee-5517011e7705",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "512f1479-57a1-4b35-92aa-358181dbf144"
        },
        "item": {
          "id": "59a8c2c5-e0bf-41fe-965d-a2a06ccbc11e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eb09fadc-23d4-44a8-aa0b-cbc453affbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bf7dc3-0c9d-478f-88a8-dd611f462660",
        "cursor": {
          "ref": "7c771b2e-bff9-4dc8-93a3-be943ffce10d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3f701369-5382-4729-8b99-3d77458221d8"
        },
        "item": {
          "id": "d3bf7dc3-0c9d-478f-88a8-dd611f462660",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2f9514e6-2b18-4358-bd36-4a80a95a77e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10d71a6-f992-44ae-8d0e-f7fd4421d730",
        "cursor": {
          "ref": "837e9c75-14c2-48f3-95cd-ccbf06d88660",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b8513085-784f-4662-9ddc-e20ed1a37f3a"
        },
        "item": {
          "id": "e10d71a6-f992-44ae-8d0e-f7fd4421d730",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b9042d8c-dcdf-49ab-994b-4bf60e4bbec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d6ae2e-473f-4106-8891-0c0c99589907",
        "cursor": {
          "ref": "23cdc2f8-6e79-4258-8bb6-6fa1426c1746",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "08e13489-c382-4c24-99cb-178f86da9cfc"
        },
        "item": {
          "id": "68d6ae2e-473f-4106-8891-0c0c99589907",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e137729c-4bb5-4bbf-8f41-03cf9bcdd823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acbf014-7a03-45c5-bbcf-a6877561725a",
        "cursor": {
          "ref": "8a39beba-e9b5-4a0e-be27-7d09f62a6d87",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "00c15946-833e-45f8-80c0-0cda94a4e27e"
        },
        "item": {
          "id": "6acbf014-7a03-45c5-bbcf-a6877561725a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "82115081-2f54-4d6d-8fd4-0f61c5dc6793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762752ce-ca9d-4800-9b04-e9dddff5fe6e",
        "cursor": {
          "ref": "36215ad0-b3f9-4a7f-8613-ad899a00f8bb",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "74347cde-1035-42f7-8476-1efce9cdbceb"
        },
        "item": {
          "id": "762752ce-ca9d-4800-9b04-e9dddff5fe6e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "68129910-fd25-4691-b14d-585168aa97ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc44179-8e28-4625-95c6-c57866a50aca",
        "cursor": {
          "ref": "a057ad1e-65e1-42e7-bda2-d77c36813525",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "99823871-b2a9-4895-8c87-5782d4664291"
        },
        "item": {
          "id": "1fc44179-8e28-4625-95c6-c57866a50aca",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5338d8e7-9818-496e-848a-7067b0a0cae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7171fa4f-c7d7-4559-928f-8fd77c307ede",
        "cursor": {
          "ref": "daa42199-7b92-4e0f-be34-2164564ecdfd",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "be9c6462-e105-4d2f-9762-d159a15714f0"
        },
        "item": {
          "id": "7171fa4f-c7d7-4559-928f-8fd77c307ede",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "db8395aa-3724-48a4-94bd-06accc9a7c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc6d9ea-08d6-49a3-9ca5-6ea59d6e6758",
        "cursor": {
          "ref": "81b6e935-91a7-4a3d-8ebe-907027a1f6db",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5940bfff-a9b4-4316-bfa3-d8e65acb78fa"
        },
        "item": {
          "id": "fcc6d9ea-08d6-49a3-9ca5-6ea59d6e6758",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4a0a0560-50f3-41d1-8d3b-6c1cfbfed61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72386090-f9b4-4b5e-aeff-403de1984d16",
        "cursor": {
          "ref": "01961031-9cc7-465c-a87a-5ec4ed0939e7",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "112eaaef-30df-44d3-a576-c1afdc4ace76"
        },
        "item": {
          "id": "72386090-f9b4-4b5e-aeff-403de1984d16",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "60998593-5e5d-4f99-ae43-21df302d2bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836f16dc-3d31-4227-bea4-a82f52866a66",
        "cursor": {
          "ref": "54a06778-c0e9-42d2-a3d6-47829cdcf7e5",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2a85e31e-990a-4656-8e20-2058e5fb677b"
        },
        "item": {
          "id": "836f16dc-3d31-4227-bea4-a82f52866a66",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e836f9eb-f3d0-4d4c-805e-c8f2952cc6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8c6f8a-abde-4d5b-86ff-cf999e781e97",
        "cursor": {
          "ref": "22190b76-eb76-4b9f-8fb5-6262f168c43d",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "60be903a-5106-49df-8cda-365dd17a6dcc"
        },
        "item": {
          "id": "ad8c6f8a-abde-4d5b-86ff-cf999e781e97",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d3cbbf28-c4a9-4295-b9d1-2d9ff2d9afaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6346cbf3-fc5a-41c0-a09b-03da0af05b34",
        "cursor": {
          "ref": "b0e6c8ba-0d0d-4773-89e6-2c05680cab68",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9c6670c3-edea-4637-a437-69d90de13d77"
        },
        "item": {
          "id": "6346cbf3-fc5a-41c0-a09b-03da0af05b34",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e49997b0-1f86-4fb5-8f62-fd0968dd61cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720324ff-9d68-41f4-872f-5c197f2d84a2",
        "cursor": {
          "ref": "44c7c121-bba4-4b5d-b5e1-0bec861694e5",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e7ab8f2b-c0bf-4c6c-b5de-abaf97f72f08"
        },
        "item": {
          "id": "720324ff-9d68-41f4-872f-5c197f2d84a2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "380c98dd-2ddd-4934-9188-8b007428c3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a7f5c8-473e-4f4a-a191-a1c3185dff96",
        "cursor": {
          "ref": "43717d28-dde0-43bc-9257-5cb796ba58db",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d1402bdc-e1b2-48ca-83d4-0d78fc95d3d2"
        },
        "item": {
          "id": "d1a7f5c8-473e-4f4a-a191-a1c3185dff96",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3199fcd2-a268-484e-bdb6-b1fa290380d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b17a6e-45ed-44fc-9fc4-122e8f02730a",
        "cursor": {
          "ref": "531005f6-b223-4fa2-8a50-1c8714f6d0e4",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "81d298b0-8768-4b55-ac44-3de8451c5c01"
        },
        "item": {
          "id": "33b17a6e-45ed-44fc-9fc4-122e8f02730a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fc767ca2-0514-4134-a071-290c798dbcf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05be76b-554a-4900-8faf-31ea1b3e8570",
        "cursor": {
          "ref": "3a25a7ae-f85a-487e-87d2-b5c6f3f43626",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e652657c-410f-43dd-91c6-887eef48805e"
        },
        "item": {
          "id": "d05be76b-554a-4900-8faf-31ea1b3e8570",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "64622c5f-6d25-4023-b6d4-9b9c6d02c63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19eb463-f82d-4e7d-8f64-ff33a5c9a4fb",
        "cursor": {
          "ref": "be76c9e5-a503-4cf5-8ba5-62d000bd6449",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "64ac9934-91e7-4fb9-90e9-34ca82bf9aa3"
        },
        "item": {
          "id": "d19eb463-f82d-4e7d-8f64-ff33a5c9a4fb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0eb7649f-e2c1-43ea-b284-3e800ebd83a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a47314b-23ee-4ca2-bc7c-5aebe2e4e727",
        "cursor": {
          "ref": "247ea678-0cdf-4846-b89a-87821a282819",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b9779d2f-1e76-4fb1-bc9f-ea25f2abc992"
        },
        "item": {
          "id": "7a47314b-23ee-4ca2-bc7c-5aebe2e4e727",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "90f7684f-4176-4ad7-a7a2-494444b9e381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9977b8e1-2942-4309-8314-be9bf49e3156",
        "cursor": {
          "ref": "a9763057-48eb-4f03-88e5-471bf8c48211",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "77ac3d7d-d564-4a09-9eae-2a0de517a2ed"
        },
        "item": {
          "id": "9977b8e1-2942-4309-8314-be9bf49e3156",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b86f4936-90c9-46dd-b397-5e07dfb6a291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08b2f29-000c-45cc-8a95-70d55930d344",
        "cursor": {
          "ref": "989ca680-782a-4f07-b07e-b37c786262b9",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b10dcdba-e291-4a25-a6e0-a8ca77ef211d"
        },
        "item": {
          "id": "e08b2f29-000c-45cc-8a95-70d55930d344",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "90f5788e-9170-425b-9440-24075540b0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e530165-3bd3-4e65-a248-b66733a4b2c2",
        "cursor": {
          "ref": "52ad09ad-a1d1-4c8d-93a9-714a196ea221",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4d89586f-0cc4-495f-970e-574f962100bc"
        },
        "item": {
          "id": "9e530165-3bd3-4e65-a248-b66733a4b2c2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f78a8b41-ff16-430c-8456-d390ab1da3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53d54d9-5cb8-4881-8a9b-be56981ff955",
        "cursor": {
          "ref": "143c3b3e-4f9a-4009-935d-6e94423d9128",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "675239ff-7d88-441f-b4e1-b180661a18a9"
        },
        "item": {
          "id": "d53d54d9-5cb8-4881-8a9b-be56981ff955",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ff04d925-6ef3-4013-a346-f7f448bea92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3433ca89-823a-4cfc-8214-ad584100412b",
        "cursor": {
          "ref": "afe1d2cb-161d-4efd-801f-51b18e3a66e0",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "56576b62-5489-48ce-9e7c-1abb84e06781"
        },
        "item": {
          "id": "3433ca89-823a-4cfc-8214-ad584100412b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "587a32a4-b53d-47a8-a291-97d9017060ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0378d53f-791c-4840-9e34-9fe808245111",
        "cursor": {
          "ref": "6bb11f0c-dd92-4723-9f6a-afc7365e67bf",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9aeff6b8-8c9b-48dc-b157-5a0c15115ef2"
        },
        "item": {
          "id": "0378d53f-791c-4840-9e34-9fe808245111",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "38d7df7b-2be7-43d5-b6f3-f9885df55127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6061b7-b879-4611-a921-aef100120823",
        "cursor": {
          "ref": "4668c4bd-491c-4485-bdcc-f498b18067f7",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fab1ff0a-02e2-4ace-b2fa-3caf08050b85"
        },
        "item": {
          "id": "0d6061b7-b879-4611-a921-aef100120823",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "990d78e5-6ad4-4e5e-8ad9-a3ed19bd0512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b82730-4447-4ea2-a4b6-57748ca36c61",
        "cursor": {
          "ref": "35ecf568-109f-43db-8b6b-c17c745f0a97",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9036bdda-1c38-41f0-91bb-1abc25845a4a"
        },
        "item": {
          "id": "95b82730-4447-4ea2-a4b6-57748ca36c61",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ff0de513-87cf-48fe-90be-b942fcca1238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be21ca5-eafd-4643-a763-d2de1d6a004a",
        "cursor": {
          "ref": "67adf5d8-47e3-4297-b1d8-409facb2ed84",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bf86da64-3f42-4526-b0b2-9249d05d0705"
        },
        "item": {
          "id": "1be21ca5-eafd-4643-a763-d2de1d6a004a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9cc35a78-db41-4d0a-b8a3-427caca8620d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4160d1bf-6568-4f68-8313-0f85c6b9241f",
        "cursor": {
          "ref": "a562f5e2-8b8a-4ef6-b93c-96bc2d8d3314",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "074fd733-0d6d-45d0-bbdf-a7ba6ff24d77"
        },
        "item": {
          "id": "4160d1bf-6568-4f68-8313-0f85c6b9241f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7bbc8558-2a3e-422a-bfbe-20156e00120b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e4f38c-185a-4858-af3a-a8e48a281f42",
        "cursor": {
          "ref": "e4916b91-4744-4ee9-8cd1-2761aae57189",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7d30c303-2376-48d0-acac-5238aa489f5b"
        },
        "item": {
          "id": "16e4f38c-185a-4858-af3a-a8e48a281f42",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6150a96b-2bfc-4b68-ae3b-87a51e2a1567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2b47c8-d775-42b3-a5cd-ef5618411665",
        "cursor": {
          "ref": "d7b008ff-c58d-448b-9203-9462c060eaac",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a2dee146-8fe4-41a5-aeba-7d3a14d495d8"
        },
        "item": {
          "id": "3d2b47c8-d775-42b3-a5cd-ef5618411665",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a4a98ae2-0a7e-4329-b486-975971cade64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de2b13b-35f0-475e-bc16-a3887bcc7e1a",
        "cursor": {
          "ref": "42b99165-6f2f-4651-af89-c87ad25659f3",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6cac7ef9-cf10-4856-91c4-9dd7467ac3e4"
        },
        "item": {
          "id": "4de2b13b-35f0-475e-bc16-a3887bcc7e1a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4c917e4a-5044-4859-9d4e-e341cc57e3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bb8c7d-833b-47e4-b949-20ec2fe0d18f",
        "cursor": {
          "ref": "6c0954fe-a600-49d8-bb76-f148f8cf071d",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2879a148-d281-4830-9500-4ee512fd3f91"
        },
        "item": {
          "id": "a9bb8c7d-833b-47e4-b949-20ec2fe0d18f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "41353ce9-c4fd-471c-908a-70498edc5ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e53bf17-051b-4ccb-bd94-ce07ea3f0009",
        "cursor": {
          "ref": "15e7e4d5-e95e-4457-b45e-81eededbabfc",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4ef41a02-d6d7-429a-8e53-f7708060b3bb"
        },
        "item": {
          "id": "4e53bf17-051b-4ccb-bd94-ce07ea3f0009",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "38f5e8ba-e4fc-443e-bcea-4b1ca31d6e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc8a475-478c-46b6-aec7-9fe1347ea15f",
        "cursor": {
          "ref": "677827a1-4dce-4c14-858b-85f4850d5bd0",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ff464204-419d-4fb7-bc1b-be246160089e"
        },
        "item": {
          "id": "3bc8a475-478c-46b6-aec7-9fe1347ea15f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7c43bc1d-911d-4cb1-b69e-37c56c5d9d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b008ae65-5829-4e69-8be3-fe7382cd8b39",
        "cursor": {
          "ref": "582c8709-8be6-4685-9932-e247119095f3",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "84aa95ad-8386-440f-9fcf-480d43010084"
        },
        "item": {
          "id": "b008ae65-5829-4e69-8be3-fe7382cd8b39",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9719118e-c3dd-4b82-b04d-59499b58067b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b593870e-76a9-4493-8520-a3155d69dc4f",
        "cursor": {
          "ref": "56a09534-d02c-4960-9aaa-d917aa1f1f5f",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ce5f7143-55fb-4504-b3e9-ad15fc78021b"
        },
        "item": {
          "id": "b593870e-76a9-4493-8520-a3155d69dc4f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "51a7612b-5944-45d5-83b8-23cb4c921afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f7301c-8bc8-4312-807f-0eab142067c8",
        "cursor": {
          "ref": "851f647b-baa1-4e47-88a2-29c346a17b55",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b06587d9-a6fa-49f3-8fa5-4b1ee246af5d"
        },
        "item": {
          "id": "42f7301c-8bc8-4312-807f-0eab142067c8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a0527490-dacc-43c2-b6ac-d2cd5c3cc910",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "24090345-571c-41bc-8c77-32b1c9bf0bd7",
        "cursor": {
          "ref": "3baae5b3-6031-4f96-ad4f-745b38acb3a6",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8fe0a366-ea08-4dad-b23d-e7aeb2d9df82"
        },
        "item": {
          "id": "24090345-571c-41bc-8c77-32b1c9bf0bd7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bf825783-3f0a-4a97-909e-c1fd8267cb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e622b4-0f56-49ca-8b7d-a16278c229cd",
        "cursor": {
          "ref": "75728336-089d-4c85-97af-d02c623f782e",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4cb7f997-e9e3-4c94-a0de-1a2f2d953586"
        },
        "item": {
          "id": "e0e622b4-0f56-49ca-8b7d-a16278c229cd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "624133cf-74f0-43ac-9026-66e8b8284712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5215c7-7c79-487e-84c5-55a6654a8286",
        "cursor": {
          "ref": "40daab00-3685-427a-ba20-93e85544c009",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "edb23419-6777-42e4-ac8d-4c224ce6322b"
        },
        "item": {
          "id": "fd5215c7-7c79-487e-84c5-55a6654a8286",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "578f4ef4-6224-497a-824a-4ba3195274ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbf9cd1-afdb-436a-badb-97a1e058d9dc",
        "cursor": {
          "ref": "ed725a93-e693-4468-84e7-82f941dd9355",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e80263f5-3aca-4a58-b345-225756d2316d"
        },
        "item": {
          "id": "dbbf9cd1-afdb-436a-badb-97a1e058d9dc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b24e7a95-6ece-4ded-9de9-eaf8d61a37b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91d9ad0-246f-452e-bfa1-dd78afb8368c",
        "cursor": {
          "ref": "b3772401-ef3d-4ef9-9352-d873a4da6f0a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fb69d7ee-3a42-4126-bb66-986b4881c8dc"
        },
        "item": {
          "id": "b91d9ad0-246f-452e-bfa1-dd78afb8368c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "af14a050-924c-40e8-8d54-fe7a5ab5dcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb330353-462b-42c3-8b8a-c3fd4218eaa0",
        "cursor": {
          "ref": "b3a8e4d9-6a89-4603-8771-3105bdd83c2a",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "09d95acf-7f35-4c97-b955-4019bd03284a"
        },
        "item": {
          "id": "bb330353-462b-42c3-8b8a-c3fd4218eaa0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d278c9e8-be4b-49a9-a933-fdfb4abbb7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c00f77-661c-4486-8355-81418b9e5c9d",
        "cursor": {
          "ref": "8c5ecb71-b14e-433a-8b9c-c169dc278deb",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6b08a6ed-c00a-4a05-b2c6-f0cc0f6d4962"
        },
        "item": {
          "id": "64c00f77-661c-4486-8355-81418b9e5c9d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8a831e9e-1dcb-4ef9-a44e-beb40c3f9e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f7115b-3b3b-46e9-9f02-e68a7d1331c2",
        "cursor": {
          "ref": "48414a07-5d4b-4176-a9e0-0646e91f286a",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7cd07c77-6297-4511-afb0-301237cb70f7"
        },
        "item": {
          "id": "59f7115b-3b3b-46e9-9f02-e68a7d1331c2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5c5259ad-40e6-42b1-ae82-f10d6410fa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42c4637-1e71-4424-8b80-197bee553a05",
        "cursor": {
          "ref": "8937bd80-0b9d-4c31-a7a3-867491b91a86",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9b6a80fc-f324-4fff-bb2a-6ec5277d1fbe"
        },
        "item": {
          "id": "b42c4637-1e71-4424-8b80-197bee553a05",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "310a7d48-41a8-4e90-874f-9c4db485c270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac87d2d4-f125-4d70-b3e3-7037b397a7f7",
        "cursor": {
          "ref": "0c6b57a3-bf6b-4abf-9451-d8015c6e7bbe",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7e9b2942-0606-4da7-bf7a-5ecfbc92864a"
        },
        "item": {
          "id": "ac87d2d4-f125-4d70-b3e3-7037b397a7f7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ede40f71-7f13-417d-92a1-25957fb09e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b081cc-f3a1-4053-afb9-3b3c1e36c584",
        "cursor": {
          "ref": "b93b5e7e-3e99-476b-96a5-8ecac054b6a3",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0654675d-4fb3-4fd1-ad1f-1c184f8a8c7f"
        },
        "item": {
          "id": "17b081cc-f3a1-4053-afb9-3b3c1e36c584",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3874d906-8492-479a-ac63-b61fd9eb5665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17476deb-5896-47ba-b90a-75896049c3af",
        "cursor": {
          "ref": "659b5345-4624-4241-847f-87873d56f5e9",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "94068eef-fc9b-452c-b995-bc2be6554f88"
        },
        "item": {
          "id": "17476deb-5896-47ba-b90a-75896049c3af",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "209c0f6c-37e6-47d6-ae28-8ff9c22ba05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e3695a-b328-4439-8fef-188b54973012",
        "cursor": {
          "ref": "01e70e73-b11e-436b-8293-3e7e7e09c840",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9b04c5d7-79cb-49bd-85fc-a546ac1d5999"
        },
        "item": {
          "id": "f4e3695a-b328-4439-8fef-188b54973012",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d7220992-35d5-4816-82e6-8d6c9e0307ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c9f136-6054-4ffe-8c08-4fb71b42b572",
        "cursor": {
          "ref": "4e687d7d-d8dd-470b-8b64-dea846c4beba",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5b86efcc-4a9e-427d-aebb-19c92e4fa28c"
        },
        "item": {
          "id": "20c9f136-6054-4ffe-8c08-4fb71b42b572",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0b6f76eb-b5ba-47a3-8a22-fc8d8928c056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da34013-c498-4910-beb4-aff24e3f7a5f",
        "cursor": {
          "ref": "16fd99ee-d3f0-4a83-a8c8-13516343bb0e",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6f4310ca-b044-49f1-810f-d32091ba1964"
        },
        "item": {
          "id": "7da34013-c498-4910-beb4-aff24e3f7a5f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9f58fc8c-bb50-4161-bf5d-f45bde49599e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614192d7-63d3-46bb-a602-d5f6d2fc5160",
        "cursor": {
          "ref": "102f72fd-bbb0-4e86-b777-5016a0d2af2a",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9cb9859f-0645-4136-9c76-83a3d392bcdd"
        },
        "item": {
          "id": "614192d7-63d3-46bb-a602-d5f6d2fc5160",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2a416469-d6f5-46ae-b683-2089a984af9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2761c0-526a-45df-b44a-0c003f5311fa",
        "cursor": {
          "ref": "9f5fe29c-e712-4ab3-9437-7fc58c727390",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2b79f56a-7e0a-43cf-b7ad-533ac683d37a"
        },
        "item": {
          "id": "de2761c0-526a-45df-b44a-0c003f5311fa",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "29b357cc-b976-4e2a-a8cd-73941edc2973",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "a002da8d-71e6-407a-adaa-de2738b8b6c4",
        "cursor": {
          "ref": "ddaee72c-38e1-461c-a4d6-a3a22a0b9aed",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "df7711f8-8813-43da-9a7c-5858dd8db10b"
        },
        "item": {
          "id": "a002da8d-71e6-407a-adaa-de2738b8b6c4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "91f51b94-81fd-40b0-a285-64eaefb716ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039ed474-0023-4ed2-bc40-f6a711e4b391",
        "cursor": {
          "ref": "ad86a0a8-4e28-44b4-9d67-10f6f309a60a",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ad41ff61-eaf3-452b-9198-815be53e9152"
        },
        "item": {
          "id": "039ed474-0023-4ed2-bc40-f6a711e4b391",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7cdf456c-a8d6-4beb-836d-a77aa801f1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc22520a-cdbd-4d51-8805-64d572dc2647",
        "cursor": {
          "ref": "ee185389-f17a-4b64-8937-9d20a8839ad9",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9504d548-f869-4ade-8e0b-da0cfaa9a284"
        },
        "item": {
          "id": "dc22520a-cdbd-4d51-8805-64d572dc2647",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "77412b19-d4e2-438e-a24d-9affd3888896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f63aef6-2334-4e20-a24e-2a6baf115f56",
        "cursor": {
          "ref": "df1982fe-5bb5-4884-8d4d-d17a0beb75b1",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f2369493-0c9d-4dce-81b6-eb94072d9e48"
        },
        "item": {
          "id": "4f63aef6-2334-4e20-a24e-2a6baf115f56",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c27d3d65-c2e9-444c-aabb-16c257b94f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c04e288-28a8-4812-9dd5-7436987ae241",
        "cursor": {
          "ref": "536454d3-9950-41d4-8d94-38761b1c35a2",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8a9da146-1c39-4306-9f91-d48eabd3f8bc"
        },
        "item": {
          "id": "2c04e288-28a8-4812-9dd5-7436987ae241",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0e372c29-20a4-4ceb-9b01-74ea9d2feade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638f701b-d97a-488d-b0dc-e846b5bfbbf7",
        "cursor": {
          "ref": "867aa056-4c7e-4faa-85a1-b8867da6908e",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "19ecd4e1-0fd9-412f-ad44-c16b1e3df966"
        },
        "item": {
          "id": "638f701b-d97a-488d-b0dc-e846b5bfbbf7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "64441443-6789-4df3-9fd8-1b79462fb118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca46f37-3be1-483a-b192-7f16d076bd43",
        "cursor": {
          "ref": "89c3dcfa-8606-43b6-a5b6-7284c33cd773",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5c6d9fbb-a920-4663-ae85-9195762ab623"
        },
        "item": {
          "id": "bca46f37-3be1-483a-b192-7f16d076bd43",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "99011cb3-a854-41f6-a684-b7869eac8206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb2c260-48ea-45ee-ae86-819d03e0967d",
        "cursor": {
          "ref": "0c23afef-64ad-4a5f-b573-bd3c46b1af4e",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d4be0306-1d11-44b4-b335-d5293e719929"
        },
        "item": {
          "id": "5bb2c260-48ea-45ee-ae86-819d03e0967d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6e1f6445-97ca-4829-9a2f-aced67e9628d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb8e1d9-0bcb-44c9-be80-1ac45fbde16c",
        "cursor": {
          "ref": "1a692470-47bb-4e78-b253-87233069d906",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "83f3ad2d-37a3-4b22-9d09-f5ac6dc5edf4"
        },
        "item": {
          "id": "8cb8e1d9-0bcb-44c9-be80-1ac45fbde16c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "45f82e78-4637-4ba1-b0c5-eb4c23ceff74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b040ea09-9979-4186-aec8-4d401597d2de",
        "cursor": {
          "ref": "f2bb5ea5-1203-4976-a8a9-3d9619fcbdb1",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "653880b1-1e13-4f27-9bd2-af253f089717"
        },
        "item": {
          "id": "b040ea09-9979-4186-aec8-4d401597d2de",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f9b036a8-a1f9-42b2-859c-bf0dcf6b3196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec72cea-62ee-44e6-9cf0-ab32b2164b75",
        "cursor": {
          "ref": "3e1b4806-7238-47da-875b-00ab4af4d788",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fa4db03f-e531-4231-bb4d-1b426ae5e137"
        },
        "item": {
          "id": "6ec72cea-62ee-44e6-9cf0-ab32b2164b75",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f75fd44a-3103-44de-928f-46cae9c4e043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3e99ef-48a3-44df-8945-4a31ce5d9048",
        "cursor": {
          "ref": "aa775056-5e7b-4426-9d60-f57b7ac45382",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ae68cf06-3388-4561-b28e-4f7db8ebb42e"
        },
        "item": {
          "id": "3a3e99ef-48a3-44df-8945-4a31ce5d9048",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "03bb6972-4dea-4284-844a-284bb87a9a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d641c108-4574-4384-89ec-6e56fba90e99",
        "cursor": {
          "ref": "fe559453-b99f-4d1b-b442-b41fd40c77d7",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ea4c820b-1002-45fd-af52-a741e7ee5cb6"
        },
        "item": {
          "id": "d641c108-4574-4384-89ec-6e56fba90e99",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ac880967-b326-4e4f-ab64-715a3b631b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3211e8-ebe4-48f6-b3d3-f7f1810cb40b",
        "cursor": {
          "ref": "44cd3e02-47b4-4c49-ba7f-7e4a7e5953d5",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "868d5115-c908-48ca-a7d6-a5bd641ae603"
        },
        "item": {
          "id": "2c3211e8-ebe4-48f6-b3d3-f7f1810cb40b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "853b7834-b84c-4989-ab03-d0de3db4970e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ea56c6-8225-4422-90dc-e7b918657d51",
        "cursor": {
          "ref": "825c2e3d-cc90-49ae-be2a-524561bdc7b0",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b0ae50d8-5497-4efe-9792-af8f6c50e771"
        },
        "item": {
          "id": "50ea56c6-8225-4422-90dc-e7b918657d51",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e50099c4-fc28-4d89-84bd-c28c0b0d5e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079fbfc9-bead-4c94-8b94-689a009b861f",
        "cursor": {
          "ref": "2eb74049-617a-4dd9-bff5-ab203dec7e17",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3105fbc1-f62b-41bb-a2c4-568242803435"
        },
        "item": {
          "id": "079fbfc9-bead-4c94-8b94-689a009b861f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8402509a-aaf7-41b0-af8a-a8f1e52b1004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659eef2e-ffde-4068-b4c5-d3396a008c92",
        "cursor": {
          "ref": "54926cf3-9b9b-49cf-b69b-397c80c24ae1",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "370ae6a8-9d53-49a0-8a88-bcb89571d312"
        },
        "item": {
          "id": "659eef2e-ffde-4068-b4c5-d3396a008c92",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "90a5bc2d-7132-4673-bb9c-7f4cb60e863d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f6b010-3e0d-4a62-afb3-5f0cb3b28142",
        "cursor": {
          "ref": "a0a6ec28-0ab6-4783-a66a-3df818ce65b1",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9da70b3b-d9ed-4e55-9cc2-f4bff3dd3063"
        },
        "item": {
          "id": "42f6b010-3e0d-4a62-afb3-5f0cb3b28142",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3c972578-b3f5-4ed0-94a6-0401af5ca3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db363821-3152-42fa-b354-9677540f6f74",
        "cursor": {
          "ref": "307d3943-450d-4d78-849e-b5d82a9f789c",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "04c7a533-5db4-43c9-bea3-c9e8aeacb414"
        },
        "item": {
          "id": "db363821-3152-42fa-b354-9677540f6f74",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7711eb81-4f3d-4324-b031-f63fe18eab3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6542ee0b-5aba-4ef6-9d73-ca88ff6fd15d",
        "cursor": {
          "ref": "02bedd71-9751-41ed-b421-1add47cac51f",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0e131554-c97f-4d42-84c6-e2a2dad08697"
        },
        "item": {
          "id": "6542ee0b-5aba-4ef6-9d73-ca88ff6fd15d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ec356f1b-3e6b-45fc-84d6-84b406d2bbd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13efca4c-8a88-4091-acad-b6ab574d6249",
        "cursor": {
          "ref": "473123fe-a8c7-48a1-9c49-5ebb1f627d51",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "05ba3e0d-e5d8-43e7-a19b-7bb829292915"
        },
        "item": {
          "id": "13efca4c-8a88-4091-acad-b6ab574d6249",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "50c4042f-2892-45ca-acb1-52680a7cd129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547e3772-ce5a-4c79-9780-2231450f6b9d",
        "cursor": {
          "ref": "87bd6476-6bca-4a4c-b50c-c7f67d7a3b89",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d81c98bc-b3fa-4930-979b-eb9d197eabab"
        },
        "item": {
          "id": "547e3772-ce5a-4c79-9780-2231450f6b9d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "46fb3238-309d-4d75-bb17-a3c367b5e6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b04ea2e-94c4-499e-aa55-7937d6c86cac",
        "cursor": {
          "ref": "e9e2c7b0-0e3d-4b3e-985d-87b94686c503",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6a6e756f-7573-47cd-8fec-cdb27a731b93"
        },
        "item": {
          "id": "6b04ea2e-94c4-499e-aa55-7937d6c86cac",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d8752514-07f8-47ad-95c7-f77edb38ea5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec75bcd3-c6c9-4eea-81aa-2b07ea2a7e35",
        "cursor": {
          "ref": "9e4df34b-4610-40ab-b97e-c75ec26c1f50",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e09f27d3-c5a9-4baf-b8d7-ba214ef19c68"
        },
        "item": {
          "id": "ec75bcd3-c6c9-4eea-81aa-2b07ea2a7e35",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "713160a4-da8a-4b01-a5a1-39dd8fdf9bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c564b04-5a16-46d0-b4e1-5ba990c38bd3",
        "cursor": {
          "ref": "c2fc9b99-e9ed-4e1b-9245-775b403c3884",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3759d442-5d64-48cb-8f76-797945901b87"
        },
        "item": {
          "id": "9c564b04-5a16-46d0-b4e1-5ba990c38bd3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "07775045-535c-4660-ac17-c43db21a8c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46202abc-8919-42e2-a9ff-1bd051d84fb4",
        "cursor": {
          "ref": "75aad6ba-04e9-42b7-8e10-d695b6bca127",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d3b3accc-19c1-42a4-ae4c-0dd3a9ac9893"
        },
        "item": {
          "id": "46202abc-8919-42e2-a9ff-1bd051d84fb4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "92d3ce65-27c5-432f-9c81-004b27ab0342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df863674-07d3-4980-a89a-670a3adb8a28",
        "cursor": {
          "ref": "19a4f1b1-b70f-448e-96bd-50f3f2850b9e",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "790ffdbd-239f-43c2-a51c-889a384fc3be"
        },
        "item": {
          "id": "df863674-07d3-4980-a89a-670a3adb8a28",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b80a100b-33b5-4e63-958c-dc7a77cb827e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b145f6c1-b326-4fed-8494-2bc1b99c6cba",
        "cursor": {
          "ref": "6ff05d4e-7388-43bf-bc56-807ea76cf147",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5c6a249c-b6fd-4b00-92c1-b66b92ba11a8"
        },
        "item": {
          "id": "b145f6c1-b326-4fed-8494-2bc1b99c6cba",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6d69fddd-8713-4601-abc6-32035a593fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0eeaef-510e-4769-87bc-55d8b8e6e0e9",
        "cursor": {
          "ref": "6e53f464-cdb3-49d5-9992-9c23b6e5a1ff",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1c779f29-0d3f-4eb2-ac01-30cb222db13d"
        },
        "item": {
          "id": "5d0eeaef-510e-4769-87bc-55d8b8e6e0e9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0057bf9c-c3ac-45cf-bd08-e3f4b1b0a1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38eb05ac-20e4-4b1b-91e1-edc7f6362ec4",
        "cursor": {
          "ref": "e6424fbf-500b-4777-8f14-256ec056e646",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0f7076db-2388-4da1-b644-1f5f96dffc32"
        },
        "item": {
          "id": "38eb05ac-20e4-4b1b-91e1-edc7f6362ec4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3952bb62-d53e-4795-ada2-d200e38ba515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8073f5-5a0d-43f4-999b-f6b61bdd3aa1",
        "cursor": {
          "ref": "132e468a-c22a-45a7-8dff-9f26b9936e2f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "12850caf-70f3-4743-9972-57b928f09acc"
        },
        "item": {
          "id": "9c8073f5-5a0d-43f4-999b-f6b61bdd3aa1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d040b1cb-c821-42fe-a8a8-11b3621cfe7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67daf8b7-8b19-44d6-93f8-667157ff6768",
        "cursor": {
          "ref": "224ac12f-af13-4c99-99e8-6a56d4eed844",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2f01c324-bb0f-4dd7-acaa-3a8a8e7c4d3e"
        },
        "item": {
          "id": "67daf8b7-8b19-44d6-93f8-667157ff6768",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3ca9b0a4-51c8-4d77-968a-bb997e381555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374ea14f-b7e6-4558-ab0f-d6875e1ac875",
        "cursor": {
          "ref": "d6e6fd6e-ce0f-47d3-89ba-29204a78ba42",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "62dcfd33-b6c0-4dfc-8be7-8225d5ee571b"
        },
        "item": {
          "id": "374ea14f-b7e6-4558-ab0f-d6875e1ac875",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "81878d4f-9db9-4139-86e2-070c79d336cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b600a490-2922-48bf-b980-94eb9c040fcc",
        "cursor": {
          "ref": "ea364483-14db-4922-9a9b-b818587585ea",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "340fb421-d32b-4994-bf25-7804a657dfff"
        },
        "item": {
          "id": "b600a490-2922-48bf-b980-94eb9c040fcc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c886367d-179b-4b91-ab7e-59f7b503321a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74532b31-93c0-4cfc-890a-70c58254db9c",
        "cursor": {
          "ref": "631d330d-c245-473e-a22a-da8ed0f552ad",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "651be418-2c0d-4041-bfb9-0046fa0680bc"
        },
        "item": {
          "id": "74532b31-93c0-4cfc-890a-70c58254db9c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9a2c133d-2f20-4efc-99a7-a0a1ab4aee3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1531030-9676-4490-8307-4370143a4f66",
        "cursor": {
          "ref": "e912bf5e-fbd0-4a22-a514-9209fdc24c64",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "16eb4104-f1ec-422e-9f99-ef7616713c73"
        },
        "item": {
          "id": "f1531030-9676-4490-8307-4370143a4f66",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ab1d5e4a-aa39-44b1-b5e0-1b7be308bdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea6e44a-78a1-4ccc-8922-f607e4cff82f",
        "cursor": {
          "ref": "1f9f6143-4e24-4351-8bee-816b10439939",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ad54184c-5961-471c-8a8f-bc881c8ecff4"
        },
        "item": {
          "id": "5ea6e44a-78a1-4ccc-8922-f607e4cff82f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9a58e8c1-e35e-4893-b3fc-6a0d2a998a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677b1080-3e2f-457b-a8e9-29223d36dcbe",
        "cursor": {
          "ref": "6705539d-75be-4247-b838-c051ccfc8d7a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0e4786bb-bfc2-4977-b21a-a93cde7b6e63"
        },
        "item": {
          "id": "677b1080-3e2f-457b-a8e9-29223d36dcbe",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "eb34afb3-3f40-458d-ac14-3af29db3ba9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53703c7f-d785-4999-aab5-ef16ec939021",
        "cursor": {
          "ref": "19d276fa-dcc5-4bb5-bade-ca286b059f2e",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "566e25b7-079f-41bb-8e3e-fcfea4c828c2"
        },
        "item": {
          "id": "53703c7f-d785-4999-aab5-ef16ec939021",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dde83f59-f54d-4edd-b468-75d671754abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b4f76f-1189-4eda-820f-6b8da89594c4",
        "cursor": {
          "ref": "93577b4f-5eb7-4f4a-b9e6-525ed9e09b04",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7ed44450-1aea-428a-bbbc-cfcc8350c627"
        },
        "item": {
          "id": "b6b4f76f-1189-4eda-820f-6b8da89594c4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "da0ea2f8-71f4-450a-88b8-ef36c4e41423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea1f368-e6ef-44b9-b7d8-9bc45cd78bd9",
        "cursor": {
          "ref": "82820478-77f7-4f74-90b3-479bd3860be8",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "afe553fe-3b21-4a99-b904-a0eac32ec93a"
        },
        "item": {
          "id": "eea1f368-e6ef-44b9-b7d8-9bc45cd78bd9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f17e1c21-9e45-43d7-9184-a75e3cae41ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950b34b5-b13c-4222-bcb1-18d7126869a3",
        "cursor": {
          "ref": "8ebe37f6-3013-4a06-979e-54177cf4b791",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "61ece1e6-26d3-4508-9789-420bff57349a"
        },
        "item": {
          "id": "950b34b5-b13c-4222-bcb1-18d7126869a3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ff06c44b-10ed-4ae5-a284-4c8084eb204d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70588482-56b9-48fa-9360-12e6ba5df284",
        "cursor": {
          "ref": "a5a59f56-f886-4e70-ad39-5d4c5fdc6f21",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f475b076-9530-4158-8779-7de64fb6f224"
        },
        "item": {
          "id": "70588482-56b9-48fa-9360-12e6ba5df284",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "da8e15be-117e-4606-9b8d-8b6edf5efa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ca56af-f5a7-4606-9a8d-dbf989f0eaf1",
        "cursor": {
          "ref": "39c0407a-b38a-4be8-97d0-35c26215b5f2",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fa96bec9-fc73-447f-a593-caffeaad8c6a"
        },
        "item": {
          "id": "c0ca56af-f5a7-4606-9a8d-dbf989f0eaf1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d11f590a-10cf-48bc-a53a-2d623afc338c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1044721c-275a-4658-b6b5-eaf64ff01773",
        "cursor": {
          "ref": "b853fee4-bd44-4e7c-a708-daee4f5c07e5",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3892d614-6bd9-45fc-a013-919d73cfbeec"
        },
        "item": {
          "id": "1044721c-275a-4658-b6b5-eaf64ff01773",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "beb34803-6a4a-442e-ae65-d491c152ef63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a302d1-2a79-4dff-a268-7620dc1ed761",
        "cursor": {
          "ref": "52174a53-eb91-4464-ae30-847e6414792e",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2d62c133-4a1b-40ee-83bf-e295f281bfa6"
        },
        "item": {
          "id": "64a302d1-2a79-4dff-a268-7620dc1ed761",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f30cd7f0-f86e-4a86-bc2a-d2063de4c880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fd1da2-41fb-4b34-83c4-6bae1ccff128",
        "cursor": {
          "ref": "d3556cfe-9ff5-476d-9e74-1a0b2044f2a0",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "aab16376-00ae-4817-bd4b-6d8b3c544426"
        },
        "item": {
          "id": "71fd1da2-41fb-4b34-83c4-6bae1ccff128",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8cae7641-83ca-4ef7-8b49-7cce9b2a29ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7516f05f-5706-4305-b143-f77579bcf619",
        "cursor": {
          "ref": "11884086-4232-4180-bfe3-bba2109360fd",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "de4e1e47-6450-45cf-9df6-944100b167a9"
        },
        "item": {
          "id": "7516f05f-5706-4305-b143-f77579bcf619",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "13e9945d-96fe-44b8-9a85-6242fa89f056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5461dfd8-7551-4e54-aafc-f2faa96cd091",
        "cursor": {
          "ref": "dd0c0ef7-bcee-4631-a8e4-43ca97dd949e",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "397185ca-9b47-4c23-9131-1f0cfa4eeb53"
        },
        "item": {
          "id": "5461dfd8-7551-4e54-aafc-f2faa96cd091",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fb3a3f97-e076-4808-ab47-6d39f7c1d255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d3aa1a-0f7a-45d9-8919-11c61a45a77c",
        "cursor": {
          "ref": "00ae4279-e25b-4ec0-b77a-6e3ed564ef3f",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "96f2062a-36aa-4b8a-84a6-006b79374fab"
        },
        "item": {
          "id": "16d3aa1a-0f7a-45d9-8919-11c61a45a77c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f1a0e603-1136-4c94-8beb-a142f0dfa449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99c5d33-6cf8-408a-b362-9aa963c8d392",
        "cursor": {
          "ref": "37c61eba-e87d-4cfd-bea9-c5db50b57c22",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e2a8026f-9be8-4a44-9059-a9598541ccd4"
        },
        "item": {
          "id": "e99c5d33-6cf8-408a-b362-9aa963c8d392",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3c13ddf3-e497-4295-bdb9-123e07d59547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6560570c-7566-4f98-8ef0-372d364172e6",
        "cursor": {
          "ref": "2cbb56e5-5b14-4b02-8be6-e822917155a1",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "419d6861-ad80-4478-afc9-fade4fe87d76"
        },
        "item": {
          "id": "6560570c-7566-4f98-8ef0-372d364172e6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "59dab8f0-bddb-4233-8fb2-5318448ad5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53af5d89-8a42-42bc-9d33-b82d4a0af208",
        "cursor": {
          "ref": "ccb777f3-15ae-4ec5-b8f3-484a3ce96185",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "92c41fde-0cf5-4047-a9bb-347764089417"
        },
        "item": {
          "id": "53af5d89-8a42-42bc-9d33-b82d4a0af208",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1a07ca48-7db9-4b2c-8089-379ab5d45f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4349199b-442a-4017-ba7c-f982cfcefa19",
        "cursor": {
          "ref": "41c2ab4a-5898-4ed0-b982-9293f1a8eaf5",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fe77147e-0576-4999-a57d-38566c3bf99d"
        },
        "item": {
          "id": "4349199b-442a-4017-ba7c-f982cfcefa19",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f6774269-ad94-4c8b-8f7d-c22ee79730c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fff499-e348-4617-a4c5-2cd1987cff0c",
        "cursor": {
          "ref": "e4cfc195-7ce0-464b-a7f8-ed598559e162",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3e4d0035-8cf4-4a7f-a462-c37760987509"
        },
        "item": {
          "id": "87fff499-e348-4617-a4c5-2cd1987cff0c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b7727217-8168-4f7b-82ae-34576671d8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7d40f8-3805-4b32-a91e-7ce67f120158",
        "cursor": {
          "ref": "da9cefb8-67c2-4c32-82fb-24caa887f7d0",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2e5473ab-b1b5-483e-a6ad-d7a9242bf47b"
        },
        "item": {
          "id": "9f7d40f8-3805-4b32-a91e-7ce67f120158",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a32fc7bf-c0bc-477a-8823-45e64de10060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15b21da-8c0e-425e-95b8-4d925c86fb18",
        "cursor": {
          "ref": "4154e6c5-1499-4f18-91cb-906e6e18a600",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4ab6d81c-4ea0-48ed-8bec-9bbd202c9fd1"
        },
        "item": {
          "id": "c15b21da-8c0e-425e-95b8-4d925c86fb18",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6b3e35ae-ce03-4d8b-b23d-2763f9db0049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7f42af-5252-40bc-b804-4165cf1c22ad",
        "cursor": {
          "ref": "b73b0c97-9ff9-407a-a086-3d2cb11889ce",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c3971663-1df0-49f7-967b-7bf937267984"
        },
        "item": {
          "id": "fb7f42af-5252-40bc-b804-4165cf1c22ad",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e127085a-6005-4759-8a13-25123051bd8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f18421-f19b-48ea-a892-1bd630d1ccfa",
        "cursor": {
          "ref": "93abff54-38d2-4135-89a6-841aac68bbbc",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9fae9698-0dab-4362-9908-e6a1f594cab9"
        },
        "item": {
          "id": "86f18421-f19b-48ea-a892-1bd630d1ccfa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "478dca80-fa53-4ae9-af25-31b7b4818c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70e6e44-e75e-4f8c-ba09-3c4ecabf3b89",
        "cursor": {
          "ref": "220f0770-257a-4b3b-bb73-57f4705fe5e1",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c006d00a-3682-49ad-8296-5857960b00da"
        },
        "item": {
          "id": "b70e6e44-e75e-4f8c-ba09-3c4ecabf3b89",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "06796c04-94b0-48cb-90d0-9182424e84c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4be7f6-c0c2-4af3-b457-5efdd89117a5",
        "cursor": {
          "ref": "e73bf365-07c1-426f-9ddd-8941c56e41b8",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "832fee38-422b-42e4-93b7-7a8ecb664864"
        },
        "item": {
          "id": "5a4be7f6-c0c2-4af3-b457-5efdd89117a5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dcf00012-4cab-45f8-9ecc-8ebe0bd99dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8c27d7-db8a-452f-88ea-75076bac5cf6",
        "cursor": {
          "ref": "69578da9-4341-4be3-9666-6e47be08849d",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3ce0bdb4-7211-436c-be7a-ed3c1aa2ed77"
        },
        "item": {
          "id": "7f8c27d7-db8a-452f-88ea-75076bac5cf6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2cca661d-395f-4d5d-b595-f2685d8fee40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ce8991-e5e5-454f-9ad7-6c7124759c28",
        "cursor": {
          "ref": "696ea3c0-0d07-4df1-a349-1c48a1899e3f",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a2fb8cb9-3f47-42d4-99eb-266b7371a0a0"
        },
        "item": {
          "id": "98ce8991-e5e5-454f-9ad7-6c7124759c28",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cd3a9b7a-7277-43c1-a9d3-45528a0301d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eff0e14-04db-481a-9431-4a4c2b726ddc",
        "cursor": {
          "ref": "2394f07e-bbe6-475f-99df-4cbfb64ee77b",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "5ea63665-3459-41f5-8968-925af8ab6611"
        },
        "item": {
          "id": "3eff0e14-04db-481a-9431-4a4c2b726ddc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "500a5668-55f9-4c28-a05a-d306c21b5e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64c60ce-28c5-41e8-8aa1-ba0b67e7c34d",
        "cursor": {
          "ref": "f45664af-010a-4900-a284-cbff82ec3a70",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "eb88558e-5a72-4f60-ba66-a8b3277e20a8"
        },
        "item": {
          "id": "d64c60ce-28c5-41e8-8aa1-ba0b67e7c34d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "67e2e300-6316-4bfa-a8b2-9bfe72630c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9421b9-485b-4f54-9cd0-803a89bc3c1e",
        "cursor": {
          "ref": "a401200b-6740-4d49-b2ff-4416a3ea4a60",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "b37225ce-5b23-4f11-a4e6-21cbc57e47b5"
        },
        "item": {
          "id": "0a9421b9-485b-4f54-9cd0-803a89bc3c1e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6025406c-42cf-446d-89ad-c3b50ce0570c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c06ee5-1e50-45b1-b883-20a69cb90566",
        "cursor": {
          "ref": "9d015d69-0192-4598-8abb-088dce72e13c",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8965fcf1-8111-4da7-996f-5fc3c0d52d63"
        },
        "item": {
          "id": "b1c06ee5-1e50-45b1-b883-20a69cb90566",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "33be3b0e-f891-4485-8eab-2b7fa1cce65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ef05cc-968c-4e5c-a6bd-410485ab359c",
        "cursor": {
          "ref": "313a6abb-854a-4095-ac05-88d817d948f0",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "dbbb5bfd-051a-4dad-a92f-3bcb2df383c0"
        },
        "item": {
          "id": "74ef05cc-968c-4e5c-a6bd-410485ab359c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1c0e505e-baaa-4ccf-acaa-226dfee725fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bf62ac-94b2-4561-a7b1-fc488669c3a6",
        "cursor": {
          "ref": "194d6b68-e6b7-4047-addc-a48810b87175",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f50949b2-625c-4a00-9d22-d1da5bc7a4f8"
        },
        "item": {
          "id": "b2bf62ac-94b2-4561-a7b1-fc488669c3a6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4fe220d1-be20-426c-859c-3f8790d1cf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67987b83-dd8f-4e19-8395-12232b82c9c2",
        "cursor": {
          "ref": "b2bc1d45-dc21-41d6-9f70-5eb2ef82fb47",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6c9dbd2d-c444-4da7-8d0d-c228104964eb"
        },
        "item": {
          "id": "67987b83-dd8f-4e19-8395-12232b82c9c2",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1d79fae3-5a0a-4c62-99b1-06dc6b4826ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7aa741-13cf-47f1-99c3-50636de9fa35",
        "cursor": {
          "ref": "85228e21-df0f-42d0-bf7d-9094614f0e3e",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "86d3e2e7-23a5-4a2a-afff-6e1c0bf6ed3b"
        },
        "item": {
          "id": "eb7aa741-13cf-47f1-99c3-50636de9fa35",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0ca580a7-200c-41a9-970d-590129b3efa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca334aa-47ee-4783-84cf-dce9346e85dd",
        "cursor": {
          "ref": "4f017069-f5be-4900-ba10-94a50b64c15a",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b0e47042-7a9f-43b4-a3dc-26b293f27197"
        },
        "item": {
          "id": "9ca334aa-47ee-4783-84cf-dce9346e85dd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "30a851c9-1709-45bc-9019-f77757911ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a020fe-f7b1-460d-a534-0e0f1d386d57",
        "cursor": {
          "ref": "3d5ecf7d-5203-4241-83d7-06e13d300cc2",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "156bc82e-6c21-42d8-a892-ff16fb625ae3"
        },
        "item": {
          "id": "a9a020fe-f7b1-460d-a534-0e0f1d386d57",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6e2d3371-2617-4e37-93bc-1d5f0a8f4f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6506c52-4075-43db-90ce-b32d6d9eefd4",
        "cursor": {
          "ref": "68042f03-4f91-494c-912a-d5454d791a92",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f1fbb1af-78d5-45b6-a867-39569b3c185b"
        },
        "item": {
          "id": "d6506c52-4075-43db-90ce-b32d6d9eefd4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a9e2f7d9-b5ec-499a-b840-2d85bc1311f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a03d6a1-de75-4aa6-bd1c-10c780a36ef3",
        "cursor": {
          "ref": "691a8360-b99b-4640-847d-772cb35896e5",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e83ec97c-283c-40bf-8498-d8b683c55f0a"
        },
        "item": {
          "id": "4a03d6a1-de75-4aa6-bd1c-10c780a36ef3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "79dd846d-7760-4686-8e21-e5b7e6ff482a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e3ab16-416d-4bb0-b7d9-0ad1a8c18862",
        "cursor": {
          "ref": "bc79b562-016b-47db-872c-07820f1dfa3d",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0c349724-cc77-4acc-a235-eadff99d77b8"
        },
        "item": {
          "id": "78e3ab16-416d-4bb0-b7d9-0ad1a8c18862",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "27c40e89-804c-4533-a4a0-3371724d6107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a71b96c-f9e3-445b-9135-d31977bc9487",
        "cursor": {
          "ref": "8794548e-52a9-45db-bdae-cd352505a196",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "fc3a2707-7bd0-421a-88fb-5d136488c497"
        },
        "item": {
          "id": "9a71b96c-f9e3-445b-9135-d31977bc9487",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "51672302-1b38-4ef3-b639-7d1b583ef798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa777cd6-1d01-4cf5-bbb4-ae34871048cd",
        "cursor": {
          "ref": "3a1672ae-3623-4c8f-a287-d25080ac1d27",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "eea12314-3c70-40cc-9696-7112539d5164"
        },
        "item": {
          "id": "fa777cd6-1d01-4cf5-bbb4-ae34871048cd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "611c1e76-188f-4405-9f6c-906b9c7ebff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2490b3-14ed-4a2f-8e81-a514b67cca92",
        "cursor": {
          "ref": "7ebed3c8-d52b-46ea-ab05-bf46074f8f24",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "9311cd41-0c72-4100-aec9-762b660b055e"
        },
        "item": {
          "id": "cc2490b3-14ed-4a2f-8e81-a514b67cca92",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "82053f3d-4031-428c-99bb-a4594fd70c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b353bb-a5af-4288-9cda-3b29aa45bfaa",
        "cursor": {
          "ref": "7c0be154-558d-486d-a874-415ecbf60283",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a2970e91-9905-4757-8f62-2903afda544a"
        },
        "item": {
          "id": "a2b353bb-a5af-4288-9cda-3b29aa45bfaa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6d61a4a1-2f61-4fc6-953a-68d9d89ee8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bf8ee5-c0cc-48a1-be38-eddd1f92b722",
        "cursor": {
          "ref": "c26f6ec4-48d8-4729-a59d-e06d328c14fe",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "90426271-c1de-46b9-814e-63aaa95a7c3f"
        },
        "item": {
          "id": "c0bf8ee5-c0cc-48a1-be38-eddd1f92b722",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "470929bf-d6dd-4967-957e-df439c197af5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "667c8919-ae8f-47ee-a684-59b8c28bdb14",
        "cursor": {
          "ref": "c30539bc-b885-4bfc-99ea-82dc2045a6a3",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "25f35c56-b978-4422-bdb8-8c076f764181"
        },
        "item": {
          "id": "667c8919-ae8f-47ee-a684-59b8c28bdb14",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2a19e331-641b-41f8-a890-779e7a8a79da",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2465bf-5e43-4c05-844b-a0c7d6f0544b",
        "cursor": {
          "ref": "8cce3ae5-27d1-4aba-806d-61aa03668e58",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f4ee3b26-5e96-48cc-887a-625242a21cce"
        },
        "item": {
          "id": "0e2465bf-5e43-4c05-844b-a0c7d6f0544b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3f6b6907-aad5-45f4-a81d-a9e3d5bfcbe8",
          "status": "OK",
          "code": 200,
          "responseTime": 1886,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a44b8fd-60b4-4a40-92aa-e3457425658c",
        "cursor": {
          "ref": "48391c41-3953-4497-acfb-a4e16dfc806b",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "67b4286d-c584-4ed8-a93d-c6e7ce65b9ef"
        },
        "item": {
          "id": "2a44b8fd-60b4-4a40-92aa-e3457425658c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0c85d0c7-7967-4711-a428-78f2e06bbf8c",
          "status": "OK",
          "code": 200,
          "responseTime": 3363,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ff2322-19be-496f-a377-31e0bc847f65",
        "cursor": {
          "ref": "fc72df80-0be6-4891-9828-763125ccadd4",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7b4f741d-98be-4e29-846f-f0524cd0b618"
        },
        "item": {
          "id": "05ff2322-19be-496f-a377-31e0bc847f65",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c293726-fb8b-4984-9ad6-a9fc4857d48b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "05ff2322-19be-496f-a377-31e0bc847f65",
        "cursor": {
          "ref": "fc72df80-0be6-4891-9828-763125ccadd4",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7b4f741d-98be-4e29-846f-f0524cd0b618"
        },
        "item": {
          "id": "05ff2322-19be-496f-a377-31e0bc847f65",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5c293726-fb8b-4984-9ad6-a9fc4857d48b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "f480bf35-b5ad-4386-b004-858b2312a92c",
        "cursor": {
          "ref": "d40ed658-a713-4f07-ab09-632b807b9e18",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a8f58b05-43ff-438c-9416-549cc91dd6ac"
        },
        "item": {
          "id": "f480bf35-b5ad-4386-b004-858b2312a92c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9403b7f5-f707-4140-8b3d-55d19e68022c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "c3ba24b9-2ba5-4bc2-add1-7c9a4587f292",
        "cursor": {
          "ref": "c805ae33-0d65-45e5-9371-352c9cd66f40",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "31863bee-5108-4e4c-a210-10fb6f96ad29"
        },
        "item": {
          "id": "c3ba24b9-2ba5-4bc2-add1-7c9a4587f292",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d8141f06-d829-4db9-af62-39b150ae72ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}